// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityTag(db *gorm.DB, opts ...gen.DOOption) activityTag {
	_activityTag := activityTag{}

	_activityTag.activityTagDo.UseDB(db, opts...)
	_activityTag.activityTagDo.UseModel(&model.ActivityTag{})

	tableName := _activityTag.activityTagDo.TableName()
	_activityTag.ALL = field.NewAsterisk(tableName)
	_activityTag.ID = field.NewInt64(tableName, "id")
	_activityTag.Title = field.NewString(tableName, "title")
	_activityTag.PicURL = field.NewString(tableName, "pic_url")
	_activityTag.Remark = field.NewString(tableName, "remark")
	_activityTag.Status = field.NewInt64(tableName, "status")
	_activityTag.CreatedAt = field.NewField(tableName, "created_at")
	_activityTag.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityTag.fillFieldMap()

	return _activityTag
}

// activityTag 活动标签
type activityTag struct {
	activityTagDo activityTagDo

	ALL       field.Asterisk
	ID        field.Int64
	Title     field.String // 标签名称
	PicURL    field.String // 图片地址
	Remark    field.String // 标签备注
	Status    field.Int64  // 0:未启用, 1:启用
	CreatedAt field.Field
	UpdatedAt field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityTag) Table(newTableName string) *activityTag {
	a.activityTagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityTag) As(alias string) *activityTag {
	a.activityTagDo.DO = *(a.activityTagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityTag) updateTableName(table string) *activityTag {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.PicURL = field.NewString(table, "pic_url")
	a.Remark = field.NewString(table, "remark")
	a.Status = field.NewInt64(table, "status")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityTag) WithContext(ctx context.Context) IActivityTagDo {
	return a.activityTagDo.WithContext(ctx)
}

func (a activityTag) TableName() string { return a.activityTagDo.TableName() }

func (a activityTag) Alias() string { return a.activityTagDo.Alias() }

func (a activityTag) Columns(cols ...field.Expr) gen.Columns { return a.activityTagDo.Columns(cols...) }

func (a *activityTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityTag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["pic_url"] = a.PicURL
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityTag) clone(db *gorm.DB) activityTag {
	a.activityTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityTag) replaceDB(db *gorm.DB) activityTag {
	a.activityTagDo.ReplaceDB(db)
	return a
}

type activityTagDo struct{ gen.DO }

type IActivityTagDo interface {
	gen.SubQuery
	Debug() IActivityTagDo
	WithContext(ctx context.Context) IActivityTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityTagDo
	WriteDB() IActivityTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityTagDo
	Not(conds ...gen.Condition) IActivityTagDo
	Or(conds ...gen.Condition) IActivityTagDo
	Select(conds ...field.Expr) IActivityTagDo
	Where(conds ...gen.Condition) IActivityTagDo
	Order(conds ...field.Expr) IActivityTagDo
	Distinct(cols ...field.Expr) IActivityTagDo
	Omit(cols ...field.Expr) IActivityTagDo
	Join(table schema.Tabler, on ...field.Expr) IActivityTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityTagDo
	Group(cols ...field.Expr) IActivityTagDo
	Having(conds ...gen.Condition) IActivityTagDo
	Limit(limit int) IActivityTagDo
	Offset(offset int) IActivityTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTagDo
	Unscoped() IActivityTagDo
	Create(values ...*model.ActivityTag) error
	CreateInBatches(values []*model.ActivityTag, batchSize int) error
	Save(values ...*model.ActivityTag) error
	First() (*model.ActivityTag, error)
	Take() (*model.ActivityTag, error)
	Last() (*model.ActivityTag, error)
	Find() ([]*model.ActivityTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTag, err error)
	FindInBatches(result *[]*model.ActivityTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityTagDo
	Assign(attrs ...field.AssignExpr) IActivityTagDo
	Joins(fields ...field.RelationField) IActivityTagDo
	Preload(fields ...field.RelationField) IActivityTagDo
	FirstOrInit() (*model.ActivityTag, error)
	FirstOrCreate() (*model.ActivityTag, error)
	FindByPage(offset int, limit int) (result []*model.ActivityTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityTagDo) Debug() IActivityTagDo {
	return a.withDO(a.DO.Debug())
}

func (a activityTagDo) WithContext(ctx context.Context) IActivityTagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityTagDo) ReadDB() IActivityTagDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityTagDo) WriteDB() IActivityTagDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityTagDo) Session(config *gorm.Session) IActivityTagDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityTagDo) Clauses(conds ...clause.Expression) IActivityTagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityTagDo) Returning(value interface{}, columns ...string) IActivityTagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityTagDo) Not(conds ...gen.Condition) IActivityTagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityTagDo) Or(conds ...gen.Condition) IActivityTagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityTagDo) Select(conds ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityTagDo) Where(conds ...gen.Condition) IActivityTagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityTagDo) Order(conds ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityTagDo) Distinct(cols ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityTagDo) Omit(cols ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityTagDo) Join(table schema.Tabler, on ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityTagDo) Group(cols ...field.Expr) IActivityTagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityTagDo) Having(conds ...gen.Condition) IActivityTagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityTagDo) Limit(limit int) IActivityTagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityTagDo) Offset(offset int) IActivityTagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityTagDo) Unscoped() IActivityTagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityTagDo) Create(values ...*model.ActivityTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityTagDo) CreateInBatches(values []*model.ActivityTag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityTagDo) Save(values ...*model.ActivityTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityTagDo) First() (*model.ActivityTag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTag), nil
	}
}

func (a activityTagDo) Take() (*model.ActivityTag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTag), nil
	}
}

func (a activityTagDo) Last() (*model.ActivityTag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTag), nil
	}
}

func (a activityTagDo) Find() ([]*model.ActivityTag, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityTag), err
}

func (a activityTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTag, err error) {
	buf := make([]*model.ActivityTag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityTagDo) FindInBatches(result *[]*model.ActivityTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityTagDo) Attrs(attrs ...field.AssignExpr) IActivityTagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityTagDo) Assign(attrs ...field.AssignExpr) IActivityTagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityTagDo) Joins(fields ...field.RelationField) IActivityTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityTagDo) Preload(fields ...field.RelationField) IActivityTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityTagDo) FirstOrInit() (*model.ActivityTag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTag), nil
	}
}

func (a activityTagDo) FirstOrCreate() (*model.ActivityTag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTag), nil
	}
}

func (a activityTagDo) FindByPage(offset int, limit int) (result []*model.ActivityTag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityTagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityTagDo) Delete(models ...*model.ActivityTag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityTagDo) withDO(do gen.Dao) *activityTagDo {
	a.DO = *do.(*gen.DO)
	return a
}
