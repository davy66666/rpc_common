// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGameMatchAwardRecord(db *gorm.DB, opts ...gen.DOOption) gameMatchAwardRecord {
	_gameMatchAwardRecord := gameMatchAwardRecord{}

	_gameMatchAwardRecord.gameMatchAwardRecordDo.UseDB(db, opts...)
	_gameMatchAwardRecord.gameMatchAwardRecordDo.UseModel(&model.GameMatchAwardRecord{})

	tableName := _gameMatchAwardRecord.gameMatchAwardRecordDo.TableName()
	_gameMatchAwardRecord.ALL = field.NewAsterisk(tableName)
	_gameMatchAwardRecord.ID = field.NewInt64(tableName, "id")
	_gameMatchAwardRecord.GameMatchID = field.NewInt64(tableName, "game_match_id")
	_gameMatchAwardRecord.Username = field.NewString(tableName, "username")
	_gameMatchAwardRecord.GameCode = field.NewString(tableName, "game_code")
	_gameMatchAwardRecord.MatchRank = field.NewInt64(tableName, "match_rank")
	_gameMatchAwardRecord.AwardAmount = field.NewFloat64(tableName, "award_amount")
	_gameMatchAwardRecord.Remark = field.NewString(tableName, "remark")
	_gameMatchAwardRecord.AdminID = field.NewInt64(tableName, "admin_id")
	_gameMatchAwardRecord.AdminName = field.NewString(tableName, "admin_name")
	_gameMatchAwardRecord.CreatedAt = field.NewField(tableName, "created_at")
	_gameMatchAwardRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_gameMatchAwardRecord.fillFieldMap()

	return _gameMatchAwardRecord
}

// gameMatchAwardRecord 争霸赛排名数据表
type gameMatchAwardRecord struct {
	gameMatchAwardRecordDo gameMatchAwardRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	GameMatchID field.Int64   // 争霸赛id
	Username    field.String  // 用户名
	GameCode    field.String  // 游戏类型
	MatchRank   field.Int64   // 比赛排名
	AwardAmount field.Float64 // 获奖金额
	Remark      field.String  // 备注
	AdminID     field.Int64   // 操作员ID
	AdminName   field.String  // 操作管理员
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (g gameMatchAwardRecord) Table(newTableName string) *gameMatchAwardRecord {
	g.gameMatchAwardRecordDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameMatchAwardRecord) As(alias string) *gameMatchAwardRecord {
	g.gameMatchAwardRecordDo.DO = *(g.gameMatchAwardRecordDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameMatchAwardRecord) updateTableName(table string) *gameMatchAwardRecord {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.GameMatchID = field.NewInt64(table, "game_match_id")
	g.Username = field.NewString(table, "username")
	g.GameCode = field.NewString(table, "game_code")
	g.MatchRank = field.NewInt64(table, "match_rank")
	g.AwardAmount = field.NewFloat64(table, "award_amount")
	g.Remark = field.NewString(table, "remark")
	g.AdminID = field.NewInt64(table, "admin_id")
	g.AdminName = field.NewString(table, "admin_name")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *gameMatchAwardRecord) WithContext(ctx context.Context) IGameMatchAwardRecordDo {
	return g.gameMatchAwardRecordDo.WithContext(ctx)
}

func (g gameMatchAwardRecord) TableName() string { return g.gameMatchAwardRecordDo.TableName() }

func (g gameMatchAwardRecord) Alias() string { return g.gameMatchAwardRecordDo.Alias() }

func (g gameMatchAwardRecord) Columns(cols ...field.Expr) gen.Columns {
	return g.gameMatchAwardRecordDo.Columns(cols...)
}

func (g *gameMatchAwardRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameMatchAwardRecord) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["game_match_id"] = g.GameMatchID
	g.fieldMap["username"] = g.Username
	g.fieldMap["game_code"] = g.GameCode
	g.fieldMap["match_rank"] = g.MatchRank
	g.fieldMap["award_amount"] = g.AwardAmount
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["admin_id"] = g.AdminID
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gameMatchAwardRecord) clone(db *gorm.DB) gameMatchAwardRecord {
	g.gameMatchAwardRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameMatchAwardRecord) replaceDB(db *gorm.DB) gameMatchAwardRecord {
	g.gameMatchAwardRecordDo.ReplaceDB(db)
	return g
}

type gameMatchAwardRecordDo struct{ gen.DO }

type IGameMatchAwardRecordDo interface {
	gen.SubQuery
	Debug() IGameMatchAwardRecordDo
	WithContext(ctx context.Context) IGameMatchAwardRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameMatchAwardRecordDo
	WriteDB() IGameMatchAwardRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameMatchAwardRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameMatchAwardRecordDo
	Not(conds ...gen.Condition) IGameMatchAwardRecordDo
	Or(conds ...gen.Condition) IGameMatchAwardRecordDo
	Select(conds ...field.Expr) IGameMatchAwardRecordDo
	Where(conds ...gen.Condition) IGameMatchAwardRecordDo
	Order(conds ...field.Expr) IGameMatchAwardRecordDo
	Distinct(cols ...field.Expr) IGameMatchAwardRecordDo
	Omit(cols ...field.Expr) IGameMatchAwardRecordDo
	Join(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo
	Group(cols ...field.Expr) IGameMatchAwardRecordDo
	Having(conds ...gen.Condition) IGameMatchAwardRecordDo
	Limit(limit int) IGameMatchAwardRecordDo
	Offset(offset int) IGameMatchAwardRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameMatchAwardRecordDo
	Unscoped() IGameMatchAwardRecordDo
	Create(values ...*model.GameMatchAwardRecord) error
	CreateInBatches(values []*model.GameMatchAwardRecord, batchSize int) error
	Save(values ...*model.GameMatchAwardRecord) error
	First() (*model.GameMatchAwardRecord, error)
	Take() (*model.GameMatchAwardRecord, error)
	Last() (*model.GameMatchAwardRecord, error)
	Find() ([]*model.GameMatchAwardRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameMatchAwardRecord, err error)
	FindInBatches(result *[]*model.GameMatchAwardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameMatchAwardRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameMatchAwardRecordDo
	Assign(attrs ...field.AssignExpr) IGameMatchAwardRecordDo
	Joins(fields ...field.RelationField) IGameMatchAwardRecordDo
	Preload(fields ...field.RelationField) IGameMatchAwardRecordDo
	FirstOrInit() (*model.GameMatchAwardRecord, error)
	FirstOrCreate() (*model.GameMatchAwardRecord, error)
	FindByPage(offset int, limit int) (result []*model.GameMatchAwardRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameMatchAwardRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameMatchAwardRecordDo) Debug() IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Debug())
}

func (g gameMatchAwardRecordDo) WithContext(ctx context.Context) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameMatchAwardRecordDo) ReadDB() IGameMatchAwardRecordDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameMatchAwardRecordDo) WriteDB() IGameMatchAwardRecordDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameMatchAwardRecordDo) Session(config *gorm.Session) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameMatchAwardRecordDo) Clauses(conds ...clause.Expression) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameMatchAwardRecordDo) Returning(value interface{}, columns ...string) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameMatchAwardRecordDo) Not(conds ...gen.Condition) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameMatchAwardRecordDo) Or(conds ...gen.Condition) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameMatchAwardRecordDo) Select(conds ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameMatchAwardRecordDo) Where(conds ...gen.Condition) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameMatchAwardRecordDo) Order(conds ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameMatchAwardRecordDo) Distinct(cols ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameMatchAwardRecordDo) Omit(cols ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameMatchAwardRecordDo) Join(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameMatchAwardRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameMatchAwardRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameMatchAwardRecordDo) Group(cols ...field.Expr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameMatchAwardRecordDo) Having(conds ...gen.Condition) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameMatchAwardRecordDo) Limit(limit int) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameMatchAwardRecordDo) Offset(offset int) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameMatchAwardRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameMatchAwardRecordDo) Unscoped() IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameMatchAwardRecordDo) Create(values ...*model.GameMatchAwardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameMatchAwardRecordDo) CreateInBatches(values []*model.GameMatchAwardRecord, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameMatchAwardRecordDo) Save(values ...*model.GameMatchAwardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameMatchAwardRecordDo) First() (*model.GameMatchAwardRecord, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatchAwardRecord), nil
	}
}

func (g gameMatchAwardRecordDo) Take() (*model.GameMatchAwardRecord, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatchAwardRecord), nil
	}
}

func (g gameMatchAwardRecordDo) Last() (*model.GameMatchAwardRecord, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatchAwardRecord), nil
	}
}

func (g gameMatchAwardRecordDo) Find() ([]*model.GameMatchAwardRecord, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameMatchAwardRecord), err
}

func (g gameMatchAwardRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameMatchAwardRecord, err error) {
	buf := make([]*model.GameMatchAwardRecord, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameMatchAwardRecordDo) FindInBatches(result *[]*model.GameMatchAwardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameMatchAwardRecordDo) Attrs(attrs ...field.AssignExpr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameMatchAwardRecordDo) Assign(attrs ...field.AssignExpr) IGameMatchAwardRecordDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameMatchAwardRecordDo) Joins(fields ...field.RelationField) IGameMatchAwardRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameMatchAwardRecordDo) Preload(fields ...field.RelationField) IGameMatchAwardRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameMatchAwardRecordDo) FirstOrInit() (*model.GameMatchAwardRecord, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatchAwardRecord), nil
	}
}

func (g gameMatchAwardRecordDo) FirstOrCreate() (*model.GameMatchAwardRecord, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatchAwardRecord), nil
	}
}

func (g gameMatchAwardRecordDo) FindByPage(offset int, limit int) (result []*model.GameMatchAwardRecord, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameMatchAwardRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameMatchAwardRecordDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameMatchAwardRecordDo) Delete(models ...*model.GameMatchAwardRecord) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameMatchAwardRecordDo) withDO(do gen.Dao) *gameMatchAwardRecordDo {
	g.DO = *do.(*gen.DO)
	return g
}
