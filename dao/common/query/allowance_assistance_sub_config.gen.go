// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAllowanceAssistanceSubConfig(db *gorm.DB, opts ...gen.DOOption) allowanceAssistanceSubConfig {
	_allowanceAssistanceSubConfig := allowanceAssistanceSubConfig{}

	_allowanceAssistanceSubConfig.allowanceAssistanceSubConfigDo.UseDB(db, opts...)
	_allowanceAssistanceSubConfig.allowanceAssistanceSubConfigDo.UseModel(&model.AllowanceAssistanceSubConfig{})

	tableName := _allowanceAssistanceSubConfig.allowanceAssistanceSubConfigDo.TableName()
	_allowanceAssistanceSubConfig.ALL = field.NewAsterisk(tableName)
	_allowanceAssistanceSubConfig.ID = field.NewInt64(tableName, "id")
	_allowanceAssistanceSubConfig.Type = field.NewInt64(tableName, "type")
	_allowanceAssistanceSubConfig.GiftAssistanceNum = field.NewInt64(tableName, "gift_assistance_num")
	_allowanceAssistanceSubConfig.TemplateType = field.NewInt64(tableName, "template_type")
	_allowanceAssistanceSubConfig.PicTemplateURL = field.NewString(tableName, "pic_template_url")
	_allowanceAssistanceSubConfig.VideoLinkCopyTutorialPic = field.NewString(tableName, "video_link_copy_tutorial_pic")
	_allowanceAssistanceSubConfig.VideoTemplateURL = field.NewString(tableName, "video_template_url")
	_allowanceAssistanceSubConfig.TemplateContent = field.NewString(tableName, "template_content")
	_allowanceAssistanceSubConfig.AuditTips = field.NewString(tableName, "audit_tips")
	_allowanceAssistanceSubConfig.LinkCopyingTutorial = field.NewString(tableName, "link_copying_tutorial")
	_allowanceAssistanceSubConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_allowanceAssistanceSubConfig.fillFieldMap()

	return _allowanceAssistanceSubConfig
}

// allowanceAssistanceSubConfig 助力津贴下属配置表
type allowanceAssistanceSubConfig struct {
	allowanceAssistanceSubConfigDo allowanceAssistanceSubConfigDo

	ALL                      field.Asterisk
	ID                       field.Int64  // 自增id
	Type                     field.Int64  // 1:抖音
	GiftAssistanceNum        field.Int64  // 赠送助力数量
	TemplateType             field.Int64  // 1:图片模板, 2:视频模板
	PicTemplateURL           field.String // 图片模版地址
	VideoLinkCopyTutorialPic field.String // 视频教程连接图片
	VideoTemplateURL         field.String // 视频模版地址
	TemplateContent          field.String // 模板文案
	AuditTips                field.String // 视频过审小贴士
	LinkCopyingTutorial      field.String // 视频链接复制教程
	UpdatedAt                field.Field

	fieldMap map[string]field.Expr
}

func (a allowanceAssistanceSubConfig) Table(newTableName string) *allowanceAssistanceSubConfig {
	a.allowanceAssistanceSubConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allowanceAssistanceSubConfig) As(alias string) *allowanceAssistanceSubConfig {
	a.allowanceAssistanceSubConfigDo.DO = *(a.allowanceAssistanceSubConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allowanceAssistanceSubConfig) updateTableName(table string) *allowanceAssistanceSubConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewInt64(table, "type")
	a.GiftAssistanceNum = field.NewInt64(table, "gift_assistance_num")
	a.TemplateType = field.NewInt64(table, "template_type")
	a.PicTemplateURL = field.NewString(table, "pic_template_url")
	a.VideoLinkCopyTutorialPic = field.NewString(table, "video_link_copy_tutorial_pic")
	a.VideoTemplateURL = field.NewString(table, "video_template_url")
	a.TemplateContent = field.NewString(table, "template_content")
	a.AuditTips = field.NewString(table, "audit_tips")
	a.LinkCopyingTutorial = field.NewString(table, "link_copying_tutorial")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *allowanceAssistanceSubConfig) WithContext(ctx context.Context) IAllowanceAssistanceSubConfigDo {
	return a.allowanceAssistanceSubConfigDo.WithContext(ctx)
}

func (a allowanceAssistanceSubConfig) TableName() string {
	return a.allowanceAssistanceSubConfigDo.TableName()
}

func (a allowanceAssistanceSubConfig) Alias() string { return a.allowanceAssistanceSubConfigDo.Alias() }

func (a allowanceAssistanceSubConfig) Columns(cols ...field.Expr) gen.Columns {
	return a.allowanceAssistanceSubConfigDo.Columns(cols...)
}

func (a *allowanceAssistanceSubConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allowanceAssistanceSubConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["gift_assistance_num"] = a.GiftAssistanceNum
	a.fieldMap["template_type"] = a.TemplateType
	a.fieldMap["pic_template_url"] = a.PicTemplateURL
	a.fieldMap["video_link_copy_tutorial_pic"] = a.VideoLinkCopyTutorialPic
	a.fieldMap["video_template_url"] = a.VideoTemplateURL
	a.fieldMap["template_content"] = a.TemplateContent
	a.fieldMap["audit_tips"] = a.AuditTips
	a.fieldMap["link_copying_tutorial"] = a.LinkCopyingTutorial
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a allowanceAssistanceSubConfig) clone(db *gorm.DB) allowanceAssistanceSubConfig {
	a.allowanceAssistanceSubConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allowanceAssistanceSubConfig) replaceDB(db *gorm.DB) allowanceAssistanceSubConfig {
	a.allowanceAssistanceSubConfigDo.ReplaceDB(db)
	return a
}

type allowanceAssistanceSubConfigDo struct{ gen.DO }

type IAllowanceAssistanceSubConfigDo interface {
	gen.SubQuery
	Debug() IAllowanceAssistanceSubConfigDo
	WithContext(ctx context.Context) IAllowanceAssistanceSubConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllowanceAssistanceSubConfigDo
	WriteDB() IAllowanceAssistanceSubConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllowanceAssistanceSubConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllowanceAssistanceSubConfigDo
	Not(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo
	Or(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo
	Select(conds ...field.Expr) IAllowanceAssistanceSubConfigDo
	Where(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo
	Order(conds ...field.Expr) IAllowanceAssistanceSubConfigDo
	Distinct(cols ...field.Expr) IAllowanceAssistanceSubConfigDo
	Omit(cols ...field.Expr) IAllowanceAssistanceSubConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo
	Group(cols ...field.Expr) IAllowanceAssistanceSubConfigDo
	Having(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo
	Limit(limit int) IAllowanceAssistanceSubConfigDo
	Offset(offset int) IAllowanceAssistanceSubConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceSubConfigDo
	Unscoped() IAllowanceAssistanceSubConfigDo
	Create(values ...*model.AllowanceAssistanceSubConfig) error
	CreateInBatches(values []*model.AllowanceAssistanceSubConfig, batchSize int) error
	Save(values ...*model.AllowanceAssistanceSubConfig) error
	First() (*model.AllowanceAssistanceSubConfig, error)
	Take() (*model.AllowanceAssistanceSubConfig, error)
	Last() (*model.AllowanceAssistanceSubConfig, error)
	Find() ([]*model.AllowanceAssistanceSubConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceSubConfig, err error)
	FindInBatches(result *[]*model.AllowanceAssistanceSubConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllowanceAssistanceSubConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceSubConfigDo
	Assign(attrs ...field.AssignExpr) IAllowanceAssistanceSubConfigDo
	Joins(fields ...field.RelationField) IAllowanceAssistanceSubConfigDo
	Preload(fields ...field.RelationField) IAllowanceAssistanceSubConfigDo
	FirstOrInit() (*model.AllowanceAssistanceSubConfig, error)
	FirstOrCreate() (*model.AllowanceAssistanceSubConfig, error)
	FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceSubConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllowanceAssistanceSubConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allowanceAssistanceSubConfigDo) Debug() IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a allowanceAssistanceSubConfigDo) WithContext(ctx context.Context) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allowanceAssistanceSubConfigDo) ReadDB() IAllowanceAssistanceSubConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a allowanceAssistanceSubConfigDo) WriteDB() IAllowanceAssistanceSubConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a allowanceAssistanceSubConfigDo) Session(config *gorm.Session) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a allowanceAssistanceSubConfigDo) Clauses(conds ...clause.Expression) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allowanceAssistanceSubConfigDo) Returning(value interface{}, columns ...string) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allowanceAssistanceSubConfigDo) Not(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allowanceAssistanceSubConfigDo) Or(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allowanceAssistanceSubConfigDo) Select(conds ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allowanceAssistanceSubConfigDo) Where(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allowanceAssistanceSubConfigDo) Order(conds ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allowanceAssistanceSubConfigDo) Distinct(cols ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allowanceAssistanceSubConfigDo) Omit(cols ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allowanceAssistanceSubConfigDo) Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allowanceAssistanceSubConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allowanceAssistanceSubConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allowanceAssistanceSubConfigDo) Group(cols ...field.Expr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allowanceAssistanceSubConfigDo) Having(conds ...gen.Condition) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allowanceAssistanceSubConfigDo) Limit(limit int) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allowanceAssistanceSubConfigDo) Offset(offset int) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allowanceAssistanceSubConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allowanceAssistanceSubConfigDo) Unscoped() IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allowanceAssistanceSubConfigDo) Create(values ...*model.AllowanceAssistanceSubConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allowanceAssistanceSubConfigDo) CreateInBatches(values []*model.AllowanceAssistanceSubConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allowanceAssistanceSubConfigDo) Save(values ...*model.AllowanceAssistanceSubConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allowanceAssistanceSubConfigDo) First() (*model.AllowanceAssistanceSubConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceSubConfig), nil
	}
}

func (a allowanceAssistanceSubConfigDo) Take() (*model.AllowanceAssistanceSubConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceSubConfig), nil
	}
}

func (a allowanceAssistanceSubConfigDo) Last() (*model.AllowanceAssistanceSubConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceSubConfig), nil
	}
}

func (a allowanceAssistanceSubConfigDo) Find() ([]*model.AllowanceAssistanceSubConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllowanceAssistanceSubConfig), err
}

func (a allowanceAssistanceSubConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceSubConfig, err error) {
	buf := make([]*model.AllowanceAssistanceSubConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allowanceAssistanceSubConfigDo) FindInBatches(result *[]*model.AllowanceAssistanceSubConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allowanceAssistanceSubConfigDo) Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allowanceAssistanceSubConfigDo) Assign(attrs ...field.AssignExpr) IAllowanceAssistanceSubConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allowanceAssistanceSubConfigDo) Joins(fields ...field.RelationField) IAllowanceAssistanceSubConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allowanceAssistanceSubConfigDo) Preload(fields ...field.RelationField) IAllowanceAssistanceSubConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allowanceAssistanceSubConfigDo) FirstOrInit() (*model.AllowanceAssistanceSubConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceSubConfig), nil
	}
}

func (a allowanceAssistanceSubConfigDo) FirstOrCreate() (*model.AllowanceAssistanceSubConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceSubConfig), nil
	}
}

func (a allowanceAssistanceSubConfigDo) FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceSubConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allowanceAssistanceSubConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allowanceAssistanceSubConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allowanceAssistanceSubConfigDo) Delete(models ...*model.AllowanceAssistanceSubConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allowanceAssistanceSubConfigDo) withDO(do gen.Dao) *allowanceAssistanceSubConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
