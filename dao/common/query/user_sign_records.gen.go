// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserSignRecord(db *gorm.DB, opts ...gen.DOOption) userSignRecord {
	_userSignRecord := userSignRecord{}

	_userSignRecord.userSignRecordDo.UseDB(db, opts...)
	_userSignRecord.userSignRecordDo.UseModel(&model.UserSignRecord{})

	tableName := _userSignRecord.userSignRecordDo.TableName()
	_userSignRecord.ALL = field.NewAsterisk(tableName)
	_userSignRecord.ID = field.NewInt64(tableName, "id")
	_userSignRecord.ActivityCid = field.NewInt64(tableName, "activity_cid")
	_userSignRecord.UID = field.NewInt64(tableName, "uid")
	_userSignRecord.DateAt = field.NewString(tableName, "date_at")
	_userSignRecord.SeriesID = field.NewInt64(tableName, "series_id")
	_userSignRecord.Type = field.NewInt64(tableName, "type")
	_userSignRecord.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_userSignRecord.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userSignRecord.Score = field.NewFloat64(tableName, "score")
	_userSignRecord.Plat = field.NewInt64(tableName, "plat")
	_userSignRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userSignRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userSignRecord.fillFieldMap()

	return _userSignRecord
}

// userSignRecord 用户签到领取奖金记录
type userSignRecord struct {
	userSignRecordDo userSignRecordDo

	ALL            field.Asterisk
	ID             field.Int64
	ActivityCid    field.Int64   // 签到活动配置id
	UID            field.Int64   // 用户ID
	DateAt         field.String  // 签到日期
	SeriesID       field.Int64   // 签到系列分类id
	Type           field.Int64   // 类型, 1:正常签到;2:补签,3:满签奖励
	DepositAmount  field.Float64 // 存款金额
	ValidBetAmount field.Float64 // 有效投注量
	Score          field.Float64 // 签到积分
	Plat           field.Int64   // 平台
	CreatedAt      field.Field
	UpdatedAt      field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (u userSignRecord) Table(newTableName string) *userSignRecord {
	u.userSignRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSignRecord) As(alias string) *userSignRecord {
	u.userSignRecordDo.DO = *(u.userSignRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSignRecord) updateTableName(table string) *userSignRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ActivityCid = field.NewInt64(table, "activity_cid")
	u.UID = field.NewInt64(table, "uid")
	u.DateAt = field.NewString(table, "date_at")
	u.SeriesID = field.NewInt64(table, "series_id")
	u.Type = field.NewInt64(table, "type")
	u.DepositAmount = field.NewFloat64(table, "deposit_amount")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.Score = field.NewFloat64(table, "score")
	u.Plat = field.NewInt64(table, "plat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userSignRecord) WithContext(ctx context.Context) IUserSignRecordDo {
	return u.userSignRecordDo.WithContext(ctx)
}

func (u userSignRecord) TableName() string { return u.userSignRecordDo.TableName() }

func (u userSignRecord) Alias() string { return u.userSignRecordDo.Alias() }

func (u userSignRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userSignRecordDo.Columns(cols...)
}

func (u *userSignRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSignRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["activity_cid"] = u.ActivityCid
	u.fieldMap["uid"] = u.UID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["series_id"] = u.SeriesID
	u.fieldMap["type"] = u.Type
	u.fieldMap["deposit_amount"] = u.DepositAmount
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["score"] = u.Score
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userSignRecord) clone(db *gorm.DB) userSignRecord {
	u.userSignRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSignRecord) replaceDB(db *gorm.DB) userSignRecord {
	u.userSignRecordDo.ReplaceDB(db)
	return u
}

type userSignRecordDo struct{ gen.DO }

type IUserSignRecordDo interface {
	gen.SubQuery
	Debug() IUserSignRecordDo
	WithContext(ctx context.Context) IUserSignRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSignRecordDo
	WriteDB() IUserSignRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSignRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSignRecordDo
	Not(conds ...gen.Condition) IUserSignRecordDo
	Or(conds ...gen.Condition) IUserSignRecordDo
	Select(conds ...field.Expr) IUserSignRecordDo
	Where(conds ...gen.Condition) IUserSignRecordDo
	Order(conds ...field.Expr) IUserSignRecordDo
	Distinct(cols ...field.Expr) IUserSignRecordDo
	Omit(cols ...field.Expr) IUserSignRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserSignRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSignRecordDo
	Group(cols ...field.Expr) IUserSignRecordDo
	Having(conds ...gen.Condition) IUserSignRecordDo
	Limit(limit int) IUserSignRecordDo
	Offset(offset int) IUserSignRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignRecordDo
	Unscoped() IUserSignRecordDo
	Create(values ...*model.UserSignRecord) error
	CreateInBatches(values []*model.UserSignRecord, batchSize int) error
	Save(values ...*model.UserSignRecord) error
	First() (*model.UserSignRecord, error)
	Take() (*model.UserSignRecord, error)
	Last() (*model.UserSignRecord, error)
	Find() ([]*model.UserSignRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSignRecord, err error)
	FindInBatches(result *[]*model.UserSignRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSignRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSignRecordDo
	Assign(attrs ...field.AssignExpr) IUserSignRecordDo
	Joins(fields ...field.RelationField) IUserSignRecordDo
	Preload(fields ...field.RelationField) IUserSignRecordDo
	FirstOrInit() (*model.UserSignRecord, error)
	FirstOrCreate() (*model.UserSignRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserSignRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSignRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSignRecordDo) Debug() IUserSignRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userSignRecordDo) WithContext(ctx context.Context) IUserSignRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSignRecordDo) ReadDB() IUserSignRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSignRecordDo) WriteDB() IUserSignRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSignRecordDo) Session(config *gorm.Session) IUserSignRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSignRecordDo) Clauses(conds ...clause.Expression) IUserSignRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSignRecordDo) Returning(value interface{}, columns ...string) IUserSignRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSignRecordDo) Not(conds ...gen.Condition) IUserSignRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSignRecordDo) Or(conds ...gen.Condition) IUserSignRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSignRecordDo) Select(conds ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSignRecordDo) Where(conds ...gen.Condition) IUserSignRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSignRecordDo) Order(conds ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSignRecordDo) Distinct(cols ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSignRecordDo) Omit(cols ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSignRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSignRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSignRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSignRecordDo) Group(cols ...field.Expr) IUserSignRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSignRecordDo) Having(conds ...gen.Condition) IUserSignRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSignRecordDo) Limit(limit int) IUserSignRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSignRecordDo) Offset(offset int) IUserSignRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSignRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSignRecordDo) Unscoped() IUserSignRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSignRecordDo) Create(values ...*model.UserSignRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSignRecordDo) CreateInBatches(values []*model.UserSignRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSignRecordDo) Save(values ...*model.UserSignRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSignRecordDo) First() (*model.UserSignRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignRecord), nil
	}
}

func (u userSignRecordDo) Take() (*model.UserSignRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignRecord), nil
	}
}

func (u userSignRecordDo) Last() (*model.UserSignRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignRecord), nil
	}
}

func (u userSignRecordDo) Find() ([]*model.UserSignRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSignRecord), err
}

func (u userSignRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSignRecord, err error) {
	buf := make([]*model.UserSignRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSignRecordDo) FindInBatches(result *[]*model.UserSignRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSignRecordDo) Attrs(attrs ...field.AssignExpr) IUserSignRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSignRecordDo) Assign(attrs ...field.AssignExpr) IUserSignRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSignRecordDo) Joins(fields ...field.RelationField) IUserSignRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSignRecordDo) Preload(fields ...field.RelationField) IUserSignRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSignRecordDo) FirstOrInit() (*model.UserSignRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignRecord), nil
	}
}

func (u userSignRecordDo) FirstOrCreate() (*model.UserSignRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignRecord), nil
	}
}

func (u userSignRecordDo) FindByPage(offset int, limit int) (result []*model.UserSignRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSignRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSignRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSignRecordDo) Delete(models ...*model.UserSignRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSignRecordDo) withDO(do gen.Dao) *userSignRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
