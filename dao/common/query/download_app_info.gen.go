// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newDownloadAppInfo(db *gorm.DB, opts ...gen.DOOption) downloadAppInfo {
	_downloadAppInfo := downloadAppInfo{}

	_downloadAppInfo.downloadAppInfoDo.UseDB(db, opts...)
	_downloadAppInfo.downloadAppInfoDo.UseModel(&model.DownloadAppInfo{})

	tableName := _downloadAppInfo.downloadAppInfoDo.TableName()
	_downloadAppInfo.ALL = field.NewAsterisk(tableName)
	_downloadAppInfo.ID = field.NewInt64(tableName, "id")
	_downloadAppInfo.DsnDomain = field.NewString(tableName, "dsn_domain")
	_downloadAppInfo.URL = field.NewString(tableName, "url")
	_downloadAppInfo.AppPlat = field.NewInt64(tableName, "app_plat")
	_downloadAppInfo.Plat = field.NewInt64(tableName, "plat")
	_downloadAppInfo.IsForceUpdate = field.NewInt64(tableName, "is_force_update")
	_downloadAppInfo.Version = field.NewString(tableName, "version")
	_downloadAppInfo.Title = field.NewString(tableName, "title")
	_downloadAppInfo.Content = field.NewString(tableName, "content")
	_downloadAppInfo.DetailTitle = field.NewString(tableName, "detail_title")
	_downloadAppInfo.Detail = field.NewString(tableName, "detail")
	_downloadAppInfo.IsHTTPS = field.NewInt64(tableName, "is_https")
	_downloadAppInfo.Remark = field.NewString(tableName, "remark")
	_downloadAppInfo.OpenLink = field.NewString(tableName, "open_link")
	_downloadAppInfo.Status = field.NewInt64(tableName, "status")
	_downloadAppInfo.CreatedAt = field.NewField(tableName, "created_at")
	_downloadAppInfo.UpdatedAt = field.NewField(tableName, "updated_at")
	_downloadAppInfo.AdminID = field.NewInt64(tableName, "admin_id")
	_downloadAppInfo.AdminName = field.NewString(tableName, "admin_name")

	_downloadAppInfo.fillFieldMap()

	return _downloadAppInfo
}

type downloadAppInfo struct {
	downloadAppInfoDo downloadAppInfoDo

	ALL           field.Asterisk
	ID            field.Int64
	DsnDomain     field.String // 域名
	URL           field.String // 下载地址
	AppPlat       field.Int64  // 平台 1:综合 2:体育
	Plat          field.Int64  // 终端:2:android, 3:IOS  5-android-hpyerf,6ios-hpyerf
	IsForceUpdate field.Int64  // 是否强制更新 0:否 1:是
	Version       field.String // 版本号
	Title         field.String // 下载页面的标题
	Content       field.String // 版本更新内容
	DetailTitle   field.String
	Detail        field.String
	IsHTTPS       field.Int64  // 是否是https, 0:否;1:是;
	Remark        field.String // 备注
	OpenLink      field.String // 外部链接
	Status        field.Int64  // 状态:0:禁用，1:启用
	CreatedAt     field.Field
	UpdatedAt     field.Field
	AdminID       field.Int64
	AdminName     field.String

	fieldMap map[string]field.Expr
}

func (d downloadAppInfo) Table(newTableName string) *downloadAppInfo {
	d.downloadAppInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d downloadAppInfo) As(alias string) *downloadAppInfo {
	d.downloadAppInfoDo.DO = *(d.downloadAppInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *downloadAppInfo) updateTableName(table string) *downloadAppInfo {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.DsnDomain = field.NewString(table, "dsn_domain")
	d.URL = field.NewString(table, "url")
	d.AppPlat = field.NewInt64(table, "app_plat")
	d.Plat = field.NewInt64(table, "plat")
	d.IsForceUpdate = field.NewInt64(table, "is_force_update")
	d.Version = field.NewString(table, "version")
	d.Title = field.NewString(table, "title")
	d.Content = field.NewString(table, "content")
	d.DetailTitle = field.NewString(table, "detail_title")
	d.Detail = field.NewString(table, "detail")
	d.IsHTTPS = field.NewInt64(table, "is_https")
	d.Remark = field.NewString(table, "remark")
	d.OpenLink = field.NewString(table, "open_link")
	d.Status = field.NewInt64(table, "status")
	d.CreatedAt = field.NewField(table, "created_at")
	d.UpdatedAt = field.NewField(table, "updated_at")
	d.AdminID = field.NewInt64(table, "admin_id")
	d.AdminName = field.NewString(table, "admin_name")

	d.fillFieldMap()

	return d
}

func (d *downloadAppInfo) WithContext(ctx context.Context) IDownloadAppInfoDo {
	return d.downloadAppInfoDo.WithContext(ctx)
}

func (d downloadAppInfo) TableName() string { return d.downloadAppInfoDo.TableName() }

func (d downloadAppInfo) Alias() string { return d.downloadAppInfoDo.Alias() }

func (d downloadAppInfo) Columns(cols ...field.Expr) gen.Columns {
	return d.downloadAppInfoDo.Columns(cols...)
}

func (d *downloadAppInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *downloadAppInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 19)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dsn_domain"] = d.DsnDomain
	d.fieldMap["url"] = d.URL
	d.fieldMap["app_plat"] = d.AppPlat
	d.fieldMap["plat"] = d.Plat
	d.fieldMap["is_force_update"] = d.IsForceUpdate
	d.fieldMap["version"] = d.Version
	d.fieldMap["title"] = d.Title
	d.fieldMap["content"] = d.Content
	d.fieldMap["detail_title"] = d.DetailTitle
	d.fieldMap["detail"] = d.Detail
	d.fieldMap["is_https"] = d.IsHTTPS
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["open_link"] = d.OpenLink
	d.fieldMap["status"] = d.Status
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["admin_id"] = d.AdminID
	d.fieldMap["admin_name"] = d.AdminName
}

func (d downloadAppInfo) clone(db *gorm.DB) downloadAppInfo {
	d.downloadAppInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d downloadAppInfo) replaceDB(db *gorm.DB) downloadAppInfo {
	d.downloadAppInfoDo.ReplaceDB(db)
	return d
}

type downloadAppInfoDo struct{ gen.DO }

type IDownloadAppInfoDo interface {
	gen.SubQuery
	Debug() IDownloadAppInfoDo
	WithContext(ctx context.Context) IDownloadAppInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDownloadAppInfoDo
	WriteDB() IDownloadAppInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDownloadAppInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDownloadAppInfoDo
	Not(conds ...gen.Condition) IDownloadAppInfoDo
	Or(conds ...gen.Condition) IDownloadAppInfoDo
	Select(conds ...field.Expr) IDownloadAppInfoDo
	Where(conds ...gen.Condition) IDownloadAppInfoDo
	Order(conds ...field.Expr) IDownloadAppInfoDo
	Distinct(cols ...field.Expr) IDownloadAppInfoDo
	Omit(cols ...field.Expr) IDownloadAppInfoDo
	Join(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo
	Group(cols ...field.Expr) IDownloadAppInfoDo
	Having(conds ...gen.Condition) IDownloadAppInfoDo
	Limit(limit int) IDownloadAppInfoDo
	Offset(offset int) IDownloadAppInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDownloadAppInfoDo
	Unscoped() IDownloadAppInfoDo
	Create(values ...*model.DownloadAppInfo) error
	CreateInBatches(values []*model.DownloadAppInfo, batchSize int) error
	Save(values ...*model.DownloadAppInfo) error
	First() (*model.DownloadAppInfo, error)
	Take() (*model.DownloadAppInfo, error)
	Last() (*model.DownloadAppInfo, error)
	Find() ([]*model.DownloadAppInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DownloadAppInfo, err error)
	FindInBatches(result *[]*model.DownloadAppInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DownloadAppInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDownloadAppInfoDo
	Assign(attrs ...field.AssignExpr) IDownloadAppInfoDo
	Joins(fields ...field.RelationField) IDownloadAppInfoDo
	Preload(fields ...field.RelationField) IDownloadAppInfoDo
	FirstOrInit() (*model.DownloadAppInfo, error)
	FirstOrCreate() (*model.DownloadAppInfo, error)
	FindByPage(offset int, limit int) (result []*model.DownloadAppInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDownloadAppInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d downloadAppInfoDo) Debug() IDownloadAppInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d downloadAppInfoDo) WithContext(ctx context.Context) IDownloadAppInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d downloadAppInfoDo) ReadDB() IDownloadAppInfoDo {
	return d.Clauses(dbresolver.Read)
}

func (d downloadAppInfoDo) WriteDB() IDownloadAppInfoDo {
	return d.Clauses(dbresolver.Write)
}

func (d downloadAppInfoDo) Session(config *gorm.Session) IDownloadAppInfoDo {
	return d.withDO(d.DO.Session(config))
}

func (d downloadAppInfoDo) Clauses(conds ...clause.Expression) IDownloadAppInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d downloadAppInfoDo) Returning(value interface{}, columns ...string) IDownloadAppInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d downloadAppInfoDo) Not(conds ...gen.Condition) IDownloadAppInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d downloadAppInfoDo) Or(conds ...gen.Condition) IDownloadAppInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d downloadAppInfoDo) Select(conds ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d downloadAppInfoDo) Where(conds ...gen.Condition) IDownloadAppInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d downloadAppInfoDo) Order(conds ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d downloadAppInfoDo) Distinct(cols ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d downloadAppInfoDo) Omit(cols ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d downloadAppInfoDo) Join(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d downloadAppInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d downloadAppInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d downloadAppInfoDo) Group(cols ...field.Expr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d downloadAppInfoDo) Having(conds ...gen.Condition) IDownloadAppInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d downloadAppInfoDo) Limit(limit int) IDownloadAppInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d downloadAppInfoDo) Offset(offset int) IDownloadAppInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d downloadAppInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDownloadAppInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d downloadAppInfoDo) Unscoped() IDownloadAppInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d downloadAppInfoDo) Create(values ...*model.DownloadAppInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d downloadAppInfoDo) CreateInBatches(values []*model.DownloadAppInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d downloadAppInfoDo) Save(values ...*model.DownloadAppInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d downloadAppInfoDo) First() (*model.DownloadAppInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DownloadAppInfo), nil
	}
}

func (d downloadAppInfoDo) Take() (*model.DownloadAppInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DownloadAppInfo), nil
	}
}

func (d downloadAppInfoDo) Last() (*model.DownloadAppInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DownloadAppInfo), nil
	}
}

func (d downloadAppInfoDo) Find() ([]*model.DownloadAppInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DownloadAppInfo), err
}

func (d downloadAppInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DownloadAppInfo, err error) {
	buf := make([]*model.DownloadAppInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d downloadAppInfoDo) FindInBatches(result *[]*model.DownloadAppInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d downloadAppInfoDo) Attrs(attrs ...field.AssignExpr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d downloadAppInfoDo) Assign(attrs ...field.AssignExpr) IDownloadAppInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d downloadAppInfoDo) Joins(fields ...field.RelationField) IDownloadAppInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d downloadAppInfoDo) Preload(fields ...field.RelationField) IDownloadAppInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d downloadAppInfoDo) FirstOrInit() (*model.DownloadAppInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DownloadAppInfo), nil
	}
}

func (d downloadAppInfoDo) FirstOrCreate() (*model.DownloadAppInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DownloadAppInfo), nil
	}
}

func (d downloadAppInfoDo) FindByPage(offset int, limit int) (result []*model.DownloadAppInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d downloadAppInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d downloadAppInfoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d downloadAppInfoDo) Delete(models ...*model.DownloadAppInfo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *downloadAppInfoDo) withDO(do gen.Dao) *downloadAppInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
