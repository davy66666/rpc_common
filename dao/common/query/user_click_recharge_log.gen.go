// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserClickRechargeLog(db *gorm.DB, opts ...gen.DOOption) userClickRechargeLog {
	_userClickRechargeLog := userClickRechargeLog{}

	_userClickRechargeLog.userClickRechargeLogDo.UseDB(db, opts...)
	_userClickRechargeLog.userClickRechargeLogDo.UseModel(&model.UserClickRechargeLog{})

	tableName := _userClickRechargeLog.userClickRechargeLogDo.TableName()
	_userClickRechargeLog.ALL = field.NewAsterisk(tableName)
	_userClickRechargeLog.ID = field.NewInt64(tableName, "id")
	_userClickRechargeLog.UserID = field.NewInt64(tableName, "user_id")
	_userClickRechargeLog.Username = field.NewString(tableName, "username")
	_userClickRechargeLog.PayID = field.NewInt64(tableName, "pay_id")
	_userClickRechargeLog.Money = field.NewString(tableName, "money")
	_userClickRechargeLog.Result = field.NewInt64(tableName, "result")
	_userClickRechargeLog.CreatedAt = field.NewField(tableName, "created_at")
	_userClickRechargeLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userClickRechargeLog.fillFieldMap()

	return _userClickRechargeLog
}

// userClickRechargeLog 用户极速点击额度记录
type userClickRechargeLog struct {
	userClickRechargeLogDo userClickRechargeLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64  // userid
	Username  field.String // 用户账号
	PayID     field.Int64  // pay id
	Money     field.String // 充值金额
	Result    field.Int64  // 0 失败； 1成功
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userClickRechargeLog) Table(newTableName string) *userClickRechargeLog {
	u.userClickRechargeLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userClickRechargeLog) As(alias string) *userClickRechargeLog {
	u.userClickRechargeLogDo.DO = *(u.userClickRechargeLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userClickRechargeLog) updateTableName(table string) *userClickRechargeLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.PayID = field.NewInt64(table, "pay_id")
	u.Money = field.NewString(table, "money")
	u.Result = field.NewInt64(table, "result")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userClickRechargeLog) WithContext(ctx context.Context) IUserClickRechargeLogDo {
	return u.userClickRechargeLogDo.WithContext(ctx)
}

func (u userClickRechargeLog) TableName() string { return u.userClickRechargeLogDo.TableName() }

func (u userClickRechargeLog) Alias() string { return u.userClickRechargeLogDo.Alias() }

func (u userClickRechargeLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userClickRechargeLogDo.Columns(cols...)
}

func (u *userClickRechargeLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userClickRechargeLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["pay_id"] = u.PayID
	u.fieldMap["money"] = u.Money
	u.fieldMap["result"] = u.Result
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userClickRechargeLog) clone(db *gorm.DB) userClickRechargeLog {
	u.userClickRechargeLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userClickRechargeLog) replaceDB(db *gorm.DB) userClickRechargeLog {
	u.userClickRechargeLogDo.ReplaceDB(db)
	return u
}

type userClickRechargeLogDo struct{ gen.DO }

type IUserClickRechargeLogDo interface {
	gen.SubQuery
	Debug() IUserClickRechargeLogDo
	WithContext(ctx context.Context) IUserClickRechargeLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserClickRechargeLogDo
	WriteDB() IUserClickRechargeLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserClickRechargeLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserClickRechargeLogDo
	Not(conds ...gen.Condition) IUserClickRechargeLogDo
	Or(conds ...gen.Condition) IUserClickRechargeLogDo
	Select(conds ...field.Expr) IUserClickRechargeLogDo
	Where(conds ...gen.Condition) IUserClickRechargeLogDo
	Order(conds ...field.Expr) IUserClickRechargeLogDo
	Distinct(cols ...field.Expr) IUserClickRechargeLogDo
	Omit(cols ...field.Expr) IUserClickRechargeLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo
	Group(cols ...field.Expr) IUserClickRechargeLogDo
	Having(conds ...gen.Condition) IUserClickRechargeLogDo
	Limit(limit int) IUserClickRechargeLogDo
	Offset(offset int) IUserClickRechargeLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserClickRechargeLogDo
	Unscoped() IUserClickRechargeLogDo
	Create(values ...*model.UserClickRechargeLog) error
	CreateInBatches(values []*model.UserClickRechargeLog, batchSize int) error
	Save(values ...*model.UserClickRechargeLog) error
	First() (*model.UserClickRechargeLog, error)
	Take() (*model.UserClickRechargeLog, error)
	Last() (*model.UserClickRechargeLog, error)
	Find() ([]*model.UserClickRechargeLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserClickRechargeLog, err error)
	FindInBatches(result *[]*model.UserClickRechargeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserClickRechargeLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserClickRechargeLogDo
	Assign(attrs ...field.AssignExpr) IUserClickRechargeLogDo
	Joins(fields ...field.RelationField) IUserClickRechargeLogDo
	Preload(fields ...field.RelationField) IUserClickRechargeLogDo
	FirstOrInit() (*model.UserClickRechargeLog, error)
	FirstOrCreate() (*model.UserClickRechargeLog, error)
	FindByPage(offset int, limit int) (result []*model.UserClickRechargeLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserClickRechargeLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userClickRechargeLogDo) Debug() IUserClickRechargeLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userClickRechargeLogDo) WithContext(ctx context.Context) IUserClickRechargeLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userClickRechargeLogDo) ReadDB() IUserClickRechargeLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userClickRechargeLogDo) WriteDB() IUserClickRechargeLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userClickRechargeLogDo) Session(config *gorm.Session) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userClickRechargeLogDo) Clauses(conds ...clause.Expression) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userClickRechargeLogDo) Returning(value interface{}, columns ...string) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userClickRechargeLogDo) Not(conds ...gen.Condition) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userClickRechargeLogDo) Or(conds ...gen.Condition) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userClickRechargeLogDo) Select(conds ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userClickRechargeLogDo) Where(conds ...gen.Condition) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userClickRechargeLogDo) Order(conds ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userClickRechargeLogDo) Distinct(cols ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userClickRechargeLogDo) Omit(cols ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userClickRechargeLogDo) Join(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userClickRechargeLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userClickRechargeLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userClickRechargeLogDo) Group(cols ...field.Expr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userClickRechargeLogDo) Having(conds ...gen.Condition) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userClickRechargeLogDo) Limit(limit int) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userClickRechargeLogDo) Offset(offset int) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userClickRechargeLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userClickRechargeLogDo) Unscoped() IUserClickRechargeLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userClickRechargeLogDo) Create(values ...*model.UserClickRechargeLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userClickRechargeLogDo) CreateInBatches(values []*model.UserClickRechargeLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userClickRechargeLogDo) Save(values ...*model.UserClickRechargeLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userClickRechargeLogDo) First() (*model.UserClickRechargeLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserClickRechargeLog), nil
	}
}

func (u userClickRechargeLogDo) Take() (*model.UserClickRechargeLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserClickRechargeLog), nil
	}
}

func (u userClickRechargeLogDo) Last() (*model.UserClickRechargeLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserClickRechargeLog), nil
	}
}

func (u userClickRechargeLogDo) Find() ([]*model.UserClickRechargeLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserClickRechargeLog), err
}

func (u userClickRechargeLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserClickRechargeLog, err error) {
	buf := make([]*model.UserClickRechargeLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userClickRechargeLogDo) FindInBatches(result *[]*model.UserClickRechargeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userClickRechargeLogDo) Attrs(attrs ...field.AssignExpr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userClickRechargeLogDo) Assign(attrs ...field.AssignExpr) IUserClickRechargeLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userClickRechargeLogDo) Joins(fields ...field.RelationField) IUserClickRechargeLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userClickRechargeLogDo) Preload(fields ...field.RelationField) IUserClickRechargeLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userClickRechargeLogDo) FirstOrInit() (*model.UserClickRechargeLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserClickRechargeLog), nil
	}
}

func (u userClickRechargeLogDo) FirstOrCreate() (*model.UserClickRechargeLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserClickRechargeLog), nil
	}
}

func (u userClickRechargeLogDo) FindByPage(offset int, limit int) (result []*model.UserClickRechargeLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userClickRechargeLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userClickRechargeLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userClickRechargeLogDo) Delete(models ...*model.UserClickRechargeLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userClickRechargeLogDo) withDO(do gen.Dao) *userClickRechargeLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
