// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserLevelVip(db *gorm.DB, opts ...gen.DOOption) userLevelVip {
	_userLevelVip := userLevelVip{}

	_userLevelVip.userLevelVipDo.UseDB(db, opts...)
	_userLevelVip.userLevelVipDo.UseModel(&model.UserLevelVip{})

	tableName := _userLevelVip.userLevelVipDo.TableName()
	_userLevelVip.ALL = field.NewAsterisk(tableName)
	_userLevelVip.ID = field.NewInt64(tableName, "id")
	_userLevelVip.Title = field.NewString(tableName, "title")
	_userLevelVip.StartVip = field.NewInt64(tableName, "start_vip")
	_userLevelVip.EndVip = field.NewInt64(tableName, "end_vip")
	_userLevelVip.IconURL = field.NewString(tableName, "icon_url")
	_userLevelVip.IsOpen = field.NewInt64(tableName, "is_open")
	_userLevelVip.CreatedAt = field.NewField(tableName, "created_at")
	_userLevelVip.UpdatedAt = field.NewField(tableName, "updated_at")

	_userLevelVip.fillFieldMap()

	return _userLevelVip
}

// userLevelVip vip 阶段表
type userLevelVip struct {
	userLevelVipDo userLevelVipDo

	ALL       field.Asterisk
	ID        field.Int64
	Title     field.String // vip tab
	StartVip  field.Int64  // vip起始
	EndVip    field.Int64  // vip结束
	IconURL   field.String // 图标 卡片背景
	IsOpen    field.Int64  // 是否开启0:否;1:是
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userLevelVip) Table(newTableName string) *userLevelVip {
	u.userLevelVipDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLevelVip) As(alias string) *userLevelVip {
	u.userLevelVipDo.DO = *(u.userLevelVipDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLevelVip) updateTableName(table string) *userLevelVip {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Title = field.NewString(table, "title")
	u.StartVip = field.NewInt64(table, "start_vip")
	u.EndVip = field.NewInt64(table, "end_vip")
	u.IconURL = field.NewString(table, "icon_url")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userLevelVip) WithContext(ctx context.Context) IUserLevelVipDo {
	return u.userLevelVipDo.WithContext(ctx)
}

func (u userLevelVip) TableName() string { return u.userLevelVipDo.TableName() }

func (u userLevelVip) Alias() string { return u.userLevelVipDo.Alias() }

func (u userLevelVip) Columns(cols ...field.Expr) gen.Columns {
	return u.userLevelVipDo.Columns(cols...)
}

func (u *userLevelVip) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLevelVip) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["title"] = u.Title
	u.fieldMap["start_vip"] = u.StartVip
	u.fieldMap["end_vip"] = u.EndVip
	u.fieldMap["icon_url"] = u.IconURL
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userLevelVip) clone(db *gorm.DB) userLevelVip {
	u.userLevelVipDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLevelVip) replaceDB(db *gorm.DB) userLevelVip {
	u.userLevelVipDo.ReplaceDB(db)
	return u
}

type userLevelVipDo struct{ gen.DO }

type IUserLevelVipDo interface {
	gen.SubQuery
	Debug() IUserLevelVipDo
	WithContext(ctx context.Context) IUserLevelVipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLevelVipDo
	WriteDB() IUserLevelVipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLevelVipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLevelVipDo
	Not(conds ...gen.Condition) IUserLevelVipDo
	Or(conds ...gen.Condition) IUserLevelVipDo
	Select(conds ...field.Expr) IUserLevelVipDo
	Where(conds ...gen.Condition) IUserLevelVipDo
	Order(conds ...field.Expr) IUserLevelVipDo
	Distinct(cols ...field.Expr) IUserLevelVipDo
	Omit(cols ...field.Expr) IUserLevelVipDo
	Join(table schema.Tabler, on ...field.Expr) IUserLevelVipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipDo
	Group(cols ...field.Expr) IUserLevelVipDo
	Having(conds ...gen.Condition) IUserLevelVipDo
	Limit(limit int) IUserLevelVipDo
	Offset(offset int) IUserLevelVipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLevelVipDo
	Unscoped() IUserLevelVipDo
	Create(values ...*model.UserLevelVip) error
	CreateInBatches(values []*model.UserLevelVip, batchSize int) error
	Save(values ...*model.UserLevelVip) error
	First() (*model.UserLevelVip, error)
	Take() (*model.UserLevelVip, error)
	Last() (*model.UserLevelVip, error)
	Find() ([]*model.UserLevelVip, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLevelVip, err error)
	FindInBatches(result *[]*model.UserLevelVip, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLevelVip) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLevelVipDo
	Assign(attrs ...field.AssignExpr) IUserLevelVipDo
	Joins(fields ...field.RelationField) IUserLevelVipDo
	Preload(fields ...field.RelationField) IUserLevelVipDo
	FirstOrInit() (*model.UserLevelVip, error)
	FirstOrCreate() (*model.UserLevelVip, error)
	FindByPage(offset int, limit int) (result []*model.UserLevelVip, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLevelVipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLevelVipDo) Debug() IUserLevelVipDo {
	return u.withDO(u.DO.Debug())
}

func (u userLevelVipDo) WithContext(ctx context.Context) IUserLevelVipDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLevelVipDo) ReadDB() IUserLevelVipDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLevelVipDo) WriteDB() IUserLevelVipDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLevelVipDo) Session(config *gorm.Session) IUserLevelVipDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLevelVipDo) Clauses(conds ...clause.Expression) IUserLevelVipDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLevelVipDo) Returning(value interface{}, columns ...string) IUserLevelVipDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLevelVipDo) Not(conds ...gen.Condition) IUserLevelVipDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLevelVipDo) Or(conds ...gen.Condition) IUserLevelVipDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLevelVipDo) Select(conds ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLevelVipDo) Where(conds ...gen.Condition) IUserLevelVipDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLevelVipDo) Order(conds ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLevelVipDo) Distinct(cols ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLevelVipDo) Omit(cols ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLevelVipDo) Join(table schema.Tabler, on ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLevelVipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLevelVipDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLevelVipDo) Group(cols ...field.Expr) IUserLevelVipDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLevelVipDo) Having(conds ...gen.Condition) IUserLevelVipDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLevelVipDo) Limit(limit int) IUserLevelVipDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLevelVipDo) Offset(offset int) IUserLevelVipDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLevelVipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLevelVipDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLevelVipDo) Unscoped() IUserLevelVipDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLevelVipDo) Create(values ...*model.UserLevelVip) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLevelVipDo) CreateInBatches(values []*model.UserLevelVip, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLevelVipDo) Save(values ...*model.UserLevelVip) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLevelVipDo) First() (*model.UserLevelVip, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVip), nil
	}
}

func (u userLevelVipDo) Take() (*model.UserLevelVip, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVip), nil
	}
}

func (u userLevelVipDo) Last() (*model.UserLevelVip, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVip), nil
	}
}

func (u userLevelVipDo) Find() ([]*model.UserLevelVip, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLevelVip), err
}

func (u userLevelVipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLevelVip, err error) {
	buf := make([]*model.UserLevelVip, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLevelVipDo) FindInBatches(result *[]*model.UserLevelVip, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLevelVipDo) Attrs(attrs ...field.AssignExpr) IUserLevelVipDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLevelVipDo) Assign(attrs ...field.AssignExpr) IUserLevelVipDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLevelVipDo) Joins(fields ...field.RelationField) IUserLevelVipDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLevelVipDo) Preload(fields ...field.RelationField) IUserLevelVipDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLevelVipDo) FirstOrInit() (*model.UserLevelVip, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVip), nil
	}
}

func (u userLevelVipDo) FirstOrCreate() (*model.UserLevelVip, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVip), nil
	}
}

func (u userLevelVipDo) FindByPage(offset int, limit int) (result []*model.UserLevelVip, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLevelVipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLevelVipDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLevelVipDo) Delete(models ...*model.UserLevelVip) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLevelVipDo) withDO(do gen.Dao) *userLevelVipDo {
	u.DO = *do.(*gen.DO)
	return u
}
