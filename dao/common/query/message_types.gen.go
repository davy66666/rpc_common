// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMessageType(db *gorm.DB, opts ...gen.DOOption) messageType {
	_messageType := messageType{}

	_messageType.messageTypeDo.UseDB(db, opts...)
	_messageType.messageTypeDo.UseModel(&model.MessageType{})

	tableName := _messageType.messageTypeDo.TableName()
	_messageType.ALL = field.NewAsterisk(tableName)
	_messageType.ID = field.NewInt64(tableName, "id")
	_messageType.ParentID = field.NewInt64(tableName, "parent_id")
	_messageType.EnName = field.NewString(tableName, "en_name")
	_messageType.CnName = field.NewString(tableName, "cn_name")
	_messageType.IsOpen = field.NewInt64(tableName, "is_open")
	_messageType.Plat = field.NewInt64(tableName, "plat")
	_messageType.AppPlat = field.NewInt64(tableName, "app_plat")
	_messageType.IsBtn = field.NewInt64(tableName, "is_btn")
	_messageType.Sort = field.NewInt64(tableName, "sort")
	_messageType.Remark = field.NewString(tableName, "remark")
	_messageType.CreatedAt = field.NewField(tableName, "created_at")
	_messageType.UpdatedAt = field.NewField(tableName, "updated_at")

	_messageType.fillFieldMap()

	return _messageType
}

type messageType struct {
	messageTypeDo messageTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	ParentID  field.Int64  // 父分类id
	EnName    field.String // 类型名称 英文
	CnName    field.String // 类型名称 中文
	IsOpen    field.Int64  // 是否开启0:否;1:是
	Plat      field.Int64  // 1:手机端;2:pc
	AppPlat   field.Int64  // 1:综合app;2:体育app
	IsBtn     field.Int64  //  是否tap按钮 0:否 1:是
	Sort      field.Int64  // 排序
	Remark    field.String // 备注
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (m messageType) Table(newTableName string) *messageType {
	m.messageTypeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageType) As(alias string) *messageType {
	m.messageTypeDo.DO = *(m.messageTypeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageType) updateTableName(table string) *messageType {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ParentID = field.NewInt64(table, "parent_id")
	m.EnName = field.NewString(table, "en_name")
	m.CnName = field.NewString(table, "cn_name")
	m.IsOpen = field.NewInt64(table, "is_open")
	m.Plat = field.NewInt64(table, "plat")
	m.AppPlat = field.NewInt64(table, "app_plat")
	m.IsBtn = field.NewInt64(table, "is_btn")
	m.Sort = field.NewInt64(table, "sort")
	m.Remark = field.NewString(table, "remark")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *messageType) WithContext(ctx context.Context) IMessageTypeDo {
	return m.messageTypeDo.WithContext(ctx)
}

func (m messageType) TableName() string { return m.messageTypeDo.TableName() }

func (m messageType) Alias() string { return m.messageTypeDo.Alias() }

func (m messageType) Columns(cols ...field.Expr) gen.Columns { return m.messageTypeDo.Columns(cols...) }

func (m *messageType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageType) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["id"] = m.ID
	m.fieldMap["parent_id"] = m.ParentID
	m.fieldMap["en_name"] = m.EnName
	m.fieldMap["cn_name"] = m.CnName
	m.fieldMap["is_open"] = m.IsOpen
	m.fieldMap["plat"] = m.Plat
	m.fieldMap["app_plat"] = m.AppPlat
	m.fieldMap["is_btn"] = m.IsBtn
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m messageType) clone(db *gorm.DB) messageType {
	m.messageTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageType) replaceDB(db *gorm.DB) messageType {
	m.messageTypeDo.ReplaceDB(db)
	return m
}

type messageTypeDo struct{ gen.DO }

type IMessageTypeDo interface {
	gen.SubQuery
	Debug() IMessageTypeDo
	WithContext(ctx context.Context) IMessageTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageTypeDo
	WriteDB() IMessageTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageTypeDo
	Not(conds ...gen.Condition) IMessageTypeDo
	Or(conds ...gen.Condition) IMessageTypeDo
	Select(conds ...field.Expr) IMessageTypeDo
	Where(conds ...gen.Condition) IMessageTypeDo
	Order(conds ...field.Expr) IMessageTypeDo
	Distinct(cols ...field.Expr) IMessageTypeDo
	Omit(cols ...field.Expr) IMessageTypeDo
	Join(table schema.Tabler, on ...field.Expr) IMessageTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageTypeDo
	Group(cols ...field.Expr) IMessageTypeDo
	Having(conds ...gen.Condition) IMessageTypeDo
	Limit(limit int) IMessageTypeDo
	Offset(offset int) IMessageTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageTypeDo
	Unscoped() IMessageTypeDo
	Create(values ...*model.MessageType) error
	CreateInBatches(values []*model.MessageType, batchSize int) error
	Save(values ...*model.MessageType) error
	First() (*model.MessageType, error)
	Take() (*model.MessageType, error)
	Last() (*model.MessageType, error)
	Find() ([]*model.MessageType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageType, err error)
	FindInBatches(result *[]*model.MessageType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageTypeDo
	Assign(attrs ...field.AssignExpr) IMessageTypeDo
	Joins(fields ...field.RelationField) IMessageTypeDo
	Preload(fields ...field.RelationField) IMessageTypeDo
	FirstOrInit() (*model.MessageType, error)
	FirstOrCreate() (*model.MessageType, error)
	FindByPage(offset int, limit int) (result []*model.MessageType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageTypeDo) Debug() IMessageTypeDo {
	return m.withDO(m.DO.Debug())
}

func (m messageTypeDo) WithContext(ctx context.Context) IMessageTypeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageTypeDo) ReadDB() IMessageTypeDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageTypeDo) WriteDB() IMessageTypeDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageTypeDo) Session(config *gorm.Session) IMessageTypeDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageTypeDo) Clauses(conds ...clause.Expression) IMessageTypeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageTypeDo) Returning(value interface{}, columns ...string) IMessageTypeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageTypeDo) Not(conds ...gen.Condition) IMessageTypeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageTypeDo) Or(conds ...gen.Condition) IMessageTypeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageTypeDo) Select(conds ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageTypeDo) Where(conds ...gen.Condition) IMessageTypeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageTypeDo) Order(conds ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageTypeDo) Distinct(cols ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageTypeDo) Omit(cols ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageTypeDo) Join(table schema.Tabler, on ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageTypeDo) Group(cols ...field.Expr) IMessageTypeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageTypeDo) Having(conds ...gen.Condition) IMessageTypeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageTypeDo) Limit(limit int) IMessageTypeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageTypeDo) Offset(offset int) IMessageTypeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageTypeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageTypeDo) Unscoped() IMessageTypeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageTypeDo) Create(values ...*model.MessageType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageTypeDo) CreateInBatches(values []*model.MessageType, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageTypeDo) Save(values ...*model.MessageType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageTypeDo) First() (*model.MessageType, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageType), nil
	}
}

func (m messageTypeDo) Take() (*model.MessageType, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageType), nil
	}
}

func (m messageTypeDo) Last() (*model.MessageType, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageType), nil
	}
}

func (m messageTypeDo) Find() ([]*model.MessageType, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageType), err
}

func (m messageTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageType, err error) {
	buf := make([]*model.MessageType, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageTypeDo) FindInBatches(result *[]*model.MessageType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageTypeDo) Attrs(attrs ...field.AssignExpr) IMessageTypeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageTypeDo) Assign(attrs ...field.AssignExpr) IMessageTypeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageTypeDo) Joins(fields ...field.RelationField) IMessageTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageTypeDo) Preload(fields ...field.RelationField) IMessageTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageTypeDo) FirstOrInit() (*model.MessageType, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageType), nil
	}
}

func (m messageTypeDo) FirstOrCreate() (*model.MessageType, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageType), nil
	}
}

func (m messageTypeDo) FindByPage(offset int, limit int) (result []*model.MessageType, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageTypeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageTypeDo) Delete(models ...*model.MessageType) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageTypeDo) withDO(do gen.Dao) *messageTypeDo {
	m.DO = *do.(*gen.DO)
	return m
}
