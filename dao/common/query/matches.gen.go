// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMatch(db *gorm.DB, opts ...gen.DOOption) match {
	_match := match{}

	_match.matchDo.UseDB(db, opts...)
	_match.matchDo.UseModel(&model.Match{})

	tableName := _match.matchDo.TableName()
	_match.ALL = field.NewAsterisk(tableName)
	_match.ID = field.NewInt64(tableName, "id")
	_match.MatchEventID = field.NewInt64(tableName, "match_event_id")
	_match.MatchEventParentID = field.NewInt64(tableName, "match_event_parent_id")
	_match.Group = field.NewString(tableName, "group")
	_match.Round = field.NewInt64(tableName, "round")
	_match.HomeID = field.NewInt64(tableName, "home_id")
	_match.HomeName = field.NewString(tableName, "home_name")
	_match.HomeGoal = field.NewInt64(tableName, "home_goal")
	_match.AwayID = field.NewInt64(tableName, "away_id")
	_match.AwayName = field.NewString(tableName, "away_name")
	_match.AwayGoal = field.NewInt64(tableName, "away_goal")
	_match.MatchTime = field.NewField(tableName, "match_time")
	_match.GuessHomeWinAmount = field.NewInt64(tableName, "guess_home_win_amount")
	_match.GuessAwayWinAmount = field.NewInt64(tableName, "guess_away_win_amount")
	_match.GuessTieAmount = field.NewInt64(tableName, "guess_tie_amount")
	_match.CreatedAt = field.NewField(tableName, "created_at")
	_match.UpdatedAt = field.NewField(tableName, "updated_at")
	_match.Status = field.NewInt64(tableName, "status")
	_match.MinBet = field.NewFloat64(tableName, "min_bet")
	_match.MaxBet = field.NewFloat64(tableName, "max_bet")
	_match.HomeOdds = field.NewFloat64(tableName, "home_odds")
	_match.AwayOdds = field.NewFloat64(tableName, "away_odds")
	_match.DrawOdds = field.NewFloat64(tableName, "draw_odds")
	_match.IsOpen = field.NewInt64(tableName, "is_open")
	_match.StopBetAt = field.NewField(tableName, "stop_bet_at")
	_match.AdminName = field.NewString(tableName, "admin_name")

	_match.fillFieldMap()

	return _match
}

// match 比赛列表
type match struct {
	matchDo matchDo

	ALL                field.Asterisk
	ID                 field.Int64
	MatchEventID       field.Int64   // 赛程ID
	MatchEventParentID field.Int64   // 赛程上级ID
	Group              field.String  // 组别
	Round              field.Int64   // 场次
	HomeID             field.Int64   // 主队ID
	HomeName           field.String  // 主队名称
	HomeGoal           field.Int64   // 主队进球
	AwayID             field.Int64   // 客队ID
	AwayName           field.String  // 客队名称
	AwayGoal           field.Int64   // 客队进球
	MatchTime          field.Field   // 开赛时间
	GuessHomeWinAmount field.Int64   // 猜主队赢总数
	GuessAwayWinAmount field.Int64   // 客队赢总数
	GuessTieAmount     field.Int64   // 猜平数
	CreatedAt          field.Field   // 创建时间
	UpdatedAt          field.Field   // 更新时间
	Status             field.Int64   // 是否结算 0:未结算 1:已结算
	MinBet             field.Float64 // 最低投注金额
	MaxBet             field.Float64 // 最高投注金额
	HomeOdds           field.Float64 // 主胜赔率
	AwayOdds           field.Float64 // 客胜赔率
	DrawOdds           field.Float64 // 和局赔率
	IsOpen             field.Int64   // 状态 0:禁用 1:启用
	StopBetAt          field.Field   // 停止投注时间
	AdminName          field.String  // 操作员

	fieldMap map[string]field.Expr
}

func (m match) Table(newTableName string) *match {
	m.matchDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m match) As(alias string) *match {
	m.matchDo.DO = *(m.matchDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *match) updateTableName(table string) *match {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MatchEventID = field.NewInt64(table, "match_event_id")
	m.MatchEventParentID = field.NewInt64(table, "match_event_parent_id")
	m.Group = field.NewString(table, "group")
	m.Round = field.NewInt64(table, "round")
	m.HomeID = field.NewInt64(table, "home_id")
	m.HomeName = field.NewString(table, "home_name")
	m.HomeGoal = field.NewInt64(table, "home_goal")
	m.AwayID = field.NewInt64(table, "away_id")
	m.AwayName = field.NewString(table, "away_name")
	m.AwayGoal = field.NewInt64(table, "away_goal")
	m.MatchTime = field.NewField(table, "match_time")
	m.GuessHomeWinAmount = field.NewInt64(table, "guess_home_win_amount")
	m.GuessAwayWinAmount = field.NewInt64(table, "guess_away_win_amount")
	m.GuessTieAmount = field.NewInt64(table, "guess_tie_amount")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")
	m.Status = field.NewInt64(table, "status")
	m.MinBet = field.NewFloat64(table, "min_bet")
	m.MaxBet = field.NewFloat64(table, "max_bet")
	m.HomeOdds = field.NewFloat64(table, "home_odds")
	m.AwayOdds = field.NewFloat64(table, "away_odds")
	m.DrawOdds = field.NewFloat64(table, "draw_odds")
	m.IsOpen = field.NewInt64(table, "is_open")
	m.StopBetAt = field.NewField(table, "stop_bet_at")
	m.AdminName = field.NewString(table, "admin_name")

	m.fillFieldMap()

	return m
}

func (m *match) WithContext(ctx context.Context) IMatchDo { return m.matchDo.WithContext(ctx) }

func (m match) TableName() string { return m.matchDo.TableName() }

func (m match) Alias() string { return m.matchDo.Alias() }

func (m match) Columns(cols ...field.Expr) gen.Columns { return m.matchDo.Columns(cols...) }

func (m *match) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *match) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 26)
	m.fieldMap["id"] = m.ID
	m.fieldMap["match_event_id"] = m.MatchEventID
	m.fieldMap["match_event_parent_id"] = m.MatchEventParentID
	m.fieldMap["group"] = m.Group
	m.fieldMap["round"] = m.Round
	m.fieldMap["home_id"] = m.HomeID
	m.fieldMap["home_name"] = m.HomeName
	m.fieldMap["home_goal"] = m.HomeGoal
	m.fieldMap["away_id"] = m.AwayID
	m.fieldMap["away_name"] = m.AwayName
	m.fieldMap["away_goal"] = m.AwayGoal
	m.fieldMap["match_time"] = m.MatchTime
	m.fieldMap["guess_home_win_amount"] = m.GuessHomeWinAmount
	m.fieldMap["guess_away_win_amount"] = m.GuessAwayWinAmount
	m.fieldMap["guess_tie_amount"] = m.GuessTieAmount
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["status"] = m.Status
	m.fieldMap["min_bet"] = m.MinBet
	m.fieldMap["max_bet"] = m.MaxBet
	m.fieldMap["home_odds"] = m.HomeOdds
	m.fieldMap["away_odds"] = m.AwayOdds
	m.fieldMap["draw_odds"] = m.DrawOdds
	m.fieldMap["is_open"] = m.IsOpen
	m.fieldMap["stop_bet_at"] = m.StopBetAt
	m.fieldMap["admin_name"] = m.AdminName
}

func (m match) clone(db *gorm.DB) match {
	m.matchDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m match) replaceDB(db *gorm.DB) match {
	m.matchDo.ReplaceDB(db)
	return m
}

type matchDo struct{ gen.DO }

type IMatchDo interface {
	gen.SubQuery
	Debug() IMatchDo
	WithContext(ctx context.Context) IMatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchDo
	WriteDB() IMatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchDo
	Not(conds ...gen.Condition) IMatchDo
	Or(conds ...gen.Condition) IMatchDo
	Select(conds ...field.Expr) IMatchDo
	Where(conds ...gen.Condition) IMatchDo
	Order(conds ...field.Expr) IMatchDo
	Distinct(cols ...field.Expr) IMatchDo
	Omit(cols ...field.Expr) IMatchDo
	Join(table schema.Tabler, on ...field.Expr) IMatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchDo
	Group(cols ...field.Expr) IMatchDo
	Having(conds ...gen.Condition) IMatchDo
	Limit(limit int) IMatchDo
	Offset(offset int) IMatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchDo
	Unscoped() IMatchDo
	Create(values ...*model.Match) error
	CreateInBatches(values []*model.Match, batchSize int) error
	Save(values ...*model.Match) error
	First() (*model.Match, error)
	Take() (*model.Match, error)
	Last() (*model.Match, error)
	Find() ([]*model.Match, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Match, err error)
	FindInBatches(result *[]*model.Match, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Match) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchDo
	Assign(attrs ...field.AssignExpr) IMatchDo
	Joins(fields ...field.RelationField) IMatchDo
	Preload(fields ...field.RelationField) IMatchDo
	FirstOrInit() (*model.Match, error)
	FirstOrCreate() (*model.Match, error)
	FindByPage(offset int, limit int) (result []*model.Match, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchDo) Debug() IMatchDo {
	return m.withDO(m.DO.Debug())
}

func (m matchDo) WithContext(ctx context.Context) IMatchDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchDo) ReadDB() IMatchDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchDo) WriteDB() IMatchDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchDo) Session(config *gorm.Session) IMatchDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchDo) Clauses(conds ...clause.Expression) IMatchDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchDo) Returning(value interface{}, columns ...string) IMatchDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchDo) Not(conds ...gen.Condition) IMatchDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchDo) Or(conds ...gen.Condition) IMatchDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchDo) Select(conds ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchDo) Where(conds ...gen.Condition) IMatchDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchDo) Order(conds ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchDo) Distinct(cols ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchDo) Omit(cols ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchDo) Join(table schema.Tabler, on ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchDo) Group(cols ...field.Expr) IMatchDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchDo) Having(conds ...gen.Condition) IMatchDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchDo) Limit(limit int) IMatchDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchDo) Offset(offset int) IMatchDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchDo) Unscoped() IMatchDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchDo) Create(values ...*model.Match) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchDo) CreateInBatches(values []*model.Match, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchDo) Save(values ...*model.Match) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchDo) First() (*model.Match, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Take() (*model.Match, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Last() (*model.Match, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) Find() ([]*model.Match, error) {
	result, err := m.DO.Find()
	return result.([]*model.Match), err
}

func (m matchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Match, err error) {
	buf := make([]*model.Match, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchDo) FindInBatches(result *[]*model.Match, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchDo) Attrs(attrs ...field.AssignExpr) IMatchDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchDo) Assign(attrs ...field.AssignExpr) IMatchDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchDo) Joins(fields ...field.RelationField) IMatchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchDo) Preload(fields ...field.RelationField) IMatchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchDo) FirstOrInit() (*model.Match, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) FirstOrCreate() (*model.Match, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Match), nil
	}
}

func (m matchDo) FindByPage(offset int, limit int) (result []*model.Match, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchDo) Delete(models ...*model.Match) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchDo) withDO(do gen.Dao) *matchDo {
	m.DO = *do.(*gen.DO)
	return m
}
