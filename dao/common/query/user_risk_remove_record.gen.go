// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRiskRemoveRecord(db *gorm.DB, opts ...gen.DOOption) userRiskRemoveRecord {
	_userRiskRemoveRecord := userRiskRemoveRecord{}

	_userRiskRemoveRecord.userRiskRemoveRecordDo.UseDB(db, opts...)
	_userRiskRemoveRecord.userRiskRemoveRecordDo.UseModel(&model.UserRiskRemoveRecord{})

	tableName := _userRiskRemoveRecord.userRiskRemoveRecordDo.TableName()
	_userRiskRemoveRecord.ALL = field.NewAsterisk(tableName)
	_userRiskRemoveRecord.ID = field.NewInt64(tableName, "id")
	_userRiskRemoveRecord.UserID = field.NewInt64(tableName, "user_id")
	_userRiskRemoveRecord.Username = field.NewString(tableName, "username")
	_userRiskRemoveRecord.JoinedAt = field.NewField(tableName, "joined_at")
	_userRiskRemoveRecord.RemovedAt = field.NewField(tableName, "removed_at")
	_userRiskRemoveRecord.AddAdminName = field.NewBytes(tableName, "add_admin_name")
	_userRiskRemoveRecord.AdminName = field.NewString(tableName, "admin_name")
	_userRiskRemoveRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userRiskRemoveRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRiskRemoveRecord.fillFieldMap()

	return _userRiskRemoveRecord
}

// userRiskRemoveRecord 移出风险名单记录表
type userRiskRemoveRecord struct {
	userRiskRemoveRecordDo userRiskRemoveRecordDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.Int64  // 用户uid
	Username     field.String // 用户账号
	JoinedAt     field.Field  // 移入风险名单时间
	RemovedAt    field.Field  // 移出风险名单时间
	AddAdminName field.Bytes  // 风险添加人
	AdminName    field.String // 操作人
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (u userRiskRemoveRecord) Table(newTableName string) *userRiskRemoveRecord {
	u.userRiskRemoveRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRiskRemoveRecord) As(alias string) *userRiskRemoveRecord {
	u.userRiskRemoveRecordDo.DO = *(u.userRiskRemoveRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRiskRemoveRecord) updateTableName(table string) *userRiskRemoveRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.JoinedAt = field.NewField(table, "joined_at")
	u.RemovedAt = field.NewField(table, "removed_at")
	u.AddAdminName = field.NewBytes(table, "add_admin_name")
	u.AdminName = field.NewString(table, "admin_name")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRiskRemoveRecord) WithContext(ctx context.Context) IUserRiskRemoveRecordDo {
	return u.userRiskRemoveRecordDo.WithContext(ctx)
}

func (u userRiskRemoveRecord) TableName() string { return u.userRiskRemoveRecordDo.TableName() }

func (u userRiskRemoveRecord) Alias() string { return u.userRiskRemoveRecordDo.Alias() }

func (u userRiskRemoveRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userRiskRemoveRecordDo.Columns(cols...)
}

func (u *userRiskRemoveRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRiskRemoveRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["joined_at"] = u.JoinedAt
	u.fieldMap["removed_at"] = u.RemovedAt
	u.fieldMap["add_admin_name"] = u.AddAdminName
	u.fieldMap["admin_name"] = u.AdminName
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRiskRemoveRecord) clone(db *gorm.DB) userRiskRemoveRecord {
	u.userRiskRemoveRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRiskRemoveRecord) replaceDB(db *gorm.DB) userRiskRemoveRecord {
	u.userRiskRemoveRecordDo.ReplaceDB(db)
	return u
}

type userRiskRemoveRecordDo struct{ gen.DO }

type IUserRiskRemoveRecordDo interface {
	gen.SubQuery
	Debug() IUserRiskRemoveRecordDo
	WithContext(ctx context.Context) IUserRiskRemoveRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRiskRemoveRecordDo
	WriteDB() IUserRiskRemoveRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRiskRemoveRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRiskRemoveRecordDo
	Not(conds ...gen.Condition) IUserRiskRemoveRecordDo
	Or(conds ...gen.Condition) IUserRiskRemoveRecordDo
	Select(conds ...field.Expr) IUserRiskRemoveRecordDo
	Where(conds ...gen.Condition) IUserRiskRemoveRecordDo
	Order(conds ...field.Expr) IUserRiskRemoveRecordDo
	Distinct(cols ...field.Expr) IUserRiskRemoveRecordDo
	Omit(cols ...field.Expr) IUserRiskRemoveRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo
	Group(cols ...field.Expr) IUserRiskRemoveRecordDo
	Having(conds ...gen.Condition) IUserRiskRemoveRecordDo
	Limit(limit int) IUserRiskRemoveRecordDo
	Offset(offset int) IUserRiskRemoveRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskRemoveRecordDo
	Unscoped() IUserRiskRemoveRecordDo
	Create(values ...*model.UserRiskRemoveRecord) error
	CreateInBatches(values []*model.UserRiskRemoveRecord, batchSize int) error
	Save(values ...*model.UserRiskRemoveRecord) error
	First() (*model.UserRiskRemoveRecord, error)
	Take() (*model.UserRiskRemoveRecord, error)
	Last() (*model.UserRiskRemoveRecord, error)
	Find() ([]*model.UserRiskRemoveRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskRemoveRecord, err error)
	FindInBatches(result *[]*model.UserRiskRemoveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRiskRemoveRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRiskRemoveRecordDo
	Assign(attrs ...field.AssignExpr) IUserRiskRemoveRecordDo
	Joins(fields ...field.RelationField) IUserRiskRemoveRecordDo
	Preload(fields ...field.RelationField) IUserRiskRemoveRecordDo
	FirstOrInit() (*model.UserRiskRemoveRecord, error)
	FirstOrCreate() (*model.UserRiskRemoveRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserRiskRemoveRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRiskRemoveRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRiskRemoveRecordDo) Debug() IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userRiskRemoveRecordDo) WithContext(ctx context.Context) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRiskRemoveRecordDo) ReadDB() IUserRiskRemoveRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRiskRemoveRecordDo) WriteDB() IUserRiskRemoveRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRiskRemoveRecordDo) Session(config *gorm.Session) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRiskRemoveRecordDo) Clauses(conds ...clause.Expression) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRiskRemoveRecordDo) Returning(value interface{}, columns ...string) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRiskRemoveRecordDo) Not(conds ...gen.Condition) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRiskRemoveRecordDo) Or(conds ...gen.Condition) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRiskRemoveRecordDo) Select(conds ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRiskRemoveRecordDo) Where(conds ...gen.Condition) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRiskRemoveRecordDo) Order(conds ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRiskRemoveRecordDo) Distinct(cols ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRiskRemoveRecordDo) Omit(cols ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRiskRemoveRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRiskRemoveRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRiskRemoveRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRiskRemoveRecordDo) Group(cols ...field.Expr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRiskRemoveRecordDo) Having(conds ...gen.Condition) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRiskRemoveRecordDo) Limit(limit int) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRiskRemoveRecordDo) Offset(offset int) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRiskRemoveRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRiskRemoveRecordDo) Unscoped() IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRiskRemoveRecordDo) Create(values ...*model.UserRiskRemoveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRiskRemoveRecordDo) CreateInBatches(values []*model.UserRiskRemoveRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRiskRemoveRecordDo) Save(values ...*model.UserRiskRemoveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRiskRemoveRecordDo) First() (*model.UserRiskRemoveRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRemoveRecord), nil
	}
}

func (u userRiskRemoveRecordDo) Take() (*model.UserRiskRemoveRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRemoveRecord), nil
	}
}

func (u userRiskRemoveRecordDo) Last() (*model.UserRiskRemoveRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRemoveRecord), nil
	}
}

func (u userRiskRemoveRecordDo) Find() ([]*model.UserRiskRemoveRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRiskRemoveRecord), err
}

func (u userRiskRemoveRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskRemoveRecord, err error) {
	buf := make([]*model.UserRiskRemoveRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRiskRemoveRecordDo) FindInBatches(result *[]*model.UserRiskRemoveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRiskRemoveRecordDo) Attrs(attrs ...field.AssignExpr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRiskRemoveRecordDo) Assign(attrs ...field.AssignExpr) IUserRiskRemoveRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRiskRemoveRecordDo) Joins(fields ...field.RelationField) IUserRiskRemoveRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRiskRemoveRecordDo) Preload(fields ...field.RelationField) IUserRiskRemoveRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRiskRemoveRecordDo) FirstOrInit() (*model.UserRiskRemoveRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRemoveRecord), nil
	}
}

func (u userRiskRemoveRecordDo) FirstOrCreate() (*model.UserRiskRemoveRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRemoveRecord), nil
	}
}

func (u userRiskRemoveRecordDo) FindByPage(offset int, limit int) (result []*model.UserRiskRemoveRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRiskRemoveRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRiskRemoveRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRiskRemoveRecordDo) Delete(models ...*model.UserRiskRemoveRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRiskRemoveRecordDo) withDO(do gen.Dao) *userRiskRemoveRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
