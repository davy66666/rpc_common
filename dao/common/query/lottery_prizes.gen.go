// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLotteryPrize(db *gorm.DB, opts ...gen.DOOption) lotteryPrize {
	_lotteryPrize := lotteryPrize{}

	_lotteryPrize.lotteryPrizeDo.UseDB(db, opts...)
	_lotteryPrize.lotteryPrizeDo.UseModel(&model.LotteryPrize{})

	tableName := _lotteryPrize.lotteryPrizeDo.TableName()
	_lotteryPrize.ALL = field.NewAsterisk(tableName)
	_lotteryPrize.ID = field.NewInt64(tableName, "id")
	_lotteryPrize.ActivityID = field.NewInt64(tableName, "activity_id")
	_lotteryPrize.Title = field.NewString(tableName, "title")
	_lotteryPrize.PicURL = field.NewString(tableName, "pic_url")
	_lotteryPrize.Probability = field.NewFloat64(tableName, "probability")
	_lotteryPrize.Description = field.NewString(tableName, "description")
	_lotteryPrize.Level = field.NewInt64(tableName, "level")
	_lotteryPrize.Price = field.NewFloat64(tableName, "price")
	_lotteryPrize.Stock = field.NewInt64(tableName, "stock")
	_lotteryPrize.Status = field.NewInt64(tableName, "status")
	_lotteryPrize.IsObject = field.NewInt64(tableName, "is_object")
	_lotteryPrize.OperatorName = field.NewString(tableName, "operator_name")
	_lotteryPrize.CreatedAt = field.NewField(tableName, "created_at")
	_lotteryPrize.UpdatedAt = field.NewField(tableName, "updated_at")

	_lotteryPrize.fillFieldMap()

	return _lotteryPrize
}

// lotteryPrize 大转盘奖品表
type lotteryPrize struct {
	lotteryPrizeDo lotteryPrizeDo

	ALL          field.Asterisk
	ID           field.Int64
	ActivityID   field.Int64   // 活动ID
	Title        field.String  // 奖品名称
	PicURL       field.String  // 奖品图片
	Probability  field.Float64 // 抽中概率百分比
	Description  field.String  // 描述
	Level        field.Int64   // 奖品等级
	Price        field.Float64 // 奖品金额
	Stock        field.Int64   // 库存
	Status       field.Int64   // 状态; 0下架 1上架
	IsObject     field.Int64   // 是否实物奖品: 0:不是,1:是
	OperatorName field.String  // 操作人
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (l lotteryPrize) Table(newTableName string) *lotteryPrize {
	l.lotteryPrizeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotteryPrize) As(alias string) *lotteryPrize {
	l.lotteryPrizeDo.DO = *(l.lotteryPrizeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotteryPrize) updateTableName(table string) *lotteryPrize {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.ActivityID = field.NewInt64(table, "activity_id")
	l.Title = field.NewString(table, "title")
	l.PicURL = field.NewString(table, "pic_url")
	l.Probability = field.NewFloat64(table, "probability")
	l.Description = field.NewString(table, "description")
	l.Level = field.NewInt64(table, "level")
	l.Price = field.NewFloat64(table, "price")
	l.Stock = field.NewInt64(table, "stock")
	l.Status = field.NewInt64(table, "status")
	l.IsObject = field.NewInt64(table, "is_object")
	l.OperatorName = field.NewString(table, "operator_name")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *lotteryPrize) WithContext(ctx context.Context) ILotteryPrizeDo {
	return l.lotteryPrizeDo.WithContext(ctx)
}

func (l lotteryPrize) TableName() string { return l.lotteryPrizeDo.TableName() }

func (l lotteryPrize) Alias() string { return l.lotteryPrizeDo.Alias() }

func (l lotteryPrize) Columns(cols ...field.Expr) gen.Columns {
	return l.lotteryPrizeDo.Columns(cols...)
}

func (l *lotteryPrize) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotteryPrize) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["activity_id"] = l.ActivityID
	l.fieldMap["title"] = l.Title
	l.fieldMap["pic_url"] = l.PicURL
	l.fieldMap["probability"] = l.Probability
	l.fieldMap["description"] = l.Description
	l.fieldMap["level"] = l.Level
	l.fieldMap["price"] = l.Price
	l.fieldMap["stock"] = l.Stock
	l.fieldMap["status"] = l.Status
	l.fieldMap["is_object"] = l.IsObject
	l.fieldMap["operator_name"] = l.OperatorName
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l lotteryPrize) clone(db *gorm.DB) lotteryPrize {
	l.lotteryPrizeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotteryPrize) replaceDB(db *gorm.DB) lotteryPrize {
	l.lotteryPrizeDo.ReplaceDB(db)
	return l
}

type lotteryPrizeDo struct{ gen.DO }

type ILotteryPrizeDo interface {
	gen.SubQuery
	Debug() ILotteryPrizeDo
	WithContext(ctx context.Context) ILotteryPrizeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotteryPrizeDo
	WriteDB() ILotteryPrizeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotteryPrizeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotteryPrizeDo
	Not(conds ...gen.Condition) ILotteryPrizeDo
	Or(conds ...gen.Condition) ILotteryPrizeDo
	Select(conds ...field.Expr) ILotteryPrizeDo
	Where(conds ...gen.Condition) ILotteryPrizeDo
	Order(conds ...field.Expr) ILotteryPrizeDo
	Distinct(cols ...field.Expr) ILotteryPrizeDo
	Omit(cols ...field.Expr) ILotteryPrizeDo
	Join(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo
	Group(cols ...field.Expr) ILotteryPrizeDo
	Having(conds ...gen.Condition) ILotteryPrizeDo
	Limit(limit int) ILotteryPrizeDo
	Offset(offset int) ILotteryPrizeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryPrizeDo
	Unscoped() ILotteryPrizeDo
	Create(values ...*model.LotteryPrize) error
	CreateInBatches(values []*model.LotteryPrize, batchSize int) error
	Save(values ...*model.LotteryPrize) error
	First() (*model.LotteryPrize, error)
	Take() (*model.LotteryPrize, error)
	Last() (*model.LotteryPrize, error)
	Find() ([]*model.LotteryPrize, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryPrize, err error)
	FindInBatches(result *[]*model.LotteryPrize, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LotteryPrize) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotteryPrizeDo
	Assign(attrs ...field.AssignExpr) ILotteryPrizeDo
	Joins(fields ...field.RelationField) ILotteryPrizeDo
	Preload(fields ...field.RelationField) ILotteryPrizeDo
	FirstOrInit() (*model.LotteryPrize, error)
	FirstOrCreate() (*model.LotteryPrize, error)
	FindByPage(offset int, limit int) (result []*model.LotteryPrize, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotteryPrizeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotteryPrizeDo) Debug() ILotteryPrizeDo {
	return l.withDO(l.DO.Debug())
}

func (l lotteryPrizeDo) WithContext(ctx context.Context) ILotteryPrizeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotteryPrizeDo) ReadDB() ILotteryPrizeDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotteryPrizeDo) WriteDB() ILotteryPrizeDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotteryPrizeDo) Session(config *gorm.Session) ILotteryPrizeDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotteryPrizeDo) Clauses(conds ...clause.Expression) ILotteryPrizeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotteryPrizeDo) Returning(value interface{}, columns ...string) ILotteryPrizeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotteryPrizeDo) Not(conds ...gen.Condition) ILotteryPrizeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotteryPrizeDo) Or(conds ...gen.Condition) ILotteryPrizeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotteryPrizeDo) Select(conds ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotteryPrizeDo) Where(conds ...gen.Condition) ILotteryPrizeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotteryPrizeDo) Order(conds ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotteryPrizeDo) Distinct(cols ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotteryPrizeDo) Omit(cols ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotteryPrizeDo) Join(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotteryPrizeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotteryPrizeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotteryPrizeDo) Group(cols ...field.Expr) ILotteryPrizeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotteryPrizeDo) Having(conds ...gen.Condition) ILotteryPrizeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotteryPrizeDo) Limit(limit int) ILotteryPrizeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotteryPrizeDo) Offset(offset int) ILotteryPrizeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotteryPrizeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryPrizeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotteryPrizeDo) Unscoped() ILotteryPrizeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotteryPrizeDo) Create(values ...*model.LotteryPrize) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotteryPrizeDo) CreateInBatches(values []*model.LotteryPrize, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotteryPrizeDo) Save(values ...*model.LotteryPrize) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotteryPrizeDo) First() (*model.LotteryPrize, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryPrize), nil
	}
}

func (l lotteryPrizeDo) Take() (*model.LotteryPrize, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryPrize), nil
	}
}

func (l lotteryPrizeDo) Last() (*model.LotteryPrize, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryPrize), nil
	}
}

func (l lotteryPrizeDo) Find() ([]*model.LotteryPrize, error) {
	result, err := l.DO.Find()
	return result.([]*model.LotteryPrize), err
}

func (l lotteryPrizeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryPrize, err error) {
	buf := make([]*model.LotteryPrize, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotteryPrizeDo) FindInBatches(result *[]*model.LotteryPrize, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotteryPrizeDo) Attrs(attrs ...field.AssignExpr) ILotteryPrizeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotteryPrizeDo) Assign(attrs ...field.AssignExpr) ILotteryPrizeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotteryPrizeDo) Joins(fields ...field.RelationField) ILotteryPrizeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotteryPrizeDo) Preload(fields ...field.RelationField) ILotteryPrizeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotteryPrizeDo) FirstOrInit() (*model.LotteryPrize, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryPrize), nil
	}
}

func (l lotteryPrizeDo) FirstOrCreate() (*model.LotteryPrize, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryPrize), nil
	}
}

func (l lotteryPrizeDo) FindByPage(offset int, limit int) (result []*model.LotteryPrize, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotteryPrizeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotteryPrizeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotteryPrizeDo) Delete(models ...*model.LotteryPrize) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotteryPrizeDo) withDO(do gen.Dao) *lotteryPrizeDo {
	l.DO = *do.(*gen.DO)
	return l
}
