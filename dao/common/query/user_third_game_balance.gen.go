// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserThirdGameBalance(db *gorm.DB, opts ...gen.DOOption) userThirdGameBalance {
	_userThirdGameBalance := userThirdGameBalance{}

	_userThirdGameBalance.userThirdGameBalanceDo.UseDB(db, opts...)
	_userThirdGameBalance.userThirdGameBalanceDo.UseModel(&model.UserThirdGameBalance{})

	tableName := _userThirdGameBalance.userThirdGameBalanceDo.TableName()
	_userThirdGameBalance.ALL = field.NewAsterisk(tableName)
	_userThirdGameBalance.ID = field.NewInt64(tableName, "id")
	_userThirdGameBalance.UserID = field.NewInt64(tableName, "user_id")
	_userThirdGameBalance.ThirdGameBalance = field.NewString(tableName, "third_game_balance")
	_userThirdGameBalance.CreatedAt = field.NewField(tableName, "created_at")
	_userThirdGameBalance.UpdatedAt = field.NewField(tableName, "updated_at")

	_userThirdGameBalance.fillFieldMap()

	return _userThirdGameBalance
}

// userThirdGameBalance 用户三方余额存放记录表
type userThirdGameBalance struct {
	userThirdGameBalanceDo userThirdGameBalanceDo

	ALL              field.Asterisk
	ID               field.Int64
	UserID           field.Int64  // 用户id
	ThirdGameBalance field.String // 用于存放哪几个第三方有余额
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (u userThirdGameBalance) Table(newTableName string) *userThirdGameBalance {
	u.userThirdGameBalanceDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userThirdGameBalance) As(alias string) *userThirdGameBalance {
	u.userThirdGameBalanceDo.DO = *(u.userThirdGameBalanceDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userThirdGameBalance) updateTableName(table string) *userThirdGameBalance {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.ThirdGameBalance = field.NewString(table, "third_game_balance")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userThirdGameBalance) WithContext(ctx context.Context) IUserThirdGameBalanceDo {
	return u.userThirdGameBalanceDo.WithContext(ctx)
}

func (u userThirdGameBalance) TableName() string { return u.userThirdGameBalanceDo.TableName() }

func (u userThirdGameBalance) Alias() string { return u.userThirdGameBalanceDo.Alias() }

func (u userThirdGameBalance) Columns(cols ...field.Expr) gen.Columns {
	return u.userThirdGameBalanceDo.Columns(cols...)
}

func (u *userThirdGameBalance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userThirdGameBalance) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["third_game_balance"] = u.ThirdGameBalance
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userThirdGameBalance) clone(db *gorm.DB) userThirdGameBalance {
	u.userThirdGameBalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userThirdGameBalance) replaceDB(db *gorm.DB) userThirdGameBalance {
	u.userThirdGameBalanceDo.ReplaceDB(db)
	return u
}

type userThirdGameBalanceDo struct{ gen.DO }

type IUserThirdGameBalanceDo interface {
	gen.SubQuery
	Debug() IUserThirdGameBalanceDo
	WithContext(ctx context.Context) IUserThirdGameBalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserThirdGameBalanceDo
	WriteDB() IUserThirdGameBalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserThirdGameBalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserThirdGameBalanceDo
	Not(conds ...gen.Condition) IUserThirdGameBalanceDo
	Or(conds ...gen.Condition) IUserThirdGameBalanceDo
	Select(conds ...field.Expr) IUserThirdGameBalanceDo
	Where(conds ...gen.Condition) IUserThirdGameBalanceDo
	Order(conds ...field.Expr) IUserThirdGameBalanceDo
	Distinct(cols ...field.Expr) IUserThirdGameBalanceDo
	Omit(cols ...field.Expr) IUserThirdGameBalanceDo
	Join(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo
	Group(cols ...field.Expr) IUserThirdGameBalanceDo
	Having(conds ...gen.Condition) IUserThirdGameBalanceDo
	Limit(limit int) IUserThirdGameBalanceDo
	Offset(offset int) IUserThirdGameBalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThirdGameBalanceDo
	Unscoped() IUserThirdGameBalanceDo
	Create(values ...*model.UserThirdGameBalance) error
	CreateInBatches(values []*model.UserThirdGameBalance, batchSize int) error
	Save(values ...*model.UserThirdGameBalance) error
	First() (*model.UserThirdGameBalance, error)
	Take() (*model.UserThirdGameBalance, error)
	Last() (*model.UserThirdGameBalance, error)
	Find() ([]*model.UserThirdGameBalance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserThirdGameBalance, err error)
	FindInBatches(result *[]*model.UserThirdGameBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserThirdGameBalance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserThirdGameBalanceDo
	Assign(attrs ...field.AssignExpr) IUserThirdGameBalanceDo
	Joins(fields ...field.RelationField) IUserThirdGameBalanceDo
	Preload(fields ...field.RelationField) IUserThirdGameBalanceDo
	FirstOrInit() (*model.UserThirdGameBalance, error)
	FirstOrCreate() (*model.UserThirdGameBalance, error)
	FindByPage(offset int, limit int) (result []*model.UserThirdGameBalance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserThirdGameBalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userThirdGameBalanceDo) Debug() IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Debug())
}

func (u userThirdGameBalanceDo) WithContext(ctx context.Context) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userThirdGameBalanceDo) ReadDB() IUserThirdGameBalanceDo {
	return u.Clauses(dbresolver.Read)
}

func (u userThirdGameBalanceDo) WriteDB() IUserThirdGameBalanceDo {
	return u.Clauses(dbresolver.Write)
}

func (u userThirdGameBalanceDo) Session(config *gorm.Session) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Session(config))
}

func (u userThirdGameBalanceDo) Clauses(conds ...clause.Expression) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userThirdGameBalanceDo) Returning(value interface{}, columns ...string) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userThirdGameBalanceDo) Not(conds ...gen.Condition) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userThirdGameBalanceDo) Or(conds ...gen.Condition) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userThirdGameBalanceDo) Select(conds ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userThirdGameBalanceDo) Where(conds ...gen.Condition) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userThirdGameBalanceDo) Order(conds ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userThirdGameBalanceDo) Distinct(cols ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userThirdGameBalanceDo) Omit(cols ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userThirdGameBalanceDo) Join(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userThirdGameBalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userThirdGameBalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userThirdGameBalanceDo) Group(cols ...field.Expr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userThirdGameBalanceDo) Having(conds ...gen.Condition) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userThirdGameBalanceDo) Limit(limit int) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userThirdGameBalanceDo) Offset(offset int) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userThirdGameBalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userThirdGameBalanceDo) Unscoped() IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userThirdGameBalanceDo) Create(values ...*model.UserThirdGameBalance) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userThirdGameBalanceDo) CreateInBatches(values []*model.UserThirdGameBalance, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userThirdGameBalanceDo) Save(values ...*model.UserThirdGameBalance) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userThirdGameBalanceDo) First() (*model.UserThirdGameBalance, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdGameBalance), nil
	}
}

func (u userThirdGameBalanceDo) Take() (*model.UserThirdGameBalance, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdGameBalance), nil
	}
}

func (u userThirdGameBalanceDo) Last() (*model.UserThirdGameBalance, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdGameBalance), nil
	}
}

func (u userThirdGameBalanceDo) Find() ([]*model.UserThirdGameBalance, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserThirdGameBalance), err
}

func (u userThirdGameBalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserThirdGameBalance, err error) {
	buf := make([]*model.UserThirdGameBalance, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userThirdGameBalanceDo) FindInBatches(result *[]*model.UserThirdGameBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userThirdGameBalanceDo) Attrs(attrs ...field.AssignExpr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userThirdGameBalanceDo) Assign(attrs ...field.AssignExpr) IUserThirdGameBalanceDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userThirdGameBalanceDo) Joins(fields ...field.RelationField) IUserThirdGameBalanceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userThirdGameBalanceDo) Preload(fields ...field.RelationField) IUserThirdGameBalanceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userThirdGameBalanceDo) FirstOrInit() (*model.UserThirdGameBalance, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdGameBalance), nil
	}
}

func (u userThirdGameBalanceDo) FirstOrCreate() (*model.UserThirdGameBalance, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdGameBalance), nil
	}
}

func (u userThirdGameBalanceDo) FindByPage(offset int, limit int) (result []*model.UserThirdGameBalance, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userThirdGameBalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userThirdGameBalanceDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userThirdGameBalanceDo) Delete(models ...*model.UserThirdGameBalance) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userThirdGameBalanceDo) withDO(do gen.Dao) *userThirdGameBalanceDo {
	u.DO = *do.(*gen.DO)
	return u
}
