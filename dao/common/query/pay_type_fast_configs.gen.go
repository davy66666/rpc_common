// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayTypeFastConfig(db *gorm.DB, opts ...gen.DOOption) payTypeFastConfig {
	_payTypeFastConfig := payTypeFastConfig{}

	_payTypeFastConfig.payTypeFastConfigDo.UseDB(db, opts...)
	_payTypeFastConfig.payTypeFastConfigDo.UseModel(&model.PayTypeFastConfig{})

	tableName := _payTypeFastConfig.payTypeFastConfigDo.TableName()
	_payTypeFastConfig.ALL = field.NewAsterisk(tableName)
	_payTypeFastConfig.ID = field.NewInt64(tableName, "id")
	_payTypeFastConfig.PayTypeID = field.NewInt64(tableName, "pay_type_id")
	_payTypeFastConfig.Range = field.NewString(tableName, "range")
	_payTypeFastConfig.AdminName = field.NewString(tableName, "admin_name")
	_payTypeFastConfig.CreatedAt = field.NewField(tableName, "created_at")
	_payTypeFastConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_payTypeFastConfig.fillFieldMap()

	return _payTypeFastConfig
}

// payTypeFastConfig 客户通道极速配置表
type payTypeFastConfig struct {
	payTypeFastConfigDo payTypeFastConfigDo

	ALL       field.Asterisk
	ID        field.Int64
	PayTypeID field.Int64  // 支付通道ID
	Range     field.String // 匹配范围，json格式,min_money:最小金额，max_money:最大金额，eg:[{"min_money":0, "max_money":100}, {"min_money":600, "max_money":1000}]
	AdminName field.String // 操作管理员
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (p payTypeFastConfig) Table(newTableName string) *payTypeFastConfig {
	p.payTypeFastConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payTypeFastConfig) As(alias string) *payTypeFastConfig {
	p.payTypeFastConfigDo.DO = *(p.payTypeFastConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payTypeFastConfig) updateTableName(table string) *payTypeFastConfig {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PayTypeID = field.NewInt64(table, "pay_type_id")
	p.Range = field.NewString(table, "range")
	p.AdminName = field.NewString(table, "admin_name")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *payTypeFastConfig) WithContext(ctx context.Context) IPayTypeFastConfigDo {
	return p.payTypeFastConfigDo.WithContext(ctx)
}

func (p payTypeFastConfig) TableName() string { return p.payTypeFastConfigDo.TableName() }

func (p payTypeFastConfig) Alias() string { return p.payTypeFastConfigDo.Alias() }

func (p payTypeFastConfig) Columns(cols ...field.Expr) gen.Columns {
	return p.payTypeFastConfigDo.Columns(cols...)
}

func (p *payTypeFastConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payTypeFastConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["pay_type_id"] = p.PayTypeID
	p.fieldMap["range"] = p.Range
	p.fieldMap["admin_name"] = p.AdminName
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p payTypeFastConfig) clone(db *gorm.DB) payTypeFastConfig {
	p.payTypeFastConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payTypeFastConfig) replaceDB(db *gorm.DB) payTypeFastConfig {
	p.payTypeFastConfigDo.ReplaceDB(db)
	return p
}

type payTypeFastConfigDo struct{ gen.DO }

type IPayTypeFastConfigDo interface {
	gen.SubQuery
	Debug() IPayTypeFastConfigDo
	WithContext(ctx context.Context) IPayTypeFastConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayTypeFastConfigDo
	WriteDB() IPayTypeFastConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayTypeFastConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayTypeFastConfigDo
	Not(conds ...gen.Condition) IPayTypeFastConfigDo
	Or(conds ...gen.Condition) IPayTypeFastConfigDo
	Select(conds ...field.Expr) IPayTypeFastConfigDo
	Where(conds ...gen.Condition) IPayTypeFastConfigDo
	Order(conds ...field.Expr) IPayTypeFastConfigDo
	Distinct(cols ...field.Expr) IPayTypeFastConfigDo
	Omit(cols ...field.Expr) IPayTypeFastConfigDo
	Join(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo
	Group(cols ...field.Expr) IPayTypeFastConfigDo
	Having(conds ...gen.Condition) IPayTypeFastConfigDo
	Limit(limit int) IPayTypeFastConfigDo
	Offset(offset int) IPayTypeFastConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayTypeFastConfigDo
	Unscoped() IPayTypeFastConfigDo
	Create(values ...*model.PayTypeFastConfig) error
	CreateInBatches(values []*model.PayTypeFastConfig, batchSize int) error
	Save(values ...*model.PayTypeFastConfig) error
	First() (*model.PayTypeFastConfig, error)
	Take() (*model.PayTypeFastConfig, error)
	Last() (*model.PayTypeFastConfig, error)
	Find() ([]*model.PayTypeFastConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayTypeFastConfig, err error)
	FindInBatches(result *[]*model.PayTypeFastConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayTypeFastConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayTypeFastConfigDo
	Assign(attrs ...field.AssignExpr) IPayTypeFastConfigDo
	Joins(fields ...field.RelationField) IPayTypeFastConfigDo
	Preload(fields ...field.RelationField) IPayTypeFastConfigDo
	FirstOrInit() (*model.PayTypeFastConfig, error)
	FirstOrCreate() (*model.PayTypeFastConfig, error)
	FindByPage(offset int, limit int) (result []*model.PayTypeFastConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayTypeFastConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payTypeFastConfigDo) Debug() IPayTypeFastConfigDo {
	return p.withDO(p.DO.Debug())
}

func (p payTypeFastConfigDo) WithContext(ctx context.Context) IPayTypeFastConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payTypeFastConfigDo) ReadDB() IPayTypeFastConfigDo {
	return p.Clauses(dbresolver.Read)
}

func (p payTypeFastConfigDo) WriteDB() IPayTypeFastConfigDo {
	return p.Clauses(dbresolver.Write)
}

func (p payTypeFastConfigDo) Session(config *gorm.Session) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Session(config))
}

func (p payTypeFastConfigDo) Clauses(conds ...clause.Expression) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payTypeFastConfigDo) Returning(value interface{}, columns ...string) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payTypeFastConfigDo) Not(conds ...gen.Condition) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payTypeFastConfigDo) Or(conds ...gen.Condition) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payTypeFastConfigDo) Select(conds ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payTypeFastConfigDo) Where(conds ...gen.Condition) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payTypeFastConfigDo) Order(conds ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payTypeFastConfigDo) Distinct(cols ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payTypeFastConfigDo) Omit(cols ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payTypeFastConfigDo) Join(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payTypeFastConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payTypeFastConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payTypeFastConfigDo) Group(cols ...field.Expr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payTypeFastConfigDo) Having(conds ...gen.Condition) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payTypeFastConfigDo) Limit(limit int) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payTypeFastConfigDo) Offset(offset int) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payTypeFastConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payTypeFastConfigDo) Unscoped() IPayTypeFastConfigDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payTypeFastConfigDo) Create(values ...*model.PayTypeFastConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payTypeFastConfigDo) CreateInBatches(values []*model.PayTypeFastConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payTypeFastConfigDo) Save(values ...*model.PayTypeFastConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payTypeFastConfigDo) First() (*model.PayTypeFastConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayTypeFastConfig), nil
	}
}

func (p payTypeFastConfigDo) Take() (*model.PayTypeFastConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayTypeFastConfig), nil
	}
}

func (p payTypeFastConfigDo) Last() (*model.PayTypeFastConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayTypeFastConfig), nil
	}
}

func (p payTypeFastConfigDo) Find() ([]*model.PayTypeFastConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayTypeFastConfig), err
}

func (p payTypeFastConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayTypeFastConfig, err error) {
	buf := make([]*model.PayTypeFastConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payTypeFastConfigDo) FindInBatches(result *[]*model.PayTypeFastConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payTypeFastConfigDo) Attrs(attrs ...field.AssignExpr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payTypeFastConfigDo) Assign(attrs ...field.AssignExpr) IPayTypeFastConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payTypeFastConfigDo) Joins(fields ...field.RelationField) IPayTypeFastConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payTypeFastConfigDo) Preload(fields ...field.RelationField) IPayTypeFastConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payTypeFastConfigDo) FirstOrInit() (*model.PayTypeFastConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayTypeFastConfig), nil
	}
}

func (p payTypeFastConfigDo) FirstOrCreate() (*model.PayTypeFastConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayTypeFastConfig), nil
	}
}

func (p payTypeFastConfigDo) FindByPage(offset int, limit int) (result []*model.PayTypeFastConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payTypeFastConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payTypeFastConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payTypeFastConfigDo) Delete(models ...*model.PayTypeFastConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payTypeFastConfigDo) withDO(do gen.Dao) *payTypeFastConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
