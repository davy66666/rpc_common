// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGuessRecord(db *gorm.DB, opts ...gen.DOOption) guessRecord {
	_guessRecord := guessRecord{}

	_guessRecord.guessRecordDo.UseDB(db, opts...)
	_guessRecord.guessRecordDo.UseModel(&model.GuessRecord{})

	tableName := _guessRecord.guessRecordDo.TableName()
	_guessRecord.ALL = field.NewAsterisk(tableName)
	_guessRecord.ID = field.NewInt64(tableName, "id")
	_guessRecord.UserID = field.NewInt64(tableName, "user_id")
	_guessRecord.CaptainID = field.NewInt64(tableName, "captain_id")
	_guessRecord.CaptainName = field.NewString(tableName, "captain_name")
	_guessRecord.MatchEventID = field.NewInt64(tableName, "match_event_id")
	_guessRecord.MatchCoefficientID = field.NewInt64(tableName, "match_coefficient_id")
	_guessRecord.MatchID = field.NewInt64(tableName, "match_id")
	_guessRecord.MatchTeamsID = field.NewInt64(tableName, "match_teams_id")
	_guessRecord.Username = field.NewString(tableName, "username")
	_guessRecord.Coefficient = field.NewFloat64(tableName, "coefficient")
	_guessRecord.Status = field.NewInt64(tableName, "status")
	_guessRecord.GuessStatus = field.NewInt64(tableName, "guess_status")
	_guessRecord.GuessAt = field.NewField(tableName, "guess_at")
	_guessRecord.CreatedAt = field.NewField(tableName, "created_at")
	_guessRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_guessRecord.fillFieldMap()

	return _guessRecord
}

// guessRecord 竞猜记录
type guessRecord struct {
	guessRecordDo guessRecordDo

	ALL                field.Asterisk
	ID                 field.Int64
	UserID             field.Int64   // 用户ID
	CaptainID          field.Int64   // 队长id
	CaptainName        field.String  // 队长名字
	MatchEventID       field.Int64   // 赛程ID
	MatchCoefficientID field.Int64   // 系数表id
	MatchID            field.Int64   // 赛事id
	MatchTeamsID       field.Int64   // 队伍ID
	Username           field.String  // 用户名
	Coefficient        field.Float64 // 系数
	Status             field.Int64   // 状态 0待结算 1赢 2输
	GuessStatus        field.Int64   // 竞猜状态 1:赢，2:和，3:输
	GuessAt            field.Field   // 竞猜时间
	CreatedAt          field.Field   // 创建时间
	UpdatedAt          field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (g guessRecord) Table(newTableName string) *guessRecord {
	g.guessRecordDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g guessRecord) As(alias string) *guessRecord {
	g.guessRecordDo.DO = *(g.guessRecordDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *guessRecord) updateTableName(table string) *guessRecord {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.UserID = field.NewInt64(table, "user_id")
	g.CaptainID = field.NewInt64(table, "captain_id")
	g.CaptainName = field.NewString(table, "captain_name")
	g.MatchEventID = field.NewInt64(table, "match_event_id")
	g.MatchCoefficientID = field.NewInt64(table, "match_coefficient_id")
	g.MatchID = field.NewInt64(table, "match_id")
	g.MatchTeamsID = field.NewInt64(table, "match_teams_id")
	g.Username = field.NewString(table, "username")
	g.Coefficient = field.NewFloat64(table, "coefficient")
	g.Status = field.NewInt64(table, "status")
	g.GuessStatus = field.NewInt64(table, "guess_status")
	g.GuessAt = field.NewField(table, "guess_at")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *guessRecord) WithContext(ctx context.Context) IGuessRecordDo {
	return g.guessRecordDo.WithContext(ctx)
}

func (g guessRecord) TableName() string { return g.guessRecordDo.TableName() }

func (g guessRecord) Alias() string { return g.guessRecordDo.Alias() }

func (g guessRecord) Columns(cols ...field.Expr) gen.Columns { return g.guessRecordDo.Columns(cols...) }

func (g *guessRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *guessRecord) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["captain_id"] = g.CaptainID
	g.fieldMap["captain_name"] = g.CaptainName
	g.fieldMap["match_event_id"] = g.MatchEventID
	g.fieldMap["match_coefficient_id"] = g.MatchCoefficientID
	g.fieldMap["match_id"] = g.MatchID
	g.fieldMap["match_teams_id"] = g.MatchTeamsID
	g.fieldMap["username"] = g.Username
	g.fieldMap["coefficient"] = g.Coefficient
	g.fieldMap["status"] = g.Status
	g.fieldMap["guess_status"] = g.GuessStatus
	g.fieldMap["guess_at"] = g.GuessAt
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g guessRecord) clone(db *gorm.DB) guessRecord {
	g.guessRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g guessRecord) replaceDB(db *gorm.DB) guessRecord {
	g.guessRecordDo.ReplaceDB(db)
	return g
}

type guessRecordDo struct{ gen.DO }

type IGuessRecordDo interface {
	gen.SubQuery
	Debug() IGuessRecordDo
	WithContext(ctx context.Context) IGuessRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGuessRecordDo
	WriteDB() IGuessRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGuessRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGuessRecordDo
	Not(conds ...gen.Condition) IGuessRecordDo
	Or(conds ...gen.Condition) IGuessRecordDo
	Select(conds ...field.Expr) IGuessRecordDo
	Where(conds ...gen.Condition) IGuessRecordDo
	Order(conds ...field.Expr) IGuessRecordDo
	Distinct(cols ...field.Expr) IGuessRecordDo
	Omit(cols ...field.Expr) IGuessRecordDo
	Join(table schema.Tabler, on ...field.Expr) IGuessRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGuessRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGuessRecordDo
	Group(cols ...field.Expr) IGuessRecordDo
	Having(conds ...gen.Condition) IGuessRecordDo
	Limit(limit int) IGuessRecordDo
	Offset(offset int) IGuessRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGuessRecordDo
	Unscoped() IGuessRecordDo
	Create(values ...*model.GuessRecord) error
	CreateInBatches(values []*model.GuessRecord, batchSize int) error
	Save(values ...*model.GuessRecord) error
	First() (*model.GuessRecord, error)
	Take() (*model.GuessRecord, error)
	Last() (*model.GuessRecord, error)
	Find() ([]*model.GuessRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuessRecord, err error)
	FindInBatches(result *[]*model.GuessRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GuessRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGuessRecordDo
	Assign(attrs ...field.AssignExpr) IGuessRecordDo
	Joins(fields ...field.RelationField) IGuessRecordDo
	Preload(fields ...field.RelationField) IGuessRecordDo
	FirstOrInit() (*model.GuessRecord, error)
	FirstOrCreate() (*model.GuessRecord, error)
	FindByPage(offset int, limit int) (result []*model.GuessRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGuessRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g guessRecordDo) Debug() IGuessRecordDo {
	return g.withDO(g.DO.Debug())
}

func (g guessRecordDo) WithContext(ctx context.Context) IGuessRecordDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g guessRecordDo) ReadDB() IGuessRecordDo {
	return g.Clauses(dbresolver.Read)
}

func (g guessRecordDo) WriteDB() IGuessRecordDo {
	return g.Clauses(dbresolver.Write)
}

func (g guessRecordDo) Session(config *gorm.Session) IGuessRecordDo {
	return g.withDO(g.DO.Session(config))
}

func (g guessRecordDo) Clauses(conds ...clause.Expression) IGuessRecordDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g guessRecordDo) Returning(value interface{}, columns ...string) IGuessRecordDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g guessRecordDo) Not(conds ...gen.Condition) IGuessRecordDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g guessRecordDo) Or(conds ...gen.Condition) IGuessRecordDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g guessRecordDo) Select(conds ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g guessRecordDo) Where(conds ...gen.Condition) IGuessRecordDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g guessRecordDo) Order(conds ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g guessRecordDo) Distinct(cols ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g guessRecordDo) Omit(cols ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g guessRecordDo) Join(table schema.Tabler, on ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g guessRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g guessRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g guessRecordDo) Group(cols ...field.Expr) IGuessRecordDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g guessRecordDo) Having(conds ...gen.Condition) IGuessRecordDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g guessRecordDo) Limit(limit int) IGuessRecordDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g guessRecordDo) Offset(offset int) IGuessRecordDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g guessRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGuessRecordDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g guessRecordDo) Unscoped() IGuessRecordDo {
	return g.withDO(g.DO.Unscoped())
}

func (g guessRecordDo) Create(values ...*model.GuessRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g guessRecordDo) CreateInBatches(values []*model.GuessRecord, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g guessRecordDo) Save(values ...*model.GuessRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g guessRecordDo) First() (*model.GuessRecord, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecord), nil
	}
}

func (g guessRecordDo) Take() (*model.GuessRecord, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecord), nil
	}
}

func (g guessRecordDo) Last() (*model.GuessRecord, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecord), nil
	}
}

func (g guessRecordDo) Find() ([]*model.GuessRecord, error) {
	result, err := g.DO.Find()
	return result.([]*model.GuessRecord), err
}

func (g guessRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuessRecord, err error) {
	buf := make([]*model.GuessRecord, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g guessRecordDo) FindInBatches(result *[]*model.GuessRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g guessRecordDo) Attrs(attrs ...field.AssignExpr) IGuessRecordDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g guessRecordDo) Assign(attrs ...field.AssignExpr) IGuessRecordDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g guessRecordDo) Joins(fields ...field.RelationField) IGuessRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g guessRecordDo) Preload(fields ...field.RelationField) IGuessRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g guessRecordDo) FirstOrInit() (*model.GuessRecord, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecord), nil
	}
}

func (g guessRecordDo) FirstOrCreate() (*model.GuessRecord, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecord), nil
	}
}

func (g guessRecordDo) FindByPage(offset int, limit int) (result []*model.GuessRecord, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g guessRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g guessRecordDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g guessRecordDo) Delete(models ...*model.GuessRecord) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *guessRecordDo) withDO(do gen.Dao) *guessRecordDo {
	g.DO = *do.(*gen.DO)
	return g
}
