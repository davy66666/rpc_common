// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGiftType(db *gorm.DB, opts ...gen.DOOption) giftType {
	_giftType := giftType{}

	_giftType.giftTypeDo.UseDB(db, opts...)
	_giftType.giftTypeDo.UseModel(&model.GiftType{})

	tableName := _giftType.giftTypeDo.TableName()
	_giftType.ALL = field.NewAsterisk(tableName)
	_giftType.ID = field.NewInt64(tableName, "id")
	_giftType.SeriesEnCode = field.NewString(tableName, "series_en_code")
	_giftType.SeriesCnCode = field.NewString(tableName, "series_cn_code")
	_giftType.Name = field.NewString(tableName, "name")
	_giftType.AdminName = field.NewString(tableName, "admin_name")
	_giftType.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_giftType.CreatedAt = field.NewField(tableName, "created_at")
	_giftType.UpdatedAt = field.NewField(tableName, "updated_at")

	_giftType.fillFieldMap()

	return _giftType
}

type giftType struct {
	giftTypeDo giftTypeDo

	ALL          field.Asterisk
	ID           field.Int64
	SeriesEnCode field.String // series表的en_code
	SeriesCnCode field.String // series表的cn_code
	Name         field.String // 名称
	AdminName    field.String // 操作人
	IsDeleted    field.Int64
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (g giftType) Table(newTableName string) *giftType {
	g.giftTypeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g giftType) As(alias string) *giftType {
	g.giftTypeDo.DO = *(g.giftTypeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *giftType) updateTableName(table string) *giftType {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.SeriesEnCode = field.NewString(table, "series_en_code")
	g.SeriesCnCode = field.NewString(table, "series_cn_code")
	g.Name = field.NewString(table, "name")
	g.AdminName = field.NewString(table, "admin_name")
	g.IsDeleted = field.NewInt64(table, "is_deleted")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *giftType) WithContext(ctx context.Context) IGiftTypeDo { return g.giftTypeDo.WithContext(ctx) }

func (g giftType) TableName() string { return g.giftTypeDo.TableName() }

func (g giftType) Alias() string { return g.giftTypeDo.Alias() }

func (g giftType) Columns(cols ...field.Expr) gen.Columns { return g.giftTypeDo.Columns(cols...) }

func (g *giftType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *giftType) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["series_en_code"] = g.SeriesEnCode
	g.fieldMap["series_cn_code"] = g.SeriesCnCode
	g.fieldMap["name"] = g.Name
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g giftType) clone(db *gorm.DB) giftType {
	g.giftTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g giftType) replaceDB(db *gorm.DB) giftType {
	g.giftTypeDo.ReplaceDB(db)
	return g
}

type giftTypeDo struct{ gen.DO }

type IGiftTypeDo interface {
	gen.SubQuery
	Debug() IGiftTypeDo
	WithContext(ctx context.Context) IGiftTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiftTypeDo
	WriteDB() IGiftTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiftTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiftTypeDo
	Not(conds ...gen.Condition) IGiftTypeDo
	Or(conds ...gen.Condition) IGiftTypeDo
	Select(conds ...field.Expr) IGiftTypeDo
	Where(conds ...gen.Condition) IGiftTypeDo
	Order(conds ...field.Expr) IGiftTypeDo
	Distinct(cols ...field.Expr) IGiftTypeDo
	Omit(cols ...field.Expr) IGiftTypeDo
	Join(table schema.Tabler, on ...field.Expr) IGiftTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiftTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiftTypeDo
	Group(cols ...field.Expr) IGiftTypeDo
	Having(conds ...gen.Condition) IGiftTypeDo
	Limit(limit int) IGiftTypeDo
	Offset(offset int) IGiftTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftTypeDo
	Unscoped() IGiftTypeDo
	Create(values ...*model.GiftType) error
	CreateInBatches(values []*model.GiftType, batchSize int) error
	Save(values ...*model.GiftType) error
	First() (*model.GiftType, error)
	Take() (*model.GiftType, error)
	Last() (*model.GiftType, error)
	Find() ([]*model.GiftType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftType, err error)
	FindInBatches(result *[]*model.GiftType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GiftType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiftTypeDo
	Assign(attrs ...field.AssignExpr) IGiftTypeDo
	Joins(fields ...field.RelationField) IGiftTypeDo
	Preload(fields ...field.RelationField) IGiftTypeDo
	FirstOrInit() (*model.GiftType, error)
	FirstOrCreate() (*model.GiftType, error)
	FindByPage(offset int, limit int) (result []*model.GiftType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiftTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giftTypeDo) Debug() IGiftTypeDo {
	return g.withDO(g.DO.Debug())
}

func (g giftTypeDo) WithContext(ctx context.Context) IGiftTypeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giftTypeDo) ReadDB() IGiftTypeDo {
	return g.Clauses(dbresolver.Read)
}

func (g giftTypeDo) WriteDB() IGiftTypeDo {
	return g.Clauses(dbresolver.Write)
}

func (g giftTypeDo) Session(config *gorm.Session) IGiftTypeDo {
	return g.withDO(g.DO.Session(config))
}

func (g giftTypeDo) Clauses(conds ...clause.Expression) IGiftTypeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giftTypeDo) Returning(value interface{}, columns ...string) IGiftTypeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giftTypeDo) Not(conds ...gen.Condition) IGiftTypeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giftTypeDo) Or(conds ...gen.Condition) IGiftTypeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giftTypeDo) Select(conds ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giftTypeDo) Where(conds ...gen.Condition) IGiftTypeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giftTypeDo) Order(conds ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giftTypeDo) Distinct(cols ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giftTypeDo) Omit(cols ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giftTypeDo) Join(table schema.Tabler, on ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giftTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giftTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giftTypeDo) Group(cols ...field.Expr) IGiftTypeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giftTypeDo) Having(conds ...gen.Condition) IGiftTypeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giftTypeDo) Limit(limit int) IGiftTypeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giftTypeDo) Offset(offset int) IGiftTypeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giftTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftTypeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giftTypeDo) Unscoped() IGiftTypeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giftTypeDo) Create(values ...*model.GiftType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giftTypeDo) CreateInBatches(values []*model.GiftType, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giftTypeDo) Save(values ...*model.GiftType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giftTypeDo) First() (*model.GiftType, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftType), nil
	}
}

func (g giftTypeDo) Take() (*model.GiftType, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftType), nil
	}
}

func (g giftTypeDo) Last() (*model.GiftType, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftType), nil
	}
}

func (g giftTypeDo) Find() ([]*model.GiftType, error) {
	result, err := g.DO.Find()
	return result.([]*model.GiftType), err
}

func (g giftTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftType, err error) {
	buf := make([]*model.GiftType, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giftTypeDo) FindInBatches(result *[]*model.GiftType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giftTypeDo) Attrs(attrs ...field.AssignExpr) IGiftTypeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giftTypeDo) Assign(attrs ...field.AssignExpr) IGiftTypeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giftTypeDo) Joins(fields ...field.RelationField) IGiftTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giftTypeDo) Preload(fields ...field.RelationField) IGiftTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giftTypeDo) FirstOrInit() (*model.GiftType, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftType), nil
	}
}

func (g giftTypeDo) FirstOrCreate() (*model.GiftType, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftType), nil
	}
}

func (g giftTypeDo) FindByPage(offset int, limit int) (result []*model.GiftType, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giftTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giftTypeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giftTypeDo) Delete(models ...*model.GiftType) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giftTypeDo) withDO(do gen.Dao) *giftTypeDo {
	g.DO = *do.(*gen.DO)
	return g
}
