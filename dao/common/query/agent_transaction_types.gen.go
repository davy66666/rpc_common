// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentTransactionType(db *gorm.DB, opts ...gen.DOOption) agentTransactionType {
	_agentTransactionType := agentTransactionType{}

	_agentTransactionType.agentTransactionTypeDo.UseDB(db, opts...)
	_agentTransactionType.agentTransactionTypeDo.UseModel(&model.AgentTransactionType{})

	tableName := _agentTransactionType.agentTransactionTypeDo.TableName()
	_agentTransactionType.ALL = field.NewAsterisk(tableName)
	_agentTransactionType.ID = field.NewInt64(tableName, "id")
	_agentTransactionType.ParentID = field.NewInt64(tableName, "parent_id")
	_agentTransactionType.CnTitle = field.NewString(tableName, "cn_title")
	_agentTransactionType.EnTitle = field.NewString(tableName, "en_title")
	_agentTransactionType.Description = field.NewString(tableName, "description")
	_agentTransactionType.Amount = field.NewInt64(tableName, "amount")
	_agentTransactionType.Deposit = field.NewInt64(tableName, "deposit")
	_agentTransactionType.DepositTimes = field.NewInt64(tableName, "deposit_times")
	_agentTransactionType.Withdraw = field.NewInt64(tableName, "withdraw")
	_agentTransactionType.WithdrawTimes = field.NewInt64(tableName, "withdraw_times")
	_agentTransactionType.IsOpen = field.NewInt64(tableName, "is_open")
	_agentTransactionType.CreatedAt = field.NewField(tableName, "created_at")
	_agentTransactionType.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentTransactionType.fillFieldMap()

	return _agentTransactionType
}

type agentTransactionType struct {
	agentTransactionTypeDo agentTransactionTypeDo

	ALL           field.Asterisk
	ID            field.Int64
	ParentID      field.Int64
	CnTitle       field.String
	EnTitle       field.String
	Description   field.String
	Amount        field.Int64
	Deposit       field.Int64 // 充值
	DepositTimes  field.Int64 // 总的充值次数
	Withdraw      field.Int64 // 提款
	WithdrawTimes field.Int64 // 总的提款次数
	IsOpen        field.Int64 // 是否开启0:否1：是
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a agentTransactionType) Table(newTableName string) *agentTransactionType {
	a.agentTransactionTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentTransactionType) As(alias string) *agentTransactionType {
	a.agentTransactionTypeDo.DO = *(a.agentTransactionTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentTransactionType) updateTableName(table string) *agentTransactionType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.CnTitle = field.NewString(table, "cn_title")
	a.EnTitle = field.NewString(table, "en_title")
	a.Description = field.NewString(table, "description")
	a.Amount = field.NewInt64(table, "amount")
	a.Deposit = field.NewInt64(table, "deposit")
	a.DepositTimes = field.NewInt64(table, "deposit_times")
	a.Withdraw = field.NewInt64(table, "withdraw")
	a.WithdrawTimes = field.NewInt64(table, "withdraw_times")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentTransactionType) WithContext(ctx context.Context) IAgentTransactionTypeDo {
	return a.agentTransactionTypeDo.WithContext(ctx)
}

func (a agentTransactionType) TableName() string { return a.agentTransactionTypeDo.TableName() }

func (a agentTransactionType) Alias() string { return a.agentTransactionTypeDo.Alias() }

func (a agentTransactionType) Columns(cols ...field.Expr) gen.Columns {
	return a.agentTransactionTypeDo.Columns(cols...)
}

func (a *agentTransactionType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentTransactionType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["cn_title"] = a.CnTitle
	a.fieldMap["en_title"] = a.EnTitle
	a.fieldMap["description"] = a.Description
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["deposit"] = a.Deposit
	a.fieldMap["deposit_times"] = a.DepositTimes
	a.fieldMap["withdraw"] = a.Withdraw
	a.fieldMap["withdraw_times"] = a.WithdrawTimes
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentTransactionType) clone(db *gorm.DB) agentTransactionType {
	a.agentTransactionTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentTransactionType) replaceDB(db *gorm.DB) agentTransactionType {
	a.agentTransactionTypeDo.ReplaceDB(db)
	return a
}

type agentTransactionTypeDo struct{ gen.DO }

type IAgentTransactionTypeDo interface {
	gen.SubQuery
	Debug() IAgentTransactionTypeDo
	WithContext(ctx context.Context) IAgentTransactionTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentTransactionTypeDo
	WriteDB() IAgentTransactionTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentTransactionTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentTransactionTypeDo
	Not(conds ...gen.Condition) IAgentTransactionTypeDo
	Or(conds ...gen.Condition) IAgentTransactionTypeDo
	Select(conds ...field.Expr) IAgentTransactionTypeDo
	Where(conds ...gen.Condition) IAgentTransactionTypeDo
	Order(conds ...field.Expr) IAgentTransactionTypeDo
	Distinct(cols ...field.Expr) IAgentTransactionTypeDo
	Omit(cols ...field.Expr) IAgentTransactionTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo
	Group(cols ...field.Expr) IAgentTransactionTypeDo
	Having(conds ...gen.Condition) IAgentTransactionTypeDo
	Limit(limit int) IAgentTransactionTypeDo
	Offset(offset int) IAgentTransactionTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransactionTypeDo
	Unscoped() IAgentTransactionTypeDo
	Create(values ...*model.AgentTransactionType) error
	CreateInBatches(values []*model.AgentTransactionType, batchSize int) error
	Save(values ...*model.AgentTransactionType) error
	First() (*model.AgentTransactionType, error)
	Take() (*model.AgentTransactionType, error)
	Last() (*model.AgentTransactionType, error)
	Find() ([]*model.AgentTransactionType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransactionType, err error)
	FindInBatches(result *[]*model.AgentTransactionType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentTransactionType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentTransactionTypeDo
	Assign(attrs ...field.AssignExpr) IAgentTransactionTypeDo
	Joins(fields ...field.RelationField) IAgentTransactionTypeDo
	Preload(fields ...field.RelationField) IAgentTransactionTypeDo
	FirstOrInit() (*model.AgentTransactionType, error)
	FirstOrCreate() (*model.AgentTransactionType, error)
	FindByPage(offset int, limit int) (result []*model.AgentTransactionType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentTransactionTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentTransactionTypeDo) Debug() IAgentTransactionTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a agentTransactionTypeDo) WithContext(ctx context.Context) IAgentTransactionTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentTransactionTypeDo) ReadDB() IAgentTransactionTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentTransactionTypeDo) WriteDB() IAgentTransactionTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentTransactionTypeDo) Session(config *gorm.Session) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentTransactionTypeDo) Clauses(conds ...clause.Expression) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentTransactionTypeDo) Returning(value interface{}, columns ...string) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentTransactionTypeDo) Not(conds ...gen.Condition) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentTransactionTypeDo) Or(conds ...gen.Condition) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentTransactionTypeDo) Select(conds ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentTransactionTypeDo) Where(conds ...gen.Condition) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentTransactionTypeDo) Order(conds ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentTransactionTypeDo) Distinct(cols ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentTransactionTypeDo) Omit(cols ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentTransactionTypeDo) Join(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentTransactionTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentTransactionTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentTransactionTypeDo) Group(cols ...field.Expr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentTransactionTypeDo) Having(conds ...gen.Condition) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentTransactionTypeDo) Limit(limit int) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentTransactionTypeDo) Offset(offset int) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentTransactionTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentTransactionTypeDo) Unscoped() IAgentTransactionTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentTransactionTypeDo) Create(values ...*model.AgentTransactionType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentTransactionTypeDo) CreateInBatches(values []*model.AgentTransactionType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentTransactionTypeDo) Save(values ...*model.AgentTransactionType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentTransactionTypeDo) First() (*model.AgentTransactionType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransactionType), nil
	}
}

func (a agentTransactionTypeDo) Take() (*model.AgentTransactionType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransactionType), nil
	}
}

func (a agentTransactionTypeDo) Last() (*model.AgentTransactionType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransactionType), nil
	}
}

func (a agentTransactionTypeDo) Find() ([]*model.AgentTransactionType, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentTransactionType), err
}

func (a agentTransactionTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransactionType, err error) {
	buf := make([]*model.AgentTransactionType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentTransactionTypeDo) FindInBatches(result *[]*model.AgentTransactionType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentTransactionTypeDo) Attrs(attrs ...field.AssignExpr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentTransactionTypeDo) Assign(attrs ...field.AssignExpr) IAgentTransactionTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentTransactionTypeDo) Joins(fields ...field.RelationField) IAgentTransactionTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentTransactionTypeDo) Preload(fields ...field.RelationField) IAgentTransactionTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentTransactionTypeDo) FirstOrInit() (*model.AgentTransactionType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransactionType), nil
	}
}

func (a agentTransactionTypeDo) FirstOrCreate() (*model.AgentTransactionType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransactionType), nil
	}
}

func (a agentTransactionTypeDo) FindByPage(offset int, limit int) (result []*model.AgentTransactionType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentTransactionTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentTransactionTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentTransactionTypeDo) Delete(models ...*model.AgentTransactionType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentTransactionTypeDo) withDO(do gen.Dao) *agentTransactionTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
