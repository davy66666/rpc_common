// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserPvLog(db *gorm.DB, opts ...gen.DOOption) userPvLog {
	_userPvLog := userPvLog{}

	_userPvLog.userPvLogDo.UseDB(db, opts...)
	_userPvLog.userPvLogDo.UseModel(&model.UserPvLog{})

	tableName := _userPvLog.userPvLogDo.TableName()
	_userPvLog.ALL = field.NewAsterisk(tableName)
	_userPvLog.ID = field.NewInt64(tableName, "id")
	_userPvLog.UserID = field.NewInt64(tableName, "user_id")
	_userPvLog.Username = field.NewString(tableName, "username")
	_userPvLog.RouteURL = field.NewString(tableName, "route_url")
	_userPvLog.IP = field.NewString(tableName, "ip")
	_userPvLog.IPArea = field.NewString(tableName, "ip_area")
	_userPvLog.Plat = field.NewInt64(tableName, "plat")
	_userPvLog.CreatedAt = field.NewField(tableName, "created_at")
	_userPvLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userPvLog.fillFieldMap()

	return _userPvLog
}

// userPvLog 用户访问记录表
type userPvLog struct {
	userPvLogDo userPvLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64  // 用户id
	Username  field.String // 用户名
	RouteURL  field.String // 路由地址
	IP        field.String // 用户IP
	IPArea    field.String // ip所在地址
	Plat      field.Int64  // 平台
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userPvLog) Table(newTableName string) *userPvLog {
	u.userPvLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPvLog) As(alias string) *userPvLog {
	u.userPvLogDo.DO = *(u.userPvLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPvLog) updateTableName(table string) *userPvLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.RouteURL = field.NewString(table, "route_url")
	u.IP = field.NewString(table, "ip")
	u.IPArea = field.NewString(table, "ip_area")
	u.Plat = field.NewInt64(table, "plat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userPvLog) WithContext(ctx context.Context) IUserPvLogDo {
	return u.userPvLogDo.WithContext(ctx)
}

func (u userPvLog) TableName() string { return u.userPvLogDo.TableName() }

func (u userPvLog) Alias() string { return u.userPvLogDo.Alias() }

func (u userPvLog) Columns(cols ...field.Expr) gen.Columns { return u.userPvLogDo.Columns(cols...) }

func (u *userPvLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPvLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["route_url"] = u.RouteURL
	u.fieldMap["ip"] = u.IP
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userPvLog) clone(db *gorm.DB) userPvLog {
	u.userPvLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPvLog) replaceDB(db *gorm.DB) userPvLog {
	u.userPvLogDo.ReplaceDB(db)
	return u
}

type userPvLogDo struct{ gen.DO }

type IUserPvLogDo interface {
	gen.SubQuery
	Debug() IUserPvLogDo
	WithContext(ctx context.Context) IUserPvLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPvLogDo
	WriteDB() IUserPvLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPvLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPvLogDo
	Not(conds ...gen.Condition) IUserPvLogDo
	Or(conds ...gen.Condition) IUserPvLogDo
	Select(conds ...field.Expr) IUserPvLogDo
	Where(conds ...gen.Condition) IUserPvLogDo
	Order(conds ...field.Expr) IUserPvLogDo
	Distinct(cols ...field.Expr) IUserPvLogDo
	Omit(cols ...field.Expr) IUserPvLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserPvLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPvLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPvLogDo
	Group(cols ...field.Expr) IUserPvLogDo
	Having(conds ...gen.Condition) IUserPvLogDo
	Limit(limit int) IUserPvLogDo
	Offset(offset int) IUserPvLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPvLogDo
	Unscoped() IUserPvLogDo
	Create(values ...*model.UserPvLog) error
	CreateInBatches(values []*model.UserPvLog, batchSize int) error
	Save(values ...*model.UserPvLog) error
	First() (*model.UserPvLog, error)
	Take() (*model.UserPvLog, error)
	Last() (*model.UserPvLog, error)
	Find() ([]*model.UserPvLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPvLog, err error)
	FindInBatches(result *[]*model.UserPvLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPvLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPvLogDo
	Assign(attrs ...field.AssignExpr) IUserPvLogDo
	Joins(fields ...field.RelationField) IUserPvLogDo
	Preload(fields ...field.RelationField) IUserPvLogDo
	FirstOrInit() (*model.UserPvLog, error)
	FirstOrCreate() (*model.UserPvLog, error)
	FindByPage(offset int, limit int) (result []*model.UserPvLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPvLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPvLogDo) Debug() IUserPvLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userPvLogDo) WithContext(ctx context.Context) IUserPvLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPvLogDo) ReadDB() IUserPvLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPvLogDo) WriteDB() IUserPvLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPvLogDo) Session(config *gorm.Session) IUserPvLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPvLogDo) Clauses(conds ...clause.Expression) IUserPvLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPvLogDo) Returning(value interface{}, columns ...string) IUserPvLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPvLogDo) Not(conds ...gen.Condition) IUserPvLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPvLogDo) Or(conds ...gen.Condition) IUserPvLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPvLogDo) Select(conds ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPvLogDo) Where(conds ...gen.Condition) IUserPvLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPvLogDo) Order(conds ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPvLogDo) Distinct(cols ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPvLogDo) Omit(cols ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPvLogDo) Join(table schema.Tabler, on ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPvLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPvLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPvLogDo) Group(cols ...field.Expr) IUserPvLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPvLogDo) Having(conds ...gen.Condition) IUserPvLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPvLogDo) Limit(limit int) IUserPvLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPvLogDo) Offset(offset int) IUserPvLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPvLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPvLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPvLogDo) Unscoped() IUserPvLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPvLogDo) Create(values ...*model.UserPvLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPvLogDo) CreateInBatches(values []*model.UserPvLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPvLogDo) Save(values ...*model.UserPvLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPvLogDo) First() (*model.UserPvLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvLog), nil
	}
}

func (u userPvLogDo) Take() (*model.UserPvLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvLog), nil
	}
}

func (u userPvLogDo) Last() (*model.UserPvLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvLog), nil
	}
}

func (u userPvLogDo) Find() ([]*model.UserPvLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPvLog), err
}

func (u userPvLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPvLog, err error) {
	buf := make([]*model.UserPvLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPvLogDo) FindInBatches(result *[]*model.UserPvLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPvLogDo) Attrs(attrs ...field.AssignExpr) IUserPvLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPvLogDo) Assign(attrs ...field.AssignExpr) IUserPvLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPvLogDo) Joins(fields ...field.RelationField) IUserPvLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPvLogDo) Preload(fields ...field.RelationField) IUserPvLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPvLogDo) FirstOrInit() (*model.UserPvLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvLog), nil
	}
}

func (u userPvLogDo) FirstOrCreate() (*model.UserPvLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvLog), nil
	}
}

func (u userPvLogDo) FindByPage(offset int, limit int) (result []*model.UserPvLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPvLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPvLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPvLogDo) Delete(models ...*model.UserPvLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPvLogDo) withDO(do gen.Dao) *userPvLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
