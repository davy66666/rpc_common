// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRecommendFanshuiRecord(db *gorm.DB, opts ...gen.DOOption) userRecommendFanshuiRecord {
	_userRecommendFanshuiRecord := userRecommendFanshuiRecord{}

	_userRecommendFanshuiRecord.userRecommendFanshuiRecordDo.UseDB(db, opts...)
	_userRecommendFanshuiRecord.userRecommendFanshuiRecordDo.UseModel(&model.UserRecommendFanshuiRecord{})

	tableName := _userRecommendFanshuiRecord.userRecommendFanshuiRecordDo.TableName()
	_userRecommendFanshuiRecord.ALL = field.NewAsterisk(tableName)
	_userRecommendFanshuiRecord.ID = field.NewInt64(tableName, "id")
	_userRecommendFanshuiRecord.UserID = field.NewInt64(tableName, "user_id")
	_userRecommendFanshuiRecord.FromUserID = field.NewInt64(tableName, "from_user_id")
	_userRecommendFanshuiRecord.DateAt = field.NewString(tableName, "date_at")
	_userRecommendFanshuiRecord.IsFanshui = field.NewInt64(tableName, "is_fanshui")
	_userRecommendFanshuiRecord.UserFanshuisID = field.NewInt64(tableName, "user_fanshuis_id")
	_userRecommendFanshuiRecord.TotalFanshui = field.NewFloat64(tableName, "total_fanshui")
	_userRecommendFanshuiRecord.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userRecommendFanshuiRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userRecommendFanshuiRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRecommendFanshuiRecord.fillFieldMap()

	return _userRecommendFanshuiRecord
}

// userRecommendFanshuiRecord 用户推荐人返水记录表
type userRecommendFanshuiRecord struct {
	userRecommendFanshuiRecordDo userRecommendFanshuiRecordDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64   // 用户id
	FromUserID     field.Int64   // 来源用户id
	DateAt         field.String  // 当天时间
	IsFanshui      field.Int64   // 0:未返水;1:返水进行中;2:已返水;
	UserFanshuisID field.Int64   // 用户返水表id
	TotalFanshui   field.Float64 // 返水金额
	ValidBetAmount field.Float64 // 有效投注金额
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userRecommendFanshuiRecord) Table(newTableName string) *userRecommendFanshuiRecord {
	u.userRecommendFanshuiRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRecommendFanshuiRecord) As(alias string) *userRecommendFanshuiRecord {
	u.userRecommendFanshuiRecordDo.DO = *(u.userRecommendFanshuiRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRecommendFanshuiRecord) updateTableName(table string) *userRecommendFanshuiRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.FromUserID = field.NewInt64(table, "from_user_id")
	u.DateAt = field.NewString(table, "date_at")
	u.IsFanshui = field.NewInt64(table, "is_fanshui")
	u.UserFanshuisID = field.NewInt64(table, "user_fanshuis_id")
	u.TotalFanshui = field.NewFloat64(table, "total_fanshui")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRecommendFanshuiRecord) WithContext(ctx context.Context) IUserRecommendFanshuiRecordDo {
	return u.userRecommendFanshuiRecordDo.WithContext(ctx)
}

func (u userRecommendFanshuiRecord) TableName() string {
	return u.userRecommendFanshuiRecordDo.TableName()
}

func (u userRecommendFanshuiRecord) Alias() string { return u.userRecommendFanshuiRecordDo.Alias() }

func (u userRecommendFanshuiRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userRecommendFanshuiRecordDo.Columns(cols...)
}

func (u *userRecommendFanshuiRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRecommendFanshuiRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["from_user_id"] = u.FromUserID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["is_fanshui"] = u.IsFanshui
	u.fieldMap["user_fanshuis_id"] = u.UserFanshuisID
	u.fieldMap["total_fanshui"] = u.TotalFanshui
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRecommendFanshuiRecord) clone(db *gorm.DB) userRecommendFanshuiRecord {
	u.userRecommendFanshuiRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRecommendFanshuiRecord) replaceDB(db *gorm.DB) userRecommendFanshuiRecord {
	u.userRecommendFanshuiRecordDo.ReplaceDB(db)
	return u
}

type userRecommendFanshuiRecordDo struct{ gen.DO }

type IUserRecommendFanshuiRecordDo interface {
	gen.SubQuery
	Debug() IUserRecommendFanshuiRecordDo
	WithContext(ctx context.Context) IUserRecommendFanshuiRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRecommendFanshuiRecordDo
	WriteDB() IUserRecommendFanshuiRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRecommendFanshuiRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRecommendFanshuiRecordDo
	Not(conds ...gen.Condition) IUserRecommendFanshuiRecordDo
	Or(conds ...gen.Condition) IUserRecommendFanshuiRecordDo
	Select(conds ...field.Expr) IUserRecommendFanshuiRecordDo
	Where(conds ...gen.Condition) IUserRecommendFanshuiRecordDo
	Order(conds ...field.Expr) IUserRecommendFanshuiRecordDo
	Distinct(cols ...field.Expr) IUserRecommendFanshuiRecordDo
	Omit(cols ...field.Expr) IUserRecommendFanshuiRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo
	Group(cols ...field.Expr) IUserRecommendFanshuiRecordDo
	Having(conds ...gen.Condition) IUserRecommendFanshuiRecordDo
	Limit(limit int) IUserRecommendFanshuiRecordDo
	Offset(offset int) IUserRecommendFanshuiRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRecommendFanshuiRecordDo
	Unscoped() IUserRecommendFanshuiRecordDo
	Create(values ...*model.UserRecommendFanshuiRecord) error
	CreateInBatches(values []*model.UserRecommendFanshuiRecord, batchSize int) error
	Save(values ...*model.UserRecommendFanshuiRecord) error
	First() (*model.UserRecommendFanshuiRecord, error)
	Take() (*model.UserRecommendFanshuiRecord, error)
	Last() (*model.UserRecommendFanshuiRecord, error)
	Find() ([]*model.UserRecommendFanshuiRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRecommendFanshuiRecord, err error)
	FindInBatches(result *[]*model.UserRecommendFanshuiRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRecommendFanshuiRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRecommendFanshuiRecordDo
	Assign(attrs ...field.AssignExpr) IUserRecommendFanshuiRecordDo
	Joins(fields ...field.RelationField) IUserRecommendFanshuiRecordDo
	Preload(fields ...field.RelationField) IUserRecommendFanshuiRecordDo
	FirstOrInit() (*model.UserRecommendFanshuiRecord, error)
	FirstOrCreate() (*model.UserRecommendFanshuiRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserRecommendFanshuiRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRecommendFanshuiRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRecommendFanshuiRecordDo) Debug() IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userRecommendFanshuiRecordDo) WithContext(ctx context.Context) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRecommendFanshuiRecordDo) ReadDB() IUserRecommendFanshuiRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRecommendFanshuiRecordDo) WriteDB() IUserRecommendFanshuiRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRecommendFanshuiRecordDo) Session(config *gorm.Session) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRecommendFanshuiRecordDo) Clauses(conds ...clause.Expression) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRecommendFanshuiRecordDo) Returning(value interface{}, columns ...string) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRecommendFanshuiRecordDo) Not(conds ...gen.Condition) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRecommendFanshuiRecordDo) Or(conds ...gen.Condition) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRecommendFanshuiRecordDo) Select(conds ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRecommendFanshuiRecordDo) Where(conds ...gen.Condition) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRecommendFanshuiRecordDo) Order(conds ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRecommendFanshuiRecordDo) Distinct(cols ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRecommendFanshuiRecordDo) Omit(cols ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRecommendFanshuiRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRecommendFanshuiRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRecommendFanshuiRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRecommendFanshuiRecordDo) Group(cols ...field.Expr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRecommendFanshuiRecordDo) Having(conds ...gen.Condition) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRecommendFanshuiRecordDo) Limit(limit int) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRecommendFanshuiRecordDo) Offset(offset int) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRecommendFanshuiRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRecommendFanshuiRecordDo) Unscoped() IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRecommendFanshuiRecordDo) Create(values ...*model.UserRecommendFanshuiRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRecommendFanshuiRecordDo) CreateInBatches(values []*model.UserRecommendFanshuiRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRecommendFanshuiRecordDo) Save(values ...*model.UserRecommendFanshuiRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRecommendFanshuiRecordDo) First() (*model.UserRecommendFanshuiRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecommendFanshuiRecord), nil
	}
}

func (u userRecommendFanshuiRecordDo) Take() (*model.UserRecommendFanshuiRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecommendFanshuiRecord), nil
	}
}

func (u userRecommendFanshuiRecordDo) Last() (*model.UserRecommendFanshuiRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecommendFanshuiRecord), nil
	}
}

func (u userRecommendFanshuiRecordDo) Find() ([]*model.UserRecommendFanshuiRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRecommendFanshuiRecord), err
}

func (u userRecommendFanshuiRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRecommendFanshuiRecord, err error) {
	buf := make([]*model.UserRecommendFanshuiRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRecommendFanshuiRecordDo) FindInBatches(result *[]*model.UserRecommendFanshuiRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRecommendFanshuiRecordDo) Attrs(attrs ...field.AssignExpr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRecommendFanshuiRecordDo) Assign(attrs ...field.AssignExpr) IUserRecommendFanshuiRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRecommendFanshuiRecordDo) Joins(fields ...field.RelationField) IUserRecommendFanshuiRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRecommendFanshuiRecordDo) Preload(fields ...field.RelationField) IUserRecommendFanshuiRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRecommendFanshuiRecordDo) FirstOrInit() (*model.UserRecommendFanshuiRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecommendFanshuiRecord), nil
	}
}

func (u userRecommendFanshuiRecordDo) FirstOrCreate() (*model.UserRecommendFanshuiRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecommendFanshuiRecord), nil
	}
}

func (u userRecommendFanshuiRecordDo) FindByPage(offset int, limit int) (result []*model.UserRecommendFanshuiRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRecommendFanshuiRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRecommendFanshuiRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRecommendFanshuiRecordDo) Delete(models ...*model.UserRecommendFanshuiRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRecommendFanshuiRecordDo) withDO(do gen.Dao) *userRecommendFanshuiRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
