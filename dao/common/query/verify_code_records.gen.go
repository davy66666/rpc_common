// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newVerifyCodeRecord(db *gorm.DB, opts ...gen.DOOption) verifyCodeRecord {
	_verifyCodeRecord := verifyCodeRecord{}

	_verifyCodeRecord.verifyCodeRecordDo.UseDB(db, opts...)
	_verifyCodeRecord.verifyCodeRecordDo.UseModel(&model.VerifyCodeRecord{})

	tableName := _verifyCodeRecord.verifyCodeRecordDo.TableName()
	_verifyCodeRecord.ALL = field.NewAsterisk(tableName)
	_verifyCodeRecord.ID = field.NewInt64(tableName, "id")
	_verifyCodeRecord.Code = field.NewString(tableName, "code")
	_verifyCodeRecord.SendObject = field.NewString(tableName, "send_object")
	_verifyCodeRecord.Type = field.NewInt64(tableName, "type")
	_verifyCodeRecord.SendTime = field.NewField(tableName, "send_time")
	_verifyCodeRecord.ExpireTime = field.NewField(tableName, "expire_time")
	_verifyCodeRecord.CreatedAt = field.NewField(tableName, "created_at")
	_verifyCodeRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_verifyCodeRecord.fillFieldMap()

	return _verifyCodeRecord
}

// verifyCodeRecord 验证码发送记录表
type verifyCodeRecord struct {
	verifyCodeRecordDo verifyCodeRecordDo

	ALL        field.Asterisk
	ID         field.Int64
	Code       field.String // 验证码内容
	SendObject field.String // 发送对象：手机号或邮箱
	Type       field.Int64  // 1:手机验证码, 2:邮箱验证码
	SendTime   field.Field  // 发送时间
	ExpireTime field.Field  // 过期时间
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (v verifyCodeRecord) Table(newTableName string) *verifyCodeRecord {
	v.verifyCodeRecordDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v verifyCodeRecord) As(alias string) *verifyCodeRecord {
	v.verifyCodeRecordDo.DO = *(v.verifyCodeRecordDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *verifyCodeRecord) updateTableName(table string) *verifyCodeRecord {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.Code = field.NewString(table, "code")
	v.SendObject = field.NewString(table, "send_object")
	v.Type = field.NewInt64(table, "type")
	v.SendTime = field.NewField(table, "send_time")
	v.ExpireTime = field.NewField(table, "expire_time")
	v.CreatedAt = field.NewField(table, "created_at")
	v.UpdatedAt = field.NewField(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *verifyCodeRecord) WithContext(ctx context.Context) IVerifyCodeRecordDo {
	return v.verifyCodeRecordDo.WithContext(ctx)
}

func (v verifyCodeRecord) TableName() string { return v.verifyCodeRecordDo.TableName() }

func (v verifyCodeRecord) Alias() string { return v.verifyCodeRecordDo.Alias() }

func (v verifyCodeRecord) Columns(cols ...field.Expr) gen.Columns {
	return v.verifyCodeRecordDo.Columns(cols...)
}

func (v *verifyCodeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *verifyCodeRecord) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 8)
	v.fieldMap["id"] = v.ID
	v.fieldMap["code"] = v.Code
	v.fieldMap["send_object"] = v.SendObject
	v.fieldMap["type"] = v.Type
	v.fieldMap["send_time"] = v.SendTime
	v.fieldMap["expire_time"] = v.ExpireTime
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v verifyCodeRecord) clone(db *gorm.DB) verifyCodeRecord {
	v.verifyCodeRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v verifyCodeRecord) replaceDB(db *gorm.DB) verifyCodeRecord {
	v.verifyCodeRecordDo.ReplaceDB(db)
	return v
}

type verifyCodeRecordDo struct{ gen.DO }

type IVerifyCodeRecordDo interface {
	gen.SubQuery
	Debug() IVerifyCodeRecordDo
	WithContext(ctx context.Context) IVerifyCodeRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVerifyCodeRecordDo
	WriteDB() IVerifyCodeRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVerifyCodeRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVerifyCodeRecordDo
	Not(conds ...gen.Condition) IVerifyCodeRecordDo
	Or(conds ...gen.Condition) IVerifyCodeRecordDo
	Select(conds ...field.Expr) IVerifyCodeRecordDo
	Where(conds ...gen.Condition) IVerifyCodeRecordDo
	Order(conds ...field.Expr) IVerifyCodeRecordDo
	Distinct(cols ...field.Expr) IVerifyCodeRecordDo
	Omit(cols ...field.Expr) IVerifyCodeRecordDo
	Join(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo
	Group(cols ...field.Expr) IVerifyCodeRecordDo
	Having(conds ...gen.Condition) IVerifyCodeRecordDo
	Limit(limit int) IVerifyCodeRecordDo
	Offset(offset int) IVerifyCodeRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVerifyCodeRecordDo
	Unscoped() IVerifyCodeRecordDo
	Create(values ...*model.VerifyCodeRecord) error
	CreateInBatches(values []*model.VerifyCodeRecord, batchSize int) error
	Save(values ...*model.VerifyCodeRecord) error
	First() (*model.VerifyCodeRecord, error)
	Take() (*model.VerifyCodeRecord, error)
	Last() (*model.VerifyCodeRecord, error)
	Find() ([]*model.VerifyCodeRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VerifyCodeRecord, err error)
	FindInBatches(result *[]*model.VerifyCodeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VerifyCodeRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVerifyCodeRecordDo
	Assign(attrs ...field.AssignExpr) IVerifyCodeRecordDo
	Joins(fields ...field.RelationField) IVerifyCodeRecordDo
	Preload(fields ...field.RelationField) IVerifyCodeRecordDo
	FirstOrInit() (*model.VerifyCodeRecord, error)
	FirstOrCreate() (*model.VerifyCodeRecord, error)
	FindByPage(offset int, limit int) (result []*model.VerifyCodeRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVerifyCodeRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v verifyCodeRecordDo) Debug() IVerifyCodeRecordDo {
	return v.withDO(v.DO.Debug())
}

func (v verifyCodeRecordDo) WithContext(ctx context.Context) IVerifyCodeRecordDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v verifyCodeRecordDo) ReadDB() IVerifyCodeRecordDo {
	return v.Clauses(dbresolver.Read)
}

func (v verifyCodeRecordDo) WriteDB() IVerifyCodeRecordDo {
	return v.Clauses(dbresolver.Write)
}

func (v verifyCodeRecordDo) Session(config *gorm.Session) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Session(config))
}

func (v verifyCodeRecordDo) Clauses(conds ...clause.Expression) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v verifyCodeRecordDo) Returning(value interface{}, columns ...string) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v verifyCodeRecordDo) Not(conds ...gen.Condition) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v verifyCodeRecordDo) Or(conds ...gen.Condition) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v verifyCodeRecordDo) Select(conds ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v verifyCodeRecordDo) Where(conds ...gen.Condition) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v verifyCodeRecordDo) Order(conds ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v verifyCodeRecordDo) Distinct(cols ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v verifyCodeRecordDo) Omit(cols ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v verifyCodeRecordDo) Join(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v verifyCodeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v verifyCodeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v verifyCodeRecordDo) Group(cols ...field.Expr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v verifyCodeRecordDo) Having(conds ...gen.Condition) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v verifyCodeRecordDo) Limit(limit int) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v verifyCodeRecordDo) Offset(offset int) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v verifyCodeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v verifyCodeRecordDo) Unscoped() IVerifyCodeRecordDo {
	return v.withDO(v.DO.Unscoped())
}

func (v verifyCodeRecordDo) Create(values ...*model.VerifyCodeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v verifyCodeRecordDo) CreateInBatches(values []*model.VerifyCodeRecord, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v verifyCodeRecordDo) Save(values ...*model.VerifyCodeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v verifyCodeRecordDo) First() (*model.VerifyCodeRecord, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCodeRecord), nil
	}
}

func (v verifyCodeRecordDo) Take() (*model.VerifyCodeRecord, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCodeRecord), nil
	}
}

func (v verifyCodeRecordDo) Last() (*model.VerifyCodeRecord, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCodeRecord), nil
	}
}

func (v verifyCodeRecordDo) Find() ([]*model.VerifyCodeRecord, error) {
	result, err := v.DO.Find()
	return result.([]*model.VerifyCodeRecord), err
}

func (v verifyCodeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VerifyCodeRecord, err error) {
	buf := make([]*model.VerifyCodeRecord, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v verifyCodeRecordDo) FindInBatches(result *[]*model.VerifyCodeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v verifyCodeRecordDo) Attrs(attrs ...field.AssignExpr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v verifyCodeRecordDo) Assign(attrs ...field.AssignExpr) IVerifyCodeRecordDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v verifyCodeRecordDo) Joins(fields ...field.RelationField) IVerifyCodeRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v verifyCodeRecordDo) Preload(fields ...field.RelationField) IVerifyCodeRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v verifyCodeRecordDo) FirstOrInit() (*model.VerifyCodeRecord, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCodeRecord), nil
	}
}

func (v verifyCodeRecordDo) FirstOrCreate() (*model.VerifyCodeRecord, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCodeRecord), nil
	}
}

func (v verifyCodeRecordDo) FindByPage(offset int, limit int) (result []*model.VerifyCodeRecord, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v verifyCodeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v verifyCodeRecordDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v verifyCodeRecordDo) Delete(models ...*model.VerifyCodeRecord) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *verifyCodeRecordDo) withDO(do gen.Dao) *verifyCodeRecordDo {
	v.DO = *do.(*gen.DO)
	return v
}
