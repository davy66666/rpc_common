// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGiftMoneyLog(db *gorm.DB, opts ...gen.DOOption) giftMoneyLog {
	_giftMoneyLog := giftMoneyLog{}

	_giftMoneyLog.giftMoneyLogDo.UseDB(db, opts...)
	_giftMoneyLog.giftMoneyLogDo.UseModel(&model.GiftMoneyLog{})

	tableName := _giftMoneyLog.giftMoneyLogDo.TableName()
	_giftMoneyLog.ALL = field.NewAsterisk(tableName)
	_giftMoneyLog.ID = field.NewInt64(tableName, "id")
	_giftMoneyLog.BatchID = field.NewInt64(tableName, "batch_id")
	_giftMoneyLog.UserID = field.NewInt64(tableName, "user_id")
	_giftMoneyLog.Status = field.NewInt64(tableName, "status")
	_giftMoneyLog.FailMsg = field.NewString(tableName, "fail_msg")
	_giftMoneyLog.CreatedAt = field.NewField(tableName, "created_at")
	_giftMoneyLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_giftMoneyLog.Username = field.NewString(tableName, "username")

	_giftMoneyLog.fillFieldMap()

	return _giftMoneyLog
}

type giftMoneyLog struct {
	giftMoneyLogDo giftMoneyLogDo

	ALL       field.Asterisk
	ID        field.Int64
	BatchID   field.Int64  // 批次id
	UserID    field.Int64  // 会员id
	Status    field.Int64  // 是否成功 0:失败 1:成功
	FailMsg   field.String // 失败原因
	CreatedAt field.Field
	UpdatedAt field.Field
	Username  field.String

	fieldMap map[string]field.Expr
}

func (g giftMoneyLog) Table(newTableName string) *giftMoneyLog {
	g.giftMoneyLogDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g giftMoneyLog) As(alias string) *giftMoneyLog {
	g.giftMoneyLogDo.DO = *(g.giftMoneyLogDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *giftMoneyLog) updateTableName(table string) *giftMoneyLog {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.BatchID = field.NewInt64(table, "batch_id")
	g.UserID = field.NewInt64(table, "user_id")
	g.Status = field.NewInt64(table, "status")
	g.FailMsg = field.NewString(table, "fail_msg")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")
	g.Username = field.NewString(table, "username")

	g.fillFieldMap()

	return g
}

func (g *giftMoneyLog) WithContext(ctx context.Context) IGiftMoneyLogDo {
	return g.giftMoneyLogDo.WithContext(ctx)
}

func (g giftMoneyLog) TableName() string { return g.giftMoneyLogDo.TableName() }

func (g giftMoneyLog) Alias() string { return g.giftMoneyLogDo.Alias() }

func (g giftMoneyLog) Columns(cols ...field.Expr) gen.Columns {
	return g.giftMoneyLogDo.Columns(cols...)
}

func (g *giftMoneyLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *giftMoneyLog) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["batch_id"] = g.BatchID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["status"] = g.Status
	g.fieldMap["fail_msg"] = g.FailMsg
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["username"] = g.Username
}

func (g giftMoneyLog) clone(db *gorm.DB) giftMoneyLog {
	g.giftMoneyLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g giftMoneyLog) replaceDB(db *gorm.DB) giftMoneyLog {
	g.giftMoneyLogDo.ReplaceDB(db)
	return g
}

type giftMoneyLogDo struct{ gen.DO }

type IGiftMoneyLogDo interface {
	gen.SubQuery
	Debug() IGiftMoneyLogDo
	WithContext(ctx context.Context) IGiftMoneyLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiftMoneyLogDo
	WriteDB() IGiftMoneyLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiftMoneyLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiftMoneyLogDo
	Not(conds ...gen.Condition) IGiftMoneyLogDo
	Or(conds ...gen.Condition) IGiftMoneyLogDo
	Select(conds ...field.Expr) IGiftMoneyLogDo
	Where(conds ...gen.Condition) IGiftMoneyLogDo
	Order(conds ...field.Expr) IGiftMoneyLogDo
	Distinct(cols ...field.Expr) IGiftMoneyLogDo
	Omit(cols ...field.Expr) IGiftMoneyLogDo
	Join(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo
	Group(cols ...field.Expr) IGiftMoneyLogDo
	Having(conds ...gen.Condition) IGiftMoneyLogDo
	Limit(limit int) IGiftMoneyLogDo
	Offset(offset int) IGiftMoneyLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftMoneyLogDo
	Unscoped() IGiftMoneyLogDo
	Create(values ...*model.GiftMoneyLog) error
	CreateInBatches(values []*model.GiftMoneyLog, batchSize int) error
	Save(values ...*model.GiftMoneyLog) error
	First() (*model.GiftMoneyLog, error)
	Take() (*model.GiftMoneyLog, error)
	Last() (*model.GiftMoneyLog, error)
	Find() ([]*model.GiftMoneyLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftMoneyLog, err error)
	FindInBatches(result *[]*model.GiftMoneyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GiftMoneyLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiftMoneyLogDo
	Assign(attrs ...field.AssignExpr) IGiftMoneyLogDo
	Joins(fields ...field.RelationField) IGiftMoneyLogDo
	Preload(fields ...field.RelationField) IGiftMoneyLogDo
	FirstOrInit() (*model.GiftMoneyLog, error)
	FirstOrCreate() (*model.GiftMoneyLog, error)
	FindByPage(offset int, limit int) (result []*model.GiftMoneyLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiftMoneyLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giftMoneyLogDo) Debug() IGiftMoneyLogDo {
	return g.withDO(g.DO.Debug())
}

func (g giftMoneyLogDo) WithContext(ctx context.Context) IGiftMoneyLogDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giftMoneyLogDo) ReadDB() IGiftMoneyLogDo {
	return g.Clauses(dbresolver.Read)
}

func (g giftMoneyLogDo) WriteDB() IGiftMoneyLogDo {
	return g.Clauses(dbresolver.Write)
}

func (g giftMoneyLogDo) Session(config *gorm.Session) IGiftMoneyLogDo {
	return g.withDO(g.DO.Session(config))
}

func (g giftMoneyLogDo) Clauses(conds ...clause.Expression) IGiftMoneyLogDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giftMoneyLogDo) Returning(value interface{}, columns ...string) IGiftMoneyLogDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giftMoneyLogDo) Not(conds ...gen.Condition) IGiftMoneyLogDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giftMoneyLogDo) Or(conds ...gen.Condition) IGiftMoneyLogDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giftMoneyLogDo) Select(conds ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giftMoneyLogDo) Where(conds ...gen.Condition) IGiftMoneyLogDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giftMoneyLogDo) Order(conds ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giftMoneyLogDo) Distinct(cols ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giftMoneyLogDo) Omit(cols ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giftMoneyLogDo) Join(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giftMoneyLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giftMoneyLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giftMoneyLogDo) Group(cols ...field.Expr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giftMoneyLogDo) Having(conds ...gen.Condition) IGiftMoneyLogDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giftMoneyLogDo) Limit(limit int) IGiftMoneyLogDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giftMoneyLogDo) Offset(offset int) IGiftMoneyLogDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giftMoneyLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftMoneyLogDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giftMoneyLogDo) Unscoped() IGiftMoneyLogDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giftMoneyLogDo) Create(values ...*model.GiftMoneyLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giftMoneyLogDo) CreateInBatches(values []*model.GiftMoneyLog, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giftMoneyLogDo) Save(values ...*model.GiftMoneyLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giftMoneyLogDo) First() (*model.GiftMoneyLog, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyLog), nil
	}
}

func (g giftMoneyLogDo) Take() (*model.GiftMoneyLog, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyLog), nil
	}
}

func (g giftMoneyLogDo) Last() (*model.GiftMoneyLog, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyLog), nil
	}
}

func (g giftMoneyLogDo) Find() ([]*model.GiftMoneyLog, error) {
	result, err := g.DO.Find()
	return result.([]*model.GiftMoneyLog), err
}

func (g giftMoneyLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftMoneyLog, err error) {
	buf := make([]*model.GiftMoneyLog, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giftMoneyLogDo) FindInBatches(result *[]*model.GiftMoneyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giftMoneyLogDo) Attrs(attrs ...field.AssignExpr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giftMoneyLogDo) Assign(attrs ...field.AssignExpr) IGiftMoneyLogDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giftMoneyLogDo) Joins(fields ...field.RelationField) IGiftMoneyLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giftMoneyLogDo) Preload(fields ...field.RelationField) IGiftMoneyLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giftMoneyLogDo) FirstOrInit() (*model.GiftMoneyLog, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyLog), nil
	}
}

func (g giftMoneyLogDo) FirstOrCreate() (*model.GiftMoneyLog, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyLog), nil
	}
}

func (g giftMoneyLogDo) FindByPage(offset int, limit int) (result []*model.GiftMoneyLog, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giftMoneyLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giftMoneyLogDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giftMoneyLogDo) Delete(models ...*model.GiftMoneyLog) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giftMoneyLogDo) withDO(do gen.Dao) *giftMoneyLogDo {
	g.DO = *do.(*gen.DO)
	return g
}
