// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newBetAmount(db *gorm.DB, opts ...gen.DOOption) betAmount {
	_betAmount := betAmount{}

	_betAmount.betAmountDo.UseDB(db, opts...)
	_betAmount.betAmountDo.UseModel(&model.BetAmount{})

	tableName := _betAmount.betAmountDo.TableName()
	_betAmount.ALL = field.NewAsterisk(tableName)
	_betAmount.ID = field.NewInt64(tableName, "id")
	_betAmount.UserID = field.NewInt64(tableName, "user_id")
	_betAmount.Username = field.NewString(tableName, "username")
	_betAmount.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_betAmount.Comment = field.NewString(tableName, "comment")
	_betAmount.IsOpen = field.NewInt64(tableName, "is_open")
	_betAmount.DeleteAt = field.NewField(tableName, "delete_at")
	_betAmount.CreatedAt = field.NewField(tableName, "created_at")
	_betAmount.UpdatedAt = field.NewField(tableName, "updated_at")

	_betAmount.fillFieldMap()

	return _betAmount
}

type betAmount struct {
	betAmountDo betAmountDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64   // 用户id
	Username    field.String  // 用户名
	TotalAmount field.Float64 // 要求打码量
	Comment     field.String  // 备注
	IsOpen      field.Int64   // 是否开启0:否;1:是
	DeleteAt    field.Field   // 重置时间 就是失效时间
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (b betAmount) Table(newTableName string) *betAmount {
	b.betAmountDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b betAmount) As(alias string) *betAmount {
	b.betAmountDo.DO = *(b.betAmountDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *betAmount) updateTableName(table string) *betAmount {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.UserID = field.NewInt64(table, "user_id")
	b.Username = field.NewString(table, "username")
	b.TotalAmount = field.NewFloat64(table, "total_amount")
	b.Comment = field.NewString(table, "comment")
	b.IsOpen = field.NewInt64(table, "is_open")
	b.DeleteAt = field.NewField(table, "delete_at")
	b.CreatedAt = field.NewField(table, "created_at")
	b.UpdatedAt = field.NewField(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *betAmount) WithContext(ctx context.Context) IBetAmountDo {
	return b.betAmountDo.WithContext(ctx)
}

func (b betAmount) TableName() string { return b.betAmountDo.TableName() }

func (b betAmount) Alias() string { return b.betAmountDo.Alias() }

func (b betAmount) Columns(cols ...field.Expr) gen.Columns { return b.betAmountDo.Columns(cols...) }

func (b *betAmount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *betAmount) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 9)
	b.fieldMap["id"] = b.ID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["username"] = b.Username
	b.fieldMap["total_amount"] = b.TotalAmount
	b.fieldMap["comment"] = b.Comment
	b.fieldMap["is_open"] = b.IsOpen
	b.fieldMap["delete_at"] = b.DeleteAt
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b betAmount) clone(db *gorm.DB) betAmount {
	b.betAmountDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b betAmount) replaceDB(db *gorm.DB) betAmount {
	b.betAmountDo.ReplaceDB(db)
	return b
}

type betAmountDo struct{ gen.DO }

type IBetAmountDo interface {
	gen.SubQuery
	Debug() IBetAmountDo
	WithContext(ctx context.Context) IBetAmountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBetAmountDo
	WriteDB() IBetAmountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBetAmountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBetAmountDo
	Not(conds ...gen.Condition) IBetAmountDo
	Or(conds ...gen.Condition) IBetAmountDo
	Select(conds ...field.Expr) IBetAmountDo
	Where(conds ...gen.Condition) IBetAmountDo
	Order(conds ...field.Expr) IBetAmountDo
	Distinct(cols ...field.Expr) IBetAmountDo
	Omit(cols ...field.Expr) IBetAmountDo
	Join(table schema.Tabler, on ...field.Expr) IBetAmountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBetAmountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBetAmountDo
	Group(cols ...field.Expr) IBetAmountDo
	Having(conds ...gen.Condition) IBetAmountDo
	Limit(limit int) IBetAmountDo
	Offset(offset int) IBetAmountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBetAmountDo
	Unscoped() IBetAmountDo
	Create(values ...*model.BetAmount) error
	CreateInBatches(values []*model.BetAmount, batchSize int) error
	Save(values ...*model.BetAmount) error
	First() (*model.BetAmount, error)
	Take() (*model.BetAmount, error)
	Last() (*model.BetAmount, error)
	Find() ([]*model.BetAmount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BetAmount, err error)
	FindInBatches(result *[]*model.BetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BetAmount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBetAmountDo
	Assign(attrs ...field.AssignExpr) IBetAmountDo
	Joins(fields ...field.RelationField) IBetAmountDo
	Preload(fields ...field.RelationField) IBetAmountDo
	FirstOrInit() (*model.BetAmount, error)
	FirstOrCreate() (*model.BetAmount, error)
	FindByPage(offset int, limit int) (result []*model.BetAmount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBetAmountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b betAmountDo) Debug() IBetAmountDo {
	return b.withDO(b.DO.Debug())
}

func (b betAmountDo) WithContext(ctx context.Context) IBetAmountDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b betAmountDo) ReadDB() IBetAmountDo {
	return b.Clauses(dbresolver.Read)
}

func (b betAmountDo) WriteDB() IBetAmountDo {
	return b.Clauses(dbresolver.Write)
}

func (b betAmountDo) Session(config *gorm.Session) IBetAmountDo {
	return b.withDO(b.DO.Session(config))
}

func (b betAmountDo) Clauses(conds ...clause.Expression) IBetAmountDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b betAmountDo) Returning(value interface{}, columns ...string) IBetAmountDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b betAmountDo) Not(conds ...gen.Condition) IBetAmountDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b betAmountDo) Or(conds ...gen.Condition) IBetAmountDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b betAmountDo) Select(conds ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b betAmountDo) Where(conds ...gen.Condition) IBetAmountDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b betAmountDo) Order(conds ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b betAmountDo) Distinct(cols ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b betAmountDo) Omit(cols ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b betAmountDo) Join(table schema.Tabler, on ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b betAmountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b betAmountDo) RightJoin(table schema.Tabler, on ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b betAmountDo) Group(cols ...field.Expr) IBetAmountDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b betAmountDo) Having(conds ...gen.Condition) IBetAmountDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b betAmountDo) Limit(limit int) IBetAmountDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b betAmountDo) Offset(offset int) IBetAmountDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b betAmountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBetAmountDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b betAmountDo) Unscoped() IBetAmountDo {
	return b.withDO(b.DO.Unscoped())
}

func (b betAmountDo) Create(values ...*model.BetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b betAmountDo) CreateInBatches(values []*model.BetAmount, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b betAmountDo) Save(values ...*model.BetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b betAmountDo) First() (*model.BetAmount, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BetAmount), nil
	}
}

func (b betAmountDo) Take() (*model.BetAmount, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BetAmount), nil
	}
}

func (b betAmountDo) Last() (*model.BetAmount, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BetAmount), nil
	}
}

func (b betAmountDo) Find() ([]*model.BetAmount, error) {
	result, err := b.DO.Find()
	return result.([]*model.BetAmount), err
}

func (b betAmountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BetAmount, err error) {
	buf := make([]*model.BetAmount, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b betAmountDo) FindInBatches(result *[]*model.BetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b betAmountDo) Attrs(attrs ...field.AssignExpr) IBetAmountDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b betAmountDo) Assign(attrs ...field.AssignExpr) IBetAmountDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b betAmountDo) Joins(fields ...field.RelationField) IBetAmountDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b betAmountDo) Preload(fields ...field.RelationField) IBetAmountDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b betAmountDo) FirstOrInit() (*model.BetAmount, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BetAmount), nil
	}
}

func (b betAmountDo) FirstOrCreate() (*model.BetAmount, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BetAmount), nil
	}
}

func (b betAmountDo) FindByPage(offset int, limit int) (result []*model.BetAmount, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b betAmountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b betAmountDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b betAmountDo) Delete(models ...*model.BetAmount) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *betAmountDo) withDO(do gen.Dao) *betAmountDo {
	b.DO = *do.(*gen.DO)
	return b
}
