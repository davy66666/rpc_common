// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminUserAdminRole(db *gorm.DB, opts ...gen.DOOption) adminUserAdminRole {
	_adminUserAdminRole := adminUserAdminRole{}

	_adminUserAdminRole.adminUserAdminRoleDo.UseDB(db, opts...)
	_adminUserAdminRole.adminUserAdminRoleDo.UseModel(&model.AdminUserAdminRole{})

	tableName := _adminUserAdminRole.adminUserAdminRoleDo.TableName()
	_adminUserAdminRole.ALL = field.NewAsterisk(tableName)
	_adminUserAdminRole.ID = field.NewInt64(tableName, "id")
	_adminUserAdminRole.AdminUserID = field.NewInt64(tableName, "admin_user_id")
	_adminUserAdminRole.AdminRoleID = field.NewInt64(tableName, "admin_role_id")
	_adminUserAdminRole.CreatedAt = field.NewField(tableName, "created_at")
	_adminUserAdminRole.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminUserAdminRole.fillFieldMap()

	return _adminUserAdminRole
}

type adminUserAdminRole struct {
	adminUserAdminRoleDo adminUserAdminRoleDo

	ALL         field.Asterisk
	ID          field.Int64
	AdminUserID field.Int64
	AdminRoleID field.Int64
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a adminUserAdminRole) Table(newTableName string) *adminUserAdminRole {
	a.adminUserAdminRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminUserAdminRole) As(alias string) *adminUserAdminRole {
	a.adminUserAdminRoleDo.DO = *(a.adminUserAdminRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminUserAdminRole) updateTableName(table string) *adminUserAdminRole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminUserID = field.NewInt64(table, "admin_user_id")
	a.AdminRoleID = field.NewInt64(table, "admin_role_id")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminUserAdminRole) WithContext(ctx context.Context) IAdminUserAdminRoleDo {
	return a.adminUserAdminRoleDo.WithContext(ctx)
}

func (a adminUserAdminRole) TableName() string { return a.adminUserAdminRoleDo.TableName() }

func (a adminUserAdminRole) Alias() string { return a.adminUserAdminRoleDo.Alias() }

func (a adminUserAdminRole) Columns(cols ...field.Expr) gen.Columns {
	return a.adminUserAdminRoleDo.Columns(cols...)
}

func (a *adminUserAdminRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminUserAdminRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_user_id"] = a.AdminUserID
	a.fieldMap["admin_role_id"] = a.AdminRoleID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminUserAdminRole) clone(db *gorm.DB) adminUserAdminRole {
	a.adminUserAdminRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminUserAdminRole) replaceDB(db *gorm.DB) adminUserAdminRole {
	a.adminUserAdminRoleDo.ReplaceDB(db)
	return a
}

type adminUserAdminRoleDo struct{ gen.DO }

type IAdminUserAdminRoleDo interface {
	gen.SubQuery
	Debug() IAdminUserAdminRoleDo
	WithContext(ctx context.Context) IAdminUserAdminRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminUserAdminRoleDo
	WriteDB() IAdminUserAdminRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminUserAdminRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminUserAdminRoleDo
	Not(conds ...gen.Condition) IAdminUserAdminRoleDo
	Or(conds ...gen.Condition) IAdminUserAdminRoleDo
	Select(conds ...field.Expr) IAdminUserAdminRoleDo
	Where(conds ...gen.Condition) IAdminUserAdminRoleDo
	Order(conds ...field.Expr) IAdminUserAdminRoleDo
	Distinct(cols ...field.Expr) IAdminUserAdminRoleDo
	Omit(cols ...field.Expr) IAdminUserAdminRoleDo
	Join(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo
	Group(cols ...field.Expr) IAdminUserAdminRoleDo
	Having(conds ...gen.Condition) IAdminUserAdminRoleDo
	Limit(limit int) IAdminUserAdminRoleDo
	Offset(offset int) IAdminUserAdminRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserAdminRoleDo
	Unscoped() IAdminUserAdminRoleDo
	Create(values ...*model.AdminUserAdminRole) error
	CreateInBatches(values []*model.AdminUserAdminRole, batchSize int) error
	Save(values ...*model.AdminUserAdminRole) error
	First() (*model.AdminUserAdminRole, error)
	Take() (*model.AdminUserAdminRole, error)
	Last() (*model.AdminUserAdminRole, error)
	Find() ([]*model.AdminUserAdminRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUserAdminRole, err error)
	FindInBatches(result *[]*model.AdminUserAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminUserAdminRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminUserAdminRoleDo
	Assign(attrs ...field.AssignExpr) IAdminUserAdminRoleDo
	Joins(fields ...field.RelationField) IAdminUserAdminRoleDo
	Preload(fields ...field.RelationField) IAdminUserAdminRoleDo
	FirstOrInit() (*model.AdminUserAdminRole, error)
	FirstOrCreate() (*model.AdminUserAdminRole, error)
	FindByPage(offset int, limit int) (result []*model.AdminUserAdminRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminUserAdminRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminUserAdminRoleDo) Debug() IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a adminUserAdminRoleDo) WithContext(ctx context.Context) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminUserAdminRoleDo) ReadDB() IAdminUserAdminRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminUserAdminRoleDo) WriteDB() IAdminUserAdminRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminUserAdminRoleDo) Session(config *gorm.Session) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminUserAdminRoleDo) Clauses(conds ...clause.Expression) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminUserAdminRoleDo) Returning(value interface{}, columns ...string) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminUserAdminRoleDo) Not(conds ...gen.Condition) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminUserAdminRoleDo) Or(conds ...gen.Condition) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminUserAdminRoleDo) Select(conds ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminUserAdminRoleDo) Where(conds ...gen.Condition) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminUserAdminRoleDo) Order(conds ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminUserAdminRoleDo) Distinct(cols ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminUserAdminRoleDo) Omit(cols ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminUserAdminRoleDo) Join(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminUserAdminRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminUserAdminRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminUserAdminRoleDo) Group(cols ...field.Expr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminUserAdminRoleDo) Having(conds ...gen.Condition) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminUserAdminRoleDo) Limit(limit int) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminUserAdminRoleDo) Offset(offset int) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminUserAdminRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminUserAdminRoleDo) Unscoped() IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminUserAdminRoleDo) Create(values ...*model.AdminUserAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminUserAdminRoleDo) CreateInBatches(values []*model.AdminUserAdminRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminUserAdminRoleDo) Save(values ...*model.AdminUserAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminUserAdminRoleDo) First() (*model.AdminUserAdminRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserAdminRole), nil
	}
}

func (a adminUserAdminRoleDo) Take() (*model.AdminUserAdminRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserAdminRole), nil
	}
}

func (a adminUserAdminRoleDo) Last() (*model.AdminUserAdminRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserAdminRole), nil
	}
}

func (a adminUserAdminRoleDo) Find() ([]*model.AdminUserAdminRole, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminUserAdminRole), err
}

func (a adminUserAdminRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUserAdminRole, err error) {
	buf := make([]*model.AdminUserAdminRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminUserAdminRoleDo) FindInBatches(result *[]*model.AdminUserAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminUserAdminRoleDo) Attrs(attrs ...field.AssignExpr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminUserAdminRoleDo) Assign(attrs ...field.AssignExpr) IAdminUserAdminRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminUserAdminRoleDo) Joins(fields ...field.RelationField) IAdminUserAdminRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminUserAdminRoleDo) Preload(fields ...field.RelationField) IAdminUserAdminRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminUserAdminRoleDo) FirstOrInit() (*model.AdminUserAdminRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserAdminRole), nil
	}
}

func (a adminUserAdminRoleDo) FirstOrCreate() (*model.AdminUserAdminRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserAdminRole), nil
	}
}

func (a adminUserAdminRoleDo) FindByPage(offset int, limit int) (result []*model.AdminUserAdminRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminUserAdminRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminUserAdminRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminUserAdminRoleDo) Delete(models ...*model.AdminUserAdminRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminUserAdminRoleDo) withDO(do gen.Dao) *adminUserAdminRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
