// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityType(db *gorm.DB, opts ...gen.DOOption) activityType {
	_activityType := activityType{}

	_activityType.activityTypeDo.UseDB(db, opts...)
	_activityType.activityTypeDo.UseModel(&model.ActivityType{})

	tableName := _activityType.activityTypeDo.TableName()
	_activityType.ALL = field.NewAsterisk(tableName)
	_activityType.ID = field.NewInt64(tableName, "id")
	_activityType.Name = field.NewString(tableName, "name")
	_activityType.NameEn = field.NewString(tableName, "name_en")
	_activityType.IconURL = field.NewString(tableName, "icon_url")
	_activityType.CloseIconURL = field.NewString(tableName, "close_icon_url")
	_activityType.Remark = field.NewString(tableName, "remark")
	_activityType.Sort = field.NewInt64(tableName, "sort")
	_activityType.Plat = field.NewInt64(tableName, "plat")
	_activityType.IsOpen = field.NewInt64(tableName, "is_open")
	_activityType.CreatedAt = field.NewField(tableName, "created_at")
	_activityType.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityType.fillFieldMap()

	return _activityType
}

// activityType 活动分类表
type activityType struct {
	activityTypeDo activityTypeDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String // 活动类型名
	NameEn       field.String // 英文名称
	IconURL      field.String // 活动icon
	CloseIconURL field.String // 未激活情况下的icon
	Remark       field.String // 备注
	Sort         field.Int64  // 排序字段, 值越小排序靠前
	Plat         field.Int64  // 1:h5, 2:pc
	IsOpen       field.Int64  // 是否开启0:否;1:是
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (a activityType) Table(newTableName string) *activityType {
	a.activityTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityType) As(alias string) *activityType {
	a.activityTypeDo.DO = *(a.activityTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityType) updateTableName(table string) *activityType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.NameEn = field.NewString(table, "name_en")
	a.IconURL = field.NewString(table, "icon_url")
	a.CloseIconURL = field.NewString(table, "close_icon_url")
	a.Remark = field.NewString(table, "remark")
	a.Sort = field.NewInt64(table, "sort")
	a.Plat = field.NewInt64(table, "plat")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityType) WithContext(ctx context.Context) IActivityTypeDo {
	return a.activityTypeDo.WithContext(ctx)
}

func (a activityType) TableName() string { return a.activityTypeDo.TableName() }

func (a activityType) Alias() string { return a.activityTypeDo.Alias() }

func (a activityType) Columns(cols ...field.Expr) gen.Columns {
	return a.activityTypeDo.Columns(cols...)
}

func (a *activityType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["name_en"] = a.NameEn
	a.fieldMap["icon_url"] = a.IconURL
	a.fieldMap["close_icon_url"] = a.CloseIconURL
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityType) clone(db *gorm.DB) activityType {
	a.activityTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityType) replaceDB(db *gorm.DB) activityType {
	a.activityTypeDo.ReplaceDB(db)
	return a
}

type activityTypeDo struct{ gen.DO }

type IActivityTypeDo interface {
	gen.SubQuery
	Debug() IActivityTypeDo
	WithContext(ctx context.Context) IActivityTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityTypeDo
	WriteDB() IActivityTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityTypeDo
	Not(conds ...gen.Condition) IActivityTypeDo
	Or(conds ...gen.Condition) IActivityTypeDo
	Select(conds ...field.Expr) IActivityTypeDo
	Where(conds ...gen.Condition) IActivityTypeDo
	Order(conds ...field.Expr) IActivityTypeDo
	Distinct(cols ...field.Expr) IActivityTypeDo
	Omit(cols ...field.Expr) IActivityTypeDo
	Join(table schema.Tabler, on ...field.Expr) IActivityTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityTypeDo
	Group(cols ...field.Expr) IActivityTypeDo
	Having(conds ...gen.Condition) IActivityTypeDo
	Limit(limit int) IActivityTypeDo
	Offset(offset int) IActivityTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTypeDo
	Unscoped() IActivityTypeDo
	Create(values ...*model.ActivityType) error
	CreateInBatches(values []*model.ActivityType, batchSize int) error
	Save(values ...*model.ActivityType) error
	First() (*model.ActivityType, error)
	Take() (*model.ActivityType, error)
	Last() (*model.ActivityType, error)
	Find() ([]*model.ActivityType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityType, err error)
	FindInBatches(result *[]*model.ActivityType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityTypeDo
	Assign(attrs ...field.AssignExpr) IActivityTypeDo
	Joins(fields ...field.RelationField) IActivityTypeDo
	Preload(fields ...field.RelationField) IActivityTypeDo
	FirstOrInit() (*model.ActivityType, error)
	FirstOrCreate() (*model.ActivityType, error)
	FindByPage(offset int, limit int) (result []*model.ActivityType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityTypeDo) Debug() IActivityTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a activityTypeDo) WithContext(ctx context.Context) IActivityTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityTypeDo) ReadDB() IActivityTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityTypeDo) WriteDB() IActivityTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityTypeDo) Session(config *gorm.Session) IActivityTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityTypeDo) Clauses(conds ...clause.Expression) IActivityTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityTypeDo) Returning(value interface{}, columns ...string) IActivityTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityTypeDo) Not(conds ...gen.Condition) IActivityTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityTypeDo) Or(conds ...gen.Condition) IActivityTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityTypeDo) Select(conds ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityTypeDo) Where(conds ...gen.Condition) IActivityTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityTypeDo) Order(conds ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityTypeDo) Distinct(cols ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityTypeDo) Omit(cols ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityTypeDo) Join(table schema.Tabler, on ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityTypeDo) Group(cols ...field.Expr) IActivityTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityTypeDo) Having(conds ...gen.Condition) IActivityTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityTypeDo) Limit(limit int) IActivityTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityTypeDo) Offset(offset int) IActivityTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityTypeDo) Unscoped() IActivityTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityTypeDo) Create(values ...*model.ActivityType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityTypeDo) CreateInBatches(values []*model.ActivityType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityTypeDo) Save(values ...*model.ActivityType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityTypeDo) First() (*model.ActivityType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityType), nil
	}
}

func (a activityTypeDo) Take() (*model.ActivityType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityType), nil
	}
}

func (a activityTypeDo) Last() (*model.ActivityType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityType), nil
	}
}

func (a activityTypeDo) Find() ([]*model.ActivityType, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityType), err
}

func (a activityTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityType, err error) {
	buf := make([]*model.ActivityType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityTypeDo) FindInBatches(result *[]*model.ActivityType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityTypeDo) Attrs(attrs ...field.AssignExpr) IActivityTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityTypeDo) Assign(attrs ...field.AssignExpr) IActivityTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityTypeDo) Joins(fields ...field.RelationField) IActivityTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityTypeDo) Preload(fields ...field.RelationField) IActivityTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityTypeDo) FirstOrInit() (*model.ActivityType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityType), nil
	}
}

func (a activityTypeDo) FirstOrCreate() (*model.ActivityType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityType), nil
	}
}

func (a activityTypeDo) FindByPage(offset int, limit int) (result []*model.ActivityType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityTypeDo) Delete(models ...*model.ActivityType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityTypeDo) withDO(do gen.Dao) *activityTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
