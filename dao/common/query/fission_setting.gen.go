// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFissionSetting(db *gorm.DB, opts ...gen.DOOption) fissionSetting {
	_fissionSetting := fissionSetting{}

	_fissionSetting.fissionSettingDo.UseDB(db, opts...)
	_fissionSetting.fissionSettingDo.UseModel(&model.FissionSetting{})

	tableName := _fissionSetting.fissionSettingDo.TableName()
	_fissionSetting.ALL = field.NewAsterisk(tableName)
	_fissionSetting.ID = field.NewInt64(tableName, "id")
	_fissionSetting.FissionKey = field.NewString(tableName, "fission_key")
	_fissionSetting.FissionVal = field.NewString(tableName, "fission_val")
	_fissionSetting.IsOpen = field.NewInt64(tableName, "is_open")
	_fissionSetting.CreatedAt = field.NewField(tableName, "created_at")
	_fissionSetting.UpdatedAt = field.NewField(tableName, "updated_at")
	_fissionSetting.AdminUser = field.NewString(tableName, "admin_user")

	_fissionSetting.fillFieldMap()

	return _fissionSetting
}

type fissionSetting struct {
	fissionSettingDo fissionSettingDo

	ALL        field.Asterisk
	ID         field.Int64
	FissionKey field.String // 配置名称下标
	FissionVal field.String // 值
	IsOpen     field.Int64  // 是否启用
	CreatedAt  field.Field
	UpdatedAt  field.Field
	AdminUser  field.String

	fieldMap map[string]field.Expr
}

func (f fissionSetting) Table(newTableName string) *fissionSetting {
	f.fissionSettingDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fissionSetting) As(alias string) *fissionSetting {
	f.fissionSettingDo.DO = *(f.fissionSettingDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fissionSetting) updateTableName(table string) *fissionSetting {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FissionKey = field.NewString(table, "fission_key")
	f.FissionVal = field.NewString(table, "fission_val")
	f.IsOpen = field.NewInt64(table, "is_open")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")
	f.AdminUser = field.NewString(table, "admin_user")

	f.fillFieldMap()

	return f
}

func (f *fissionSetting) WithContext(ctx context.Context) IFissionSettingDo {
	return f.fissionSettingDo.WithContext(ctx)
}

func (f fissionSetting) TableName() string { return f.fissionSettingDo.TableName() }

func (f fissionSetting) Alias() string { return f.fissionSettingDo.Alias() }

func (f fissionSetting) Columns(cols ...field.Expr) gen.Columns {
	return f.fissionSettingDo.Columns(cols...)
}

func (f *fissionSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fissionSetting) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["fission_key"] = f.FissionKey
	f.fieldMap["fission_val"] = f.FissionVal
	f.fieldMap["is_open"] = f.IsOpen
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["admin_user"] = f.AdminUser
}

func (f fissionSetting) clone(db *gorm.DB) fissionSetting {
	f.fissionSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fissionSetting) replaceDB(db *gorm.DB) fissionSetting {
	f.fissionSettingDo.ReplaceDB(db)
	return f
}

type fissionSettingDo struct{ gen.DO }

type IFissionSettingDo interface {
	gen.SubQuery
	Debug() IFissionSettingDo
	WithContext(ctx context.Context) IFissionSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFissionSettingDo
	WriteDB() IFissionSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFissionSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFissionSettingDo
	Not(conds ...gen.Condition) IFissionSettingDo
	Or(conds ...gen.Condition) IFissionSettingDo
	Select(conds ...field.Expr) IFissionSettingDo
	Where(conds ...gen.Condition) IFissionSettingDo
	Order(conds ...field.Expr) IFissionSettingDo
	Distinct(cols ...field.Expr) IFissionSettingDo
	Omit(cols ...field.Expr) IFissionSettingDo
	Join(table schema.Tabler, on ...field.Expr) IFissionSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFissionSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFissionSettingDo
	Group(cols ...field.Expr) IFissionSettingDo
	Having(conds ...gen.Condition) IFissionSettingDo
	Limit(limit int) IFissionSettingDo
	Offset(offset int) IFissionSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionSettingDo
	Unscoped() IFissionSettingDo
	Create(values ...*model.FissionSetting) error
	CreateInBatches(values []*model.FissionSetting, batchSize int) error
	Save(values ...*model.FissionSetting) error
	First() (*model.FissionSetting, error)
	Take() (*model.FissionSetting, error)
	Last() (*model.FissionSetting, error)
	Find() ([]*model.FissionSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionSetting, err error)
	FindInBatches(result *[]*model.FissionSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FissionSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFissionSettingDo
	Assign(attrs ...field.AssignExpr) IFissionSettingDo
	Joins(fields ...field.RelationField) IFissionSettingDo
	Preload(fields ...field.RelationField) IFissionSettingDo
	FirstOrInit() (*model.FissionSetting, error)
	FirstOrCreate() (*model.FissionSetting, error)
	FindByPage(offset int, limit int) (result []*model.FissionSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFissionSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fissionSettingDo) Debug() IFissionSettingDo {
	return f.withDO(f.DO.Debug())
}

func (f fissionSettingDo) WithContext(ctx context.Context) IFissionSettingDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fissionSettingDo) ReadDB() IFissionSettingDo {
	return f.Clauses(dbresolver.Read)
}

func (f fissionSettingDo) WriteDB() IFissionSettingDo {
	return f.Clauses(dbresolver.Write)
}

func (f fissionSettingDo) Session(config *gorm.Session) IFissionSettingDo {
	return f.withDO(f.DO.Session(config))
}

func (f fissionSettingDo) Clauses(conds ...clause.Expression) IFissionSettingDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fissionSettingDo) Returning(value interface{}, columns ...string) IFissionSettingDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fissionSettingDo) Not(conds ...gen.Condition) IFissionSettingDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fissionSettingDo) Or(conds ...gen.Condition) IFissionSettingDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fissionSettingDo) Select(conds ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fissionSettingDo) Where(conds ...gen.Condition) IFissionSettingDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fissionSettingDo) Order(conds ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fissionSettingDo) Distinct(cols ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fissionSettingDo) Omit(cols ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fissionSettingDo) Join(table schema.Tabler, on ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fissionSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fissionSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fissionSettingDo) Group(cols ...field.Expr) IFissionSettingDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fissionSettingDo) Having(conds ...gen.Condition) IFissionSettingDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fissionSettingDo) Limit(limit int) IFissionSettingDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fissionSettingDo) Offset(offset int) IFissionSettingDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fissionSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionSettingDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fissionSettingDo) Unscoped() IFissionSettingDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fissionSettingDo) Create(values ...*model.FissionSetting) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fissionSettingDo) CreateInBatches(values []*model.FissionSetting, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fissionSettingDo) Save(values ...*model.FissionSetting) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fissionSettingDo) First() (*model.FissionSetting, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionSetting), nil
	}
}

func (f fissionSettingDo) Take() (*model.FissionSetting, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionSetting), nil
	}
}

func (f fissionSettingDo) Last() (*model.FissionSetting, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionSetting), nil
	}
}

func (f fissionSettingDo) Find() ([]*model.FissionSetting, error) {
	result, err := f.DO.Find()
	return result.([]*model.FissionSetting), err
}

func (f fissionSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionSetting, err error) {
	buf := make([]*model.FissionSetting, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fissionSettingDo) FindInBatches(result *[]*model.FissionSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fissionSettingDo) Attrs(attrs ...field.AssignExpr) IFissionSettingDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fissionSettingDo) Assign(attrs ...field.AssignExpr) IFissionSettingDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fissionSettingDo) Joins(fields ...field.RelationField) IFissionSettingDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fissionSettingDo) Preload(fields ...field.RelationField) IFissionSettingDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fissionSettingDo) FirstOrInit() (*model.FissionSetting, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionSetting), nil
	}
}

func (f fissionSettingDo) FirstOrCreate() (*model.FissionSetting, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionSetting), nil
	}
}

func (f fissionSettingDo) FindByPage(offset int, limit int) (result []*model.FissionSetting, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fissionSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fissionSettingDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fissionSettingDo) Delete(models ...*model.FissionSetting) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fissionSettingDo) withDO(do gen.Dao) *fissionSettingDo {
	f.DO = *do.(*gen.DO)
	return f
}
