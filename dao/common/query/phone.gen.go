// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPhone(db *gorm.DB, opts ...gen.DOOption) phone {
	_phone := phone{}

	_phone.phoneDo.UseDB(db, opts...)
	_phone.phoneDo.UseModel(&model.Phone{})

	tableName := _phone.phoneDo.TableName()
	_phone.ALL = field.NewAsterisk(tableName)
	_phone.Pref = field.NewString(tableName, "pref")
	_phone.Phone = field.NewString(tableName, "phone")
	_phone.Province = field.NewString(tableName, "province")
	_phone.City = field.NewString(tableName, "city")
	_phone.Isp = field.NewString(tableName, "isp")
	_phone.PostCode = field.NewString(tableName, "post_code")
	_phone.CityCode = field.NewString(tableName, "city_code")
	_phone.AreaCode = field.NewString(tableName, "area_code")
	_phone.ID = field.NewInt64(tableName, "id")

	_phone.fillFieldMap()

	return _phone
}

type phone struct {
	phoneDo phoneDo

	ALL      field.Asterisk
	Pref     field.String
	Phone    field.String
	Province field.String
	City     field.String
	Isp      field.String
	PostCode field.String
	CityCode field.String
	AreaCode field.String
	ID       field.Int64

	fieldMap map[string]field.Expr
}

func (p phone) Table(newTableName string) *phone {
	p.phoneDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p phone) As(alias string) *phone {
	p.phoneDo.DO = *(p.phoneDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *phone) updateTableName(table string) *phone {
	p.ALL = field.NewAsterisk(table)
	p.Pref = field.NewString(table, "pref")
	p.Phone = field.NewString(table, "phone")
	p.Province = field.NewString(table, "province")
	p.City = field.NewString(table, "city")
	p.Isp = field.NewString(table, "isp")
	p.PostCode = field.NewString(table, "post_code")
	p.CityCode = field.NewString(table, "city_code")
	p.AreaCode = field.NewString(table, "area_code")
	p.ID = field.NewInt64(table, "id")

	p.fillFieldMap()

	return p
}

func (p *phone) WithContext(ctx context.Context) IPhoneDo { return p.phoneDo.WithContext(ctx) }

func (p phone) TableName() string { return p.phoneDo.TableName() }

func (p phone) Alias() string { return p.phoneDo.Alias() }

func (p phone) Columns(cols ...field.Expr) gen.Columns { return p.phoneDo.Columns(cols...) }

func (p *phone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *phone) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["pref"] = p.Pref
	p.fieldMap["phone"] = p.Phone
	p.fieldMap["province"] = p.Province
	p.fieldMap["city"] = p.City
	p.fieldMap["isp"] = p.Isp
	p.fieldMap["post_code"] = p.PostCode
	p.fieldMap["city_code"] = p.CityCode
	p.fieldMap["area_code"] = p.AreaCode
	p.fieldMap["id"] = p.ID
}

func (p phone) clone(db *gorm.DB) phone {
	p.phoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p phone) replaceDB(db *gorm.DB) phone {
	p.phoneDo.ReplaceDB(db)
	return p
}

type phoneDo struct{ gen.DO }

type IPhoneDo interface {
	gen.SubQuery
	Debug() IPhoneDo
	WithContext(ctx context.Context) IPhoneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPhoneDo
	WriteDB() IPhoneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPhoneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPhoneDo
	Not(conds ...gen.Condition) IPhoneDo
	Or(conds ...gen.Condition) IPhoneDo
	Select(conds ...field.Expr) IPhoneDo
	Where(conds ...gen.Condition) IPhoneDo
	Order(conds ...field.Expr) IPhoneDo
	Distinct(cols ...field.Expr) IPhoneDo
	Omit(cols ...field.Expr) IPhoneDo
	Join(table schema.Tabler, on ...field.Expr) IPhoneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPhoneDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPhoneDo
	Group(cols ...field.Expr) IPhoneDo
	Having(conds ...gen.Condition) IPhoneDo
	Limit(limit int) IPhoneDo
	Offset(offset int) IPhoneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPhoneDo
	Unscoped() IPhoneDo
	Create(values ...*model.Phone) error
	CreateInBatches(values []*model.Phone, batchSize int) error
	Save(values ...*model.Phone) error
	First() (*model.Phone, error)
	Take() (*model.Phone, error)
	Last() (*model.Phone, error)
	Find() ([]*model.Phone, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Phone, err error)
	FindInBatches(result *[]*model.Phone, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Phone) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPhoneDo
	Assign(attrs ...field.AssignExpr) IPhoneDo
	Joins(fields ...field.RelationField) IPhoneDo
	Preload(fields ...field.RelationField) IPhoneDo
	FirstOrInit() (*model.Phone, error)
	FirstOrCreate() (*model.Phone, error)
	FindByPage(offset int, limit int) (result []*model.Phone, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPhoneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p phoneDo) Debug() IPhoneDo {
	return p.withDO(p.DO.Debug())
}

func (p phoneDo) WithContext(ctx context.Context) IPhoneDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p phoneDo) ReadDB() IPhoneDo {
	return p.Clauses(dbresolver.Read)
}

func (p phoneDo) WriteDB() IPhoneDo {
	return p.Clauses(dbresolver.Write)
}

func (p phoneDo) Session(config *gorm.Session) IPhoneDo {
	return p.withDO(p.DO.Session(config))
}

func (p phoneDo) Clauses(conds ...clause.Expression) IPhoneDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p phoneDo) Returning(value interface{}, columns ...string) IPhoneDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p phoneDo) Not(conds ...gen.Condition) IPhoneDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p phoneDo) Or(conds ...gen.Condition) IPhoneDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p phoneDo) Select(conds ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p phoneDo) Where(conds ...gen.Condition) IPhoneDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p phoneDo) Order(conds ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p phoneDo) Distinct(cols ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p phoneDo) Omit(cols ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p phoneDo) Join(table schema.Tabler, on ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p phoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p phoneDo) RightJoin(table schema.Tabler, on ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p phoneDo) Group(cols ...field.Expr) IPhoneDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p phoneDo) Having(conds ...gen.Condition) IPhoneDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p phoneDo) Limit(limit int) IPhoneDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p phoneDo) Offset(offset int) IPhoneDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p phoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPhoneDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p phoneDo) Unscoped() IPhoneDo {
	return p.withDO(p.DO.Unscoped())
}

func (p phoneDo) Create(values ...*model.Phone) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p phoneDo) CreateInBatches(values []*model.Phone, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p phoneDo) Save(values ...*model.Phone) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p phoneDo) First() (*model.Phone, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Phone), nil
	}
}

func (p phoneDo) Take() (*model.Phone, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Phone), nil
	}
}

func (p phoneDo) Last() (*model.Phone, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Phone), nil
	}
}

func (p phoneDo) Find() ([]*model.Phone, error) {
	result, err := p.DO.Find()
	return result.([]*model.Phone), err
}

func (p phoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Phone, err error) {
	buf := make([]*model.Phone, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p phoneDo) FindInBatches(result *[]*model.Phone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p phoneDo) Attrs(attrs ...field.AssignExpr) IPhoneDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p phoneDo) Assign(attrs ...field.AssignExpr) IPhoneDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p phoneDo) Joins(fields ...field.RelationField) IPhoneDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p phoneDo) Preload(fields ...field.RelationField) IPhoneDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p phoneDo) FirstOrInit() (*model.Phone, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Phone), nil
	}
}

func (p phoneDo) FirstOrCreate() (*model.Phone, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Phone), nil
	}
}

func (p phoneDo) FindByPage(offset int, limit int) (result []*model.Phone, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p phoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p phoneDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p phoneDo) Delete(models ...*model.Phone) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *phoneDo) withDO(do gen.Dao) *phoneDo {
	p.DO = *do.(*gen.DO)
	return p
}
