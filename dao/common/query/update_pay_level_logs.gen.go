// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUpdatePayLevelLog(db *gorm.DB, opts ...gen.DOOption) updatePayLevelLog {
	_updatePayLevelLog := updatePayLevelLog{}

	_updatePayLevelLog.updatePayLevelLogDo.UseDB(db, opts...)
	_updatePayLevelLog.updatePayLevelLogDo.UseModel(&model.UpdatePayLevelLog{})

	tableName := _updatePayLevelLog.updatePayLevelLogDo.TableName()
	_updatePayLevelLog.ALL = field.NewAsterisk(tableName)
	_updatePayLevelLog.ID = field.NewInt64(tableName, "id")
	_updatePayLevelLog.Username = field.NewString(tableName, "username")
	_updatePayLevelLog.UserID = field.NewInt64(tableName, "user_id")
	_updatePayLevelLog.Old = field.NewString(tableName, "old")
	_updatePayLevelLog.New = field.NewString(tableName, "new")
	_updatePayLevelLog.CreatedAt = field.NewField(tableName, "created_at")
	_updatePayLevelLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_updatePayLevelLog.AdminName = field.NewString(tableName, "admin_name")
	_updatePayLevelLog.Remark = field.NewString(tableName, "remark")

	_updatePayLevelLog.fillFieldMap()

	return _updatePayLevelLog
}

// updatePayLevelLog 批量更改会员支付分层日志表
type updatePayLevelLog struct {
	updatePayLevelLogDo updatePayLevelLogDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String // 会员名称
	UserID    field.Int64  // 会员id
	Old       field.String // 旧支付分层
	New       field.String // 新支付分层
	CreatedAt field.Field
	UpdatedAt field.Field
	AdminName field.String // 管理员
	Remark    field.String // 备注

	fieldMap map[string]field.Expr
}

func (u updatePayLevelLog) Table(newTableName string) *updatePayLevelLog {
	u.updatePayLevelLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u updatePayLevelLog) As(alias string) *updatePayLevelLog {
	u.updatePayLevelLogDo.DO = *(u.updatePayLevelLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *updatePayLevelLog) updateTableName(table string) *updatePayLevelLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.UserID = field.NewInt64(table, "user_id")
	u.Old = field.NewString(table, "old")
	u.New = field.NewString(table, "new")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.AdminName = field.NewString(table, "admin_name")
	u.Remark = field.NewString(table, "remark")

	u.fillFieldMap()

	return u
}

func (u *updatePayLevelLog) WithContext(ctx context.Context) IUpdatePayLevelLogDo {
	return u.updatePayLevelLogDo.WithContext(ctx)
}

func (u updatePayLevelLog) TableName() string { return u.updatePayLevelLogDo.TableName() }

func (u updatePayLevelLog) Alias() string { return u.updatePayLevelLogDo.Alias() }

func (u updatePayLevelLog) Columns(cols ...field.Expr) gen.Columns {
	return u.updatePayLevelLogDo.Columns(cols...)
}

func (u *updatePayLevelLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *updatePayLevelLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["old"] = u.Old
	u.fieldMap["new"] = u.New
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["admin_name"] = u.AdminName
	u.fieldMap["remark"] = u.Remark
}

func (u updatePayLevelLog) clone(db *gorm.DB) updatePayLevelLog {
	u.updatePayLevelLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u updatePayLevelLog) replaceDB(db *gorm.DB) updatePayLevelLog {
	u.updatePayLevelLogDo.ReplaceDB(db)
	return u
}

type updatePayLevelLogDo struct{ gen.DO }

type IUpdatePayLevelLogDo interface {
	gen.SubQuery
	Debug() IUpdatePayLevelLogDo
	WithContext(ctx context.Context) IUpdatePayLevelLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpdatePayLevelLogDo
	WriteDB() IUpdatePayLevelLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpdatePayLevelLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpdatePayLevelLogDo
	Not(conds ...gen.Condition) IUpdatePayLevelLogDo
	Or(conds ...gen.Condition) IUpdatePayLevelLogDo
	Select(conds ...field.Expr) IUpdatePayLevelLogDo
	Where(conds ...gen.Condition) IUpdatePayLevelLogDo
	Order(conds ...field.Expr) IUpdatePayLevelLogDo
	Distinct(cols ...field.Expr) IUpdatePayLevelLogDo
	Omit(cols ...field.Expr) IUpdatePayLevelLogDo
	Join(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo
	Group(cols ...field.Expr) IUpdatePayLevelLogDo
	Having(conds ...gen.Condition) IUpdatePayLevelLogDo
	Limit(limit int) IUpdatePayLevelLogDo
	Offset(offset int) IUpdatePayLevelLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdatePayLevelLogDo
	Unscoped() IUpdatePayLevelLogDo
	Create(values ...*model.UpdatePayLevelLog) error
	CreateInBatches(values []*model.UpdatePayLevelLog, batchSize int) error
	Save(values ...*model.UpdatePayLevelLog) error
	First() (*model.UpdatePayLevelLog, error)
	Take() (*model.UpdatePayLevelLog, error)
	Last() (*model.UpdatePayLevelLog, error)
	Find() ([]*model.UpdatePayLevelLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdatePayLevelLog, err error)
	FindInBatches(result *[]*model.UpdatePayLevelLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpdatePayLevelLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpdatePayLevelLogDo
	Assign(attrs ...field.AssignExpr) IUpdatePayLevelLogDo
	Joins(fields ...field.RelationField) IUpdatePayLevelLogDo
	Preload(fields ...field.RelationField) IUpdatePayLevelLogDo
	FirstOrInit() (*model.UpdatePayLevelLog, error)
	FirstOrCreate() (*model.UpdatePayLevelLog, error)
	FindByPage(offset int, limit int) (result []*model.UpdatePayLevelLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpdatePayLevelLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u updatePayLevelLogDo) Debug() IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Debug())
}

func (u updatePayLevelLogDo) WithContext(ctx context.Context) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u updatePayLevelLogDo) ReadDB() IUpdatePayLevelLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u updatePayLevelLogDo) WriteDB() IUpdatePayLevelLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u updatePayLevelLogDo) Session(config *gorm.Session) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u updatePayLevelLogDo) Clauses(conds ...clause.Expression) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u updatePayLevelLogDo) Returning(value interface{}, columns ...string) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u updatePayLevelLogDo) Not(conds ...gen.Condition) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u updatePayLevelLogDo) Or(conds ...gen.Condition) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u updatePayLevelLogDo) Select(conds ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u updatePayLevelLogDo) Where(conds ...gen.Condition) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u updatePayLevelLogDo) Order(conds ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u updatePayLevelLogDo) Distinct(cols ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u updatePayLevelLogDo) Omit(cols ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u updatePayLevelLogDo) Join(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u updatePayLevelLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u updatePayLevelLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u updatePayLevelLogDo) Group(cols ...field.Expr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u updatePayLevelLogDo) Having(conds ...gen.Condition) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u updatePayLevelLogDo) Limit(limit int) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u updatePayLevelLogDo) Offset(offset int) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u updatePayLevelLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u updatePayLevelLogDo) Unscoped() IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u updatePayLevelLogDo) Create(values ...*model.UpdatePayLevelLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u updatePayLevelLogDo) CreateInBatches(values []*model.UpdatePayLevelLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u updatePayLevelLogDo) Save(values ...*model.UpdatePayLevelLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u updatePayLevelLogDo) First() (*model.UpdatePayLevelLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdatePayLevelLog), nil
	}
}

func (u updatePayLevelLogDo) Take() (*model.UpdatePayLevelLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdatePayLevelLog), nil
	}
}

func (u updatePayLevelLogDo) Last() (*model.UpdatePayLevelLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdatePayLevelLog), nil
	}
}

func (u updatePayLevelLogDo) Find() ([]*model.UpdatePayLevelLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpdatePayLevelLog), err
}

func (u updatePayLevelLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdatePayLevelLog, err error) {
	buf := make([]*model.UpdatePayLevelLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u updatePayLevelLogDo) FindInBatches(result *[]*model.UpdatePayLevelLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u updatePayLevelLogDo) Attrs(attrs ...field.AssignExpr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u updatePayLevelLogDo) Assign(attrs ...field.AssignExpr) IUpdatePayLevelLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u updatePayLevelLogDo) Joins(fields ...field.RelationField) IUpdatePayLevelLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u updatePayLevelLogDo) Preload(fields ...field.RelationField) IUpdatePayLevelLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u updatePayLevelLogDo) FirstOrInit() (*model.UpdatePayLevelLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdatePayLevelLog), nil
	}
}

func (u updatePayLevelLogDo) FirstOrCreate() (*model.UpdatePayLevelLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdatePayLevelLog), nil
	}
}

func (u updatePayLevelLogDo) FindByPage(offset int, limit int) (result []*model.UpdatePayLevelLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u updatePayLevelLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u updatePayLevelLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u updatePayLevelLogDo) Delete(models ...*model.UpdatePayLevelLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *updatePayLevelLogDo) withDO(do gen.Dao) *updatePayLevelLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
