// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskRuleSet(db *gorm.DB, opts ...gen.DOOption) riskRuleSet {
	_riskRuleSet := riskRuleSet{}

	_riskRuleSet.riskRuleSetDo.UseDB(db, opts...)
	_riskRuleSet.riskRuleSetDo.UseModel(&model.RiskRuleSet{})

	tableName := _riskRuleSet.riskRuleSetDo.TableName()
	_riskRuleSet.ALL = field.NewAsterisk(tableName)
	_riskRuleSet.ID = field.NewInt64(tableName, "id")
	_riskRuleSet.Name = field.NewString(tableName, "name")
	_riskRuleSet.Remark = field.NewString(tableName, "remark")
	_riskRuleSet.RuleCount = field.NewInt64(tableName, "rule_count")
	_riskRuleSet.Rules = field.NewString(tableName, "rules")
	_riskRuleSet.AdminName = field.NewString(tableName, "admin_name")
	_riskRuleSet.CreatedAt = field.NewField(tableName, "created_at")
	_riskRuleSet.UpdatedAt = field.NewField(tableName, "updated_at")
	_riskRuleSet.Type = field.NewInt64(tableName, "type")
	_riskRuleSet.IsOpen = field.NewInt64(tableName, "is_open")
	_riskRuleSet.AuditType = field.NewInt64(tableName, "audit_type")

	_riskRuleSet.fillFieldMap()

	return _riskRuleSet
}

// riskRuleSet 规则集
type riskRuleSet struct {
	riskRuleSetDo riskRuleSetDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 名称
	Remark    field.String // 备注
	RuleCount field.Int64  // 规则个数
	Rules     field.String // 规则
	AdminName field.String // 操作人
	CreatedAt field.Field
	UpdatedAt field.Field
	Type      field.Int64 // 类型 1：优惠 2：提款
	IsOpen    field.Int64 // 是否启用 1：启用 0：禁止
	AuditType field.Int64 // 审核方式 1：人工审核 2：自动审核

	fieldMap map[string]field.Expr
}

func (r riskRuleSet) Table(newTableName string) *riskRuleSet {
	r.riskRuleSetDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskRuleSet) As(alias string) *riskRuleSet {
	r.riskRuleSetDo.DO = *(r.riskRuleSetDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskRuleSet) updateTableName(table string) *riskRuleSet {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Name = field.NewString(table, "name")
	r.Remark = field.NewString(table, "remark")
	r.RuleCount = field.NewInt64(table, "rule_count")
	r.Rules = field.NewString(table, "rules")
	r.AdminName = field.NewString(table, "admin_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.Type = field.NewInt64(table, "type")
	r.IsOpen = field.NewInt64(table, "is_open")
	r.AuditType = field.NewInt64(table, "audit_type")

	r.fillFieldMap()

	return r
}

func (r *riskRuleSet) WithContext(ctx context.Context) IRiskRuleSetDo {
	return r.riskRuleSetDo.WithContext(ctx)
}

func (r riskRuleSet) TableName() string { return r.riskRuleSetDo.TableName() }

func (r riskRuleSet) Alias() string { return r.riskRuleSetDo.Alias() }

func (r riskRuleSet) Columns(cols ...field.Expr) gen.Columns { return r.riskRuleSetDo.Columns(cols...) }

func (r *riskRuleSet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskRuleSet) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["rule_count"] = r.RuleCount
	r.fieldMap["rules"] = r.Rules
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["type"] = r.Type
	r.fieldMap["is_open"] = r.IsOpen
	r.fieldMap["audit_type"] = r.AuditType
}

func (r riskRuleSet) clone(db *gorm.DB) riskRuleSet {
	r.riskRuleSetDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskRuleSet) replaceDB(db *gorm.DB) riskRuleSet {
	r.riskRuleSetDo.ReplaceDB(db)
	return r
}

type riskRuleSetDo struct{ gen.DO }

type IRiskRuleSetDo interface {
	gen.SubQuery
	Debug() IRiskRuleSetDo
	WithContext(ctx context.Context) IRiskRuleSetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskRuleSetDo
	WriteDB() IRiskRuleSetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskRuleSetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskRuleSetDo
	Not(conds ...gen.Condition) IRiskRuleSetDo
	Or(conds ...gen.Condition) IRiskRuleSetDo
	Select(conds ...field.Expr) IRiskRuleSetDo
	Where(conds ...gen.Condition) IRiskRuleSetDo
	Order(conds ...field.Expr) IRiskRuleSetDo
	Distinct(cols ...field.Expr) IRiskRuleSetDo
	Omit(cols ...field.Expr) IRiskRuleSetDo
	Join(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo
	Group(cols ...field.Expr) IRiskRuleSetDo
	Having(conds ...gen.Condition) IRiskRuleSetDo
	Limit(limit int) IRiskRuleSetDo
	Offset(offset int) IRiskRuleSetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleSetDo
	Unscoped() IRiskRuleSetDo
	Create(values ...*model.RiskRuleSet) error
	CreateInBatches(values []*model.RiskRuleSet, batchSize int) error
	Save(values ...*model.RiskRuleSet) error
	First() (*model.RiskRuleSet, error)
	Take() (*model.RiskRuleSet, error)
	Last() (*model.RiskRuleSet, error)
	Find() ([]*model.RiskRuleSet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleSet, err error)
	FindInBatches(result *[]*model.RiskRuleSet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskRuleSet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskRuleSetDo
	Assign(attrs ...field.AssignExpr) IRiskRuleSetDo
	Joins(fields ...field.RelationField) IRiskRuleSetDo
	Preload(fields ...field.RelationField) IRiskRuleSetDo
	FirstOrInit() (*model.RiskRuleSet, error)
	FirstOrCreate() (*model.RiskRuleSet, error)
	FindByPage(offset int, limit int) (result []*model.RiskRuleSet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskRuleSetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskRuleSetDo) Debug() IRiskRuleSetDo {
	return r.withDO(r.DO.Debug())
}

func (r riskRuleSetDo) WithContext(ctx context.Context) IRiskRuleSetDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskRuleSetDo) ReadDB() IRiskRuleSetDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskRuleSetDo) WriteDB() IRiskRuleSetDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskRuleSetDo) Session(config *gorm.Session) IRiskRuleSetDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskRuleSetDo) Clauses(conds ...clause.Expression) IRiskRuleSetDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskRuleSetDo) Returning(value interface{}, columns ...string) IRiskRuleSetDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskRuleSetDo) Not(conds ...gen.Condition) IRiskRuleSetDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskRuleSetDo) Or(conds ...gen.Condition) IRiskRuleSetDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskRuleSetDo) Select(conds ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskRuleSetDo) Where(conds ...gen.Condition) IRiskRuleSetDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskRuleSetDo) Order(conds ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskRuleSetDo) Distinct(cols ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskRuleSetDo) Omit(cols ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskRuleSetDo) Join(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskRuleSetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskRuleSetDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskRuleSetDo) Group(cols ...field.Expr) IRiskRuleSetDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskRuleSetDo) Having(conds ...gen.Condition) IRiskRuleSetDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskRuleSetDo) Limit(limit int) IRiskRuleSetDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskRuleSetDo) Offset(offset int) IRiskRuleSetDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskRuleSetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleSetDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskRuleSetDo) Unscoped() IRiskRuleSetDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskRuleSetDo) Create(values ...*model.RiskRuleSet) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskRuleSetDo) CreateInBatches(values []*model.RiskRuleSet, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskRuleSetDo) Save(values ...*model.RiskRuleSet) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskRuleSetDo) First() (*model.RiskRuleSet, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSet), nil
	}
}

func (r riskRuleSetDo) Take() (*model.RiskRuleSet, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSet), nil
	}
}

func (r riskRuleSetDo) Last() (*model.RiskRuleSet, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSet), nil
	}
}

func (r riskRuleSetDo) Find() ([]*model.RiskRuleSet, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskRuleSet), err
}

func (r riskRuleSetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleSet, err error) {
	buf := make([]*model.RiskRuleSet, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskRuleSetDo) FindInBatches(result *[]*model.RiskRuleSet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskRuleSetDo) Attrs(attrs ...field.AssignExpr) IRiskRuleSetDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskRuleSetDo) Assign(attrs ...field.AssignExpr) IRiskRuleSetDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskRuleSetDo) Joins(fields ...field.RelationField) IRiskRuleSetDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskRuleSetDo) Preload(fields ...field.RelationField) IRiskRuleSetDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskRuleSetDo) FirstOrInit() (*model.RiskRuleSet, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSet), nil
	}
}

func (r riskRuleSetDo) FirstOrCreate() (*model.RiskRuleSet, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSet), nil
	}
}

func (r riskRuleSetDo) FindByPage(offset int, limit int) (result []*model.RiskRuleSet, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskRuleSetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskRuleSetDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskRuleSetDo) Delete(models ...*model.RiskRuleSet) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskRuleSetDo) withDO(do gen.Dao) *riskRuleSetDo {
	r.DO = *do.(*gen.DO)
	return r
}
