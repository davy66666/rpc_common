// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                               = new(Query)
	ActTransaction                  *actTransaction
	Activity                        *activity
	ActivityEventCoefficient        *activityEventCoefficient
	ActivityReport                  *activityReport
	ActivityRewardChance            *activityRewardChance
	ActivityRewardLevel             *activityRewardLevel
	ActivityRewardLimit             *activityRewardLimit
	ActivitySportBet                *activitySportBet
	ActivitySportChart              *activitySportChart
	ActivitySportJackpotConfig      *activitySportJackpotConfig
	ActivitySportJackpotTransaction *activitySportJackpotTransaction
	CircleRecord                    *circleRecord
	GameMatch                       *gameMatch
	GameMatchAwardRecord            *gameMatchAwardRecord
	GameMatchUserBet                *gameMatchUserBet
	GuessRecord                     *guessRecord
	GuessRecordCopy1                *guessRecordCopy1
	LuckyRecord                     *luckyRecord
	Match                           *match
	MatchEvent                      *matchEvent
	MatchTeam                       *matchTeam
	MatchesCopy1                    *matchesCopy1
	Promotion                       *promotion
	PromotionUserReward             *promotionUserReward
	PromotionUserRewardsCopy1       *promotionUserRewardsCopy1
	RegisterReward                  *registerReward
	RewardRecord                    *rewardRecord
	RewardRecordCopy1               *rewardRecordCopy1
	TeamUser                        *teamUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActTransaction = &Q.ActTransaction
	Activity = &Q.Activity
	ActivityEventCoefficient = &Q.ActivityEventCoefficient
	ActivityReport = &Q.ActivityReport
	ActivityRewardChance = &Q.ActivityRewardChance
	ActivityRewardLevel = &Q.ActivityRewardLevel
	ActivityRewardLimit = &Q.ActivityRewardLimit
	ActivitySportBet = &Q.ActivitySportBet
	ActivitySportChart = &Q.ActivitySportChart
	ActivitySportJackpotConfig = &Q.ActivitySportJackpotConfig
	ActivitySportJackpotTransaction = &Q.ActivitySportJackpotTransaction
	CircleRecord = &Q.CircleRecord
	GameMatch = &Q.GameMatch
	GameMatchAwardRecord = &Q.GameMatchAwardRecord
	GameMatchUserBet = &Q.GameMatchUserBet
	GuessRecord = &Q.GuessRecord
	GuessRecordCopy1 = &Q.GuessRecordCopy1
	LuckyRecord = &Q.LuckyRecord
	Match = &Q.Match
	MatchEvent = &Q.MatchEvent
	MatchTeam = &Q.MatchTeam
	MatchesCopy1 = &Q.MatchesCopy1
	Promotion = &Q.Promotion
	PromotionUserReward = &Q.PromotionUserReward
	PromotionUserRewardsCopy1 = &Q.PromotionUserRewardsCopy1
	RegisterReward = &Q.RegisterReward
	RewardRecord = &Q.RewardRecord
	RewardRecordCopy1 = &Q.RewardRecordCopy1
	TeamUser = &Q.TeamUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                              db,
		ActTransaction:                  newActTransaction(db, opts...),
		Activity:                        newActivity(db, opts...),
		ActivityEventCoefficient:        newActivityEventCoefficient(db, opts...),
		ActivityReport:                  newActivityReport(db, opts...),
		ActivityRewardChance:            newActivityRewardChance(db, opts...),
		ActivityRewardLevel:             newActivityRewardLevel(db, opts...),
		ActivityRewardLimit:             newActivityRewardLimit(db, opts...),
		ActivitySportBet:                newActivitySportBet(db, opts...),
		ActivitySportChart:              newActivitySportChart(db, opts...),
		ActivitySportJackpotConfig:      newActivitySportJackpotConfig(db, opts...),
		ActivitySportJackpotTransaction: newActivitySportJackpotTransaction(db, opts...),
		CircleRecord:                    newCircleRecord(db, opts...),
		GameMatch:                       newGameMatch(db, opts...),
		GameMatchAwardRecord:            newGameMatchAwardRecord(db, opts...),
		GameMatchUserBet:                newGameMatchUserBet(db, opts...),
		GuessRecord:                     newGuessRecord(db, opts...),
		GuessRecordCopy1:                newGuessRecordCopy1(db, opts...),
		LuckyRecord:                     newLuckyRecord(db, opts...),
		Match:                           newMatch(db, opts...),
		MatchEvent:                      newMatchEvent(db, opts...),
		MatchTeam:                       newMatchTeam(db, opts...),
		MatchesCopy1:                    newMatchesCopy1(db, opts...),
		Promotion:                       newPromotion(db, opts...),
		PromotionUserReward:             newPromotionUserReward(db, opts...),
		PromotionUserRewardsCopy1:       newPromotionUserRewardsCopy1(db, opts...),
		RegisterReward:                  newRegisterReward(db, opts...),
		RewardRecord:                    newRewardRecord(db, opts...),
		RewardRecordCopy1:               newRewardRecordCopy1(db, opts...),
		TeamUser:                        newTeamUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActTransaction                  actTransaction
	Activity                        activity
	ActivityEventCoefficient        activityEventCoefficient
	ActivityReport                  activityReport
	ActivityRewardChance            activityRewardChance
	ActivityRewardLevel             activityRewardLevel
	ActivityRewardLimit             activityRewardLimit
	ActivitySportBet                activitySportBet
	ActivitySportChart              activitySportChart
	ActivitySportJackpotConfig      activitySportJackpotConfig
	ActivitySportJackpotTransaction activitySportJackpotTransaction
	CircleRecord                    circleRecord
	GameMatch                       gameMatch
	GameMatchAwardRecord            gameMatchAwardRecord
	GameMatchUserBet                gameMatchUserBet
	GuessRecord                     guessRecord
	GuessRecordCopy1                guessRecordCopy1
	LuckyRecord                     luckyRecord
	Match                           match
	MatchEvent                      matchEvent
	MatchTeam                       matchTeam
	MatchesCopy1                    matchesCopy1
	Promotion                       promotion
	PromotionUserReward             promotionUserReward
	PromotionUserRewardsCopy1       promotionUserRewardsCopy1
	RegisterReward                  registerReward
	RewardRecord                    rewardRecord
	RewardRecordCopy1               rewardRecordCopy1
	TeamUser                        teamUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		ActTransaction:                  q.ActTransaction.clone(db),
		Activity:                        q.Activity.clone(db),
		ActivityEventCoefficient:        q.ActivityEventCoefficient.clone(db),
		ActivityReport:                  q.ActivityReport.clone(db),
		ActivityRewardChance:            q.ActivityRewardChance.clone(db),
		ActivityRewardLevel:             q.ActivityRewardLevel.clone(db),
		ActivityRewardLimit:             q.ActivityRewardLimit.clone(db),
		ActivitySportBet:                q.ActivitySportBet.clone(db),
		ActivitySportChart:              q.ActivitySportChart.clone(db),
		ActivitySportJackpotConfig:      q.ActivitySportJackpotConfig.clone(db),
		ActivitySportJackpotTransaction: q.ActivitySportJackpotTransaction.clone(db),
		CircleRecord:                    q.CircleRecord.clone(db),
		GameMatch:                       q.GameMatch.clone(db),
		GameMatchAwardRecord:            q.GameMatchAwardRecord.clone(db),
		GameMatchUserBet:                q.GameMatchUserBet.clone(db),
		GuessRecord:                     q.GuessRecord.clone(db),
		GuessRecordCopy1:                q.GuessRecordCopy1.clone(db),
		LuckyRecord:                     q.LuckyRecord.clone(db),
		Match:                           q.Match.clone(db),
		MatchEvent:                      q.MatchEvent.clone(db),
		MatchTeam:                       q.MatchTeam.clone(db),
		MatchesCopy1:                    q.MatchesCopy1.clone(db),
		Promotion:                       q.Promotion.clone(db),
		PromotionUserReward:             q.PromotionUserReward.clone(db),
		PromotionUserRewardsCopy1:       q.PromotionUserRewardsCopy1.clone(db),
		RegisterReward:                  q.RegisterReward.clone(db),
		RewardRecord:                    q.RewardRecord.clone(db),
		RewardRecordCopy1:               q.RewardRecordCopy1.clone(db),
		TeamUser:                        q.TeamUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		ActTransaction:                  q.ActTransaction.replaceDB(db),
		Activity:                        q.Activity.replaceDB(db),
		ActivityEventCoefficient:        q.ActivityEventCoefficient.replaceDB(db),
		ActivityReport:                  q.ActivityReport.replaceDB(db),
		ActivityRewardChance:            q.ActivityRewardChance.replaceDB(db),
		ActivityRewardLevel:             q.ActivityRewardLevel.replaceDB(db),
		ActivityRewardLimit:             q.ActivityRewardLimit.replaceDB(db),
		ActivitySportBet:                q.ActivitySportBet.replaceDB(db),
		ActivitySportChart:              q.ActivitySportChart.replaceDB(db),
		ActivitySportJackpotConfig:      q.ActivitySportJackpotConfig.replaceDB(db),
		ActivitySportJackpotTransaction: q.ActivitySportJackpotTransaction.replaceDB(db),
		CircleRecord:                    q.CircleRecord.replaceDB(db),
		GameMatch:                       q.GameMatch.replaceDB(db),
		GameMatchAwardRecord:            q.GameMatchAwardRecord.replaceDB(db),
		GameMatchUserBet:                q.GameMatchUserBet.replaceDB(db),
		GuessRecord:                     q.GuessRecord.replaceDB(db),
		GuessRecordCopy1:                q.GuessRecordCopy1.replaceDB(db),
		LuckyRecord:                     q.LuckyRecord.replaceDB(db),
		Match:                           q.Match.replaceDB(db),
		MatchEvent:                      q.MatchEvent.replaceDB(db),
		MatchTeam:                       q.MatchTeam.replaceDB(db),
		MatchesCopy1:                    q.MatchesCopy1.replaceDB(db),
		Promotion:                       q.Promotion.replaceDB(db),
		PromotionUserReward:             q.PromotionUserReward.replaceDB(db),
		PromotionUserRewardsCopy1:       q.PromotionUserRewardsCopy1.replaceDB(db),
		RegisterReward:                  q.RegisterReward.replaceDB(db),
		RewardRecord:                    q.RewardRecord.replaceDB(db),
		RewardRecordCopy1:               q.RewardRecordCopy1.replaceDB(db),
		TeamUser:                        q.TeamUser.replaceDB(db),
	}
}

type queryCtx struct {
	ActTransaction                  IActTransactionDo
	Activity                        IActivityDo
	ActivityEventCoefficient        IActivityEventCoefficientDo
	ActivityReport                  IActivityReportDo
	ActivityRewardChance            IActivityRewardChanceDo
	ActivityRewardLevel             IActivityRewardLevelDo
	ActivityRewardLimit             IActivityRewardLimitDo
	ActivitySportBet                IActivitySportBetDo
	ActivitySportChart              IActivitySportChartDo
	ActivitySportJackpotConfig      IActivitySportJackpotConfigDo
	ActivitySportJackpotTransaction IActivitySportJackpotTransactionDo
	CircleRecord                    ICircleRecordDo
	GameMatch                       IGameMatchDo
	GameMatchAwardRecord            IGameMatchAwardRecordDo
	GameMatchUserBet                IGameMatchUserBetDo
	GuessRecord                     IGuessRecordDo
	GuessRecordCopy1                IGuessRecordCopy1Do
	LuckyRecord                     ILuckyRecordDo
	Match                           IMatchDo
	MatchEvent                      IMatchEventDo
	MatchTeam                       IMatchTeamDo
	MatchesCopy1                    IMatchesCopy1Do
	Promotion                       IPromotionDo
	PromotionUserReward             IPromotionUserRewardDo
	PromotionUserRewardsCopy1       IPromotionUserRewardsCopy1Do
	RegisterReward                  IRegisterRewardDo
	RewardRecord                    IRewardRecordDo
	RewardRecordCopy1               IRewardRecordCopy1Do
	TeamUser                        ITeamUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActTransaction:                  q.ActTransaction.WithContext(ctx),
		Activity:                        q.Activity.WithContext(ctx),
		ActivityEventCoefficient:        q.ActivityEventCoefficient.WithContext(ctx),
		ActivityReport:                  q.ActivityReport.WithContext(ctx),
		ActivityRewardChance:            q.ActivityRewardChance.WithContext(ctx),
		ActivityRewardLevel:             q.ActivityRewardLevel.WithContext(ctx),
		ActivityRewardLimit:             q.ActivityRewardLimit.WithContext(ctx),
		ActivitySportBet:                q.ActivitySportBet.WithContext(ctx),
		ActivitySportChart:              q.ActivitySportChart.WithContext(ctx),
		ActivitySportJackpotConfig:      q.ActivitySportJackpotConfig.WithContext(ctx),
		ActivitySportJackpotTransaction: q.ActivitySportJackpotTransaction.WithContext(ctx),
		CircleRecord:                    q.CircleRecord.WithContext(ctx),
		GameMatch:                       q.GameMatch.WithContext(ctx),
		GameMatchAwardRecord:            q.GameMatchAwardRecord.WithContext(ctx),
		GameMatchUserBet:                q.GameMatchUserBet.WithContext(ctx),
		GuessRecord:                     q.GuessRecord.WithContext(ctx),
		GuessRecordCopy1:                q.GuessRecordCopy1.WithContext(ctx),
		LuckyRecord:                     q.LuckyRecord.WithContext(ctx),
		Match:                           q.Match.WithContext(ctx),
		MatchEvent:                      q.MatchEvent.WithContext(ctx),
		MatchTeam:                       q.MatchTeam.WithContext(ctx),
		MatchesCopy1:                    q.MatchesCopy1.WithContext(ctx),
		Promotion:                       q.Promotion.WithContext(ctx),
		PromotionUserReward:             q.PromotionUserReward.WithContext(ctx),
		PromotionUserRewardsCopy1:       q.PromotionUserRewardsCopy1.WithContext(ctx),
		RegisterReward:                  q.RegisterReward.WithContext(ctx),
		RewardRecord:                    q.RewardRecord.WithContext(ctx),
		RewardRecordCopy1:               q.RewardRecordCopy1.WithContext(ctx),
		TeamUser:                        q.TeamUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
