// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newDailySignItem(db *gorm.DB, opts ...gen.DOOption) dailySignItem {
	_dailySignItem := dailySignItem{}

	_dailySignItem.dailySignItemDo.UseDB(db, opts...)
	_dailySignItem.dailySignItemDo.UseModel(&model.DailySignItem{})

	tableName := _dailySignItem.dailySignItemDo.TableName()
	_dailySignItem.ALL = field.NewAsterisk(tableName)
	_dailySignItem.ID = field.NewInt64(tableName, "id")
	_dailySignItem.DailySignID = field.NewInt64(tableName, "daily_sign_id")
	_dailySignItem.Day = field.NewInt64(tableName, "day")
	_dailySignItem.Amount = field.NewFloat64(tableName, "amount")

	_dailySignItem.fillFieldMap()

	return _dailySignItem
}

type dailySignItem struct {
	dailySignItemDo dailySignItemDo

	ALL         field.Asterisk
	ID          field.Int64
	DailySignID field.Int64   // 签到表ID
	Day         field.Int64   // 天数
	Amount      field.Float64 // 金额

	fieldMap map[string]field.Expr
}

func (d dailySignItem) Table(newTableName string) *dailySignItem {
	d.dailySignItemDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailySignItem) As(alias string) *dailySignItem {
	d.dailySignItemDo.DO = *(d.dailySignItemDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailySignItem) updateTableName(table string) *dailySignItem {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.DailySignID = field.NewInt64(table, "daily_sign_id")
	d.Day = field.NewInt64(table, "day")
	d.Amount = field.NewFloat64(table, "amount")

	d.fillFieldMap()

	return d
}

func (d *dailySignItem) WithContext(ctx context.Context) IDailySignItemDo {
	return d.dailySignItemDo.WithContext(ctx)
}

func (d dailySignItem) TableName() string { return d.dailySignItemDo.TableName() }

func (d dailySignItem) Alias() string { return d.dailySignItemDo.Alias() }

func (d dailySignItem) Columns(cols ...field.Expr) gen.Columns {
	return d.dailySignItemDo.Columns(cols...)
}

func (d *dailySignItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailySignItem) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["daily_sign_id"] = d.DailySignID
	d.fieldMap["day"] = d.Day
	d.fieldMap["amount"] = d.Amount
}

func (d dailySignItem) clone(db *gorm.DB) dailySignItem {
	d.dailySignItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailySignItem) replaceDB(db *gorm.DB) dailySignItem {
	d.dailySignItemDo.ReplaceDB(db)
	return d
}

type dailySignItemDo struct{ gen.DO }

type IDailySignItemDo interface {
	gen.SubQuery
	Debug() IDailySignItemDo
	WithContext(ctx context.Context) IDailySignItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailySignItemDo
	WriteDB() IDailySignItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailySignItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailySignItemDo
	Not(conds ...gen.Condition) IDailySignItemDo
	Or(conds ...gen.Condition) IDailySignItemDo
	Select(conds ...field.Expr) IDailySignItemDo
	Where(conds ...gen.Condition) IDailySignItemDo
	Order(conds ...field.Expr) IDailySignItemDo
	Distinct(cols ...field.Expr) IDailySignItemDo
	Omit(cols ...field.Expr) IDailySignItemDo
	Join(table schema.Tabler, on ...field.Expr) IDailySignItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailySignItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailySignItemDo
	Group(cols ...field.Expr) IDailySignItemDo
	Having(conds ...gen.Condition) IDailySignItemDo
	Limit(limit int) IDailySignItemDo
	Offset(offset int) IDailySignItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailySignItemDo
	Unscoped() IDailySignItemDo
	Create(values ...*model.DailySignItem) error
	CreateInBatches(values []*model.DailySignItem, batchSize int) error
	Save(values ...*model.DailySignItem) error
	First() (*model.DailySignItem, error)
	Take() (*model.DailySignItem, error)
	Last() (*model.DailySignItem, error)
	Find() ([]*model.DailySignItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailySignItem, err error)
	FindInBatches(result *[]*model.DailySignItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailySignItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailySignItemDo
	Assign(attrs ...field.AssignExpr) IDailySignItemDo
	Joins(fields ...field.RelationField) IDailySignItemDo
	Preload(fields ...field.RelationField) IDailySignItemDo
	FirstOrInit() (*model.DailySignItem, error)
	FirstOrCreate() (*model.DailySignItem, error)
	FindByPage(offset int, limit int) (result []*model.DailySignItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailySignItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailySignItemDo) Debug() IDailySignItemDo {
	return d.withDO(d.DO.Debug())
}

func (d dailySignItemDo) WithContext(ctx context.Context) IDailySignItemDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailySignItemDo) ReadDB() IDailySignItemDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailySignItemDo) WriteDB() IDailySignItemDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailySignItemDo) Session(config *gorm.Session) IDailySignItemDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailySignItemDo) Clauses(conds ...clause.Expression) IDailySignItemDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailySignItemDo) Returning(value interface{}, columns ...string) IDailySignItemDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailySignItemDo) Not(conds ...gen.Condition) IDailySignItemDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailySignItemDo) Or(conds ...gen.Condition) IDailySignItemDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailySignItemDo) Select(conds ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailySignItemDo) Where(conds ...gen.Condition) IDailySignItemDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailySignItemDo) Order(conds ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailySignItemDo) Distinct(cols ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailySignItemDo) Omit(cols ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailySignItemDo) Join(table schema.Tabler, on ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailySignItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailySignItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailySignItemDo) Group(cols ...field.Expr) IDailySignItemDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailySignItemDo) Having(conds ...gen.Condition) IDailySignItemDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailySignItemDo) Limit(limit int) IDailySignItemDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailySignItemDo) Offset(offset int) IDailySignItemDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailySignItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailySignItemDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailySignItemDo) Unscoped() IDailySignItemDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailySignItemDo) Create(values ...*model.DailySignItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailySignItemDo) CreateInBatches(values []*model.DailySignItem, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailySignItemDo) Save(values ...*model.DailySignItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailySignItemDo) First() (*model.DailySignItem, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailySignItem), nil
	}
}

func (d dailySignItemDo) Take() (*model.DailySignItem, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailySignItem), nil
	}
}

func (d dailySignItemDo) Last() (*model.DailySignItem, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailySignItem), nil
	}
}

func (d dailySignItemDo) Find() ([]*model.DailySignItem, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailySignItem), err
}

func (d dailySignItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailySignItem, err error) {
	buf := make([]*model.DailySignItem, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailySignItemDo) FindInBatches(result *[]*model.DailySignItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailySignItemDo) Attrs(attrs ...field.AssignExpr) IDailySignItemDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailySignItemDo) Assign(attrs ...field.AssignExpr) IDailySignItemDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailySignItemDo) Joins(fields ...field.RelationField) IDailySignItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailySignItemDo) Preload(fields ...field.RelationField) IDailySignItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailySignItemDo) FirstOrInit() (*model.DailySignItem, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailySignItem), nil
	}
}

func (d dailySignItemDo) FirstOrCreate() (*model.DailySignItem, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailySignItem), nil
	}
}

func (d dailySignItemDo) FindByPage(offset int, limit int) (result []*model.DailySignItem, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailySignItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailySignItemDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailySignItemDo) Delete(models ...*model.DailySignItem) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailySignItemDo) withDO(do gen.Dao) *dailySignItemDo {
	d.DO = *do.(*gen.DO)
	return d
}
