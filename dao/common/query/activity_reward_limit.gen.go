// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityRewardLimit(db *gorm.DB, opts ...gen.DOOption) activityRewardLimit {
	_activityRewardLimit := activityRewardLimit{}

	_activityRewardLimit.activityRewardLimitDo.UseDB(db, opts...)
	_activityRewardLimit.activityRewardLimitDo.UseModel(&model.ActivityRewardLimit{})

	tableName := _activityRewardLimit.activityRewardLimitDo.TableName()
	_activityRewardLimit.ALL = field.NewAsterisk(tableName)
	_activityRewardLimit.ID = field.NewInt64(tableName, "id")
	_activityRewardLimit.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityRewardLimit.Deposit = field.NewFloat64(tableName, "deposit")
	_activityRewardLimit.RewardLimit = field.NewFloat64(tableName, "reward_limit")
	_activityRewardLimit.CreatedAt = field.NewField(tableName, "created_at")
	_activityRewardLimit.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityRewardLimit.fillFieldMap()

	return _activityRewardLimit
}

// activityRewardLimit 活动奖励上限梯度配置
type activityRewardLimit struct {
	activityRewardLimitDo activityRewardLimitDo

	ALL         field.Asterisk
	ID          field.Int64
	ActivityID  field.Int64   // 配置ID
	Deposit     field.Float64 // 团队存款
	RewardLimit field.Float64 // 奖励上限
	CreatedAt   field.Field   // 创建时间
	UpdatedAt   field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityRewardLimit) Table(newTableName string) *activityRewardLimit {
	a.activityRewardLimitDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityRewardLimit) As(alias string) *activityRewardLimit {
	a.activityRewardLimitDo.DO = *(a.activityRewardLimitDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityRewardLimit) updateTableName(table string) *activityRewardLimit {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.Deposit = field.NewFloat64(table, "deposit")
	a.RewardLimit = field.NewFloat64(table, "reward_limit")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityRewardLimit) WithContext(ctx context.Context) IActivityRewardLimitDo {
	return a.activityRewardLimitDo.WithContext(ctx)
}

func (a activityRewardLimit) TableName() string { return a.activityRewardLimitDo.TableName() }

func (a activityRewardLimit) Alias() string { return a.activityRewardLimitDo.Alias() }

func (a activityRewardLimit) Columns(cols ...field.Expr) gen.Columns {
	return a.activityRewardLimitDo.Columns(cols...)
}

func (a *activityRewardLimit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityRewardLimit) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["deposit"] = a.Deposit
	a.fieldMap["reward_limit"] = a.RewardLimit
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityRewardLimit) clone(db *gorm.DB) activityRewardLimit {
	a.activityRewardLimitDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityRewardLimit) replaceDB(db *gorm.DB) activityRewardLimit {
	a.activityRewardLimitDo.ReplaceDB(db)
	return a
}

type activityRewardLimitDo struct{ gen.DO }

type IActivityRewardLimitDo interface {
	gen.SubQuery
	Debug() IActivityRewardLimitDo
	WithContext(ctx context.Context) IActivityRewardLimitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityRewardLimitDo
	WriteDB() IActivityRewardLimitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityRewardLimitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityRewardLimitDo
	Not(conds ...gen.Condition) IActivityRewardLimitDo
	Or(conds ...gen.Condition) IActivityRewardLimitDo
	Select(conds ...field.Expr) IActivityRewardLimitDo
	Where(conds ...gen.Condition) IActivityRewardLimitDo
	Order(conds ...field.Expr) IActivityRewardLimitDo
	Distinct(cols ...field.Expr) IActivityRewardLimitDo
	Omit(cols ...field.Expr) IActivityRewardLimitDo
	Join(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo
	Group(cols ...field.Expr) IActivityRewardLimitDo
	Having(conds ...gen.Condition) IActivityRewardLimitDo
	Limit(limit int) IActivityRewardLimitDo
	Offset(offset int) IActivityRewardLimitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardLimitDo
	Unscoped() IActivityRewardLimitDo
	Create(values ...*model.ActivityRewardLimit) error
	CreateInBatches(values []*model.ActivityRewardLimit, batchSize int) error
	Save(values ...*model.ActivityRewardLimit) error
	First() (*model.ActivityRewardLimit, error)
	Take() (*model.ActivityRewardLimit, error)
	Last() (*model.ActivityRewardLimit, error)
	Find() ([]*model.ActivityRewardLimit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardLimit, err error)
	FindInBatches(result *[]*model.ActivityRewardLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityRewardLimit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityRewardLimitDo
	Assign(attrs ...field.AssignExpr) IActivityRewardLimitDo
	Joins(fields ...field.RelationField) IActivityRewardLimitDo
	Preload(fields ...field.RelationField) IActivityRewardLimitDo
	FirstOrInit() (*model.ActivityRewardLimit, error)
	FirstOrCreate() (*model.ActivityRewardLimit, error)
	FindByPage(offset int, limit int) (result []*model.ActivityRewardLimit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityRewardLimitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityRewardLimitDo) Debug() IActivityRewardLimitDo {
	return a.withDO(a.DO.Debug())
}

func (a activityRewardLimitDo) WithContext(ctx context.Context) IActivityRewardLimitDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityRewardLimitDo) ReadDB() IActivityRewardLimitDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityRewardLimitDo) WriteDB() IActivityRewardLimitDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityRewardLimitDo) Session(config *gorm.Session) IActivityRewardLimitDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityRewardLimitDo) Clauses(conds ...clause.Expression) IActivityRewardLimitDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityRewardLimitDo) Returning(value interface{}, columns ...string) IActivityRewardLimitDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityRewardLimitDo) Not(conds ...gen.Condition) IActivityRewardLimitDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityRewardLimitDo) Or(conds ...gen.Condition) IActivityRewardLimitDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityRewardLimitDo) Select(conds ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityRewardLimitDo) Where(conds ...gen.Condition) IActivityRewardLimitDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityRewardLimitDo) Order(conds ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityRewardLimitDo) Distinct(cols ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityRewardLimitDo) Omit(cols ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityRewardLimitDo) Join(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityRewardLimitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityRewardLimitDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityRewardLimitDo) Group(cols ...field.Expr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityRewardLimitDo) Having(conds ...gen.Condition) IActivityRewardLimitDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityRewardLimitDo) Limit(limit int) IActivityRewardLimitDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityRewardLimitDo) Offset(offset int) IActivityRewardLimitDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityRewardLimitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardLimitDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityRewardLimitDo) Unscoped() IActivityRewardLimitDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityRewardLimitDo) Create(values ...*model.ActivityRewardLimit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityRewardLimitDo) CreateInBatches(values []*model.ActivityRewardLimit, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityRewardLimitDo) Save(values ...*model.ActivityRewardLimit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityRewardLimitDo) First() (*model.ActivityRewardLimit, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLimit), nil
	}
}

func (a activityRewardLimitDo) Take() (*model.ActivityRewardLimit, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLimit), nil
	}
}

func (a activityRewardLimitDo) Last() (*model.ActivityRewardLimit, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLimit), nil
	}
}

func (a activityRewardLimitDo) Find() ([]*model.ActivityRewardLimit, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityRewardLimit), err
}

func (a activityRewardLimitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardLimit, err error) {
	buf := make([]*model.ActivityRewardLimit, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityRewardLimitDo) FindInBatches(result *[]*model.ActivityRewardLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityRewardLimitDo) Attrs(attrs ...field.AssignExpr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityRewardLimitDo) Assign(attrs ...field.AssignExpr) IActivityRewardLimitDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityRewardLimitDo) Joins(fields ...field.RelationField) IActivityRewardLimitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityRewardLimitDo) Preload(fields ...field.RelationField) IActivityRewardLimitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityRewardLimitDo) FirstOrInit() (*model.ActivityRewardLimit, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLimit), nil
	}
}

func (a activityRewardLimitDo) FirstOrCreate() (*model.ActivityRewardLimit, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLimit), nil
	}
}

func (a activityRewardLimitDo) FindByPage(offset int, limit int) (result []*model.ActivityRewardLimit, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityRewardLimitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityRewardLimitDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityRewardLimitDo) Delete(models ...*model.ActivityRewardLimit) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityRewardLimitDo) withDO(do gen.Dao) *activityRewardLimitDo {
	a.DO = *do.(*gen.DO)
	return a
}
