// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newCustomerServiceSetting(db *gorm.DB, opts ...gen.DOOption) customerServiceSetting {
	_customerServiceSetting := customerServiceSetting{}

	_customerServiceSetting.customerServiceSettingDo.UseDB(db, opts...)
	_customerServiceSetting.customerServiceSettingDo.UseModel(&model.CustomerServiceSetting{})

	tableName := _customerServiceSetting.customerServiceSettingDo.TableName()
	_customerServiceSetting.ALL = field.NewAsterisk(tableName)
	_customerServiceSetting.ID = field.NewInt64(tableName, "id")
	_customerServiceSetting.LinkName = field.NewString(tableName, "link_name")
	_customerServiceSetting.Link = field.NewString(tableName, "link")
	_customerServiceSetting.IsOpen = field.NewInt64(tableName, "is_open")
	_customerServiceSetting.Weight = field.NewInt64(tableName, "weight")
	_customerServiceSetting.Remark = field.NewString(tableName, "remark")
	_customerServiceSetting.CreatedAt = field.NewField(tableName, "created_at")
	_customerServiceSetting.UpdatedAt = field.NewField(tableName, "updated_at")
	_customerServiceSetting.AdminID = field.NewInt64(tableName, "admin_id")
	_customerServiceSetting.AdminUser = field.NewString(tableName, "admin_user")

	_customerServiceSetting.fillFieldMap()

	return _customerServiceSetting
}

// customerServiceSetting 客服链接设置
type customerServiceSetting struct {
	customerServiceSettingDo customerServiceSettingDo

	ALL       field.Asterisk
	ID        field.Int64
	LinkName  field.String // 客服链接名称
	Link      field.String // 客服链接地址
	IsOpen    field.Int64  // 是否启用 1是 0否
	Weight    field.Int64  // 权重
	Remark    field.String // 备注
	CreatedAt field.Field  // 创建时间
	UpdatedAt field.Field  // 更新时间
	AdminID   field.Int64  // 操作人id
	AdminUser field.String // 操作人

	fieldMap map[string]field.Expr
}

func (c customerServiceSetting) Table(newTableName string) *customerServiceSetting {
	c.customerServiceSettingDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerServiceSetting) As(alias string) *customerServiceSetting {
	c.customerServiceSettingDo.DO = *(c.customerServiceSettingDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerServiceSetting) updateTableName(table string) *customerServiceSetting {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.LinkName = field.NewString(table, "link_name")
	c.Link = field.NewString(table, "link")
	c.IsOpen = field.NewInt64(table, "is_open")
	c.Weight = field.NewInt64(table, "weight")
	c.Remark = field.NewString(table, "remark")
	c.CreatedAt = field.NewField(table, "created_at")
	c.UpdatedAt = field.NewField(table, "updated_at")
	c.AdminID = field.NewInt64(table, "admin_id")
	c.AdminUser = field.NewString(table, "admin_user")

	c.fillFieldMap()

	return c
}

func (c *customerServiceSetting) WithContext(ctx context.Context) ICustomerServiceSettingDo {
	return c.customerServiceSettingDo.WithContext(ctx)
}

func (c customerServiceSetting) TableName() string { return c.customerServiceSettingDo.TableName() }

func (c customerServiceSetting) Alias() string { return c.customerServiceSettingDo.Alias() }

func (c customerServiceSetting) Columns(cols ...field.Expr) gen.Columns {
	return c.customerServiceSettingDo.Columns(cols...)
}

func (c *customerServiceSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerServiceSetting) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["link_name"] = c.LinkName
	c.fieldMap["link"] = c.Link
	c.fieldMap["is_open"] = c.IsOpen
	c.fieldMap["weight"] = c.Weight
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["admin_id"] = c.AdminID
	c.fieldMap["admin_user"] = c.AdminUser
}

func (c customerServiceSetting) clone(db *gorm.DB) customerServiceSetting {
	c.customerServiceSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerServiceSetting) replaceDB(db *gorm.DB) customerServiceSetting {
	c.customerServiceSettingDo.ReplaceDB(db)
	return c
}

type customerServiceSettingDo struct{ gen.DO }

type ICustomerServiceSettingDo interface {
	gen.SubQuery
	Debug() ICustomerServiceSettingDo
	WithContext(ctx context.Context) ICustomerServiceSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerServiceSettingDo
	WriteDB() ICustomerServiceSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerServiceSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerServiceSettingDo
	Not(conds ...gen.Condition) ICustomerServiceSettingDo
	Or(conds ...gen.Condition) ICustomerServiceSettingDo
	Select(conds ...field.Expr) ICustomerServiceSettingDo
	Where(conds ...gen.Condition) ICustomerServiceSettingDo
	Order(conds ...field.Expr) ICustomerServiceSettingDo
	Distinct(cols ...field.Expr) ICustomerServiceSettingDo
	Omit(cols ...field.Expr) ICustomerServiceSettingDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo
	Group(cols ...field.Expr) ICustomerServiceSettingDo
	Having(conds ...gen.Condition) ICustomerServiceSettingDo
	Limit(limit int) ICustomerServiceSettingDo
	Offset(offset int) ICustomerServiceSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerServiceSettingDo
	Unscoped() ICustomerServiceSettingDo
	Create(values ...*model.CustomerServiceSetting) error
	CreateInBatches(values []*model.CustomerServiceSetting, batchSize int) error
	Save(values ...*model.CustomerServiceSetting) error
	First() (*model.CustomerServiceSetting, error)
	Take() (*model.CustomerServiceSetting, error)
	Last() (*model.CustomerServiceSetting, error)
	Find() ([]*model.CustomerServiceSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerServiceSetting, err error)
	FindInBatches(result *[]*model.CustomerServiceSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerServiceSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerServiceSettingDo
	Assign(attrs ...field.AssignExpr) ICustomerServiceSettingDo
	Joins(fields ...field.RelationField) ICustomerServiceSettingDo
	Preload(fields ...field.RelationField) ICustomerServiceSettingDo
	FirstOrInit() (*model.CustomerServiceSetting, error)
	FirstOrCreate() (*model.CustomerServiceSetting, error)
	FindByPage(offset int, limit int) (result []*model.CustomerServiceSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerServiceSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerServiceSettingDo) Debug() ICustomerServiceSettingDo {
	return c.withDO(c.DO.Debug())
}

func (c customerServiceSettingDo) WithContext(ctx context.Context) ICustomerServiceSettingDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerServiceSettingDo) ReadDB() ICustomerServiceSettingDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerServiceSettingDo) WriteDB() ICustomerServiceSettingDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerServiceSettingDo) Session(config *gorm.Session) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerServiceSettingDo) Clauses(conds ...clause.Expression) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerServiceSettingDo) Returning(value interface{}, columns ...string) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerServiceSettingDo) Not(conds ...gen.Condition) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerServiceSettingDo) Or(conds ...gen.Condition) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerServiceSettingDo) Select(conds ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerServiceSettingDo) Where(conds ...gen.Condition) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerServiceSettingDo) Order(conds ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerServiceSettingDo) Distinct(cols ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerServiceSettingDo) Omit(cols ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerServiceSettingDo) Join(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerServiceSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerServiceSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerServiceSettingDo) Group(cols ...field.Expr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerServiceSettingDo) Having(conds ...gen.Condition) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerServiceSettingDo) Limit(limit int) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerServiceSettingDo) Offset(offset int) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerServiceSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerServiceSettingDo) Unscoped() ICustomerServiceSettingDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerServiceSettingDo) Create(values ...*model.CustomerServiceSetting) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerServiceSettingDo) CreateInBatches(values []*model.CustomerServiceSetting, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerServiceSettingDo) Save(values ...*model.CustomerServiceSetting) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerServiceSettingDo) First() (*model.CustomerServiceSetting, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceSetting), nil
	}
}

func (c customerServiceSettingDo) Take() (*model.CustomerServiceSetting, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceSetting), nil
	}
}

func (c customerServiceSettingDo) Last() (*model.CustomerServiceSetting, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceSetting), nil
	}
}

func (c customerServiceSettingDo) Find() ([]*model.CustomerServiceSetting, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerServiceSetting), err
}

func (c customerServiceSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerServiceSetting, err error) {
	buf := make([]*model.CustomerServiceSetting, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerServiceSettingDo) FindInBatches(result *[]*model.CustomerServiceSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerServiceSettingDo) Attrs(attrs ...field.AssignExpr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerServiceSettingDo) Assign(attrs ...field.AssignExpr) ICustomerServiceSettingDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerServiceSettingDo) Joins(fields ...field.RelationField) ICustomerServiceSettingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerServiceSettingDo) Preload(fields ...field.RelationField) ICustomerServiceSettingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerServiceSettingDo) FirstOrInit() (*model.CustomerServiceSetting, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceSetting), nil
	}
}

func (c customerServiceSettingDo) FirstOrCreate() (*model.CustomerServiceSetting, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceSetting), nil
	}
}

func (c customerServiceSettingDo) FindByPage(offset int, limit int) (result []*model.CustomerServiceSetting, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerServiceSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerServiceSettingDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerServiceSettingDo) Delete(models ...*model.CustomerServiceSetting) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerServiceSettingDo) withDO(do gen.Dao) *customerServiceSettingDo {
	c.DO = *do.(*gen.DO)
	return c
}
