// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminUserLoginLog(db *gorm.DB, opts ...gen.DOOption) adminUserLoginLog {
	_adminUserLoginLog := adminUserLoginLog{}

	_adminUserLoginLog.adminUserLoginLogDo.UseDB(db, opts...)
	_adminUserLoginLog.adminUserLoginLogDo.UseModel(&model.AdminUserLoginLog{})

	tableName := _adminUserLoginLog.adminUserLoginLogDo.TableName()
	_adminUserLoginLog.ALL = field.NewAsterisk(tableName)
	_adminUserLoginLog.ID = field.NewInt64(tableName, "id")
	_adminUserLoginLog.AdminUserName = field.NewString(tableName, "admin_user_name")
	_adminUserLoginLog.IP = field.NewString(tableName, "ip")
	_adminUserLoginLog.Address = field.NewString(tableName, "address")
	_adminUserLoginLog.CreatedAt = field.NewField(tableName, "created_at")
	_adminUserLoginLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminUserLoginLog.fillFieldMap()

	return _adminUserLoginLog
}

type adminUserLoginLog struct {
	adminUserLoginLogDo adminUserLoginLogDo

	ALL           field.Asterisk
	ID            field.Int64
	AdminUserName field.String
	IP            field.String
	Address       field.String
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a adminUserLoginLog) Table(newTableName string) *adminUserLoginLog {
	a.adminUserLoginLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminUserLoginLog) As(alias string) *adminUserLoginLog {
	a.adminUserLoginLogDo.DO = *(a.adminUserLoginLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminUserLoginLog) updateTableName(table string) *adminUserLoginLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminUserName = field.NewString(table, "admin_user_name")
	a.IP = field.NewString(table, "ip")
	a.Address = field.NewString(table, "address")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminUserLoginLog) WithContext(ctx context.Context) IAdminUserLoginLogDo {
	return a.adminUserLoginLogDo.WithContext(ctx)
}

func (a adminUserLoginLog) TableName() string { return a.adminUserLoginLogDo.TableName() }

func (a adminUserLoginLog) Alias() string { return a.adminUserLoginLogDo.Alias() }

func (a adminUserLoginLog) Columns(cols ...field.Expr) gen.Columns {
	return a.adminUserLoginLogDo.Columns(cols...)
}

func (a *adminUserLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminUserLoginLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_user_name"] = a.AdminUserName
	a.fieldMap["ip"] = a.IP
	a.fieldMap["address"] = a.Address
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminUserLoginLog) clone(db *gorm.DB) adminUserLoginLog {
	a.adminUserLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminUserLoginLog) replaceDB(db *gorm.DB) adminUserLoginLog {
	a.adminUserLoginLogDo.ReplaceDB(db)
	return a
}

type adminUserLoginLogDo struct{ gen.DO }

type IAdminUserLoginLogDo interface {
	gen.SubQuery
	Debug() IAdminUserLoginLogDo
	WithContext(ctx context.Context) IAdminUserLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminUserLoginLogDo
	WriteDB() IAdminUserLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminUserLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminUserLoginLogDo
	Not(conds ...gen.Condition) IAdminUserLoginLogDo
	Or(conds ...gen.Condition) IAdminUserLoginLogDo
	Select(conds ...field.Expr) IAdminUserLoginLogDo
	Where(conds ...gen.Condition) IAdminUserLoginLogDo
	Order(conds ...field.Expr) IAdminUserLoginLogDo
	Distinct(cols ...field.Expr) IAdminUserLoginLogDo
	Omit(cols ...field.Expr) IAdminUserLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo
	Group(cols ...field.Expr) IAdminUserLoginLogDo
	Having(conds ...gen.Condition) IAdminUserLoginLogDo
	Limit(limit int) IAdminUserLoginLogDo
	Offset(offset int) IAdminUserLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserLoginLogDo
	Unscoped() IAdminUserLoginLogDo
	Create(values ...*model.AdminUserLoginLog) error
	CreateInBatches(values []*model.AdminUserLoginLog, batchSize int) error
	Save(values ...*model.AdminUserLoginLog) error
	First() (*model.AdminUserLoginLog, error)
	Take() (*model.AdminUserLoginLog, error)
	Last() (*model.AdminUserLoginLog, error)
	Find() ([]*model.AdminUserLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUserLoginLog, err error)
	FindInBatches(result *[]*model.AdminUserLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminUserLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminUserLoginLogDo
	Assign(attrs ...field.AssignExpr) IAdminUserLoginLogDo
	Joins(fields ...field.RelationField) IAdminUserLoginLogDo
	Preload(fields ...field.RelationField) IAdminUserLoginLogDo
	FirstOrInit() (*model.AdminUserLoginLog, error)
	FirstOrCreate() (*model.AdminUserLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.AdminUserLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminUserLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminUserLoginLogDo) Debug() IAdminUserLoginLogDo {
	return a.withDO(a.DO.Debug())
}

func (a adminUserLoginLogDo) WithContext(ctx context.Context) IAdminUserLoginLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminUserLoginLogDo) ReadDB() IAdminUserLoginLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminUserLoginLogDo) WriteDB() IAdminUserLoginLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminUserLoginLogDo) Session(config *gorm.Session) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminUserLoginLogDo) Clauses(conds ...clause.Expression) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminUserLoginLogDo) Returning(value interface{}, columns ...string) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminUserLoginLogDo) Not(conds ...gen.Condition) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminUserLoginLogDo) Or(conds ...gen.Condition) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminUserLoginLogDo) Select(conds ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminUserLoginLogDo) Where(conds ...gen.Condition) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminUserLoginLogDo) Order(conds ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminUserLoginLogDo) Distinct(cols ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminUserLoginLogDo) Omit(cols ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminUserLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminUserLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminUserLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminUserLoginLogDo) Group(cols ...field.Expr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminUserLoginLogDo) Having(conds ...gen.Condition) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminUserLoginLogDo) Limit(limit int) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminUserLoginLogDo) Offset(offset int) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminUserLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminUserLoginLogDo) Unscoped() IAdminUserLoginLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminUserLoginLogDo) Create(values ...*model.AdminUserLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminUserLoginLogDo) CreateInBatches(values []*model.AdminUserLoginLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminUserLoginLogDo) Save(values ...*model.AdminUserLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminUserLoginLogDo) First() (*model.AdminUserLoginLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserLoginLog), nil
	}
}

func (a adminUserLoginLogDo) Take() (*model.AdminUserLoginLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserLoginLog), nil
	}
}

func (a adminUserLoginLogDo) Last() (*model.AdminUserLoginLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserLoginLog), nil
	}
}

func (a adminUserLoginLogDo) Find() ([]*model.AdminUserLoginLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminUserLoginLog), err
}

func (a adminUserLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUserLoginLog, err error) {
	buf := make([]*model.AdminUserLoginLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminUserLoginLogDo) FindInBatches(result *[]*model.AdminUserLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminUserLoginLogDo) Attrs(attrs ...field.AssignExpr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminUserLoginLogDo) Assign(attrs ...field.AssignExpr) IAdminUserLoginLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminUserLoginLogDo) Joins(fields ...field.RelationField) IAdminUserLoginLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminUserLoginLogDo) Preload(fields ...field.RelationField) IAdminUserLoginLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminUserLoginLogDo) FirstOrInit() (*model.AdminUserLoginLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserLoginLog), nil
	}
}

func (a adminUserLoginLogDo) FirstOrCreate() (*model.AdminUserLoginLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUserLoginLog), nil
	}
}

func (a adminUserLoginLogDo) FindByPage(offset int, limit int) (result []*model.AdminUserLoginLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminUserLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminUserLoginLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminUserLoginLogDo) Delete(models ...*model.AdminUserLoginLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminUserLoginLogDo) withDO(do gen.Dao) *adminUserLoginLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
