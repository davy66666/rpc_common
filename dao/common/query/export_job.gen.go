// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newExportJob(db *gorm.DB, opts ...gen.DOOption) exportJob {
	_exportJob := exportJob{}

	_exportJob.exportJobDo.UseDB(db, opts...)
	_exportJob.exportJobDo.UseModel(&model.ExportJob{})

	tableName := _exportJob.exportJobDo.TableName()
	_exportJob.ALL = field.NewAsterisk(tableName)
	_exportJob.ID = field.NewInt64(tableName, "id")
	_exportJob.ExportType = field.NewString(tableName, "export_type")
	_exportJob.ExportName = field.NewString(tableName, "export_name")
	_exportJob.Data = field.NewString(tableName, "data")
	_exportJob.Status = field.NewInt64(tableName, "status")
	_exportJob.AdminID = field.NewInt64(tableName, "admin_id")
	_exportJob.FliePath = field.NewString(tableName, "flie_path")
	_exportJob.FlieSize = field.NewString(tableName, "flie_size")
	_exportJob.ExpireAt = field.NewField(tableName, "expire_at")
	_exportJob.Remark = field.NewString(tableName, "remark")
	_exportJob.CreatedAt = field.NewField(tableName, "created_at")
	_exportJob.UpdatedAt = field.NewField(tableName, "updated_at")

	_exportJob.fillFieldMap()

	return _exportJob
}

// exportJob 导出数据队列任务
type exportJob struct {
	exportJobDo exportJobDo

	ALL        field.Asterisk
	ID         field.Int64
	ExportType field.String // 导出类型
	ExportName field.String // 所属模块
	Data       field.String // 队列数据
	Status     field.Int64  // 队列执行状态：0未执行，1失败，2成功
	AdminID    field.Int64  // 操作管理员ID
	FliePath   field.String // 文件名
	FlieSize   field.String // 文件大小
	ExpireAt   field.Field  // 存放到期时间
	Remark     field.String // 备注
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (e exportJob) Table(newTableName string) *exportJob {
	e.exportJobDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exportJob) As(alias string) *exportJob {
	e.exportJobDo.DO = *(e.exportJobDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exportJob) updateTableName(table string) *exportJob {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.ExportType = field.NewString(table, "export_type")
	e.ExportName = field.NewString(table, "export_name")
	e.Data = field.NewString(table, "data")
	e.Status = field.NewInt64(table, "status")
	e.AdminID = field.NewInt64(table, "admin_id")
	e.FliePath = field.NewString(table, "flie_path")
	e.FlieSize = field.NewString(table, "flie_size")
	e.ExpireAt = field.NewField(table, "expire_at")
	e.Remark = field.NewString(table, "remark")
	e.CreatedAt = field.NewField(table, "created_at")
	e.UpdatedAt = field.NewField(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *exportJob) WithContext(ctx context.Context) IExportJobDo {
	return e.exportJobDo.WithContext(ctx)
}

func (e exportJob) TableName() string { return e.exportJobDo.TableName() }

func (e exportJob) Alias() string { return e.exportJobDo.Alias() }

func (e exportJob) Columns(cols ...field.Expr) gen.Columns { return e.exportJobDo.Columns(cols...) }

func (e *exportJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exportJob) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["export_type"] = e.ExportType
	e.fieldMap["export_name"] = e.ExportName
	e.fieldMap["data"] = e.Data
	e.fieldMap["status"] = e.Status
	e.fieldMap["admin_id"] = e.AdminID
	e.fieldMap["flie_path"] = e.FliePath
	e.fieldMap["flie_size"] = e.FlieSize
	e.fieldMap["expire_at"] = e.ExpireAt
	e.fieldMap["remark"] = e.Remark
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e exportJob) clone(db *gorm.DB) exportJob {
	e.exportJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exportJob) replaceDB(db *gorm.DB) exportJob {
	e.exportJobDo.ReplaceDB(db)
	return e
}

type exportJobDo struct{ gen.DO }

type IExportJobDo interface {
	gen.SubQuery
	Debug() IExportJobDo
	WithContext(ctx context.Context) IExportJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExportJobDo
	WriteDB() IExportJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExportJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExportJobDo
	Not(conds ...gen.Condition) IExportJobDo
	Or(conds ...gen.Condition) IExportJobDo
	Select(conds ...field.Expr) IExportJobDo
	Where(conds ...gen.Condition) IExportJobDo
	Order(conds ...field.Expr) IExportJobDo
	Distinct(cols ...field.Expr) IExportJobDo
	Omit(cols ...field.Expr) IExportJobDo
	Join(table schema.Tabler, on ...field.Expr) IExportJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExportJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExportJobDo
	Group(cols ...field.Expr) IExportJobDo
	Having(conds ...gen.Condition) IExportJobDo
	Limit(limit int) IExportJobDo
	Offset(offset int) IExportJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExportJobDo
	Unscoped() IExportJobDo
	Create(values ...*model.ExportJob) error
	CreateInBatches(values []*model.ExportJob, batchSize int) error
	Save(values ...*model.ExportJob) error
	First() (*model.ExportJob, error)
	Take() (*model.ExportJob, error)
	Last() (*model.ExportJob, error)
	Find() ([]*model.ExportJob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExportJob, err error)
	FindInBatches(result *[]*model.ExportJob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExportJob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExportJobDo
	Assign(attrs ...field.AssignExpr) IExportJobDo
	Joins(fields ...field.RelationField) IExportJobDo
	Preload(fields ...field.RelationField) IExportJobDo
	FirstOrInit() (*model.ExportJob, error)
	FirstOrCreate() (*model.ExportJob, error)
	FindByPage(offset int, limit int) (result []*model.ExportJob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExportJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exportJobDo) Debug() IExportJobDo {
	return e.withDO(e.DO.Debug())
}

func (e exportJobDo) WithContext(ctx context.Context) IExportJobDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exportJobDo) ReadDB() IExportJobDo {
	return e.Clauses(dbresolver.Read)
}

func (e exportJobDo) WriteDB() IExportJobDo {
	return e.Clauses(dbresolver.Write)
}

func (e exportJobDo) Session(config *gorm.Session) IExportJobDo {
	return e.withDO(e.DO.Session(config))
}

func (e exportJobDo) Clauses(conds ...clause.Expression) IExportJobDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exportJobDo) Returning(value interface{}, columns ...string) IExportJobDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exportJobDo) Not(conds ...gen.Condition) IExportJobDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exportJobDo) Or(conds ...gen.Condition) IExportJobDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exportJobDo) Select(conds ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exportJobDo) Where(conds ...gen.Condition) IExportJobDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exportJobDo) Order(conds ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exportJobDo) Distinct(cols ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exportJobDo) Omit(cols ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exportJobDo) Join(table schema.Tabler, on ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exportJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exportJobDo) RightJoin(table schema.Tabler, on ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exportJobDo) Group(cols ...field.Expr) IExportJobDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exportJobDo) Having(conds ...gen.Condition) IExportJobDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exportJobDo) Limit(limit int) IExportJobDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exportJobDo) Offset(offset int) IExportJobDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exportJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExportJobDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exportJobDo) Unscoped() IExportJobDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exportJobDo) Create(values ...*model.ExportJob) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exportJobDo) CreateInBatches(values []*model.ExportJob, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exportJobDo) Save(values ...*model.ExportJob) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exportJobDo) First() (*model.ExportJob, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExportJob), nil
	}
}

func (e exportJobDo) Take() (*model.ExportJob, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExportJob), nil
	}
}

func (e exportJobDo) Last() (*model.ExportJob, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExportJob), nil
	}
}

func (e exportJobDo) Find() ([]*model.ExportJob, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExportJob), err
}

func (e exportJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExportJob, err error) {
	buf := make([]*model.ExportJob, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exportJobDo) FindInBatches(result *[]*model.ExportJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exportJobDo) Attrs(attrs ...field.AssignExpr) IExportJobDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exportJobDo) Assign(attrs ...field.AssignExpr) IExportJobDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exportJobDo) Joins(fields ...field.RelationField) IExportJobDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exportJobDo) Preload(fields ...field.RelationField) IExportJobDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exportJobDo) FirstOrInit() (*model.ExportJob, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExportJob), nil
	}
}

func (e exportJobDo) FirstOrCreate() (*model.ExportJob, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExportJob), nil
	}
}

func (e exportJobDo) FindByPage(offset int, limit int) (result []*model.ExportJob, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exportJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exportJobDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exportJobDo) Delete(models ...*model.ExportJob) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exportJobDo) withDO(do gen.Dao) *exportJobDo {
	e.DO = *do.(*gen.DO)
	return e
}
