// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newThirdUCallbackLog(db *gorm.DB, opts ...gen.DOOption) thirdUCallbackLog {
	_thirdUCallbackLog := thirdUCallbackLog{}

	_thirdUCallbackLog.thirdUCallbackLogDo.UseDB(db, opts...)
	_thirdUCallbackLog.thirdUCallbackLogDo.UseModel(&model.ThirdUCallbackLog{})

	tableName := _thirdUCallbackLog.thirdUCallbackLogDo.TableName()
	_thirdUCallbackLog.ALL = field.NewAsterisk(tableName)
	_thirdUCallbackLog.ID = field.NewInt64(tableName, "id")
	_thirdUCallbackLog.Hash = field.NewString(tableName, "hash")
	_thirdUCallbackLog.IP = field.NewString(tableName, "ip")
	_thirdUCallbackLog.Status = field.NewInt64(tableName, "status")
	_thirdUCallbackLog.ReturnMsg = field.NewString(tableName, "return_msg")
	_thirdUCallbackLog.CallbackData = field.NewString(tableName, "callback_data")
	_thirdUCallbackLog.CreatedAt = field.NewField(tableName, "created_at")
	_thirdUCallbackLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_thirdUCallbackLog.fillFieldMap()

	return _thirdUCallbackLog
}

// thirdUCallbackLog 3U充值回调记录表
type thirdUCallbackLog struct {
	thirdUCallbackLogDo thirdUCallbackLogDo

	ALL          field.Asterisk
	ID           field.Int64
	Hash         field.String // 单笔交易唯一hash值
	IP           field.String // 回调来源IP
	Status       field.Int64  // 回调处理结果: 1成功，0失败
	ReturnMsg    field.String // 回调返回msg信息
	CallbackData field.String // 回调数据,jsonArr格式
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (t thirdUCallbackLog) Table(newTableName string) *thirdUCallbackLog {
	t.thirdUCallbackLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdUCallbackLog) As(alias string) *thirdUCallbackLog {
	t.thirdUCallbackLogDo.DO = *(t.thirdUCallbackLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdUCallbackLog) updateTableName(table string) *thirdUCallbackLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Hash = field.NewString(table, "hash")
	t.IP = field.NewString(table, "ip")
	t.Status = field.NewInt64(table, "status")
	t.ReturnMsg = field.NewString(table, "return_msg")
	t.CallbackData = field.NewString(table, "callback_data")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *thirdUCallbackLog) WithContext(ctx context.Context) IThirdUCallbackLogDo {
	return t.thirdUCallbackLogDo.WithContext(ctx)
}

func (t thirdUCallbackLog) TableName() string { return t.thirdUCallbackLogDo.TableName() }

func (t thirdUCallbackLog) Alias() string { return t.thirdUCallbackLogDo.Alias() }

func (t thirdUCallbackLog) Columns(cols ...field.Expr) gen.Columns {
	return t.thirdUCallbackLogDo.Columns(cols...)
}

func (t *thirdUCallbackLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdUCallbackLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["hash"] = t.Hash
	t.fieldMap["ip"] = t.IP
	t.fieldMap["status"] = t.Status
	t.fieldMap["return_msg"] = t.ReturnMsg
	t.fieldMap["callback_data"] = t.CallbackData
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t thirdUCallbackLog) clone(db *gorm.DB) thirdUCallbackLog {
	t.thirdUCallbackLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdUCallbackLog) replaceDB(db *gorm.DB) thirdUCallbackLog {
	t.thirdUCallbackLogDo.ReplaceDB(db)
	return t
}

type thirdUCallbackLogDo struct{ gen.DO }

type IThirdUCallbackLogDo interface {
	gen.SubQuery
	Debug() IThirdUCallbackLogDo
	WithContext(ctx context.Context) IThirdUCallbackLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThirdUCallbackLogDo
	WriteDB() IThirdUCallbackLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThirdUCallbackLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThirdUCallbackLogDo
	Not(conds ...gen.Condition) IThirdUCallbackLogDo
	Or(conds ...gen.Condition) IThirdUCallbackLogDo
	Select(conds ...field.Expr) IThirdUCallbackLogDo
	Where(conds ...gen.Condition) IThirdUCallbackLogDo
	Order(conds ...field.Expr) IThirdUCallbackLogDo
	Distinct(cols ...field.Expr) IThirdUCallbackLogDo
	Omit(cols ...field.Expr) IThirdUCallbackLogDo
	Join(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo
	Group(cols ...field.Expr) IThirdUCallbackLogDo
	Having(conds ...gen.Condition) IThirdUCallbackLogDo
	Limit(limit int) IThirdUCallbackLogDo
	Offset(offset int) IThirdUCallbackLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdUCallbackLogDo
	Unscoped() IThirdUCallbackLogDo
	Create(values ...*model.ThirdUCallbackLog) error
	CreateInBatches(values []*model.ThirdUCallbackLog, batchSize int) error
	Save(values ...*model.ThirdUCallbackLog) error
	First() (*model.ThirdUCallbackLog, error)
	Take() (*model.ThirdUCallbackLog, error)
	Last() (*model.ThirdUCallbackLog, error)
	Find() ([]*model.ThirdUCallbackLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdUCallbackLog, err error)
	FindInBatches(result *[]*model.ThirdUCallbackLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThirdUCallbackLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThirdUCallbackLogDo
	Assign(attrs ...field.AssignExpr) IThirdUCallbackLogDo
	Joins(fields ...field.RelationField) IThirdUCallbackLogDo
	Preload(fields ...field.RelationField) IThirdUCallbackLogDo
	FirstOrInit() (*model.ThirdUCallbackLog, error)
	FirstOrCreate() (*model.ThirdUCallbackLog, error)
	FindByPage(offset int, limit int) (result []*model.ThirdUCallbackLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThirdUCallbackLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t thirdUCallbackLogDo) Debug() IThirdUCallbackLogDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdUCallbackLogDo) WithContext(ctx context.Context) IThirdUCallbackLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdUCallbackLogDo) ReadDB() IThirdUCallbackLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdUCallbackLogDo) WriteDB() IThirdUCallbackLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdUCallbackLogDo) Session(config *gorm.Session) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdUCallbackLogDo) Clauses(conds ...clause.Expression) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdUCallbackLogDo) Returning(value interface{}, columns ...string) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdUCallbackLogDo) Not(conds ...gen.Condition) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdUCallbackLogDo) Or(conds ...gen.Condition) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdUCallbackLogDo) Select(conds ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdUCallbackLogDo) Where(conds ...gen.Condition) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdUCallbackLogDo) Order(conds ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdUCallbackLogDo) Distinct(cols ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdUCallbackLogDo) Omit(cols ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdUCallbackLogDo) Join(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdUCallbackLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdUCallbackLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdUCallbackLogDo) Group(cols ...field.Expr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdUCallbackLogDo) Having(conds ...gen.Condition) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdUCallbackLogDo) Limit(limit int) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdUCallbackLogDo) Offset(offset int) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdUCallbackLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdUCallbackLogDo) Unscoped() IThirdUCallbackLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdUCallbackLogDo) Create(values ...*model.ThirdUCallbackLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdUCallbackLogDo) CreateInBatches(values []*model.ThirdUCallbackLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdUCallbackLogDo) Save(values ...*model.ThirdUCallbackLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdUCallbackLogDo) First() (*model.ThirdUCallbackLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdUCallbackLog), nil
	}
}

func (t thirdUCallbackLogDo) Take() (*model.ThirdUCallbackLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdUCallbackLog), nil
	}
}

func (t thirdUCallbackLogDo) Last() (*model.ThirdUCallbackLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdUCallbackLog), nil
	}
}

func (t thirdUCallbackLogDo) Find() ([]*model.ThirdUCallbackLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdUCallbackLog), err
}

func (t thirdUCallbackLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdUCallbackLog, err error) {
	buf := make([]*model.ThirdUCallbackLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdUCallbackLogDo) FindInBatches(result *[]*model.ThirdUCallbackLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdUCallbackLogDo) Attrs(attrs ...field.AssignExpr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdUCallbackLogDo) Assign(attrs ...field.AssignExpr) IThirdUCallbackLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdUCallbackLogDo) Joins(fields ...field.RelationField) IThirdUCallbackLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdUCallbackLogDo) Preload(fields ...field.RelationField) IThirdUCallbackLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdUCallbackLogDo) FirstOrInit() (*model.ThirdUCallbackLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdUCallbackLog), nil
	}
}

func (t thirdUCallbackLogDo) FirstOrCreate() (*model.ThirdUCallbackLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdUCallbackLog), nil
	}
}

func (t thirdUCallbackLogDo) FindByPage(offset int, limit int) (result []*model.ThirdUCallbackLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdUCallbackLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdUCallbackLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdUCallbackLogDo) Delete(models ...*model.ThirdUCallbackLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdUCallbackLogDo) withDO(do gen.Dao) *thirdUCallbackLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
