// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRedpacketPlayNum(db *gorm.DB, opts ...gen.DOOption) redpacketPlayNum {
	_redpacketPlayNum := redpacketPlayNum{}

	_redpacketPlayNum.redpacketPlayNumDo.UseDB(db, opts...)
	_redpacketPlayNum.redpacketPlayNumDo.UseModel(&model.RedpacketPlayNum{})

	tableName := _redpacketPlayNum.redpacketPlayNumDo.TableName()
	_redpacketPlayNum.ALL = field.NewAsterisk(tableName)
	_redpacketPlayNum.ID = field.NewInt64(tableName, "id")
	_redpacketPlayNum.Type = field.NewInt64(tableName, "type")
	_redpacketPlayNum.RechargeAmount = field.NewFloat64(tableName, "recharge_amount")
	_redpacketPlayNum.Num = field.NewInt64(tableName, "num")
	_redpacketPlayNum.Status = field.NewInt64(tableName, "status")
	_redpacketPlayNum.OperatorID = field.NewInt64(tableName, "operator_id")
	_redpacketPlayNum.OperatorName = field.NewString(tableName, "operator_name")
	_redpacketPlayNum.CreatedAt = field.NewField(tableName, "created_at")
	_redpacketPlayNum.UpdatedAt = field.NewField(tableName, "updated_at")

	_redpacketPlayNum.fillFieldMap()

	return _redpacketPlayNum
}

// redpacketPlayNum 充值金额对应抽红包次数
type redpacketPlayNum struct {
	redpacketPlayNumDo redpacketPlayNumDo

	ALL            field.Asterisk
	ID             field.Int64
	Type           field.Int64   // 状态; 0:红包, 1:大转盘
	RechargeAmount field.Float64 // 充值金额(元)
	Num            field.Int64   // 抽取次数
	Status         field.Int64   // 状态; 0:隐藏, 1:正常
	OperatorID     field.Int64   // 操作人id
	OperatorName   field.String  // 操作人姓名
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (r redpacketPlayNum) Table(newTableName string) *redpacketPlayNum {
	r.redpacketPlayNumDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r redpacketPlayNum) As(alias string) *redpacketPlayNum {
	r.redpacketPlayNumDo.DO = *(r.redpacketPlayNumDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *redpacketPlayNum) updateTableName(table string) *redpacketPlayNum {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Type = field.NewInt64(table, "type")
	r.RechargeAmount = field.NewFloat64(table, "recharge_amount")
	r.Num = field.NewInt64(table, "num")
	r.Status = field.NewInt64(table, "status")
	r.OperatorID = field.NewInt64(table, "operator_id")
	r.OperatorName = field.NewString(table, "operator_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *redpacketPlayNum) WithContext(ctx context.Context) IRedpacketPlayNumDo {
	return r.redpacketPlayNumDo.WithContext(ctx)
}

func (r redpacketPlayNum) TableName() string { return r.redpacketPlayNumDo.TableName() }

func (r redpacketPlayNum) Alias() string { return r.redpacketPlayNumDo.Alias() }

func (r redpacketPlayNum) Columns(cols ...field.Expr) gen.Columns {
	return r.redpacketPlayNumDo.Columns(cols...)
}

func (r *redpacketPlayNum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *redpacketPlayNum) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["type"] = r.Type
	r.fieldMap["recharge_amount"] = r.RechargeAmount
	r.fieldMap["num"] = r.Num
	r.fieldMap["status"] = r.Status
	r.fieldMap["operator_id"] = r.OperatorID
	r.fieldMap["operator_name"] = r.OperatorName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r redpacketPlayNum) clone(db *gorm.DB) redpacketPlayNum {
	r.redpacketPlayNumDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r redpacketPlayNum) replaceDB(db *gorm.DB) redpacketPlayNum {
	r.redpacketPlayNumDo.ReplaceDB(db)
	return r
}

type redpacketPlayNumDo struct{ gen.DO }

type IRedpacketPlayNumDo interface {
	gen.SubQuery
	Debug() IRedpacketPlayNumDo
	WithContext(ctx context.Context) IRedpacketPlayNumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRedpacketPlayNumDo
	WriteDB() IRedpacketPlayNumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRedpacketPlayNumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRedpacketPlayNumDo
	Not(conds ...gen.Condition) IRedpacketPlayNumDo
	Or(conds ...gen.Condition) IRedpacketPlayNumDo
	Select(conds ...field.Expr) IRedpacketPlayNumDo
	Where(conds ...gen.Condition) IRedpacketPlayNumDo
	Order(conds ...field.Expr) IRedpacketPlayNumDo
	Distinct(cols ...field.Expr) IRedpacketPlayNumDo
	Omit(cols ...field.Expr) IRedpacketPlayNumDo
	Join(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo
	Group(cols ...field.Expr) IRedpacketPlayNumDo
	Having(conds ...gen.Condition) IRedpacketPlayNumDo
	Limit(limit int) IRedpacketPlayNumDo
	Offset(offset int) IRedpacketPlayNumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRedpacketPlayNumDo
	Unscoped() IRedpacketPlayNumDo
	Create(values ...*model.RedpacketPlayNum) error
	CreateInBatches(values []*model.RedpacketPlayNum, batchSize int) error
	Save(values ...*model.RedpacketPlayNum) error
	First() (*model.RedpacketPlayNum, error)
	Take() (*model.RedpacketPlayNum, error)
	Last() (*model.RedpacketPlayNum, error)
	Find() ([]*model.RedpacketPlayNum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RedpacketPlayNum, err error)
	FindInBatches(result *[]*model.RedpacketPlayNum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RedpacketPlayNum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRedpacketPlayNumDo
	Assign(attrs ...field.AssignExpr) IRedpacketPlayNumDo
	Joins(fields ...field.RelationField) IRedpacketPlayNumDo
	Preload(fields ...field.RelationField) IRedpacketPlayNumDo
	FirstOrInit() (*model.RedpacketPlayNum, error)
	FirstOrCreate() (*model.RedpacketPlayNum, error)
	FindByPage(offset int, limit int) (result []*model.RedpacketPlayNum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRedpacketPlayNumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r redpacketPlayNumDo) Debug() IRedpacketPlayNumDo {
	return r.withDO(r.DO.Debug())
}

func (r redpacketPlayNumDo) WithContext(ctx context.Context) IRedpacketPlayNumDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r redpacketPlayNumDo) ReadDB() IRedpacketPlayNumDo {
	return r.Clauses(dbresolver.Read)
}

func (r redpacketPlayNumDo) WriteDB() IRedpacketPlayNumDo {
	return r.Clauses(dbresolver.Write)
}

func (r redpacketPlayNumDo) Session(config *gorm.Session) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Session(config))
}

func (r redpacketPlayNumDo) Clauses(conds ...clause.Expression) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r redpacketPlayNumDo) Returning(value interface{}, columns ...string) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r redpacketPlayNumDo) Not(conds ...gen.Condition) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r redpacketPlayNumDo) Or(conds ...gen.Condition) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r redpacketPlayNumDo) Select(conds ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r redpacketPlayNumDo) Where(conds ...gen.Condition) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r redpacketPlayNumDo) Order(conds ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r redpacketPlayNumDo) Distinct(cols ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r redpacketPlayNumDo) Omit(cols ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r redpacketPlayNumDo) Join(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r redpacketPlayNumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r redpacketPlayNumDo) RightJoin(table schema.Tabler, on ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r redpacketPlayNumDo) Group(cols ...field.Expr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r redpacketPlayNumDo) Having(conds ...gen.Condition) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r redpacketPlayNumDo) Limit(limit int) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r redpacketPlayNumDo) Offset(offset int) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r redpacketPlayNumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r redpacketPlayNumDo) Unscoped() IRedpacketPlayNumDo {
	return r.withDO(r.DO.Unscoped())
}

func (r redpacketPlayNumDo) Create(values ...*model.RedpacketPlayNum) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r redpacketPlayNumDo) CreateInBatches(values []*model.RedpacketPlayNum, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r redpacketPlayNumDo) Save(values ...*model.RedpacketPlayNum) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r redpacketPlayNumDo) First() (*model.RedpacketPlayNum, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedpacketPlayNum), nil
	}
}

func (r redpacketPlayNumDo) Take() (*model.RedpacketPlayNum, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedpacketPlayNum), nil
	}
}

func (r redpacketPlayNumDo) Last() (*model.RedpacketPlayNum, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedpacketPlayNum), nil
	}
}

func (r redpacketPlayNumDo) Find() ([]*model.RedpacketPlayNum, error) {
	result, err := r.DO.Find()
	return result.([]*model.RedpacketPlayNum), err
}

func (r redpacketPlayNumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RedpacketPlayNum, err error) {
	buf := make([]*model.RedpacketPlayNum, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r redpacketPlayNumDo) FindInBatches(result *[]*model.RedpacketPlayNum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r redpacketPlayNumDo) Attrs(attrs ...field.AssignExpr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r redpacketPlayNumDo) Assign(attrs ...field.AssignExpr) IRedpacketPlayNumDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r redpacketPlayNumDo) Joins(fields ...field.RelationField) IRedpacketPlayNumDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r redpacketPlayNumDo) Preload(fields ...field.RelationField) IRedpacketPlayNumDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r redpacketPlayNumDo) FirstOrInit() (*model.RedpacketPlayNum, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedpacketPlayNum), nil
	}
}

func (r redpacketPlayNumDo) FirstOrCreate() (*model.RedpacketPlayNum, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedpacketPlayNum), nil
	}
}

func (r redpacketPlayNumDo) FindByPage(offset int, limit int) (result []*model.RedpacketPlayNum, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r redpacketPlayNumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r redpacketPlayNumDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r redpacketPlayNumDo) Delete(models ...*model.RedpacketPlayNum) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *redpacketPlayNumDo) withDO(do gen.Dao) *redpacketPlayNumDo {
	r.DO = *do.(*gen.DO)
	return r
}
