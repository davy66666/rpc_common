// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPushUserMessageAd(db *gorm.DB, opts ...gen.DOOption) pushUserMessageAd {
	_pushUserMessageAd := pushUserMessageAd{}

	_pushUserMessageAd.pushUserMessageAdDo.UseDB(db, opts...)
	_pushUserMessageAd.pushUserMessageAdDo.UseModel(&model.PushUserMessageAd{})

	tableName := _pushUserMessageAd.pushUserMessageAdDo.TableName()
	_pushUserMessageAd.ALL = field.NewAsterisk(tableName)
	_pushUserMessageAd.ID = field.NewInt64(tableName, "id")
	_pushUserMessageAd.Title = field.NewString(tableName, "title")
	_pushUserMessageAd.Type = field.NewInt64(tableName, "type")
	_pushUserMessageAd.Pos = field.NewInt64(tableName, "pos")
	_pushUserMessageAd.Plat = field.NewString(tableName, "plat")
	_pushUserMessageAd.Freq = field.NewInt64(tableName, "freq")
	_pushUserMessageAd.PcImgPath = field.NewString(tableName, "pc_img_path")
	_pushUserMessageAd.MobileImgPath = field.NewString(tableName, "mobile_img_path")
	_pushUserMessageAd.PcJumpURL = field.NewString(tableName, "pc_jump_url")
	_pushUserMessageAd.H5JumpURL = field.NewString(tableName, "h5_jump_url")
	_pushUserMessageAd.IosJumpURL = field.NewString(tableName, "ios_jump_url")
	_pushUserMessageAd.AndroidJumpURL = field.NewString(tableName, "android_jump_url")
	_pushUserMessageAd.UserType = field.NewInt64(tableName, "user_type")
	_pushUserMessageAd.UserList = field.NewString(tableName, "user_list")
	_pushUserMessageAd.UserLevels = field.NewString(tableName, "user_levels")
	_pushUserMessageAd.PayLevels = field.NewString(tableName, "pay_levels")
	_pushUserMessageAd.Sort = field.NewInt64(tableName, "sort")
	_pushUserMessageAd.IsOpen = field.NewInt64(tableName, "is_open")
	_pushUserMessageAd.IsDel = field.NewInt64(tableName, "is_del")
	_pushUserMessageAd.Remark = field.NewString(tableName, "remark")
	_pushUserMessageAd.AdminName = field.NewString(tableName, "admin_name")
	_pushUserMessageAd.CreatedAt = field.NewField(tableName, "created_at")
	_pushUserMessageAd.UpdatedAt = field.NewField(tableName, "updated_at")
	_pushUserMessageAd.JumpMethod = field.NewInt64(tableName, "jump_method")
	_pushUserMessageAd.IsFromNewPushMessage = field.NewInt64(tableName, "is_from_new_push_message")

	_pushUserMessageAd.fillFieldMap()

	return _pushUserMessageAd
}

// pushUserMessageAd 推送广告配置表
type pushUserMessageAd struct {
	pushUserMessageAdDo pushUserMessageAdDo

	ALL                  field.Asterisk
	ID                   field.Int64
	Title                field.String // 广告标题
	Type                 field.Int64  // 广告类型 1:弹窗 2:悬浮
	Pos                  field.Int64  // 广告位置 1:首页 2:充值 3:取款 4:优惠中心 5:会员中心
	Plat                 field.String // 终端（同user表的plat）, 逗号分割
	Freq                 field.Int64  // 频次 1:每次登陆 2:每天一次 3:只弹一次
	PcImgPath            field.String // pc端图片
	MobileImgPath        field.String // mobile端图片
	PcJumpURL            field.String // pc跳转地址
	H5JumpURL            field.String // h5跳转地址
	IosJumpURL           field.String // ios跳转地址
	AndroidJumpURL       field.String // android跳转地址
	UserType             field.Int64  // 用户群类型 1:所有用户 2:指定用户 3:指定VIP层级 4:指定支付层级 5:指定VIP+支付层级
	UserList             field.String // 用户群，多个用户用逗号分割
	UserLevels           field.String // user_level的id,逗号分割
	PayLevels            field.String // pay_level的en_name,逗号分割
	Sort                 field.Int64  // 排序
	IsOpen               field.Int64  // 状态
	IsDel                field.Int64  // 是否删除
	Remark               field.String // 备注
	AdminName            field.String // 操作人员
	CreatedAt            field.Field
	UpdatedAt            field.Field
	JumpMethod           field.Int64 // 跳转方式 1 链接 2打开私信详情
	IsFromNewPushMessage field.Int64 // 是否来自新的推送私信消息

	fieldMap map[string]field.Expr
}

func (p pushUserMessageAd) Table(newTableName string) *pushUserMessageAd {
	p.pushUserMessageAdDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pushUserMessageAd) As(alias string) *pushUserMessageAd {
	p.pushUserMessageAdDo.DO = *(p.pushUserMessageAdDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pushUserMessageAd) updateTableName(table string) *pushUserMessageAd {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Title = field.NewString(table, "title")
	p.Type = field.NewInt64(table, "type")
	p.Pos = field.NewInt64(table, "pos")
	p.Plat = field.NewString(table, "plat")
	p.Freq = field.NewInt64(table, "freq")
	p.PcImgPath = field.NewString(table, "pc_img_path")
	p.MobileImgPath = field.NewString(table, "mobile_img_path")
	p.PcJumpURL = field.NewString(table, "pc_jump_url")
	p.H5JumpURL = field.NewString(table, "h5_jump_url")
	p.IosJumpURL = field.NewString(table, "ios_jump_url")
	p.AndroidJumpURL = field.NewString(table, "android_jump_url")
	p.UserType = field.NewInt64(table, "user_type")
	p.UserList = field.NewString(table, "user_list")
	p.UserLevels = field.NewString(table, "user_levels")
	p.PayLevels = field.NewString(table, "pay_levels")
	p.Sort = field.NewInt64(table, "sort")
	p.IsOpen = field.NewInt64(table, "is_open")
	p.IsDel = field.NewInt64(table, "is_del")
	p.Remark = field.NewString(table, "remark")
	p.AdminName = field.NewString(table, "admin_name")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.JumpMethod = field.NewInt64(table, "jump_method")
	p.IsFromNewPushMessage = field.NewInt64(table, "is_from_new_push_message")

	p.fillFieldMap()

	return p
}

func (p *pushUserMessageAd) WithContext(ctx context.Context) IPushUserMessageAdDo {
	return p.pushUserMessageAdDo.WithContext(ctx)
}

func (p pushUserMessageAd) TableName() string { return p.pushUserMessageAdDo.TableName() }

func (p pushUserMessageAd) Alias() string { return p.pushUserMessageAdDo.Alias() }

func (p pushUserMessageAd) Columns(cols ...field.Expr) gen.Columns {
	return p.pushUserMessageAdDo.Columns(cols...)
}

func (p *pushUserMessageAd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pushUserMessageAd) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 25)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["type"] = p.Type
	p.fieldMap["pos"] = p.Pos
	p.fieldMap["plat"] = p.Plat
	p.fieldMap["freq"] = p.Freq
	p.fieldMap["pc_img_path"] = p.PcImgPath
	p.fieldMap["mobile_img_path"] = p.MobileImgPath
	p.fieldMap["pc_jump_url"] = p.PcJumpURL
	p.fieldMap["h5_jump_url"] = p.H5JumpURL
	p.fieldMap["ios_jump_url"] = p.IosJumpURL
	p.fieldMap["android_jump_url"] = p.AndroidJumpURL
	p.fieldMap["user_type"] = p.UserType
	p.fieldMap["user_list"] = p.UserList
	p.fieldMap["user_levels"] = p.UserLevels
	p.fieldMap["pay_levels"] = p.PayLevels
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["is_open"] = p.IsOpen
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["admin_name"] = p.AdminName
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["jump_method"] = p.JumpMethod
	p.fieldMap["is_from_new_push_message"] = p.IsFromNewPushMessage
}

func (p pushUserMessageAd) clone(db *gorm.DB) pushUserMessageAd {
	p.pushUserMessageAdDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pushUserMessageAd) replaceDB(db *gorm.DB) pushUserMessageAd {
	p.pushUserMessageAdDo.ReplaceDB(db)
	return p
}

type pushUserMessageAdDo struct{ gen.DO }

type IPushUserMessageAdDo interface {
	gen.SubQuery
	Debug() IPushUserMessageAdDo
	WithContext(ctx context.Context) IPushUserMessageAdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPushUserMessageAdDo
	WriteDB() IPushUserMessageAdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPushUserMessageAdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPushUserMessageAdDo
	Not(conds ...gen.Condition) IPushUserMessageAdDo
	Or(conds ...gen.Condition) IPushUserMessageAdDo
	Select(conds ...field.Expr) IPushUserMessageAdDo
	Where(conds ...gen.Condition) IPushUserMessageAdDo
	Order(conds ...field.Expr) IPushUserMessageAdDo
	Distinct(cols ...field.Expr) IPushUserMessageAdDo
	Omit(cols ...field.Expr) IPushUserMessageAdDo
	Join(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo
	Group(cols ...field.Expr) IPushUserMessageAdDo
	Having(conds ...gen.Condition) IPushUserMessageAdDo
	Limit(limit int) IPushUserMessageAdDo
	Offset(offset int) IPushUserMessageAdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPushUserMessageAdDo
	Unscoped() IPushUserMessageAdDo
	Create(values ...*model.PushUserMessageAd) error
	CreateInBatches(values []*model.PushUserMessageAd, batchSize int) error
	Save(values ...*model.PushUserMessageAd) error
	First() (*model.PushUserMessageAd, error)
	Take() (*model.PushUserMessageAd, error)
	Last() (*model.PushUserMessageAd, error)
	Find() ([]*model.PushUserMessageAd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PushUserMessageAd, err error)
	FindInBatches(result *[]*model.PushUserMessageAd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PushUserMessageAd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPushUserMessageAdDo
	Assign(attrs ...field.AssignExpr) IPushUserMessageAdDo
	Joins(fields ...field.RelationField) IPushUserMessageAdDo
	Preload(fields ...field.RelationField) IPushUserMessageAdDo
	FirstOrInit() (*model.PushUserMessageAd, error)
	FirstOrCreate() (*model.PushUserMessageAd, error)
	FindByPage(offset int, limit int) (result []*model.PushUserMessageAd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPushUserMessageAdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pushUserMessageAdDo) Debug() IPushUserMessageAdDo {
	return p.withDO(p.DO.Debug())
}

func (p pushUserMessageAdDo) WithContext(ctx context.Context) IPushUserMessageAdDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pushUserMessageAdDo) ReadDB() IPushUserMessageAdDo {
	return p.Clauses(dbresolver.Read)
}

func (p pushUserMessageAdDo) WriteDB() IPushUserMessageAdDo {
	return p.Clauses(dbresolver.Write)
}

func (p pushUserMessageAdDo) Session(config *gorm.Session) IPushUserMessageAdDo {
	return p.withDO(p.DO.Session(config))
}

func (p pushUserMessageAdDo) Clauses(conds ...clause.Expression) IPushUserMessageAdDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pushUserMessageAdDo) Returning(value interface{}, columns ...string) IPushUserMessageAdDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pushUserMessageAdDo) Not(conds ...gen.Condition) IPushUserMessageAdDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pushUserMessageAdDo) Or(conds ...gen.Condition) IPushUserMessageAdDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pushUserMessageAdDo) Select(conds ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pushUserMessageAdDo) Where(conds ...gen.Condition) IPushUserMessageAdDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pushUserMessageAdDo) Order(conds ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pushUserMessageAdDo) Distinct(cols ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pushUserMessageAdDo) Omit(cols ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pushUserMessageAdDo) Join(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pushUserMessageAdDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pushUserMessageAdDo) RightJoin(table schema.Tabler, on ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pushUserMessageAdDo) Group(cols ...field.Expr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pushUserMessageAdDo) Having(conds ...gen.Condition) IPushUserMessageAdDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pushUserMessageAdDo) Limit(limit int) IPushUserMessageAdDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pushUserMessageAdDo) Offset(offset int) IPushUserMessageAdDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pushUserMessageAdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPushUserMessageAdDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pushUserMessageAdDo) Unscoped() IPushUserMessageAdDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pushUserMessageAdDo) Create(values ...*model.PushUserMessageAd) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pushUserMessageAdDo) CreateInBatches(values []*model.PushUserMessageAd, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pushUserMessageAdDo) Save(values ...*model.PushUserMessageAd) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pushUserMessageAdDo) First() (*model.PushUserMessageAd, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushUserMessageAd), nil
	}
}

func (p pushUserMessageAdDo) Take() (*model.PushUserMessageAd, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushUserMessageAd), nil
	}
}

func (p pushUserMessageAdDo) Last() (*model.PushUserMessageAd, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushUserMessageAd), nil
	}
}

func (p pushUserMessageAdDo) Find() ([]*model.PushUserMessageAd, error) {
	result, err := p.DO.Find()
	return result.([]*model.PushUserMessageAd), err
}

func (p pushUserMessageAdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PushUserMessageAd, err error) {
	buf := make([]*model.PushUserMessageAd, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pushUserMessageAdDo) FindInBatches(result *[]*model.PushUserMessageAd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pushUserMessageAdDo) Attrs(attrs ...field.AssignExpr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pushUserMessageAdDo) Assign(attrs ...field.AssignExpr) IPushUserMessageAdDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pushUserMessageAdDo) Joins(fields ...field.RelationField) IPushUserMessageAdDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pushUserMessageAdDo) Preload(fields ...field.RelationField) IPushUserMessageAdDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pushUserMessageAdDo) FirstOrInit() (*model.PushUserMessageAd, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushUserMessageAd), nil
	}
}

func (p pushUserMessageAdDo) FirstOrCreate() (*model.PushUserMessageAd, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushUserMessageAd), nil
	}
}

func (p pushUserMessageAdDo) FindByPage(offset int, limit int) (result []*model.PushUserMessageAd, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pushUserMessageAdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pushUserMessageAdDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pushUserMessageAdDo) Delete(models ...*model.PushUserMessageAd) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pushUserMessageAdDo) withDO(do gen.Dao) *pushUserMessageAdDo {
	p.DO = *do.(*gen.DO)
	return p
}
