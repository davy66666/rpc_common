// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFrozenUserLog(db *gorm.DB, opts ...gen.DOOption) frozenUserLog {
	_frozenUserLog := frozenUserLog{}

	_frozenUserLog.frozenUserLogDo.UseDB(db, opts...)
	_frozenUserLog.frozenUserLogDo.UseModel(&model.FrozenUserLog{})

	tableName := _frozenUserLog.frozenUserLogDo.TableName()
	_frozenUserLog.ALL = field.NewAsterisk(tableName)
	_frozenUserLog.ID = field.NewInt64(tableName, "id")
	_frozenUserLog.UserID = field.NewInt64(tableName, "user_id")
	_frozenUserLog.Username = field.NewString(tableName, "username")
	_frozenUserLog.CreatedAt = field.NewField(tableName, "created_at")
	_frozenUserLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_frozenUserLog.fillFieldMap()

	return _frozenUserLog
}

type frozenUserLog struct {
	frozenUserLogDo frozenUserLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64  // 会员id
	Username  field.String // 会员名称
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (f frozenUserLog) Table(newTableName string) *frozenUserLog {
	f.frozenUserLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f frozenUserLog) As(alias string) *frozenUserLog {
	f.frozenUserLogDo.DO = *(f.frozenUserLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *frozenUserLog) updateTableName(table string) *frozenUserLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.Username = field.NewString(table, "username")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *frozenUserLog) WithContext(ctx context.Context) IFrozenUserLogDo {
	return f.frozenUserLogDo.WithContext(ctx)
}

func (f frozenUserLog) TableName() string { return f.frozenUserLogDo.TableName() }

func (f frozenUserLog) Alias() string { return f.frozenUserLogDo.Alias() }

func (f frozenUserLog) Columns(cols ...field.Expr) gen.Columns {
	return f.frozenUserLogDo.Columns(cols...)
}

func (f *frozenUserLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *frozenUserLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["username"] = f.Username
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f frozenUserLog) clone(db *gorm.DB) frozenUserLog {
	f.frozenUserLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f frozenUserLog) replaceDB(db *gorm.DB) frozenUserLog {
	f.frozenUserLogDo.ReplaceDB(db)
	return f
}

type frozenUserLogDo struct{ gen.DO }

type IFrozenUserLogDo interface {
	gen.SubQuery
	Debug() IFrozenUserLogDo
	WithContext(ctx context.Context) IFrozenUserLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFrozenUserLogDo
	WriteDB() IFrozenUserLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFrozenUserLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFrozenUserLogDo
	Not(conds ...gen.Condition) IFrozenUserLogDo
	Or(conds ...gen.Condition) IFrozenUserLogDo
	Select(conds ...field.Expr) IFrozenUserLogDo
	Where(conds ...gen.Condition) IFrozenUserLogDo
	Order(conds ...field.Expr) IFrozenUserLogDo
	Distinct(cols ...field.Expr) IFrozenUserLogDo
	Omit(cols ...field.Expr) IFrozenUserLogDo
	Join(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo
	Group(cols ...field.Expr) IFrozenUserLogDo
	Having(conds ...gen.Condition) IFrozenUserLogDo
	Limit(limit int) IFrozenUserLogDo
	Offset(offset int) IFrozenUserLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFrozenUserLogDo
	Unscoped() IFrozenUserLogDo
	Create(values ...*model.FrozenUserLog) error
	CreateInBatches(values []*model.FrozenUserLog, batchSize int) error
	Save(values ...*model.FrozenUserLog) error
	First() (*model.FrozenUserLog, error)
	Take() (*model.FrozenUserLog, error)
	Last() (*model.FrozenUserLog, error)
	Find() ([]*model.FrozenUserLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrozenUserLog, err error)
	FindInBatches(result *[]*model.FrozenUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FrozenUserLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFrozenUserLogDo
	Assign(attrs ...field.AssignExpr) IFrozenUserLogDo
	Joins(fields ...field.RelationField) IFrozenUserLogDo
	Preload(fields ...field.RelationField) IFrozenUserLogDo
	FirstOrInit() (*model.FrozenUserLog, error)
	FirstOrCreate() (*model.FrozenUserLog, error)
	FindByPage(offset int, limit int) (result []*model.FrozenUserLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFrozenUserLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f frozenUserLogDo) Debug() IFrozenUserLogDo {
	return f.withDO(f.DO.Debug())
}

func (f frozenUserLogDo) WithContext(ctx context.Context) IFrozenUserLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f frozenUserLogDo) ReadDB() IFrozenUserLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f frozenUserLogDo) WriteDB() IFrozenUserLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f frozenUserLogDo) Session(config *gorm.Session) IFrozenUserLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f frozenUserLogDo) Clauses(conds ...clause.Expression) IFrozenUserLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f frozenUserLogDo) Returning(value interface{}, columns ...string) IFrozenUserLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f frozenUserLogDo) Not(conds ...gen.Condition) IFrozenUserLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f frozenUserLogDo) Or(conds ...gen.Condition) IFrozenUserLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f frozenUserLogDo) Select(conds ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f frozenUserLogDo) Where(conds ...gen.Condition) IFrozenUserLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f frozenUserLogDo) Order(conds ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f frozenUserLogDo) Distinct(cols ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f frozenUserLogDo) Omit(cols ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f frozenUserLogDo) Join(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f frozenUserLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f frozenUserLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f frozenUserLogDo) Group(cols ...field.Expr) IFrozenUserLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f frozenUserLogDo) Having(conds ...gen.Condition) IFrozenUserLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f frozenUserLogDo) Limit(limit int) IFrozenUserLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f frozenUserLogDo) Offset(offset int) IFrozenUserLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f frozenUserLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFrozenUserLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f frozenUserLogDo) Unscoped() IFrozenUserLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f frozenUserLogDo) Create(values ...*model.FrozenUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f frozenUserLogDo) CreateInBatches(values []*model.FrozenUserLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f frozenUserLogDo) Save(values ...*model.FrozenUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f frozenUserLogDo) First() (*model.FrozenUserLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrozenUserLog), nil
	}
}

func (f frozenUserLogDo) Take() (*model.FrozenUserLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrozenUserLog), nil
	}
}

func (f frozenUserLogDo) Last() (*model.FrozenUserLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrozenUserLog), nil
	}
}

func (f frozenUserLogDo) Find() ([]*model.FrozenUserLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FrozenUserLog), err
}

func (f frozenUserLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrozenUserLog, err error) {
	buf := make([]*model.FrozenUserLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f frozenUserLogDo) FindInBatches(result *[]*model.FrozenUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f frozenUserLogDo) Attrs(attrs ...field.AssignExpr) IFrozenUserLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f frozenUserLogDo) Assign(attrs ...field.AssignExpr) IFrozenUserLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f frozenUserLogDo) Joins(fields ...field.RelationField) IFrozenUserLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f frozenUserLogDo) Preload(fields ...field.RelationField) IFrozenUserLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f frozenUserLogDo) FirstOrInit() (*model.FrozenUserLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrozenUserLog), nil
	}
}

func (f frozenUserLogDo) FirstOrCreate() (*model.FrozenUserLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrozenUserLog), nil
	}
}

func (f frozenUserLogDo) FindByPage(offset int, limit int) (result []*model.FrozenUserLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f frozenUserLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f frozenUserLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f frozenUserLogDo) Delete(models ...*model.FrozenUserLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *frozenUserLogDo) withDO(do gen.Dao) *frozenUserLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
