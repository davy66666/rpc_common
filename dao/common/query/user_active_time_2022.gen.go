// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserActiveTime2022(db *gorm.DB, opts ...gen.DOOption) userActiveTime2022 {
	_userActiveTime2022 := userActiveTime2022{}

	_userActiveTime2022.userActiveTime2022Do.UseDB(db, opts...)
	_userActiveTime2022.userActiveTime2022Do.UseModel(&model.UserActiveTime2022{})

	tableName := _userActiveTime2022.userActiveTime2022Do.TableName()
	_userActiveTime2022.ALL = field.NewAsterisk(tableName)
	_userActiveTime2022.ID = field.NewInt64(tableName, "id")
	_userActiveTime2022.DateAt = field.NewTime(tableName, "date_at")
	_userActiveTime2022.UserID = field.NewInt64(tableName, "user_id")
	_userActiveTime2022.FirstActiveIP = field.NewString(tableName, "first_active_ip")
	_userActiveTime2022.IPArea = field.NewString(tableName, "ip_area")
	_userActiveTime2022.FirstActiveTime = field.NewField(tableName, "first_active_time")
	_userActiveTime2022.LastActiveTime = field.NewField(tableName, "last_active_time")
	_userActiveTime2022.CreatedAt = field.NewField(tableName, "created_at")
	_userActiveTime2022.UpdatedAt = field.NewField(tableName, "updated_at")

	_userActiveTime2022.fillFieldMap()

	return _userActiveTime2022
}

// userActiveTime2022 用户活跃时间记录表
type userActiveTime2022 struct {
	userActiveTime2022Do userActiveTime2022Do

	ALL             field.Asterisk
	ID              field.Int64  // 自增id
	DateAt          field.Time   // 时间date
	UserID          field.Int64  // 用户id
	FirstActiveIP   field.String // 第一次活跃的ip地址
	IPArea          field.String // ip区域
	FirstActiveTime field.Field  // 第一次活跃时间
	LastActiveTime  field.Field  // 最后一次活跃时间
	CreatedAt       field.Field  // 记录创建时间
	UpdatedAt       field.Field  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (u userActiveTime2022) Table(newTableName string) *userActiveTime2022 {
	u.userActiveTime2022Do.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userActiveTime2022) As(alias string) *userActiveTime2022 {
	u.userActiveTime2022Do.DO = *(u.userActiveTime2022Do.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userActiveTime2022) updateTableName(table string) *userActiveTime2022 {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewTime(table, "date_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.FirstActiveIP = field.NewString(table, "first_active_ip")
	u.IPArea = field.NewString(table, "ip_area")
	u.FirstActiveTime = field.NewField(table, "first_active_time")
	u.LastActiveTime = field.NewField(table, "last_active_time")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userActiveTime2022) WithContext(ctx context.Context) IUserActiveTime2022Do {
	return u.userActiveTime2022Do.WithContext(ctx)
}

func (u userActiveTime2022) TableName() string { return u.userActiveTime2022Do.TableName() }

func (u userActiveTime2022) Alias() string { return u.userActiveTime2022Do.Alias() }

func (u userActiveTime2022) Columns(cols ...field.Expr) gen.Columns {
	return u.userActiveTime2022Do.Columns(cols...)
}

func (u *userActiveTime2022) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userActiveTime2022) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["first_active_ip"] = u.FirstActiveIP
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["first_active_time"] = u.FirstActiveTime
	u.fieldMap["last_active_time"] = u.LastActiveTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userActiveTime2022) clone(db *gorm.DB) userActiveTime2022 {
	u.userActiveTime2022Do.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userActiveTime2022) replaceDB(db *gorm.DB) userActiveTime2022 {
	u.userActiveTime2022Do.ReplaceDB(db)
	return u
}

type userActiveTime2022Do struct{ gen.DO }

type IUserActiveTime2022Do interface {
	gen.SubQuery
	Debug() IUserActiveTime2022Do
	WithContext(ctx context.Context) IUserActiveTime2022Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserActiveTime2022Do
	WriteDB() IUserActiveTime2022Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserActiveTime2022Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserActiveTime2022Do
	Not(conds ...gen.Condition) IUserActiveTime2022Do
	Or(conds ...gen.Condition) IUserActiveTime2022Do
	Select(conds ...field.Expr) IUserActiveTime2022Do
	Where(conds ...gen.Condition) IUserActiveTime2022Do
	Order(conds ...field.Expr) IUserActiveTime2022Do
	Distinct(cols ...field.Expr) IUserActiveTime2022Do
	Omit(cols ...field.Expr) IUserActiveTime2022Do
	Join(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do
	RightJoin(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do
	Group(cols ...field.Expr) IUserActiveTime2022Do
	Having(conds ...gen.Condition) IUserActiveTime2022Do
	Limit(limit int) IUserActiveTime2022Do
	Offset(offset int) IUserActiveTime2022Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActiveTime2022Do
	Unscoped() IUserActiveTime2022Do
	Create(values ...*model.UserActiveTime2022) error
	CreateInBatches(values []*model.UserActiveTime2022, batchSize int) error
	Save(values ...*model.UserActiveTime2022) error
	First() (*model.UserActiveTime2022, error)
	Take() (*model.UserActiveTime2022, error)
	Last() (*model.UserActiveTime2022, error)
	Find() ([]*model.UserActiveTime2022, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActiveTime2022, err error)
	FindInBatches(result *[]*model.UserActiveTime2022, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserActiveTime2022) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserActiveTime2022Do
	Assign(attrs ...field.AssignExpr) IUserActiveTime2022Do
	Joins(fields ...field.RelationField) IUserActiveTime2022Do
	Preload(fields ...field.RelationField) IUserActiveTime2022Do
	FirstOrInit() (*model.UserActiveTime2022, error)
	FirstOrCreate() (*model.UserActiveTime2022, error)
	FindByPage(offset int, limit int) (result []*model.UserActiveTime2022, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserActiveTime2022Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userActiveTime2022Do) Debug() IUserActiveTime2022Do {
	return u.withDO(u.DO.Debug())
}

func (u userActiveTime2022Do) WithContext(ctx context.Context) IUserActiveTime2022Do {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userActiveTime2022Do) ReadDB() IUserActiveTime2022Do {
	return u.Clauses(dbresolver.Read)
}

func (u userActiveTime2022Do) WriteDB() IUserActiveTime2022Do {
	return u.Clauses(dbresolver.Write)
}

func (u userActiveTime2022Do) Session(config *gorm.Session) IUserActiveTime2022Do {
	return u.withDO(u.DO.Session(config))
}

func (u userActiveTime2022Do) Clauses(conds ...clause.Expression) IUserActiveTime2022Do {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userActiveTime2022Do) Returning(value interface{}, columns ...string) IUserActiveTime2022Do {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userActiveTime2022Do) Not(conds ...gen.Condition) IUserActiveTime2022Do {
	return u.withDO(u.DO.Not(conds...))
}

func (u userActiveTime2022Do) Or(conds ...gen.Condition) IUserActiveTime2022Do {
	return u.withDO(u.DO.Or(conds...))
}

func (u userActiveTime2022Do) Select(conds ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Select(conds...))
}

func (u userActiveTime2022Do) Where(conds ...gen.Condition) IUserActiveTime2022Do {
	return u.withDO(u.DO.Where(conds...))
}

func (u userActiveTime2022Do) Order(conds ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Order(conds...))
}

func (u userActiveTime2022Do) Distinct(cols ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userActiveTime2022Do) Omit(cols ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userActiveTime2022Do) Join(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userActiveTime2022Do) LeftJoin(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userActiveTime2022Do) RightJoin(table schema.Tabler, on ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userActiveTime2022Do) Group(cols ...field.Expr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Group(cols...))
}

func (u userActiveTime2022Do) Having(conds ...gen.Condition) IUserActiveTime2022Do {
	return u.withDO(u.DO.Having(conds...))
}

func (u userActiveTime2022Do) Limit(limit int) IUserActiveTime2022Do {
	return u.withDO(u.DO.Limit(limit))
}

func (u userActiveTime2022Do) Offset(offset int) IUserActiveTime2022Do {
	return u.withDO(u.DO.Offset(offset))
}

func (u userActiveTime2022Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActiveTime2022Do {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userActiveTime2022Do) Unscoped() IUserActiveTime2022Do {
	return u.withDO(u.DO.Unscoped())
}

func (u userActiveTime2022Do) Create(values ...*model.UserActiveTime2022) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userActiveTime2022Do) CreateInBatches(values []*model.UserActiveTime2022, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userActiveTime2022Do) Save(values ...*model.UserActiveTime2022) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userActiveTime2022Do) First() (*model.UserActiveTime2022, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime2022), nil
	}
}

func (u userActiveTime2022Do) Take() (*model.UserActiveTime2022, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime2022), nil
	}
}

func (u userActiveTime2022Do) Last() (*model.UserActiveTime2022, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime2022), nil
	}
}

func (u userActiveTime2022Do) Find() ([]*model.UserActiveTime2022, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserActiveTime2022), err
}

func (u userActiveTime2022Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActiveTime2022, err error) {
	buf := make([]*model.UserActiveTime2022, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userActiveTime2022Do) FindInBatches(result *[]*model.UserActiveTime2022, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userActiveTime2022Do) Attrs(attrs ...field.AssignExpr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userActiveTime2022Do) Assign(attrs ...field.AssignExpr) IUserActiveTime2022Do {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userActiveTime2022Do) Joins(fields ...field.RelationField) IUserActiveTime2022Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userActiveTime2022Do) Preload(fields ...field.RelationField) IUserActiveTime2022Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userActiveTime2022Do) FirstOrInit() (*model.UserActiveTime2022, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime2022), nil
	}
}

func (u userActiveTime2022Do) FirstOrCreate() (*model.UserActiveTime2022, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime2022), nil
	}
}

func (u userActiveTime2022Do) FindByPage(offset int, limit int) (result []*model.UserActiveTime2022, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userActiveTime2022Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userActiveTime2022Do) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userActiveTime2022Do) Delete(models ...*model.UserActiveTime2022) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userActiveTime2022Do) withDO(do gen.Dao) *userActiveTime2022Do {
	u.DO = *do.(*gen.DO)
	return u
}
