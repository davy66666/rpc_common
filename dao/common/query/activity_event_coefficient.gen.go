// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityEventCoefficient(db *gorm.DB, opts ...gen.DOOption) activityEventCoefficient {
	_activityEventCoefficient := activityEventCoefficient{}

	_activityEventCoefficient.activityEventCoefficientDo.UseDB(db, opts...)
	_activityEventCoefficient.activityEventCoefficientDo.UseModel(&model.ActivityEventCoefficient{})

	tableName := _activityEventCoefficient.activityEventCoefficientDo.TableName()
	_activityEventCoefficient.ALL = field.NewAsterisk(tableName)
	_activityEventCoefficient.ID = field.NewInt64(tableName, "id")
	_activityEventCoefficient.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityEventCoefficient.MatchEventID = field.NewInt64(tableName, "match_event_id")
	_activityEventCoefficient.EventName = field.NewString(tableName, "event_name")
	_activityEventCoefficient.Coefficient = field.NewFloat64(tableName, "coefficient")
	_activityEventCoefficient.MaxCoefficient = field.NewFloat64(tableName, "max_coefficient")
	_activityEventCoefficient.CreatedAt = field.NewField(tableName, "created_at")
	_activityEventCoefficient.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityEventCoefficient.fillFieldMap()

	return _activityEventCoefficient
}

// activityEventCoefficient 活动赛程系数配置
type activityEventCoefficient struct {
	activityEventCoefficientDo activityEventCoefficientDo

	ALL            field.Asterisk
	ID             field.Int64
	ActivityID     field.Int64   // 配置ID
	MatchEventID   field.Int64   // 赛程ID
	EventName      field.String  // 赛程名称
	Coefficient    field.Float64 // 竞猜系数
	MaxCoefficient field.Float64 // 最大可得系数
	CreatedAt      field.Field   // 创建时间
	UpdatedAt      field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityEventCoefficient) Table(newTableName string) *activityEventCoefficient {
	a.activityEventCoefficientDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityEventCoefficient) As(alias string) *activityEventCoefficient {
	a.activityEventCoefficientDo.DO = *(a.activityEventCoefficientDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityEventCoefficient) updateTableName(table string) *activityEventCoefficient {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.MatchEventID = field.NewInt64(table, "match_event_id")
	a.EventName = field.NewString(table, "event_name")
	a.Coefficient = field.NewFloat64(table, "coefficient")
	a.MaxCoefficient = field.NewFloat64(table, "max_coefficient")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityEventCoefficient) WithContext(ctx context.Context) IActivityEventCoefficientDo {
	return a.activityEventCoefficientDo.WithContext(ctx)
}

func (a activityEventCoefficient) TableName() string { return a.activityEventCoefficientDo.TableName() }

func (a activityEventCoefficient) Alias() string { return a.activityEventCoefficientDo.Alias() }

func (a activityEventCoefficient) Columns(cols ...field.Expr) gen.Columns {
	return a.activityEventCoefficientDo.Columns(cols...)
}

func (a *activityEventCoefficient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityEventCoefficient) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["match_event_id"] = a.MatchEventID
	a.fieldMap["event_name"] = a.EventName
	a.fieldMap["coefficient"] = a.Coefficient
	a.fieldMap["max_coefficient"] = a.MaxCoefficient
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityEventCoefficient) clone(db *gorm.DB) activityEventCoefficient {
	a.activityEventCoefficientDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityEventCoefficient) replaceDB(db *gorm.DB) activityEventCoefficient {
	a.activityEventCoefficientDo.ReplaceDB(db)
	return a
}

type activityEventCoefficientDo struct{ gen.DO }

type IActivityEventCoefficientDo interface {
	gen.SubQuery
	Debug() IActivityEventCoefficientDo
	WithContext(ctx context.Context) IActivityEventCoefficientDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityEventCoefficientDo
	WriteDB() IActivityEventCoefficientDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityEventCoefficientDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityEventCoefficientDo
	Not(conds ...gen.Condition) IActivityEventCoefficientDo
	Or(conds ...gen.Condition) IActivityEventCoefficientDo
	Select(conds ...field.Expr) IActivityEventCoefficientDo
	Where(conds ...gen.Condition) IActivityEventCoefficientDo
	Order(conds ...field.Expr) IActivityEventCoefficientDo
	Distinct(cols ...field.Expr) IActivityEventCoefficientDo
	Omit(cols ...field.Expr) IActivityEventCoefficientDo
	Join(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo
	Group(cols ...field.Expr) IActivityEventCoefficientDo
	Having(conds ...gen.Condition) IActivityEventCoefficientDo
	Limit(limit int) IActivityEventCoefficientDo
	Offset(offset int) IActivityEventCoefficientDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityEventCoefficientDo
	Unscoped() IActivityEventCoefficientDo
	Create(values ...*model.ActivityEventCoefficient) error
	CreateInBatches(values []*model.ActivityEventCoefficient, batchSize int) error
	Save(values ...*model.ActivityEventCoefficient) error
	First() (*model.ActivityEventCoefficient, error)
	Take() (*model.ActivityEventCoefficient, error)
	Last() (*model.ActivityEventCoefficient, error)
	Find() ([]*model.ActivityEventCoefficient, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityEventCoefficient, err error)
	FindInBatches(result *[]*model.ActivityEventCoefficient, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityEventCoefficient) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityEventCoefficientDo
	Assign(attrs ...field.AssignExpr) IActivityEventCoefficientDo
	Joins(fields ...field.RelationField) IActivityEventCoefficientDo
	Preload(fields ...field.RelationField) IActivityEventCoefficientDo
	FirstOrInit() (*model.ActivityEventCoefficient, error)
	FirstOrCreate() (*model.ActivityEventCoefficient, error)
	FindByPage(offset int, limit int) (result []*model.ActivityEventCoefficient, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityEventCoefficientDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityEventCoefficientDo) Debug() IActivityEventCoefficientDo {
	return a.withDO(a.DO.Debug())
}

func (a activityEventCoefficientDo) WithContext(ctx context.Context) IActivityEventCoefficientDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityEventCoefficientDo) ReadDB() IActivityEventCoefficientDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityEventCoefficientDo) WriteDB() IActivityEventCoefficientDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityEventCoefficientDo) Session(config *gorm.Session) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityEventCoefficientDo) Clauses(conds ...clause.Expression) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityEventCoefficientDo) Returning(value interface{}, columns ...string) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityEventCoefficientDo) Not(conds ...gen.Condition) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityEventCoefficientDo) Or(conds ...gen.Condition) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityEventCoefficientDo) Select(conds ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityEventCoefficientDo) Where(conds ...gen.Condition) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityEventCoefficientDo) Order(conds ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityEventCoefficientDo) Distinct(cols ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityEventCoefficientDo) Omit(cols ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityEventCoefficientDo) Join(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityEventCoefficientDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityEventCoefficientDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityEventCoefficientDo) Group(cols ...field.Expr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityEventCoefficientDo) Having(conds ...gen.Condition) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityEventCoefficientDo) Limit(limit int) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityEventCoefficientDo) Offset(offset int) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityEventCoefficientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityEventCoefficientDo) Unscoped() IActivityEventCoefficientDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityEventCoefficientDo) Create(values ...*model.ActivityEventCoefficient) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityEventCoefficientDo) CreateInBatches(values []*model.ActivityEventCoefficient, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityEventCoefficientDo) Save(values ...*model.ActivityEventCoefficient) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityEventCoefficientDo) First() (*model.ActivityEventCoefficient, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityEventCoefficient), nil
	}
}

func (a activityEventCoefficientDo) Take() (*model.ActivityEventCoefficient, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityEventCoefficient), nil
	}
}

func (a activityEventCoefficientDo) Last() (*model.ActivityEventCoefficient, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityEventCoefficient), nil
	}
}

func (a activityEventCoefficientDo) Find() ([]*model.ActivityEventCoefficient, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityEventCoefficient), err
}

func (a activityEventCoefficientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityEventCoefficient, err error) {
	buf := make([]*model.ActivityEventCoefficient, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityEventCoefficientDo) FindInBatches(result *[]*model.ActivityEventCoefficient, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityEventCoefficientDo) Attrs(attrs ...field.AssignExpr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityEventCoefficientDo) Assign(attrs ...field.AssignExpr) IActivityEventCoefficientDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityEventCoefficientDo) Joins(fields ...field.RelationField) IActivityEventCoefficientDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityEventCoefficientDo) Preload(fields ...field.RelationField) IActivityEventCoefficientDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityEventCoefficientDo) FirstOrInit() (*model.ActivityEventCoefficient, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityEventCoefficient), nil
	}
}

func (a activityEventCoefficientDo) FirstOrCreate() (*model.ActivityEventCoefficient, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityEventCoefficient), nil
	}
}

func (a activityEventCoefficientDo) FindByPage(offset int, limit int) (result []*model.ActivityEventCoefficient, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityEventCoefficientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityEventCoefficientDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityEventCoefficientDo) Delete(models ...*model.ActivityEventCoefficient) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityEventCoefficientDo) withDO(do gen.Dao) *activityEventCoefficientDo {
	a.DO = *do.(*gen.DO)
	return a
}
