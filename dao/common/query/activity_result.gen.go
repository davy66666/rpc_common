// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityResult(db *gorm.DB, opts ...gen.DOOption) activityResult {
	_activityResult := activityResult{}

	_activityResult.activityResultDo.UseDB(db, opts...)
	_activityResult.activityResultDo.UseModel(&model.ActivityResult{})

	tableName := _activityResult.activityResultDo.TableName()
	_activityResult.ALL = field.NewAsterisk(tableName)
	_activityResult.ID = field.NewInt64(tableName, "id")
	_activityResult.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityResult.UserID = field.NewInt64(tableName, "user_id")
	_activityResult.Username = field.NewString(tableName, "username")
	_activityResult.BonusAmount = field.NewFloat64(tableName, "bonus_amount")
	_activityResult.Result = field.NewString(tableName, "result")
	_activityResult.BonusResult = field.NewString(tableName, "bonus_result")
	_activityResult.TotalNums = field.NewInt64(tableName, "total_nums")
	_activityResult.CurrentNums = field.NewInt64(tableName, "current_nums")
	_activityResult.Status = field.NewInt64(tableName, "status")
	_activityResult.CreatedAt = field.NewField(tableName, "created_at")
	_activityResult.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityResult.fillFieldMap()

	return _activityResult
}

type activityResult struct {
	activityResultDo activityResultDo

	ALL         field.Asterisk
	ID          field.Int64
	ActivityID  field.Int64   // 活动ID
	UserID      field.Int64   // 用户ID
	Username    field.String  // 用户名
	BonusAmount field.Float64 // 奖金金额
	Result      field.String  // 参与活动结果
	BonusResult field.String  // 命中奖金结果
	TotalNums   field.Int64   // 能领的红包总个数
	CurrentNums field.Int64   // 当前第几次领取
	Status      field.Int64   // 是否启用：[0: 否 1: 是 ]
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a activityResult) Table(newTableName string) *activityResult {
	a.activityResultDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityResult) As(alias string) *activityResult {
	a.activityResultDo.DO = *(a.activityResultDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityResult) updateTableName(table string) *activityResult {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.BonusAmount = field.NewFloat64(table, "bonus_amount")
	a.Result = field.NewString(table, "result")
	a.BonusResult = field.NewString(table, "bonus_result")
	a.TotalNums = field.NewInt64(table, "total_nums")
	a.CurrentNums = field.NewInt64(table, "current_nums")
	a.Status = field.NewInt64(table, "status")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityResult) WithContext(ctx context.Context) IActivityResultDo {
	return a.activityResultDo.WithContext(ctx)
}

func (a activityResult) TableName() string { return a.activityResultDo.TableName() }

func (a activityResult) Alias() string { return a.activityResultDo.Alias() }

func (a activityResult) Columns(cols ...field.Expr) gen.Columns {
	return a.activityResultDo.Columns(cols...)
}

func (a *activityResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityResult) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["bonus_amount"] = a.BonusAmount
	a.fieldMap["result"] = a.Result
	a.fieldMap["bonus_result"] = a.BonusResult
	a.fieldMap["total_nums"] = a.TotalNums
	a.fieldMap["current_nums"] = a.CurrentNums
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityResult) clone(db *gorm.DB) activityResult {
	a.activityResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityResult) replaceDB(db *gorm.DB) activityResult {
	a.activityResultDo.ReplaceDB(db)
	return a
}

type activityResultDo struct{ gen.DO }

type IActivityResultDo interface {
	gen.SubQuery
	Debug() IActivityResultDo
	WithContext(ctx context.Context) IActivityResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityResultDo
	WriteDB() IActivityResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityResultDo
	Not(conds ...gen.Condition) IActivityResultDo
	Or(conds ...gen.Condition) IActivityResultDo
	Select(conds ...field.Expr) IActivityResultDo
	Where(conds ...gen.Condition) IActivityResultDo
	Order(conds ...field.Expr) IActivityResultDo
	Distinct(cols ...field.Expr) IActivityResultDo
	Omit(cols ...field.Expr) IActivityResultDo
	Join(table schema.Tabler, on ...field.Expr) IActivityResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityResultDo
	Group(cols ...field.Expr) IActivityResultDo
	Having(conds ...gen.Condition) IActivityResultDo
	Limit(limit int) IActivityResultDo
	Offset(offset int) IActivityResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityResultDo
	Unscoped() IActivityResultDo
	Create(values ...*model.ActivityResult) error
	CreateInBatches(values []*model.ActivityResult, batchSize int) error
	Save(values ...*model.ActivityResult) error
	First() (*model.ActivityResult, error)
	Take() (*model.ActivityResult, error)
	Last() (*model.ActivityResult, error)
	Find() ([]*model.ActivityResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityResult, err error)
	FindInBatches(result *[]*model.ActivityResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityResultDo
	Assign(attrs ...field.AssignExpr) IActivityResultDo
	Joins(fields ...field.RelationField) IActivityResultDo
	Preload(fields ...field.RelationField) IActivityResultDo
	FirstOrInit() (*model.ActivityResult, error)
	FirstOrCreate() (*model.ActivityResult, error)
	FindByPage(offset int, limit int) (result []*model.ActivityResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityResultDo) Debug() IActivityResultDo {
	return a.withDO(a.DO.Debug())
}

func (a activityResultDo) WithContext(ctx context.Context) IActivityResultDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityResultDo) ReadDB() IActivityResultDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityResultDo) WriteDB() IActivityResultDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityResultDo) Session(config *gorm.Session) IActivityResultDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityResultDo) Clauses(conds ...clause.Expression) IActivityResultDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityResultDo) Returning(value interface{}, columns ...string) IActivityResultDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityResultDo) Not(conds ...gen.Condition) IActivityResultDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityResultDo) Or(conds ...gen.Condition) IActivityResultDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityResultDo) Select(conds ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityResultDo) Where(conds ...gen.Condition) IActivityResultDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityResultDo) Order(conds ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityResultDo) Distinct(cols ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityResultDo) Omit(cols ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityResultDo) Join(table schema.Tabler, on ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityResultDo) Group(cols ...field.Expr) IActivityResultDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityResultDo) Having(conds ...gen.Condition) IActivityResultDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityResultDo) Limit(limit int) IActivityResultDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityResultDo) Offset(offset int) IActivityResultDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityResultDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityResultDo) Unscoped() IActivityResultDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityResultDo) Create(values ...*model.ActivityResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityResultDo) CreateInBatches(values []*model.ActivityResult, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityResultDo) Save(values ...*model.ActivityResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityResultDo) First() (*model.ActivityResult, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityResult), nil
	}
}

func (a activityResultDo) Take() (*model.ActivityResult, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityResult), nil
	}
}

func (a activityResultDo) Last() (*model.ActivityResult, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityResult), nil
	}
}

func (a activityResultDo) Find() ([]*model.ActivityResult, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityResult), err
}

func (a activityResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityResult, err error) {
	buf := make([]*model.ActivityResult, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityResultDo) FindInBatches(result *[]*model.ActivityResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityResultDo) Attrs(attrs ...field.AssignExpr) IActivityResultDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityResultDo) Assign(attrs ...field.AssignExpr) IActivityResultDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityResultDo) Joins(fields ...field.RelationField) IActivityResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityResultDo) Preload(fields ...field.RelationField) IActivityResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityResultDo) FirstOrInit() (*model.ActivityResult, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityResult), nil
	}
}

func (a activityResultDo) FirstOrCreate() (*model.ActivityResult, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityResult), nil
	}
}

func (a activityResultDo) FindByPage(offset int, limit int) (result []*model.ActivityResult, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityResultDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityResultDo) Delete(models ...*model.ActivityResult) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityResultDo) withDO(do gen.Dao) *activityResultDo {
	a.DO = *do.(*gen.DO)
	return a
}
