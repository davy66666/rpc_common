// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayFastRecordsMatchLog(db *gorm.DB, opts ...gen.DOOption) payFastRecordsMatchLog {
	_payFastRecordsMatchLog := payFastRecordsMatchLog{}

	_payFastRecordsMatchLog.payFastRecordsMatchLogDo.UseDB(db, opts...)
	_payFastRecordsMatchLog.payFastRecordsMatchLogDo.UseModel(&model.PayFastRecordsMatchLog{})

	tableName := _payFastRecordsMatchLog.payFastRecordsMatchLogDo.TableName()
	_payFastRecordsMatchLog.ALL = field.NewAsterisk(tableName)
	_payFastRecordsMatchLog.ID = field.NewInt64(tableName, "id")
	_payFastRecordsMatchLog.FastID = field.NewInt64(tableName, "fast_id")
	_payFastRecordsMatchLog.BillNo = field.NewString(tableName, "bill_no")
	_payFastRecordsMatchLog.PayerUserID = field.NewInt64(tableName, "payer_user_id")
	_payFastRecordsMatchLog.PayerUsername = field.NewString(tableName, "payer_username")
	_payFastRecordsMatchLog.CreatedAt = field.NewField(tableName, "created_at")
	_payFastRecordsMatchLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_payFastRecordsMatchLog.fillFieldMap()

	return _payFastRecordsMatchLog
}

// payFastRecordsMatchLog 极速匹配记录
type payFastRecordsMatchLog struct {
	payFastRecordsMatchLogDo payFastRecordsMatchLogDo

	ALL           field.Asterisk
	ID            field.Int64
	FastID        field.Int64  // pay_fast_records 表id
	BillNo        field.String // 平台订单号
	PayerUserID   field.Int64  // 充值用户id
	PayerUsername field.String // 充值用户名
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (p payFastRecordsMatchLog) Table(newTableName string) *payFastRecordsMatchLog {
	p.payFastRecordsMatchLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payFastRecordsMatchLog) As(alias string) *payFastRecordsMatchLog {
	p.payFastRecordsMatchLogDo.DO = *(p.payFastRecordsMatchLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payFastRecordsMatchLog) updateTableName(table string) *payFastRecordsMatchLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.FastID = field.NewInt64(table, "fast_id")
	p.BillNo = field.NewString(table, "bill_no")
	p.PayerUserID = field.NewInt64(table, "payer_user_id")
	p.PayerUsername = field.NewString(table, "payer_username")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *payFastRecordsMatchLog) WithContext(ctx context.Context) IPayFastRecordsMatchLogDo {
	return p.payFastRecordsMatchLogDo.WithContext(ctx)
}

func (p payFastRecordsMatchLog) TableName() string { return p.payFastRecordsMatchLogDo.TableName() }

func (p payFastRecordsMatchLog) Alias() string { return p.payFastRecordsMatchLogDo.Alias() }

func (p payFastRecordsMatchLog) Columns(cols ...field.Expr) gen.Columns {
	return p.payFastRecordsMatchLogDo.Columns(cols...)
}

func (p *payFastRecordsMatchLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payFastRecordsMatchLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["fast_id"] = p.FastID
	p.fieldMap["bill_no"] = p.BillNo
	p.fieldMap["payer_user_id"] = p.PayerUserID
	p.fieldMap["payer_username"] = p.PayerUsername
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p payFastRecordsMatchLog) clone(db *gorm.DB) payFastRecordsMatchLog {
	p.payFastRecordsMatchLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payFastRecordsMatchLog) replaceDB(db *gorm.DB) payFastRecordsMatchLog {
	p.payFastRecordsMatchLogDo.ReplaceDB(db)
	return p
}

type payFastRecordsMatchLogDo struct{ gen.DO }

type IPayFastRecordsMatchLogDo interface {
	gen.SubQuery
	Debug() IPayFastRecordsMatchLogDo
	WithContext(ctx context.Context) IPayFastRecordsMatchLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayFastRecordsMatchLogDo
	WriteDB() IPayFastRecordsMatchLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayFastRecordsMatchLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayFastRecordsMatchLogDo
	Not(conds ...gen.Condition) IPayFastRecordsMatchLogDo
	Or(conds ...gen.Condition) IPayFastRecordsMatchLogDo
	Select(conds ...field.Expr) IPayFastRecordsMatchLogDo
	Where(conds ...gen.Condition) IPayFastRecordsMatchLogDo
	Order(conds ...field.Expr) IPayFastRecordsMatchLogDo
	Distinct(cols ...field.Expr) IPayFastRecordsMatchLogDo
	Omit(cols ...field.Expr) IPayFastRecordsMatchLogDo
	Join(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo
	Group(cols ...field.Expr) IPayFastRecordsMatchLogDo
	Having(conds ...gen.Condition) IPayFastRecordsMatchLogDo
	Limit(limit int) IPayFastRecordsMatchLogDo
	Offset(offset int) IPayFastRecordsMatchLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastRecordsMatchLogDo
	Unscoped() IPayFastRecordsMatchLogDo
	Create(values ...*model.PayFastRecordsMatchLog) error
	CreateInBatches(values []*model.PayFastRecordsMatchLog, batchSize int) error
	Save(values ...*model.PayFastRecordsMatchLog) error
	First() (*model.PayFastRecordsMatchLog, error)
	Take() (*model.PayFastRecordsMatchLog, error)
	Last() (*model.PayFastRecordsMatchLog, error)
	Find() ([]*model.PayFastRecordsMatchLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastRecordsMatchLog, err error)
	FindInBatches(result *[]*model.PayFastRecordsMatchLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayFastRecordsMatchLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayFastRecordsMatchLogDo
	Assign(attrs ...field.AssignExpr) IPayFastRecordsMatchLogDo
	Joins(fields ...field.RelationField) IPayFastRecordsMatchLogDo
	Preload(fields ...field.RelationField) IPayFastRecordsMatchLogDo
	FirstOrInit() (*model.PayFastRecordsMatchLog, error)
	FirstOrCreate() (*model.PayFastRecordsMatchLog, error)
	FindByPage(offset int, limit int) (result []*model.PayFastRecordsMatchLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayFastRecordsMatchLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payFastRecordsMatchLogDo) Debug() IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Debug())
}

func (p payFastRecordsMatchLogDo) WithContext(ctx context.Context) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payFastRecordsMatchLogDo) ReadDB() IPayFastRecordsMatchLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p payFastRecordsMatchLogDo) WriteDB() IPayFastRecordsMatchLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p payFastRecordsMatchLogDo) Session(config *gorm.Session) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p payFastRecordsMatchLogDo) Clauses(conds ...clause.Expression) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payFastRecordsMatchLogDo) Returning(value interface{}, columns ...string) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payFastRecordsMatchLogDo) Not(conds ...gen.Condition) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payFastRecordsMatchLogDo) Or(conds ...gen.Condition) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payFastRecordsMatchLogDo) Select(conds ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payFastRecordsMatchLogDo) Where(conds ...gen.Condition) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payFastRecordsMatchLogDo) Order(conds ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payFastRecordsMatchLogDo) Distinct(cols ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payFastRecordsMatchLogDo) Omit(cols ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payFastRecordsMatchLogDo) Join(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payFastRecordsMatchLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payFastRecordsMatchLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payFastRecordsMatchLogDo) Group(cols ...field.Expr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payFastRecordsMatchLogDo) Having(conds ...gen.Condition) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payFastRecordsMatchLogDo) Limit(limit int) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payFastRecordsMatchLogDo) Offset(offset int) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payFastRecordsMatchLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payFastRecordsMatchLogDo) Unscoped() IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payFastRecordsMatchLogDo) Create(values ...*model.PayFastRecordsMatchLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payFastRecordsMatchLogDo) CreateInBatches(values []*model.PayFastRecordsMatchLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payFastRecordsMatchLogDo) Save(values ...*model.PayFastRecordsMatchLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payFastRecordsMatchLogDo) First() (*model.PayFastRecordsMatchLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecordsMatchLog), nil
	}
}

func (p payFastRecordsMatchLogDo) Take() (*model.PayFastRecordsMatchLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecordsMatchLog), nil
	}
}

func (p payFastRecordsMatchLogDo) Last() (*model.PayFastRecordsMatchLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecordsMatchLog), nil
	}
}

func (p payFastRecordsMatchLogDo) Find() ([]*model.PayFastRecordsMatchLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayFastRecordsMatchLog), err
}

func (p payFastRecordsMatchLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastRecordsMatchLog, err error) {
	buf := make([]*model.PayFastRecordsMatchLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payFastRecordsMatchLogDo) FindInBatches(result *[]*model.PayFastRecordsMatchLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payFastRecordsMatchLogDo) Attrs(attrs ...field.AssignExpr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payFastRecordsMatchLogDo) Assign(attrs ...field.AssignExpr) IPayFastRecordsMatchLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payFastRecordsMatchLogDo) Joins(fields ...field.RelationField) IPayFastRecordsMatchLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payFastRecordsMatchLogDo) Preload(fields ...field.RelationField) IPayFastRecordsMatchLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payFastRecordsMatchLogDo) FirstOrInit() (*model.PayFastRecordsMatchLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecordsMatchLog), nil
	}
}

func (p payFastRecordsMatchLogDo) FirstOrCreate() (*model.PayFastRecordsMatchLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecordsMatchLog), nil
	}
}

func (p payFastRecordsMatchLogDo) FindByPage(offset int, limit int) (result []*model.PayFastRecordsMatchLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payFastRecordsMatchLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payFastRecordsMatchLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payFastRecordsMatchLogDo) Delete(models ...*model.PayFastRecordsMatchLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payFastRecordsMatchLogDo) withDO(do gen.Dao) *payFastRecordsMatchLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
