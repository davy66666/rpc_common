// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGuideMsgConfig(db *gorm.DB, opts ...gen.DOOption) guideMsgConfig {
	_guideMsgConfig := guideMsgConfig{}

	_guideMsgConfig.guideMsgConfigDo.UseDB(db, opts...)
	_guideMsgConfig.guideMsgConfigDo.UseModel(&model.GuideMsgConfig{})

	tableName := _guideMsgConfig.guideMsgConfigDo.TableName()
	_guideMsgConfig.ALL = field.NewAsterisk(tableName)
	_guideMsgConfig.ID = field.NewInt64(tableName, "id")
	_guideMsgConfig.GuideType = field.NewInt64(tableName, "guide_type")
	_guideMsgConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_guideMsgConfig.GuideMsg = field.NewString(tableName, "guide_msg")
	_guideMsgConfig.IsForce = field.NewInt64(tableName, "is_force")
	_guideMsgConfig.WatchTime = field.NewInt64(tableName, "watch_time")
	_guideMsgConfig.AdminName = field.NewString(tableName, "admin_name")
	_guideMsgConfig.CreatedAt = field.NewField(tableName, "created_at")
	_guideMsgConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_guideMsgConfig.fillFieldMap()

	return _guideMsgConfig
}

// guideMsgConfig 引导语配置表
type guideMsgConfig struct {
	guideMsgConfigDo guideMsgConfigDo

	ALL       field.Asterisk
	ID        field.Int64
	GuideType field.Int64  // 触发条件 1:绑定账户触发,2:绑定手机号触发
	IsOpen    field.Int64  // 是否启用 1:是,0否
	GuideMsg  field.String // 引导语文案
	IsForce   field.Int64  // 是否强制观看 1:是,0否
	WatchTime field.Int64  // 观看时间,单位（秒）
	AdminName field.String // 最后操作管理员
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (g guideMsgConfig) Table(newTableName string) *guideMsgConfig {
	g.guideMsgConfigDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g guideMsgConfig) As(alias string) *guideMsgConfig {
	g.guideMsgConfigDo.DO = *(g.guideMsgConfigDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *guideMsgConfig) updateTableName(table string) *guideMsgConfig {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.GuideType = field.NewInt64(table, "guide_type")
	g.IsOpen = field.NewInt64(table, "is_open")
	g.GuideMsg = field.NewString(table, "guide_msg")
	g.IsForce = field.NewInt64(table, "is_force")
	g.WatchTime = field.NewInt64(table, "watch_time")
	g.AdminName = field.NewString(table, "admin_name")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *guideMsgConfig) WithContext(ctx context.Context) IGuideMsgConfigDo {
	return g.guideMsgConfigDo.WithContext(ctx)
}

func (g guideMsgConfig) TableName() string { return g.guideMsgConfigDo.TableName() }

func (g guideMsgConfig) Alias() string { return g.guideMsgConfigDo.Alias() }

func (g guideMsgConfig) Columns(cols ...field.Expr) gen.Columns {
	return g.guideMsgConfigDo.Columns(cols...)
}

func (g *guideMsgConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *guideMsgConfig) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["guide_type"] = g.GuideType
	g.fieldMap["is_open"] = g.IsOpen
	g.fieldMap["guide_msg"] = g.GuideMsg
	g.fieldMap["is_force"] = g.IsForce
	g.fieldMap["watch_time"] = g.WatchTime
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g guideMsgConfig) clone(db *gorm.DB) guideMsgConfig {
	g.guideMsgConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g guideMsgConfig) replaceDB(db *gorm.DB) guideMsgConfig {
	g.guideMsgConfigDo.ReplaceDB(db)
	return g
}

type guideMsgConfigDo struct{ gen.DO }

type IGuideMsgConfigDo interface {
	gen.SubQuery
	Debug() IGuideMsgConfigDo
	WithContext(ctx context.Context) IGuideMsgConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGuideMsgConfigDo
	WriteDB() IGuideMsgConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGuideMsgConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGuideMsgConfigDo
	Not(conds ...gen.Condition) IGuideMsgConfigDo
	Or(conds ...gen.Condition) IGuideMsgConfigDo
	Select(conds ...field.Expr) IGuideMsgConfigDo
	Where(conds ...gen.Condition) IGuideMsgConfigDo
	Order(conds ...field.Expr) IGuideMsgConfigDo
	Distinct(cols ...field.Expr) IGuideMsgConfigDo
	Omit(cols ...field.Expr) IGuideMsgConfigDo
	Join(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo
	Group(cols ...field.Expr) IGuideMsgConfigDo
	Having(conds ...gen.Condition) IGuideMsgConfigDo
	Limit(limit int) IGuideMsgConfigDo
	Offset(offset int) IGuideMsgConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGuideMsgConfigDo
	Unscoped() IGuideMsgConfigDo
	Create(values ...*model.GuideMsgConfig) error
	CreateInBatches(values []*model.GuideMsgConfig, batchSize int) error
	Save(values ...*model.GuideMsgConfig) error
	First() (*model.GuideMsgConfig, error)
	Take() (*model.GuideMsgConfig, error)
	Last() (*model.GuideMsgConfig, error)
	Find() ([]*model.GuideMsgConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuideMsgConfig, err error)
	FindInBatches(result *[]*model.GuideMsgConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GuideMsgConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGuideMsgConfigDo
	Assign(attrs ...field.AssignExpr) IGuideMsgConfigDo
	Joins(fields ...field.RelationField) IGuideMsgConfigDo
	Preload(fields ...field.RelationField) IGuideMsgConfigDo
	FirstOrInit() (*model.GuideMsgConfig, error)
	FirstOrCreate() (*model.GuideMsgConfig, error)
	FindByPage(offset int, limit int) (result []*model.GuideMsgConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGuideMsgConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g guideMsgConfigDo) Debug() IGuideMsgConfigDo {
	return g.withDO(g.DO.Debug())
}

func (g guideMsgConfigDo) WithContext(ctx context.Context) IGuideMsgConfigDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g guideMsgConfigDo) ReadDB() IGuideMsgConfigDo {
	return g.Clauses(dbresolver.Read)
}

func (g guideMsgConfigDo) WriteDB() IGuideMsgConfigDo {
	return g.Clauses(dbresolver.Write)
}

func (g guideMsgConfigDo) Session(config *gorm.Session) IGuideMsgConfigDo {
	return g.withDO(g.DO.Session(config))
}

func (g guideMsgConfigDo) Clauses(conds ...clause.Expression) IGuideMsgConfigDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g guideMsgConfigDo) Returning(value interface{}, columns ...string) IGuideMsgConfigDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g guideMsgConfigDo) Not(conds ...gen.Condition) IGuideMsgConfigDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g guideMsgConfigDo) Or(conds ...gen.Condition) IGuideMsgConfigDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g guideMsgConfigDo) Select(conds ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g guideMsgConfigDo) Where(conds ...gen.Condition) IGuideMsgConfigDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g guideMsgConfigDo) Order(conds ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g guideMsgConfigDo) Distinct(cols ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g guideMsgConfigDo) Omit(cols ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g guideMsgConfigDo) Join(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g guideMsgConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g guideMsgConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g guideMsgConfigDo) Group(cols ...field.Expr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g guideMsgConfigDo) Having(conds ...gen.Condition) IGuideMsgConfigDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g guideMsgConfigDo) Limit(limit int) IGuideMsgConfigDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g guideMsgConfigDo) Offset(offset int) IGuideMsgConfigDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g guideMsgConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGuideMsgConfigDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g guideMsgConfigDo) Unscoped() IGuideMsgConfigDo {
	return g.withDO(g.DO.Unscoped())
}

func (g guideMsgConfigDo) Create(values ...*model.GuideMsgConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g guideMsgConfigDo) CreateInBatches(values []*model.GuideMsgConfig, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g guideMsgConfigDo) Save(values ...*model.GuideMsgConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g guideMsgConfigDo) First() (*model.GuideMsgConfig, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuideMsgConfig), nil
	}
}

func (g guideMsgConfigDo) Take() (*model.GuideMsgConfig, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuideMsgConfig), nil
	}
}

func (g guideMsgConfigDo) Last() (*model.GuideMsgConfig, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuideMsgConfig), nil
	}
}

func (g guideMsgConfigDo) Find() ([]*model.GuideMsgConfig, error) {
	result, err := g.DO.Find()
	return result.([]*model.GuideMsgConfig), err
}

func (g guideMsgConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuideMsgConfig, err error) {
	buf := make([]*model.GuideMsgConfig, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g guideMsgConfigDo) FindInBatches(result *[]*model.GuideMsgConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g guideMsgConfigDo) Attrs(attrs ...field.AssignExpr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g guideMsgConfigDo) Assign(attrs ...field.AssignExpr) IGuideMsgConfigDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g guideMsgConfigDo) Joins(fields ...field.RelationField) IGuideMsgConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g guideMsgConfigDo) Preload(fields ...field.RelationField) IGuideMsgConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g guideMsgConfigDo) FirstOrInit() (*model.GuideMsgConfig, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuideMsgConfig), nil
	}
}

func (g guideMsgConfigDo) FirstOrCreate() (*model.GuideMsgConfig, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuideMsgConfig), nil
	}
}

func (g guideMsgConfigDo) FindByPage(offset int, limit int) (result []*model.GuideMsgConfig, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g guideMsgConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g guideMsgConfigDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g guideMsgConfigDo) Delete(models ...*model.GuideMsgConfig) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *guideMsgConfigDo) withDO(do gen.Dao) *guideMsgConfigDo {
	g.DO = *do.(*gen.DO)
	return g
}
