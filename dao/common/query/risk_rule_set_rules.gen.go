// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskRuleSetRule(db *gorm.DB, opts ...gen.DOOption) riskRuleSetRule {
	_riskRuleSetRule := riskRuleSetRule{}

	_riskRuleSetRule.riskRuleSetRuleDo.UseDB(db, opts...)
	_riskRuleSetRule.riskRuleSetRuleDo.UseModel(&model.RiskRuleSetRule{})

	tableName := _riskRuleSetRule.riskRuleSetRuleDo.TableName()
	_riskRuleSetRule.ALL = field.NewAsterisk(tableName)
	_riskRuleSetRule.ID = field.NewInt64(tableName, "id")
	_riskRuleSetRule.RuleID = field.NewInt64(tableName, "rule_id")
	_riskRuleSetRule.SetID = field.NewInt64(tableName, "set_id")
	_riskRuleSetRule.SetName = field.NewString(tableName, "set_name")
	_riskRuleSetRule.TypeID = field.NewInt64(tableName, "type_id")
	_riskRuleSetRule.ChildTypeID = field.NewInt64(tableName, "child_type_id")
	_riskRuleSetRule.Params = field.NewString(tableName, "params")
	_riskRuleSetRule.RendererType = field.NewString(tableName, "renderer_type")
	_riskRuleSetRule.AdminName = field.NewString(tableName, "admin_name")
	_riskRuleSetRule.IsOpen = field.NewInt64(tableName, "is_open")
	_riskRuleSetRule.CreatedAt = field.NewField(tableName, "created_at")
	_riskRuleSetRule.UpdatedAt = field.NewField(tableName, "updated_at")

	_riskRuleSetRule.fillFieldMap()

	return _riskRuleSetRule
}

// riskRuleSetRule 规则集的规则明细
type riskRuleSetRule struct {
	riskRuleSetRuleDo riskRuleSetRuleDo

	ALL          field.Asterisk
	ID           field.Int64
	RuleID       field.Int64 // 规则id
	SetID        field.Int64 // 集合id
	SetName      field.String
	TypeID       field.Int64  // 类型id
	ChildTypeID  field.Int64  // 子类型id
	Params       field.String // 参数，逗号分割
	RendererType field.String // 0同一个规则 不同的多个参数，1同一个规则叠加相同的参数
	AdminName    field.String // 操作人
	IsOpen       field.Int64
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (r riskRuleSetRule) Table(newTableName string) *riskRuleSetRule {
	r.riskRuleSetRuleDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskRuleSetRule) As(alias string) *riskRuleSetRule {
	r.riskRuleSetRuleDo.DO = *(r.riskRuleSetRuleDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskRuleSetRule) updateTableName(table string) *riskRuleSetRule {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RuleID = field.NewInt64(table, "rule_id")
	r.SetID = field.NewInt64(table, "set_id")
	r.SetName = field.NewString(table, "set_name")
	r.TypeID = field.NewInt64(table, "type_id")
	r.ChildTypeID = field.NewInt64(table, "child_type_id")
	r.Params = field.NewString(table, "params")
	r.RendererType = field.NewString(table, "renderer_type")
	r.AdminName = field.NewString(table, "admin_name")
	r.IsOpen = field.NewInt64(table, "is_open")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *riskRuleSetRule) WithContext(ctx context.Context) IRiskRuleSetRuleDo {
	return r.riskRuleSetRuleDo.WithContext(ctx)
}

func (r riskRuleSetRule) TableName() string { return r.riskRuleSetRuleDo.TableName() }

func (r riskRuleSetRule) Alias() string { return r.riskRuleSetRuleDo.Alias() }

func (r riskRuleSetRule) Columns(cols ...field.Expr) gen.Columns {
	return r.riskRuleSetRuleDo.Columns(cols...)
}

func (r *riskRuleSetRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskRuleSetRule) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["id"] = r.ID
	r.fieldMap["rule_id"] = r.RuleID
	r.fieldMap["set_id"] = r.SetID
	r.fieldMap["set_name"] = r.SetName
	r.fieldMap["type_id"] = r.TypeID
	r.fieldMap["child_type_id"] = r.ChildTypeID
	r.fieldMap["params"] = r.Params
	r.fieldMap["renderer_type"] = r.RendererType
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["is_open"] = r.IsOpen
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r riskRuleSetRule) clone(db *gorm.DB) riskRuleSetRule {
	r.riskRuleSetRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskRuleSetRule) replaceDB(db *gorm.DB) riskRuleSetRule {
	r.riskRuleSetRuleDo.ReplaceDB(db)
	return r
}

type riskRuleSetRuleDo struct{ gen.DO }

type IRiskRuleSetRuleDo interface {
	gen.SubQuery
	Debug() IRiskRuleSetRuleDo
	WithContext(ctx context.Context) IRiskRuleSetRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskRuleSetRuleDo
	WriteDB() IRiskRuleSetRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskRuleSetRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskRuleSetRuleDo
	Not(conds ...gen.Condition) IRiskRuleSetRuleDo
	Or(conds ...gen.Condition) IRiskRuleSetRuleDo
	Select(conds ...field.Expr) IRiskRuleSetRuleDo
	Where(conds ...gen.Condition) IRiskRuleSetRuleDo
	Order(conds ...field.Expr) IRiskRuleSetRuleDo
	Distinct(cols ...field.Expr) IRiskRuleSetRuleDo
	Omit(cols ...field.Expr) IRiskRuleSetRuleDo
	Join(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo
	Group(cols ...field.Expr) IRiskRuleSetRuleDo
	Having(conds ...gen.Condition) IRiskRuleSetRuleDo
	Limit(limit int) IRiskRuleSetRuleDo
	Offset(offset int) IRiskRuleSetRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleSetRuleDo
	Unscoped() IRiskRuleSetRuleDo
	Create(values ...*model.RiskRuleSetRule) error
	CreateInBatches(values []*model.RiskRuleSetRule, batchSize int) error
	Save(values ...*model.RiskRuleSetRule) error
	First() (*model.RiskRuleSetRule, error)
	Take() (*model.RiskRuleSetRule, error)
	Last() (*model.RiskRuleSetRule, error)
	Find() ([]*model.RiskRuleSetRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleSetRule, err error)
	FindInBatches(result *[]*model.RiskRuleSetRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskRuleSetRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskRuleSetRuleDo
	Assign(attrs ...field.AssignExpr) IRiskRuleSetRuleDo
	Joins(fields ...field.RelationField) IRiskRuleSetRuleDo
	Preload(fields ...field.RelationField) IRiskRuleSetRuleDo
	FirstOrInit() (*model.RiskRuleSetRule, error)
	FirstOrCreate() (*model.RiskRuleSetRule, error)
	FindByPage(offset int, limit int) (result []*model.RiskRuleSetRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskRuleSetRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskRuleSetRuleDo) Debug() IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Debug())
}

func (r riskRuleSetRuleDo) WithContext(ctx context.Context) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskRuleSetRuleDo) ReadDB() IRiskRuleSetRuleDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskRuleSetRuleDo) WriteDB() IRiskRuleSetRuleDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskRuleSetRuleDo) Session(config *gorm.Session) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskRuleSetRuleDo) Clauses(conds ...clause.Expression) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskRuleSetRuleDo) Returning(value interface{}, columns ...string) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskRuleSetRuleDo) Not(conds ...gen.Condition) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskRuleSetRuleDo) Or(conds ...gen.Condition) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskRuleSetRuleDo) Select(conds ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskRuleSetRuleDo) Where(conds ...gen.Condition) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskRuleSetRuleDo) Order(conds ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskRuleSetRuleDo) Distinct(cols ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskRuleSetRuleDo) Omit(cols ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskRuleSetRuleDo) Join(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskRuleSetRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskRuleSetRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskRuleSetRuleDo) Group(cols ...field.Expr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskRuleSetRuleDo) Having(conds ...gen.Condition) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskRuleSetRuleDo) Limit(limit int) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskRuleSetRuleDo) Offset(offset int) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskRuleSetRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskRuleSetRuleDo) Unscoped() IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskRuleSetRuleDo) Create(values ...*model.RiskRuleSetRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskRuleSetRuleDo) CreateInBatches(values []*model.RiskRuleSetRule, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskRuleSetRuleDo) Save(values ...*model.RiskRuleSetRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskRuleSetRuleDo) First() (*model.RiskRuleSetRule, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSetRule), nil
	}
}

func (r riskRuleSetRuleDo) Take() (*model.RiskRuleSetRule, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSetRule), nil
	}
}

func (r riskRuleSetRuleDo) Last() (*model.RiskRuleSetRule, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSetRule), nil
	}
}

func (r riskRuleSetRuleDo) Find() ([]*model.RiskRuleSetRule, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskRuleSetRule), err
}

func (r riskRuleSetRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleSetRule, err error) {
	buf := make([]*model.RiskRuleSetRule, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskRuleSetRuleDo) FindInBatches(result *[]*model.RiskRuleSetRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskRuleSetRuleDo) Attrs(attrs ...field.AssignExpr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskRuleSetRuleDo) Assign(attrs ...field.AssignExpr) IRiskRuleSetRuleDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskRuleSetRuleDo) Joins(fields ...field.RelationField) IRiskRuleSetRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskRuleSetRuleDo) Preload(fields ...field.RelationField) IRiskRuleSetRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskRuleSetRuleDo) FirstOrInit() (*model.RiskRuleSetRule, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSetRule), nil
	}
}

func (r riskRuleSetRuleDo) FirstOrCreate() (*model.RiskRuleSetRule, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleSetRule), nil
	}
}

func (r riskRuleSetRuleDo) FindByPage(offset int, limit int) (result []*model.RiskRuleSetRule, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskRuleSetRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskRuleSetRuleDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskRuleSetRuleDo) Delete(models ...*model.RiskRuleSetRule) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskRuleSetRuleDo) withDO(do gen.Dao) *riskRuleSetRuleDo {
	r.DO = *do.(*gen.DO)
	return r
}
