// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMatchTeam(db *gorm.DB, opts ...gen.DOOption) matchTeam {
	_matchTeam := matchTeam{}

	_matchTeam.matchTeamDo.UseDB(db, opts...)
	_matchTeam.matchTeamDo.UseModel(&model.MatchTeam{})

	tableName := _matchTeam.matchTeamDo.TableName()
	_matchTeam.ALL = field.NewAsterisk(tableName)
	_matchTeam.ID = field.NewInt64(tableName, "id")
	_matchTeam.TeamID = field.NewInt64(tableName, "team_id")
	_matchTeam.TeamName = field.NewString(tableName, "team_name")
	_matchTeam.TeamIcon = field.NewString(tableName, "team_icon")
	_matchTeam.CreatedAt = field.NewField(tableName, "created_at")
	_matchTeam.UpdatedAt = field.NewField(tableName, "updated_at")
	_matchTeam.MinBet = field.NewFloat64(tableName, "min_bet")
	_matchTeam.MaxBet = field.NewFloat64(tableName, "max_bet")
	_matchTeam.Odds = field.NewFloat64(tableName, "odds")
	_matchTeam.IsOpen = field.NewInt64(tableName, "is_open")
	_matchTeam.AdminName = field.NewString(tableName, "admin_name")

	_matchTeam.fillFieldMap()

	return _matchTeam
}

// matchTeam 参赛队伍
type matchTeam struct {
	matchTeamDo matchTeamDo

	ALL       field.Asterisk
	ID        field.Int64
	TeamID    field.Int64   // 队伍ID
	TeamName  field.String  // 队伍名称
	TeamIcon  field.String  // 队伍图标
	CreatedAt field.Field   // 创建时间
	UpdatedAt field.Field   // 更新时间
	MinBet    field.Float64 // 投注最低金额
	MaxBet    field.Float64 // 投注最大金额
	Odds      field.Float64 // 赔率
	IsOpen    field.Int64   // 状态 0:禁用 1:启用
	AdminName field.String  // 操作员

	fieldMap map[string]field.Expr
}

func (m matchTeam) Table(newTableName string) *matchTeam {
	m.matchTeamDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchTeam) As(alias string) *matchTeam {
	m.matchTeamDo.DO = *(m.matchTeamDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchTeam) updateTableName(table string) *matchTeam {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.TeamID = field.NewInt64(table, "team_id")
	m.TeamName = field.NewString(table, "team_name")
	m.TeamIcon = field.NewString(table, "team_icon")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")
	m.MinBet = field.NewFloat64(table, "min_bet")
	m.MaxBet = field.NewFloat64(table, "max_bet")
	m.Odds = field.NewFloat64(table, "odds")
	m.IsOpen = field.NewInt64(table, "is_open")
	m.AdminName = field.NewString(table, "admin_name")

	m.fillFieldMap()

	return m
}

func (m *matchTeam) WithContext(ctx context.Context) IMatchTeamDo {
	return m.matchTeamDo.WithContext(ctx)
}

func (m matchTeam) TableName() string { return m.matchTeamDo.TableName() }

func (m matchTeam) Alias() string { return m.matchTeamDo.Alias() }

func (m matchTeam) Columns(cols ...field.Expr) gen.Columns { return m.matchTeamDo.Columns(cols...) }

func (m *matchTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchTeam) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["team_id"] = m.TeamID
	m.fieldMap["team_name"] = m.TeamName
	m.fieldMap["team_icon"] = m.TeamIcon
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["min_bet"] = m.MinBet
	m.fieldMap["max_bet"] = m.MaxBet
	m.fieldMap["odds"] = m.Odds
	m.fieldMap["is_open"] = m.IsOpen
	m.fieldMap["admin_name"] = m.AdminName
}

func (m matchTeam) clone(db *gorm.DB) matchTeam {
	m.matchTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchTeam) replaceDB(db *gorm.DB) matchTeam {
	m.matchTeamDo.ReplaceDB(db)
	return m
}

type matchTeamDo struct{ gen.DO }

type IMatchTeamDo interface {
	gen.SubQuery
	Debug() IMatchTeamDo
	WithContext(ctx context.Context) IMatchTeamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchTeamDo
	WriteDB() IMatchTeamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchTeamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchTeamDo
	Not(conds ...gen.Condition) IMatchTeamDo
	Or(conds ...gen.Condition) IMatchTeamDo
	Select(conds ...field.Expr) IMatchTeamDo
	Where(conds ...gen.Condition) IMatchTeamDo
	Order(conds ...field.Expr) IMatchTeamDo
	Distinct(cols ...field.Expr) IMatchTeamDo
	Omit(cols ...field.Expr) IMatchTeamDo
	Join(table schema.Tabler, on ...field.Expr) IMatchTeamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchTeamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchTeamDo
	Group(cols ...field.Expr) IMatchTeamDo
	Having(conds ...gen.Condition) IMatchTeamDo
	Limit(limit int) IMatchTeamDo
	Offset(offset int) IMatchTeamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchTeamDo
	Unscoped() IMatchTeamDo
	Create(values ...*model.MatchTeam) error
	CreateInBatches(values []*model.MatchTeam, batchSize int) error
	Save(values ...*model.MatchTeam) error
	First() (*model.MatchTeam, error)
	Take() (*model.MatchTeam, error)
	Last() (*model.MatchTeam, error)
	Find() ([]*model.MatchTeam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MatchTeam, err error)
	FindInBatches(result *[]*model.MatchTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MatchTeam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchTeamDo
	Assign(attrs ...field.AssignExpr) IMatchTeamDo
	Joins(fields ...field.RelationField) IMatchTeamDo
	Preload(fields ...field.RelationField) IMatchTeamDo
	FirstOrInit() (*model.MatchTeam, error)
	FirstOrCreate() (*model.MatchTeam, error)
	FindByPage(offset int, limit int) (result []*model.MatchTeam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchTeamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchTeamDo) Debug() IMatchTeamDo {
	return m.withDO(m.DO.Debug())
}

func (m matchTeamDo) WithContext(ctx context.Context) IMatchTeamDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchTeamDo) ReadDB() IMatchTeamDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchTeamDo) WriteDB() IMatchTeamDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchTeamDo) Session(config *gorm.Session) IMatchTeamDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchTeamDo) Clauses(conds ...clause.Expression) IMatchTeamDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchTeamDo) Returning(value interface{}, columns ...string) IMatchTeamDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchTeamDo) Not(conds ...gen.Condition) IMatchTeamDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchTeamDo) Or(conds ...gen.Condition) IMatchTeamDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchTeamDo) Select(conds ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchTeamDo) Where(conds ...gen.Condition) IMatchTeamDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchTeamDo) Order(conds ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchTeamDo) Distinct(cols ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchTeamDo) Omit(cols ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchTeamDo) Join(table schema.Tabler, on ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchTeamDo) Group(cols ...field.Expr) IMatchTeamDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchTeamDo) Having(conds ...gen.Condition) IMatchTeamDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchTeamDo) Limit(limit int) IMatchTeamDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchTeamDo) Offset(offset int) IMatchTeamDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchTeamDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchTeamDo) Unscoped() IMatchTeamDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchTeamDo) Create(values ...*model.MatchTeam) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchTeamDo) CreateInBatches(values []*model.MatchTeam, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchTeamDo) Save(values ...*model.MatchTeam) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchTeamDo) First() (*model.MatchTeam, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchTeam), nil
	}
}

func (m matchTeamDo) Take() (*model.MatchTeam, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchTeam), nil
	}
}

func (m matchTeamDo) Last() (*model.MatchTeam, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchTeam), nil
	}
}

func (m matchTeamDo) Find() ([]*model.MatchTeam, error) {
	result, err := m.DO.Find()
	return result.([]*model.MatchTeam), err
}

func (m matchTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MatchTeam, err error) {
	buf := make([]*model.MatchTeam, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchTeamDo) FindInBatches(result *[]*model.MatchTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchTeamDo) Attrs(attrs ...field.AssignExpr) IMatchTeamDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchTeamDo) Assign(attrs ...field.AssignExpr) IMatchTeamDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchTeamDo) Joins(fields ...field.RelationField) IMatchTeamDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchTeamDo) Preload(fields ...field.RelationField) IMatchTeamDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchTeamDo) FirstOrInit() (*model.MatchTeam, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchTeam), nil
	}
}

func (m matchTeamDo) FirstOrCreate() (*model.MatchTeam, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchTeam), nil
	}
}

func (m matchTeamDo) FindByPage(offset int, limit int) (result []*model.MatchTeam, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchTeamDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchTeamDo) Delete(models ...*model.MatchTeam) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchTeamDo) withDO(do gen.Dao) *matchTeamDo {
	m.DO = *do.(*gen.DO)
	return m
}
