// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentInfosBak(db *gorm.DB, opts ...gen.DOOption) agentInfosBak {
	_agentInfosBak := agentInfosBak{}

	_agentInfosBak.agentInfosBakDo.UseDB(db, opts...)
	_agentInfosBak.agentInfosBakDo.UseModel(&model.AgentInfosBak{})

	tableName := _agentInfosBak.agentInfosBakDo.TableName()
	_agentInfosBak.ALL = field.NewAsterisk(tableName)
	_agentInfosBak.ID = field.NewInt64(tableName, "id")
	_agentInfosBak.AdminUserID = field.NewInt64(tableName, "admin_user_id")
	_agentInfosBak.AgentUser = field.NewString(tableName, "agent_user")
	_agentInfosBak.ParentID = field.NewInt64(tableName, "parent_id")
	_agentInfosBak.ParentName = field.NewString(tableName, "parent_name")
	_agentInfosBak.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentInfosBak.YongjinRate = field.NewFloat64(tableName, "yongjin_rate")
	_agentInfosBak.RealName = field.NewString(tableName, "real_name")
	_agentInfosBak.Tel = field.NewString(tableName, "tel")
	_agentInfosBak.Email = field.NewString(tableName, "email")
	_agentInfosBak.Qq = field.NewString(tableName, "qq")
	_agentInfosBak.BankType = field.NewInt64(tableName, "bank_type")
	_agentInfosBak.Wechat = field.NewString(tableName, "wechat")
	_agentInfosBak.BankName = field.NewString(tableName, "bank_name")
	_agentInfosBak.Account = field.NewString(tableName, "account")
	_agentInfosBak.Branch = field.NewString(tableName, "branch")
	_agentInfosBak.URL = field.NewString(tableName, "url")
	_agentInfosBak.Protocol = field.NewString(tableName, "protocol")
	_agentInfosBak.ProtocolURL = field.NewString(tableName, "protocol_url")
	_agentInfosBak.CreatedAt = field.NewField(tableName, "created_at")
	_agentInfosBak.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentInfosBak.Domain = field.NewString(tableName, "domain")

	_agentInfosBak.fillFieldMap()

	return _agentInfosBak
}

type agentInfosBak struct {
	agentInfosBakDo agentInfosBakDo

	ALL           field.Asterisk
	ID            field.Int64
	AdminUserID   field.Int64
	AgentUser     field.String  // 代理账号
	ParentID      field.Int64   // 直属上级
	ParentName    field.String  // 直属上级
	ForefatherIds field.String  // 上级树
	YongjinRate   field.Float64 // 返佣百分比5%
	RealName      field.String  // 真实姓名
	Tel           field.String  // 收件人手机号
	Email         field.String  // email
	Qq            field.String  // qq
	BankType      field.Int64   // 1:银行卡, 2:数字钱包
	Wechat        field.String  // 微信
	BankName      field.String  // 出款银行
	Account       field.String  // 银行账号
	Branch        field.String  // 开户行地址
	URL           field.String  // 推广地址
	Protocol      field.String  // 协议
	ProtocolURL   field.String  // 协议地址
	CreatedAt     field.Field
	UpdatedAt     field.Field
	Domain        field.String // 专属域名

	fieldMap map[string]field.Expr
}

func (a agentInfosBak) Table(newTableName string) *agentInfosBak {
	a.agentInfosBakDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentInfosBak) As(alias string) *agentInfosBak {
	a.agentInfosBakDo.DO = *(a.agentInfosBakDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentInfosBak) updateTableName(table string) *agentInfosBak {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminUserID = field.NewInt64(table, "admin_user_id")
	a.AgentUser = field.NewString(table, "agent_user")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.YongjinRate = field.NewFloat64(table, "yongjin_rate")
	a.RealName = field.NewString(table, "real_name")
	a.Tel = field.NewString(table, "tel")
	a.Email = field.NewString(table, "email")
	a.Qq = field.NewString(table, "qq")
	a.BankType = field.NewInt64(table, "bank_type")
	a.Wechat = field.NewString(table, "wechat")
	a.BankName = field.NewString(table, "bank_name")
	a.Account = field.NewString(table, "account")
	a.Branch = field.NewString(table, "branch")
	a.URL = field.NewString(table, "url")
	a.Protocol = field.NewString(table, "protocol")
	a.ProtocolURL = field.NewString(table, "protocol_url")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.Domain = field.NewString(table, "domain")

	a.fillFieldMap()

	return a
}

func (a *agentInfosBak) WithContext(ctx context.Context) IAgentInfosBakDo {
	return a.agentInfosBakDo.WithContext(ctx)
}

func (a agentInfosBak) TableName() string { return a.agentInfosBakDo.TableName() }

func (a agentInfosBak) Alias() string { return a.agentInfosBakDo.Alias() }

func (a agentInfosBak) Columns(cols ...field.Expr) gen.Columns {
	return a.agentInfosBakDo.Columns(cols...)
}

func (a *agentInfosBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentInfosBak) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_user_id"] = a.AdminUserID
	a.fieldMap["agent_user"] = a.AgentUser
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["yongjin_rate"] = a.YongjinRate
	a.fieldMap["real_name"] = a.RealName
	a.fieldMap["tel"] = a.Tel
	a.fieldMap["email"] = a.Email
	a.fieldMap["qq"] = a.Qq
	a.fieldMap["bank_type"] = a.BankType
	a.fieldMap["wechat"] = a.Wechat
	a.fieldMap["bank_name"] = a.BankName
	a.fieldMap["account"] = a.Account
	a.fieldMap["branch"] = a.Branch
	a.fieldMap["url"] = a.URL
	a.fieldMap["protocol"] = a.Protocol
	a.fieldMap["protocol_url"] = a.ProtocolURL
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["domain"] = a.Domain
}

func (a agentInfosBak) clone(db *gorm.DB) agentInfosBak {
	a.agentInfosBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentInfosBak) replaceDB(db *gorm.DB) agentInfosBak {
	a.agentInfosBakDo.ReplaceDB(db)
	return a
}

type agentInfosBakDo struct{ gen.DO }

type IAgentInfosBakDo interface {
	gen.SubQuery
	Debug() IAgentInfosBakDo
	WithContext(ctx context.Context) IAgentInfosBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentInfosBakDo
	WriteDB() IAgentInfosBakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentInfosBakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentInfosBakDo
	Not(conds ...gen.Condition) IAgentInfosBakDo
	Or(conds ...gen.Condition) IAgentInfosBakDo
	Select(conds ...field.Expr) IAgentInfosBakDo
	Where(conds ...gen.Condition) IAgentInfosBakDo
	Order(conds ...field.Expr) IAgentInfosBakDo
	Distinct(cols ...field.Expr) IAgentInfosBakDo
	Omit(cols ...field.Expr) IAgentInfosBakDo
	Join(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo
	Group(cols ...field.Expr) IAgentInfosBakDo
	Having(conds ...gen.Condition) IAgentInfosBakDo
	Limit(limit int) IAgentInfosBakDo
	Offset(offset int) IAgentInfosBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentInfosBakDo
	Unscoped() IAgentInfosBakDo
	Create(values ...*model.AgentInfosBak) error
	CreateInBatches(values []*model.AgentInfosBak, batchSize int) error
	Save(values ...*model.AgentInfosBak) error
	First() (*model.AgentInfosBak, error)
	Take() (*model.AgentInfosBak, error)
	Last() (*model.AgentInfosBak, error)
	Find() ([]*model.AgentInfosBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentInfosBak, err error)
	FindInBatches(result *[]*model.AgentInfosBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentInfosBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentInfosBakDo
	Assign(attrs ...field.AssignExpr) IAgentInfosBakDo
	Joins(fields ...field.RelationField) IAgentInfosBakDo
	Preload(fields ...field.RelationField) IAgentInfosBakDo
	FirstOrInit() (*model.AgentInfosBak, error)
	FirstOrCreate() (*model.AgentInfosBak, error)
	FindByPage(offset int, limit int) (result []*model.AgentInfosBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentInfosBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentInfosBakDo) Debug() IAgentInfosBakDo {
	return a.withDO(a.DO.Debug())
}

func (a agentInfosBakDo) WithContext(ctx context.Context) IAgentInfosBakDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentInfosBakDo) ReadDB() IAgentInfosBakDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentInfosBakDo) WriteDB() IAgentInfosBakDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentInfosBakDo) Session(config *gorm.Session) IAgentInfosBakDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentInfosBakDo) Clauses(conds ...clause.Expression) IAgentInfosBakDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentInfosBakDo) Returning(value interface{}, columns ...string) IAgentInfosBakDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentInfosBakDo) Not(conds ...gen.Condition) IAgentInfosBakDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentInfosBakDo) Or(conds ...gen.Condition) IAgentInfosBakDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentInfosBakDo) Select(conds ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentInfosBakDo) Where(conds ...gen.Condition) IAgentInfosBakDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentInfosBakDo) Order(conds ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentInfosBakDo) Distinct(cols ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentInfosBakDo) Omit(cols ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentInfosBakDo) Join(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentInfosBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentInfosBakDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentInfosBakDo) Group(cols ...field.Expr) IAgentInfosBakDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentInfosBakDo) Having(conds ...gen.Condition) IAgentInfosBakDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentInfosBakDo) Limit(limit int) IAgentInfosBakDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentInfosBakDo) Offset(offset int) IAgentInfosBakDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentInfosBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentInfosBakDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentInfosBakDo) Unscoped() IAgentInfosBakDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentInfosBakDo) Create(values ...*model.AgentInfosBak) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentInfosBakDo) CreateInBatches(values []*model.AgentInfosBak, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentInfosBakDo) Save(values ...*model.AgentInfosBak) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentInfosBakDo) First() (*model.AgentInfosBak, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentInfosBak), nil
	}
}

func (a agentInfosBakDo) Take() (*model.AgentInfosBak, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentInfosBak), nil
	}
}

func (a agentInfosBakDo) Last() (*model.AgentInfosBak, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentInfosBak), nil
	}
}

func (a agentInfosBakDo) Find() ([]*model.AgentInfosBak, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentInfosBak), err
}

func (a agentInfosBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentInfosBak, err error) {
	buf := make([]*model.AgentInfosBak, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentInfosBakDo) FindInBatches(result *[]*model.AgentInfosBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentInfosBakDo) Attrs(attrs ...field.AssignExpr) IAgentInfosBakDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentInfosBakDo) Assign(attrs ...field.AssignExpr) IAgentInfosBakDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentInfosBakDo) Joins(fields ...field.RelationField) IAgentInfosBakDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentInfosBakDo) Preload(fields ...field.RelationField) IAgentInfosBakDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentInfosBakDo) FirstOrInit() (*model.AgentInfosBak, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentInfosBak), nil
	}
}

func (a agentInfosBakDo) FirstOrCreate() (*model.AgentInfosBak, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentInfosBak), nil
	}
}

func (a agentInfosBakDo) FindByPage(offset int, limit int) (result []*model.AgentInfosBak, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentInfosBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentInfosBakDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentInfosBakDo) Delete(models ...*model.AgentInfosBak) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentInfosBakDo) withDO(do gen.Dao) *agentInfosBakDo {
	a.DO = *do.(*gen.DO)
	return a
}
