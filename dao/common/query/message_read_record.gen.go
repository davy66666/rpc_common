// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMessageReadRecord(db *gorm.DB, opts ...gen.DOOption) messageReadRecord {
	_messageReadRecord := messageReadRecord{}

	_messageReadRecord.messageReadRecordDo.UseDB(db, opts...)
	_messageReadRecord.messageReadRecordDo.UseModel(&model.MessageReadRecord{})

	tableName := _messageReadRecord.messageReadRecordDo.TableName()
	_messageReadRecord.ALL = field.NewAsterisk(tableName)
	_messageReadRecord.ID = field.NewInt64(tableName, "id")
	_messageReadRecord.MsgID = field.NewInt64(tableName, "msg_id")
	_messageReadRecord.MsgTypeID = field.NewInt64(tableName, "msg_type_id")
	_messageReadRecord.UserID = field.NewInt64(tableName, "user_id")
	_messageReadRecord.CreatedAt = field.NewField(tableName, "created_at")
	_messageReadRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_messageReadRecord.fillFieldMap()

	return _messageReadRecord
}

// messageReadRecord 消息阅读记录表
type messageReadRecord struct {
	messageReadRecordDo messageReadRecordDo

	ALL       field.Asterisk
	ID        field.Int64
	MsgID     field.Int64 // 消息id
	MsgTypeID field.Int64 // 消息类型id
	UserID    field.Int64 // 用户id
	CreatedAt field.Field // 创建时间
	UpdatedAt field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (m messageReadRecord) Table(newTableName string) *messageReadRecord {
	m.messageReadRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageReadRecord) As(alias string) *messageReadRecord {
	m.messageReadRecordDo.DO = *(m.messageReadRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageReadRecord) updateTableName(table string) *messageReadRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MsgID = field.NewInt64(table, "msg_id")
	m.MsgTypeID = field.NewInt64(table, "msg_type_id")
	m.UserID = field.NewInt64(table, "user_id")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *messageReadRecord) WithContext(ctx context.Context) IMessageReadRecordDo {
	return m.messageReadRecordDo.WithContext(ctx)
}

func (m messageReadRecord) TableName() string { return m.messageReadRecordDo.TableName() }

func (m messageReadRecord) Alias() string { return m.messageReadRecordDo.Alias() }

func (m messageReadRecord) Columns(cols ...field.Expr) gen.Columns {
	return m.messageReadRecordDo.Columns(cols...)
}

func (m *messageReadRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageReadRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["msg_id"] = m.MsgID
	m.fieldMap["msg_type_id"] = m.MsgTypeID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m messageReadRecord) clone(db *gorm.DB) messageReadRecord {
	m.messageReadRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageReadRecord) replaceDB(db *gorm.DB) messageReadRecord {
	m.messageReadRecordDo.ReplaceDB(db)
	return m
}

type messageReadRecordDo struct{ gen.DO }

type IMessageReadRecordDo interface {
	gen.SubQuery
	Debug() IMessageReadRecordDo
	WithContext(ctx context.Context) IMessageReadRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageReadRecordDo
	WriteDB() IMessageReadRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageReadRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageReadRecordDo
	Not(conds ...gen.Condition) IMessageReadRecordDo
	Or(conds ...gen.Condition) IMessageReadRecordDo
	Select(conds ...field.Expr) IMessageReadRecordDo
	Where(conds ...gen.Condition) IMessageReadRecordDo
	Order(conds ...field.Expr) IMessageReadRecordDo
	Distinct(cols ...field.Expr) IMessageReadRecordDo
	Omit(cols ...field.Expr) IMessageReadRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo
	Group(cols ...field.Expr) IMessageReadRecordDo
	Having(conds ...gen.Condition) IMessageReadRecordDo
	Limit(limit int) IMessageReadRecordDo
	Offset(offset int) IMessageReadRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageReadRecordDo
	Unscoped() IMessageReadRecordDo
	Create(values ...*model.MessageReadRecord) error
	CreateInBatches(values []*model.MessageReadRecord, batchSize int) error
	Save(values ...*model.MessageReadRecord) error
	First() (*model.MessageReadRecord, error)
	Take() (*model.MessageReadRecord, error)
	Last() (*model.MessageReadRecord, error)
	Find() ([]*model.MessageReadRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageReadRecord, err error)
	FindInBatches(result *[]*model.MessageReadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageReadRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageReadRecordDo
	Assign(attrs ...field.AssignExpr) IMessageReadRecordDo
	Joins(fields ...field.RelationField) IMessageReadRecordDo
	Preload(fields ...field.RelationField) IMessageReadRecordDo
	FirstOrInit() (*model.MessageReadRecord, error)
	FirstOrCreate() (*model.MessageReadRecord, error)
	FindByPage(offset int, limit int) (result []*model.MessageReadRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageReadRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageReadRecordDo) Debug() IMessageReadRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m messageReadRecordDo) WithContext(ctx context.Context) IMessageReadRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageReadRecordDo) ReadDB() IMessageReadRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageReadRecordDo) WriteDB() IMessageReadRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageReadRecordDo) Session(config *gorm.Session) IMessageReadRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageReadRecordDo) Clauses(conds ...clause.Expression) IMessageReadRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageReadRecordDo) Returning(value interface{}, columns ...string) IMessageReadRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageReadRecordDo) Not(conds ...gen.Condition) IMessageReadRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageReadRecordDo) Or(conds ...gen.Condition) IMessageReadRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageReadRecordDo) Select(conds ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageReadRecordDo) Where(conds ...gen.Condition) IMessageReadRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageReadRecordDo) Order(conds ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageReadRecordDo) Distinct(cols ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageReadRecordDo) Omit(cols ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageReadRecordDo) Join(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageReadRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageReadRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageReadRecordDo) Group(cols ...field.Expr) IMessageReadRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageReadRecordDo) Having(conds ...gen.Condition) IMessageReadRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageReadRecordDo) Limit(limit int) IMessageReadRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageReadRecordDo) Offset(offset int) IMessageReadRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageReadRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageReadRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageReadRecordDo) Unscoped() IMessageReadRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageReadRecordDo) Create(values ...*model.MessageReadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageReadRecordDo) CreateInBatches(values []*model.MessageReadRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageReadRecordDo) Save(values ...*model.MessageReadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageReadRecordDo) First() (*model.MessageReadRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageReadRecord), nil
	}
}

func (m messageReadRecordDo) Take() (*model.MessageReadRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageReadRecord), nil
	}
}

func (m messageReadRecordDo) Last() (*model.MessageReadRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageReadRecord), nil
	}
}

func (m messageReadRecordDo) Find() ([]*model.MessageReadRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageReadRecord), err
}

func (m messageReadRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageReadRecord, err error) {
	buf := make([]*model.MessageReadRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageReadRecordDo) FindInBatches(result *[]*model.MessageReadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageReadRecordDo) Attrs(attrs ...field.AssignExpr) IMessageReadRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageReadRecordDo) Assign(attrs ...field.AssignExpr) IMessageReadRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageReadRecordDo) Joins(fields ...field.RelationField) IMessageReadRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageReadRecordDo) Preload(fields ...field.RelationField) IMessageReadRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageReadRecordDo) FirstOrInit() (*model.MessageReadRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageReadRecord), nil
	}
}

func (m messageReadRecordDo) FirstOrCreate() (*model.MessageReadRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageReadRecord), nil
	}
}

func (m messageReadRecordDo) FindByPage(offset int, limit int) (result []*model.MessageReadRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageReadRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageReadRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageReadRecordDo) Delete(models ...*model.MessageReadRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageReadRecordDo) withDO(do gen.Dao) *messageReadRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
