// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRechargeFailLog(db *gorm.DB, opts ...gen.DOOption) userRechargeFailLog {
	_userRechargeFailLog := userRechargeFailLog{}

	_userRechargeFailLog.userRechargeFailLogDo.UseDB(db, opts...)
	_userRechargeFailLog.userRechargeFailLogDo.UseModel(&model.UserRechargeFailLog{})

	tableName := _userRechargeFailLog.userRechargeFailLogDo.TableName()
	_userRechargeFailLog.ALL = field.NewAsterisk(tableName)
	_userRechargeFailLog.ID = field.NewInt64(tableName, "id")
	_userRechargeFailLog.UserID = field.NewInt64(tableName, "user_id")
	_userRechargeFailLog.IsStat = field.NewInt64(tableName, "is_stat")
	_userRechargeFailLog.CreatedAt = field.NewField(tableName, "created_at")
	_userRechargeFailLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRechargeFailLog.fillFieldMap()

	return _userRechargeFailLog
}

// userRechargeFailLog 用户充值失败次数记录
type userRechargeFailLog struct {
	userRechargeFailLogDo userRechargeFailLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64 // 用户id
	IsStat    field.Int64 // 0:未统计, 1:已统计
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userRechargeFailLog) Table(newTableName string) *userRechargeFailLog {
	u.userRechargeFailLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRechargeFailLog) As(alias string) *userRechargeFailLog {
	u.userRechargeFailLogDo.DO = *(u.userRechargeFailLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRechargeFailLog) updateTableName(table string) *userRechargeFailLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.IsStat = field.NewInt64(table, "is_stat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRechargeFailLog) WithContext(ctx context.Context) IUserRechargeFailLogDo {
	return u.userRechargeFailLogDo.WithContext(ctx)
}

func (u userRechargeFailLog) TableName() string { return u.userRechargeFailLogDo.TableName() }

func (u userRechargeFailLog) Alias() string { return u.userRechargeFailLogDo.Alias() }

func (u userRechargeFailLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userRechargeFailLogDo.Columns(cols...)
}

func (u *userRechargeFailLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRechargeFailLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["is_stat"] = u.IsStat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRechargeFailLog) clone(db *gorm.DB) userRechargeFailLog {
	u.userRechargeFailLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRechargeFailLog) replaceDB(db *gorm.DB) userRechargeFailLog {
	u.userRechargeFailLogDo.ReplaceDB(db)
	return u
}

type userRechargeFailLogDo struct{ gen.DO }

type IUserRechargeFailLogDo interface {
	gen.SubQuery
	Debug() IUserRechargeFailLogDo
	WithContext(ctx context.Context) IUserRechargeFailLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRechargeFailLogDo
	WriteDB() IUserRechargeFailLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRechargeFailLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRechargeFailLogDo
	Not(conds ...gen.Condition) IUserRechargeFailLogDo
	Or(conds ...gen.Condition) IUserRechargeFailLogDo
	Select(conds ...field.Expr) IUserRechargeFailLogDo
	Where(conds ...gen.Condition) IUserRechargeFailLogDo
	Order(conds ...field.Expr) IUserRechargeFailLogDo
	Distinct(cols ...field.Expr) IUserRechargeFailLogDo
	Omit(cols ...field.Expr) IUserRechargeFailLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo
	Group(cols ...field.Expr) IUserRechargeFailLogDo
	Having(conds ...gen.Condition) IUserRechargeFailLogDo
	Limit(limit int) IUserRechargeFailLogDo
	Offset(offset int) IUserRechargeFailLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeFailLogDo
	Unscoped() IUserRechargeFailLogDo
	Create(values ...*model.UserRechargeFailLog) error
	CreateInBatches(values []*model.UserRechargeFailLog, batchSize int) error
	Save(values ...*model.UserRechargeFailLog) error
	First() (*model.UserRechargeFailLog, error)
	Take() (*model.UserRechargeFailLog, error)
	Last() (*model.UserRechargeFailLog, error)
	Find() ([]*model.UserRechargeFailLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRechargeFailLog, err error)
	FindInBatches(result *[]*model.UserRechargeFailLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRechargeFailLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRechargeFailLogDo
	Assign(attrs ...field.AssignExpr) IUserRechargeFailLogDo
	Joins(fields ...field.RelationField) IUserRechargeFailLogDo
	Preload(fields ...field.RelationField) IUserRechargeFailLogDo
	FirstOrInit() (*model.UserRechargeFailLog, error)
	FirstOrCreate() (*model.UserRechargeFailLog, error)
	FindByPage(offset int, limit int) (result []*model.UserRechargeFailLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRechargeFailLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRechargeFailLogDo) Debug() IUserRechargeFailLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userRechargeFailLogDo) WithContext(ctx context.Context) IUserRechargeFailLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRechargeFailLogDo) ReadDB() IUserRechargeFailLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRechargeFailLogDo) WriteDB() IUserRechargeFailLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRechargeFailLogDo) Session(config *gorm.Session) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRechargeFailLogDo) Clauses(conds ...clause.Expression) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRechargeFailLogDo) Returning(value interface{}, columns ...string) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRechargeFailLogDo) Not(conds ...gen.Condition) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRechargeFailLogDo) Or(conds ...gen.Condition) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRechargeFailLogDo) Select(conds ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRechargeFailLogDo) Where(conds ...gen.Condition) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRechargeFailLogDo) Order(conds ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRechargeFailLogDo) Distinct(cols ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRechargeFailLogDo) Omit(cols ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRechargeFailLogDo) Join(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRechargeFailLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRechargeFailLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRechargeFailLogDo) Group(cols ...field.Expr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRechargeFailLogDo) Having(conds ...gen.Condition) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRechargeFailLogDo) Limit(limit int) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRechargeFailLogDo) Offset(offset int) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRechargeFailLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRechargeFailLogDo) Unscoped() IUserRechargeFailLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRechargeFailLogDo) Create(values ...*model.UserRechargeFailLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRechargeFailLogDo) CreateInBatches(values []*model.UserRechargeFailLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRechargeFailLogDo) Save(values ...*model.UserRechargeFailLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRechargeFailLogDo) First() (*model.UserRechargeFailLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeFailLog), nil
	}
}

func (u userRechargeFailLogDo) Take() (*model.UserRechargeFailLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeFailLog), nil
	}
}

func (u userRechargeFailLogDo) Last() (*model.UserRechargeFailLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeFailLog), nil
	}
}

func (u userRechargeFailLogDo) Find() ([]*model.UserRechargeFailLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRechargeFailLog), err
}

func (u userRechargeFailLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRechargeFailLog, err error) {
	buf := make([]*model.UserRechargeFailLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRechargeFailLogDo) FindInBatches(result *[]*model.UserRechargeFailLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRechargeFailLogDo) Attrs(attrs ...field.AssignExpr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRechargeFailLogDo) Assign(attrs ...field.AssignExpr) IUserRechargeFailLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRechargeFailLogDo) Joins(fields ...field.RelationField) IUserRechargeFailLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRechargeFailLogDo) Preload(fields ...field.RelationField) IUserRechargeFailLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRechargeFailLogDo) FirstOrInit() (*model.UserRechargeFailLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeFailLog), nil
	}
}

func (u userRechargeFailLogDo) FirstOrCreate() (*model.UserRechargeFailLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeFailLog), nil
	}
}

func (u userRechargeFailLogDo) FindByPage(offset int, limit int) (result []*model.UserRechargeFailLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRechargeFailLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRechargeFailLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRechargeFailLogDo) Delete(models ...*model.UserRechargeFailLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRechargeFailLogDo) withDO(do gen.Dao) *userRechargeFailLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
