// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newWithdrawalOperateLog(db *gorm.DB, opts ...gen.DOOption) withdrawalOperateLog {
	_withdrawalOperateLog := withdrawalOperateLog{}

	_withdrawalOperateLog.withdrawalOperateLogDo.UseDB(db, opts...)
	_withdrawalOperateLog.withdrawalOperateLogDo.UseModel(&model.WithdrawalOperateLog{})

	tableName := _withdrawalOperateLog.withdrawalOperateLogDo.TableName()
	_withdrawalOperateLog.ALL = field.NewAsterisk(tableName)
	_withdrawalOperateLog.ID = field.NewInt64(tableName, "id")
	_withdrawalOperateLog.WithdrawalID = field.NewInt64(tableName, "withdrawal_id")
	_withdrawalOperateLog.Status = field.NewInt64(tableName, "status")
	_withdrawalOperateLog.AdminName = field.NewString(tableName, "admin_name")
	_withdrawalOperateLog.CreatedAt = field.NewField(tableName, "created_at")
	_withdrawalOperateLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_withdrawalOperateLog.Remark = field.NewString(tableName, "remark")

	_withdrawalOperateLog.fillFieldMap()

	return _withdrawalOperateLog
}

type withdrawalOperateLog struct {
	withdrawalOperateLogDo withdrawalOperateLogDo

	ALL          field.Asterisk
	ID           field.Int64
	WithdrawalID field.Int64  // 取款id
	Status       field.Int64  // 状态
	AdminName    field.String // 操作人员名称
	CreatedAt    field.Field
	UpdatedAt    field.Field
	Remark       field.String // 备注

	fieldMap map[string]field.Expr
}

func (w withdrawalOperateLog) Table(newTableName string) *withdrawalOperateLog {
	w.withdrawalOperateLogDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w withdrawalOperateLog) As(alias string) *withdrawalOperateLog {
	w.withdrawalOperateLogDo.DO = *(w.withdrawalOperateLogDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *withdrawalOperateLog) updateTableName(table string) *withdrawalOperateLog {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.WithdrawalID = field.NewInt64(table, "withdrawal_id")
	w.Status = field.NewInt64(table, "status")
	w.AdminName = field.NewString(table, "admin_name")
	w.CreatedAt = field.NewField(table, "created_at")
	w.UpdatedAt = field.NewField(table, "updated_at")
	w.Remark = field.NewString(table, "remark")

	w.fillFieldMap()

	return w
}

func (w *withdrawalOperateLog) WithContext(ctx context.Context) IWithdrawalOperateLogDo {
	return w.withdrawalOperateLogDo.WithContext(ctx)
}

func (w withdrawalOperateLog) TableName() string { return w.withdrawalOperateLogDo.TableName() }

func (w withdrawalOperateLog) Alias() string { return w.withdrawalOperateLogDo.Alias() }

func (w withdrawalOperateLog) Columns(cols ...field.Expr) gen.Columns {
	return w.withdrawalOperateLogDo.Columns(cols...)
}

func (w *withdrawalOperateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *withdrawalOperateLog) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["withdrawal_id"] = w.WithdrawalID
	w.fieldMap["status"] = w.Status
	w.fieldMap["admin_name"] = w.AdminName
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["remark"] = w.Remark
}

func (w withdrawalOperateLog) clone(db *gorm.DB) withdrawalOperateLog {
	w.withdrawalOperateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w withdrawalOperateLog) replaceDB(db *gorm.DB) withdrawalOperateLog {
	w.withdrawalOperateLogDo.ReplaceDB(db)
	return w
}

type withdrawalOperateLogDo struct{ gen.DO }

type IWithdrawalOperateLogDo interface {
	gen.SubQuery
	Debug() IWithdrawalOperateLogDo
	WithContext(ctx context.Context) IWithdrawalOperateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWithdrawalOperateLogDo
	WriteDB() IWithdrawalOperateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWithdrawalOperateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWithdrawalOperateLogDo
	Not(conds ...gen.Condition) IWithdrawalOperateLogDo
	Or(conds ...gen.Condition) IWithdrawalOperateLogDo
	Select(conds ...field.Expr) IWithdrawalOperateLogDo
	Where(conds ...gen.Condition) IWithdrawalOperateLogDo
	Order(conds ...field.Expr) IWithdrawalOperateLogDo
	Distinct(cols ...field.Expr) IWithdrawalOperateLogDo
	Omit(cols ...field.Expr) IWithdrawalOperateLogDo
	Join(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo
	Group(cols ...field.Expr) IWithdrawalOperateLogDo
	Having(conds ...gen.Condition) IWithdrawalOperateLogDo
	Limit(limit int) IWithdrawalOperateLogDo
	Offset(offset int) IWithdrawalOperateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalOperateLogDo
	Unscoped() IWithdrawalOperateLogDo
	Create(values ...*model.WithdrawalOperateLog) error
	CreateInBatches(values []*model.WithdrawalOperateLog, batchSize int) error
	Save(values ...*model.WithdrawalOperateLog) error
	First() (*model.WithdrawalOperateLog, error)
	Take() (*model.WithdrawalOperateLog, error)
	Last() (*model.WithdrawalOperateLog, error)
	Find() ([]*model.WithdrawalOperateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalOperateLog, err error)
	FindInBatches(result *[]*model.WithdrawalOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WithdrawalOperateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWithdrawalOperateLogDo
	Assign(attrs ...field.AssignExpr) IWithdrawalOperateLogDo
	Joins(fields ...field.RelationField) IWithdrawalOperateLogDo
	Preload(fields ...field.RelationField) IWithdrawalOperateLogDo
	FirstOrInit() (*model.WithdrawalOperateLog, error)
	FirstOrCreate() (*model.WithdrawalOperateLog, error)
	FindByPage(offset int, limit int) (result []*model.WithdrawalOperateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWithdrawalOperateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w withdrawalOperateLogDo) Debug() IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Debug())
}

func (w withdrawalOperateLogDo) WithContext(ctx context.Context) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w withdrawalOperateLogDo) ReadDB() IWithdrawalOperateLogDo {
	return w.Clauses(dbresolver.Read)
}

func (w withdrawalOperateLogDo) WriteDB() IWithdrawalOperateLogDo {
	return w.Clauses(dbresolver.Write)
}

func (w withdrawalOperateLogDo) Session(config *gorm.Session) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Session(config))
}

func (w withdrawalOperateLogDo) Clauses(conds ...clause.Expression) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w withdrawalOperateLogDo) Returning(value interface{}, columns ...string) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w withdrawalOperateLogDo) Not(conds ...gen.Condition) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w withdrawalOperateLogDo) Or(conds ...gen.Condition) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w withdrawalOperateLogDo) Select(conds ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w withdrawalOperateLogDo) Where(conds ...gen.Condition) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w withdrawalOperateLogDo) Order(conds ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w withdrawalOperateLogDo) Distinct(cols ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w withdrawalOperateLogDo) Omit(cols ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w withdrawalOperateLogDo) Join(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w withdrawalOperateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w withdrawalOperateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w withdrawalOperateLogDo) Group(cols ...field.Expr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w withdrawalOperateLogDo) Having(conds ...gen.Condition) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w withdrawalOperateLogDo) Limit(limit int) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w withdrawalOperateLogDo) Offset(offset int) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w withdrawalOperateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w withdrawalOperateLogDo) Unscoped() IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Unscoped())
}

func (w withdrawalOperateLogDo) Create(values ...*model.WithdrawalOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w withdrawalOperateLogDo) CreateInBatches(values []*model.WithdrawalOperateLog, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w withdrawalOperateLogDo) Save(values ...*model.WithdrawalOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w withdrawalOperateLogDo) First() (*model.WithdrawalOperateLog, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalOperateLog), nil
	}
}

func (w withdrawalOperateLogDo) Take() (*model.WithdrawalOperateLog, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalOperateLog), nil
	}
}

func (w withdrawalOperateLogDo) Last() (*model.WithdrawalOperateLog, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalOperateLog), nil
	}
}

func (w withdrawalOperateLogDo) Find() ([]*model.WithdrawalOperateLog, error) {
	result, err := w.DO.Find()
	return result.([]*model.WithdrawalOperateLog), err
}

func (w withdrawalOperateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalOperateLog, err error) {
	buf := make([]*model.WithdrawalOperateLog, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w withdrawalOperateLogDo) FindInBatches(result *[]*model.WithdrawalOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w withdrawalOperateLogDo) Attrs(attrs ...field.AssignExpr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w withdrawalOperateLogDo) Assign(attrs ...field.AssignExpr) IWithdrawalOperateLogDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w withdrawalOperateLogDo) Joins(fields ...field.RelationField) IWithdrawalOperateLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w withdrawalOperateLogDo) Preload(fields ...field.RelationField) IWithdrawalOperateLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w withdrawalOperateLogDo) FirstOrInit() (*model.WithdrawalOperateLog, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalOperateLog), nil
	}
}

func (w withdrawalOperateLogDo) FirstOrCreate() (*model.WithdrawalOperateLog, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalOperateLog), nil
	}
}

func (w withdrawalOperateLogDo) FindByPage(offset int, limit int) (result []*model.WithdrawalOperateLog, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w withdrawalOperateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w withdrawalOperateLogDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w withdrawalOperateLogDo) Delete(models ...*model.WithdrawalOperateLog) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *withdrawalOperateLogDo) withDO(do gen.Dao) *withdrawalOperateLogDo {
	w.DO = *do.(*gen.DO)
	return w
}
