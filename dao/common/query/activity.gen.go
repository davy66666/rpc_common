// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivity(db *gorm.DB, opts ...gen.DOOption) activity {
	_activity := activity{}

	_activity.activityDo.UseDB(db, opts...)
	_activity.activityDo.UseModel(&model.Activity{})

	tableName := _activity.activityDo.TableName()
	_activity.ALL = field.NewAsterisk(tableName)
	_activity.ID = field.NewInt64(tableName, "id")
	_activity.Title = field.NewString(tableName, "title")
	_activity.CaptainInvite = field.NewFloat64(tableName, "captain_invite")
	_activity.CaptainValidBetAmount = field.NewFloat64(tableName, "captain_valid_bet_amount")
	_activity.CaptainHighestReward = field.NewFloat64(tableName, "captain_highest_reward")
	_activity.CaptainCycle = field.NewInt64(tableName, "captain_cycle")
	_activity.TeamCycle = field.NewInt64(tableName, "team_cycle")
	_activity.LuckyDrawDeposit = field.NewFloat64(tableName, "lucky_draw_deposit")
	_activity.Status = field.NewInt64(tableName, "status")
	_activity.StartTime = field.NewField(tableName, "start_time")
	_activity.EndTime = field.NewField(tableName, "end_time")
	_activity.CreatedAt = field.NewField(tableName, "created_at")
	_activity.UpdatedAt = field.NewField(tableName, "updated_at")
	_activity.IsPop = field.NewInt64(tableName, "is_pop")
	_activity.PopPcImgPath = field.NewString(tableName, "pop_pc_img_path")
	_activity.PopMImgPath = field.NewString(tableName, "pop_m_img_path")
	_activity.IsFloat = field.NewInt64(tableName, "is_float")
	_activity.FloatPcImgPath = field.NewString(tableName, "float_pc_img_path")
	_activity.FloatMImgPath = field.NewString(tableName, "float_m_img_path")
	_activity.GuessRule = field.NewString(tableName, "guess_rule")
	_activity.BetRule = field.NewString(tableName, "bet_rule")
	_activity.LastBetAt = field.NewField(tableName, "last_bet_at")

	_activity.fillFieldMap()

	return _activity
}

// activity 活动配置
type activity struct {
	activityDo activityDo

	ALL                   field.Asterisk
	ID                    field.Int64
	Title                 field.String  // 活动名称
	CaptainInvite         field.Float64 // 队伍每邀请1个有效会员奖励
	CaptainValidBetAmount field.Float64 // 队伍有效会员7日存款额
	CaptainHighestReward  field.Float64 // 队长最高奖励
	CaptainCycle          field.Int64   // 队长奖励周期
	TeamCycle             field.Int64   // 团队奖励周期
	LuckyDrawDeposit      field.Float64 // 抽奖资格存款金额
	Status                field.Int64   // 活动开关 0关 1开
	StartTime             field.Field   // 开始时间
	EndTime               field.Field   // 结束时间
	CreatedAt             field.Field   // 创建时间
	UpdatedAt             field.Field   // 更新时间
	IsPop                 field.Int64   // 是否弹窗 0:否 1:是
	PopPcImgPath          field.String  // pc弹窗图片
	PopMImgPath           field.String  // mobile弹窗图片
	IsFloat               field.Int64   // 是否悬浮
	FloatPcImgPath        field.String  // pc悬浮图片
	FloatMImgPath         field.String  // mobile悬浮图片
	GuessRule             field.String  // 团队竞猜规则
	BetRule               field.String  // 投注规则
	LastBetAt             field.Field   // 冠军赛最后投注时间

	fieldMap map[string]field.Expr
}

func (a activity) Table(newTableName string) *activity {
	a.activityDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activity) As(alias string) *activity {
	a.activityDo.DO = *(a.activityDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activity) updateTableName(table string) *activity {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.CaptainInvite = field.NewFloat64(table, "captain_invite")
	a.CaptainValidBetAmount = field.NewFloat64(table, "captain_valid_bet_amount")
	a.CaptainHighestReward = field.NewFloat64(table, "captain_highest_reward")
	a.CaptainCycle = field.NewInt64(table, "captain_cycle")
	a.TeamCycle = field.NewInt64(table, "team_cycle")
	a.LuckyDrawDeposit = field.NewFloat64(table, "lucky_draw_deposit")
	a.Status = field.NewInt64(table, "status")
	a.StartTime = field.NewField(table, "start_time")
	a.EndTime = field.NewField(table, "end_time")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.IsPop = field.NewInt64(table, "is_pop")
	a.PopPcImgPath = field.NewString(table, "pop_pc_img_path")
	a.PopMImgPath = field.NewString(table, "pop_m_img_path")
	a.IsFloat = field.NewInt64(table, "is_float")
	a.FloatPcImgPath = field.NewString(table, "float_pc_img_path")
	a.FloatMImgPath = field.NewString(table, "float_m_img_path")
	a.GuessRule = field.NewString(table, "guess_rule")
	a.BetRule = field.NewString(table, "bet_rule")
	a.LastBetAt = field.NewField(table, "last_bet_at")

	a.fillFieldMap()

	return a
}

func (a *activity) WithContext(ctx context.Context) IActivityDo { return a.activityDo.WithContext(ctx) }

func (a activity) TableName() string { return a.activityDo.TableName() }

func (a activity) Alias() string { return a.activityDo.Alias() }

func (a activity) Columns(cols ...field.Expr) gen.Columns { return a.activityDo.Columns(cols...) }

func (a *activity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activity) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["captain_invite"] = a.CaptainInvite
	a.fieldMap["captain_valid_bet_amount"] = a.CaptainValidBetAmount
	a.fieldMap["captain_highest_reward"] = a.CaptainHighestReward
	a.fieldMap["captain_cycle"] = a.CaptainCycle
	a.fieldMap["team_cycle"] = a.TeamCycle
	a.fieldMap["lucky_draw_deposit"] = a.LuckyDrawDeposit
	a.fieldMap["status"] = a.Status
	a.fieldMap["start_time"] = a.StartTime
	a.fieldMap["end_time"] = a.EndTime
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["is_pop"] = a.IsPop
	a.fieldMap["pop_pc_img_path"] = a.PopPcImgPath
	a.fieldMap["pop_m_img_path"] = a.PopMImgPath
	a.fieldMap["is_float"] = a.IsFloat
	a.fieldMap["float_pc_img_path"] = a.FloatPcImgPath
	a.fieldMap["float_m_img_path"] = a.FloatMImgPath
	a.fieldMap["guess_rule"] = a.GuessRule
	a.fieldMap["bet_rule"] = a.BetRule
	a.fieldMap["last_bet_at"] = a.LastBetAt
}

func (a activity) clone(db *gorm.DB) activity {
	a.activityDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activity) replaceDB(db *gorm.DB) activity {
	a.activityDo.ReplaceDB(db)
	return a
}

type activityDo struct{ gen.DO }

type IActivityDo interface {
	gen.SubQuery
	Debug() IActivityDo
	WithContext(ctx context.Context) IActivityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityDo
	WriteDB() IActivityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityDo
	Not(conds ...gen.Condition) IActivityDo
	Or(conds ...gen.Condition) IActivityDo
	Select(conds ...field.Expr) IActivityDo
	Where(conds ...gen.Condition) IActivityDo
	Order(conds ...field.Expr) IActivityDo
	Distinct(cols ...field.Expr) IActivityDo
	Omit(cols ...field.Expr) IActivityDo
	Join(table schema.Tabler, on ...field.Expr) IActivityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityDo
	Group(cols ...field.Expr) IActivityDo
	Having(conds ...gen.Condition) IActivityDo
	Limit(limit int) IActivityDo
	Offset(offset int) IActivityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityDo
	Unscoped() IActivityDo
	Create(values ...*model.Activity) error
	CreateInBatches(values []*model.Activity, batchSize int) error
	Save(values ...*model.Activity) error
	First() (*model.Activity, error)
	Take() (*model.Activity, error)
	Last() (*model.Activity, error)
	Find() ([]*model.Activity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Activity, err error)
	FindInBatches(result *[]*model.Activity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Activity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityDo
	Assign(attrs ...field.AssignExpr) IActivityDo
	Joins(fields ...field.RelationField) IActivityDo
	Preload(fields ...field.RelationField) IActivityDo
	FirstOrInit() (*model.Activity, error)
	FirstOrCreate() (*model.Activity, error)
	FindByPage(offset int, limit int) (result []*model.Activity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityDo) Debug() IActivityDo {
	return a.withDO(a.DO.Debug())
}

func (a activityDo) WithContext(ctx context.Context) IActivityDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityDo) ReadDB() IActivityDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityDo) WriteDB() IActivityDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityDo) Session(config *gorm.Session) IActivityDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityDo) Clauses(conds ...clause.Expression) IActivityDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityDo) Returning(value interface{}, columns ...string) IActivityDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityDo) Not(conds ...gen.Condition) IActivityDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityDo) Or(conds ...gen.Condition) IActivityDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityDo) Select(conds ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityDo) Where(conds ...gen.Condition) IActivityDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityDo) Order(conds ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityDo) Distinct(cols ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityDo) Omit(cols ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityDo) Join(table schema.Tabler, on ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityDo) Group(cols ...field.Expr) IActivityDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityDo) Having(conds ...gen.Condition) IActivityDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityDo) Limit(limit int) IActivityDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityDo) Offset(offset int) IActivityDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityDo) Unscoped() IActivityDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityDo) Create(values ...*model.Activity) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityDo) CreateInBatches(values []*model.Activity, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityDo) Save(values ...*model.Activity) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityDo) First() (*model.Activity, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Activity), nil
	}
}

func (a activityDo) Take() (*model.Activity, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Activity), nil
	}
}

func (a activityDo) Last() (*model.Activity, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Activity), nil
	}
}

func (a activityDo) Find() ([]*model.Activity, error) {
	result, err := a.DO.Find()
	return result.([]*model.Activity), err
}

func (a activityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Activity, err error) {
	buf := make([]*model.Activity, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityDo) FindInBatches(result *[]*model.Activity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityDo) Attrs(attrs ...field.AssignExpr) IActivityDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityDo) Assign(attrs ...field.AssignExpr) IActivityDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityDo) Joins(fields ...field.RelationField) IActivityDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityDo) Preload(fields ...field.RelationField) IActivityDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityDo) FirstOrInit() (*model.Activity, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Activity), nil
	}
}

func (a activityDo) FirstOrCreate() (*model.Activity, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Activity), nil
	}
}

func (a activityDo) FindByPage(offset int, limit int) (result []*model.Activity, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityDo) Delete(models ...*model.Activity) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityDo) withDO(do gen.Dao) *activityDo {
	a.DO = *do.(*gen.DO)
	return a
}
