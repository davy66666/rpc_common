// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPromotion(db *gorm.DB, opts ...gen.DOOption) promotion {
	_promotion := promotion{}

	_promotion.promotionDo.UseDB(db, opts...)
	_promotion.promotionDo.UseModel(&model.Promotion{})

	tableName := _promotion.promotionDo.TableName()
	_promotion.ALL = field.NewAsterisk(tableName)
	_promotion.ID = field.NewInt64(tableName, "id")
	_promotion.Type = field.NewInt64(tableName, "type")
	_promotion.Title = field.NewString(tableName, "title")
	_promotion.StartAt = field.NewTime(tableName, "start_at")
	_promotion.EndAt = field.NewTime(tableName, "end_at")
	_promotion.IsAudit = field.NewInt64(tableName, "is_audit")
	_promotion.CycleType = field.NewInt64(tableName, "cycle_type")
	_promotion.CycleDays = field.NewInt64(tableName, "cycle_days")
	_promotion.SendType = field.NewInt64(tableName, "send_type")
	_promotion.SameNameClaimTimes = field.NewInt64(tableName, "same_name_claim_times")
	_promotion.BetAmountType = field.NewInt64(tableName, "bet_amount_type")
	_promotion.BetAmountMult = field.NewInt64(tableName, "bet_amount_mult")
	_promotion.ClaimType = field.NewInt64(tableName, "claim_type")
	_promotion.RechargeAmount = field.NewFloat64(tableName, "recharge_amount")
	_promotion.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_promotion.Games = field.NewString(tableName, "games")
	_promotion.ExcludeSubType = field.NewString(tableName, "exclude_sub_type")
	_promotion.PayLevels = field.NewString(tableName, "pay_levels")
	_promotion.UserLevels = field.NewString(tableName, "user_levels")
	_promotion.Usernames = field.NewString(tableName, "usernames")
	_promotion.PayTypes = field.NewString(tableName, "pay_types")
	_promotion.RegDays = field.NewInt64(tableName, "reg_days")
	_promotion.SubType = field.NewInt64(tableName, "sub_type")
	_promotion.Configs = field.NewString(tableName, "configs")
	_promotion.IsOpen = field.NewInt64(tableName, "is_open")
	_promotion.IsDel = field.NewInt64(tableName, "is_del")
	_promotion.CreatedAt = field.NewField(tableName, "created_at")
	_promotion.UpdatedAt = field.NewField(tableName, "updated_at")
	_promotion.ClaimExpireDays = field.NewInt64(tableName, "claim_expire_days")
	_promotion.SendScheme = field.NewString(tableName, "send_scheme")
	_promotion.RelateActivityID = field.NewInt64(tableName, "relate_activity_id")
	_promotion.IsFixedRegDays = field.NewInt64(tableName, "is_fixed_reg_days")
	_promotion.IncludeGames = field.NewString(tableName, "include_games")
	_promotion.IsCalByDate = field.NewInt64(tableName, "is_cal_by_date")
	_promotion.RiskIsOpen = field.NewInt64(tableName, "risk_is_open")
	_promotion.RiskRuleSetID = field.NewInt64(tableName, "risk_rule_set_id")
	_promotion.RiskSendType = field.NewInt64(tableName, "risk_send_type")
	_promotion.ClaimTimes = field.NewInt64(tableName, "claim_times")
	_promotion.RiskAuditType = field.NewInt64(tableName, "risk_audit_type")

	_promotion.fillFieldMap()

	return _promotion
}

type promotion struct {
	promotionDo promotionDo

	ALL                field.Asterisk
	ID                 field.Int64
	Type               field.Int64   // 大类
	Title              field.String  // 名称
	StartAt            field.Time    // 开始日期
	EndAt              field.Time    // 结束日期
	IsAudit            field.Int64   // 人工审核 0:否 1:是
	CycleType          field.Int64   // 循环结算 1：每日 2：每周 3：每月 4：自定义时间 5：整个活动周期
	CycleDays          field.Int64   // 自定义时间天数
	SendType           field.Int64   // 派发方式 1：系统派发 2：玩家自领
	SameNameClaimTimes field.Int64   // 同姓名限领次数 0：不限制
	BetAmountType      field.Int64   // 彩金打码类型 1:无打码 2：固定打码
	BetAmountMult      field.Int64   // 彩金打码倍数
	ClaimType          field.Int64   // 报名方式 1：玩家申请 2：不需要报名
	RechargeAmount     field.Float64 // 存款金额
	ValidBetAmount     field.Float64 // 有效投注金额
	Games              field.String  // 游戏类型
	ExcludeSubType     field.String  // 排除活动类型
	PayLevels          field.String  // 层级(支付层级) 多选，逗号分隔
	UserLevels         field.String  // 登记(vip登记) 多选，逗号分隔
	Usernames          field.String  // 指定会员，逗号分隔
	PayTypes           field.String  // 存款类型（客户通道），逗号分隔
	RegDays            field.Int64   // 满足注册时间的天数
	SubType            field.Int64   // 活动类型
	Configs            field.String  // 条件配置
	IsOpen             field.Int64   // 1/0;启用/禁用
	IsDel              field.Int64   // 0/1 正常/删除
	CreatedAt          field.Field
	UpdatedAt          field.Field
	ClaimExpireDays    field.Int64  // 领取有效天数
	SendScheme         field.String // 派奖计划
	RelateActivityID   field.Int64  // 关联活动id
	IsFixedRegDays     field.Int64  // 是否固定 0：否 1：是
	IncludeGames       field.String // 注单类特定厅室
	IsCalByDate        field.Int64  // 是否按照日期计算 0：否 1：是
	RiskIsOpen         field.Int64  // 风控开关 1开启0关闭
	RiskRuleSetID      field.Int64  // 关联规则集
	RiskSendType       field.Int64  // 风控通过后置 1自动派发 2人工审核
	ClaimTimes         field.Int64  // 领取次数
	RiskAuditType      field.Int64  // 风控审核方式 1：人工审核 2：自动审核

	fieldMap map[string]field.Expr
}

func (p promotion) Table(newTableName string) *promotion {
	p.promotionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotion) As(alias string) *promotion {
	p.promotionDo.DO = *(p.promotionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotion) updateTableName(table string) *promotion {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Type = field.NewInt64(table, "type")
	p.Title = field.NewString(table, "title")
	p.StartAt = field.NewTime(table, "start_at")
	p.EndAt = field.NewTime(table, "end_at")
	p.IsAudit = field.NewInt64(table, "is_audit")
	p.CycleType = field.NewInt64(table, "cycle_type")
	p.CycleDays = field.NewInt64(table, "cycle_days")
	p.SendType = field.NewInt64(table, "send_type")
	p.SameNameClaimTimes = field.NewInt64(table, "same_name_claim_times")
	p.BetAmountType = field.NewInt64(table, "bet_amount_type")
	p.BetAmountMult = field.NewInt64(table, "bet_amount_mult")
	p.ClaimType = field.NewInt64(table, "claim_type")
	p.RechargeAmount = field.NewFloat64(table, "recharge_amount")
	p.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	p.Games = field.NewString(table, "games")
	p.ExcludeSubType = field.NewString(table, "exclude_sub_type")
	p.PayLevels = field.NewString(table, "pay_levels")
	p.UserLevels = field.NewString(table, "user_levels")
	p.Usernames = field.NewString(table, "usernames")
	p.PayTypes = field.NewString(table, "pay_types")
	p.RegDays = field.NewInt64(table, "reg_days")
	p.SubType = field.NewInt64(table, "sub_type")
	p.Configs = field.NewString(table, "configs")
	p.IsOpen = field.NewInt64(table, "is_open")
	p.IsDel = field.NewInt64(table, "is_del")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.ClaimExpireDays = field.NewInt64(table, "claim_expire_days")
	p.SendScheme = field.NewString(table, "send_scheme")
	p.RelateActivityID = field.NewInt64(table, "relate_activity_id")
	p.IsFixedRegDays = field.NewInt64(table, "is_fixed_reg_days")
	p.IncludeGames = field.NewString(table, "include_games")
	p.IsCalByDate = field.NewInt64(table, "is_cal_by_date")
	p.RiskIsOpen = field.NewInt64(table, "risk_is_open")
	p.RiskRuleSetID = field.NewInt64(table, "risk_rule_set_id")
	p.RiskSendType = field.NewInt64(table, "risk_send_type")
	p.ClaimTimes = field.NewInt64(table, "claim_times")
	p.RiskAuditType = field.NewInt64(table, "risk_audit_type")

	p.fillFieldMap()

	return p
}

func (p *promotion) WithContext(ctx context.Context) IPromotionDo {
	return p.promotionDo.WithContext(ctx)
}

func (p promotion) TableName() string { return p.promotionDo.TableName() }

func (p promotion) Alias() string { return p.promotionDo.Alias() }

func (p promotion) Columns(cols ...field.Expr) gen.Columns { return p.promotionDo.Columns(cols...) }

func (p *promotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 39)
	p.fieldMap["id"] = p.ID
	p.fieldMap["type"] = p.Type
	p.fieldMap["title"] = p.Title
	p.fieldMap["start_at"] = p.StartAt
	p.fieldMap["end_at"] = p.EndAt
	p.fieldMap["is_audit"] = p.IsAudit
	p.fieldMap["cycle_type"] = p.CycleType
	p.fieldMap["cycle_days"] = p.CycleDays
	p.fieldMap["send_type"] = p.SendType
	p.fieldMap["same_name_claim_times"] = p.SameNameClaimTimes
	p.fieldMap["bet_amount_type"] = p.BetAmountType
	p.fieldMap["bet_amount_mult"] = p.BetAmountMult
	p.fieldMap["claim_type"] = p.ClaimType
	p.fieldMap["recharge_amount"] = p.RechargeAmount
	p.fieldMap["valid_bet_amount"] = p.ValidBetAmount
	p.fieldMap["games"] = p.Games
	p.fieldMap["exclude_sub_type"] = p.ExcludeSubType
	p.fieldMap["pay_levels"] = p.PayLevels
	p.fieldMap["user_levels"] = p.UserLevels
	p.fieldMap["usernames"] = p.Usernames
	p.fieldMap["pay_types"] = p.PayTypes
	p.fieldMap["reg_days"] = p.RegDays
	p.fieldMap["sub_type"] = p.SubType
	p.fieldMap["configs"] = p.Configs
	p.fieldMap["is_open"] = p.IsOpen
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["claim_expire_days"] = p.ClaimExpireDays
	p.fieldMap["send_scheme"] = p.SendScheme
	p.fieldMap["relate_activity_id"] = p.RelateActivityID
	p.fieldMap["is_fixed_reg_days"] = p.IsFixedRegDays
	p.fieldMap["include_games"] = p.IncludeGames
	p.fieldMap["is_cal_by_date"] = p.IsCalByDate
	p.fieldMap["risk_is_open"] = p.RiskIsOpen
	p.fieldMap["risk_rule_set_id"] = p.RiskRuleSetID
	p.fieldMap["risk_send_type"] = p.RiskSendType
	p.fieldMap["claim_times"] = p.ClaimTimes
	p.fieldMap["risk_audit_type"] = p.RiskAuditType
}

func (p promotion) clone(db *gorm.DB) promotion {
	p.promotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotion) replaceDB(db *gorm.DB) promotion {
	p.promotionDo.ReplaceDB(db)
	return p
}

type promotionDo struct{ gen.DO }

type IPromotionDo interface {
	gen.SubQuery
	Debug() IPromotionDo
	WithContext(ctx context.Context) IPromotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionDo
	WriteDB() IPromotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionDo
	Not(conds ...gen.Condition) IPromotionDo
	Or(conds ...gen.Condition) IPromotionDo
	Select(conds ...field.Expr) IPromotionDo
	Where(conds ...gen.Condition) IPromotionDo
	Order(conds ...field.Expr) IPromotionDo
	Distinct(cols ...field.Expr) IPromotionDo
	Omit(cols ...field.Expr) IPromotionDo
	Join(table schema.Tabler, on ...field.Expr) IPromotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	Group(cols ...field.Expr) IPromotionDo
	Having(conds ...gen.Condition) IPromotionDo
	Limit(limit int) IPromotionDo
	Offset(offset int) IPromotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo
	Unscoped() IPromotionDo
	Create(values ...*model.Promotion) error
	CreateInBatches(values []*model.Promotion, batchSize int) error
	Save(values ...*model.Promotion) error
	First() (*model.Promotion, error)
	Take() (*model.Promotion, error)
	Last() (*model.Promotion, error)
	Find() ([]*model.Promotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Promotion, err error)
	FindInBatches(result *[]*model.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Promotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionDo
	Assign(attrs ...field.AssignExpr) IPromotionDo
	Joins(fields ...field.RelationField) IPromotionDo
	Preload(fields ...field.RelationField) IPromotionDo
	FirstOrInit() (*model.Promotion, error)
	FirstOrCreate() (*model.Promotion, error)
	FindByPage(offset int, limit int) (result []*model.Promotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionDo) Debug() IPromotionDo {
	return p.withDO(p.DO.Debug())
}

func (p promotionDo) WithContext(ctx context.Context) IPromotionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionDo) ReadDB() IPromotionDo {
	return p.Clauses(dbresolver.Read)
}

func (p promotionDo) WriteDB() IPromotionDo {
	return p.Clauses(dbresolver.Write)
}

func (p promotionDo) Session(config *gorm.Session) IPromotionDo {
	return p.withDO(p.DO.Session(config))
}

func (p promotionDo) Clauses(conds ...clause.Expression) IPromotionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionDo) Returning(value interface{}, columns ...string) IPromotionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionDo) Not(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionDo) Or(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionDo) Select(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionDo) Where(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionDo) Order(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionDo) Distinct(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionDo) Omit(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionDo) Join(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionDo) Group(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionDo) Having(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionDo) Limit(limit int) IPromotionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionDo) Offset(offset int) IPromotionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionDo) Unscoped() IPromotionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionDo) Create(values ...*model.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionDo) CreateInBatches(values []*model.Promotion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionDo) Save(values ...*model.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionDo) First() (*model.Promotion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Promotion), nil
	}
}

func (p promotionDo) Take() (*model.Promotion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Promotion), nil
	}
}

func (p promotionDo) Last() (*model.Promotion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Promotion), nil
	}
}

func (p promotionDo) Find() ([]*model.Promotion, error) {
	result, err := p.DO.Find()
	return result.([]*model.Promotion), err
}

func (p promotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Promotion, err error) {
	buf := make([]*model.Promotion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionDo) FindInBatches(result *[]*model.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionDo) Attrs(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionDo) Assign(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionDo) Joins(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionDo) Preload(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionDo) FirstOrInit() (*model.Promotion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Promotion), nil
	}
}

func (p promotionDo) FirstOrCreate() (*model.Promotion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Promotion), nil
	}
}

func (p promotionDo) FindByPage(offset int, limit int) (result []*model.Promotion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionDo) Delete(models ...*model.Promotion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionDo) withDO(do gen.Dao) *promotionDo {
	p.DO = *do.(*gen.DO)
	return p
}
