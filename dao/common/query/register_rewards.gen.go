// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRegisterReward(db *gorm.DB, opts ...gen.DOOption) registerReward {
	_registerReward := registerReward{}

	_registerReward.registerRewardDo.UseDB(db, opts...)
	_registerReward.registerRewardDo.UseModel(&model.RegisterReward{})

	tableName := _registerReward.registerRewardDo.TableName()
	_registerReward.ALL = field.NewAsterisk(tableName)
	_registerReward.ID = field.NewInt64(tableName, "id")
	_registerReward.CircleRecordID = field.NewInt64(tableName, "circle_record_id")
	_registerReward.UserID = field.NewInt64(tableName, "user_id")
	_registerReward.Username = field.NewString(tableName, "username")
	_registerReward.Amount = field.NewFloat64(tableName, "amount")
	_registerReward.ReceiveAt = field.NewField(tableName, "receive_at")
	_registerReward.Status = field.NewInt64(tableName, "status")
	_registerReward.CreatedAt = field.NewField(tableName, "created_at")
	_registerReward.UpdatedAt = field.NewField(tableName, "updated_at")

	_registerReward.fillFieldMap()

	return _registerReward
}

// registerReward 队长奖励表
type registerReward struct {
	registerRewardDo registerRewardDo

	ALL            field.Asterisk
	ID             field.Int64
	CircleRecordID field.Int64   // 周期id
	UserID         field.Int64   // 会员id
	Username       field.String  // 会员名称
	Amount         field.Float64 // 奖金
	ReceiveAt      field.Field   // 领取时间
	Status         field.Int64   // 是否领取 0:否 1:是
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (r registerReward) Table(newTableName string) *registerReward {
	r.registerRewardDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registerReward) As(alias string) *registerReward {
	r.registerRewardDo.DO = *(r.registerRewardDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registerReward) updateTableName(table string) *registerReward {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CircleRecordID = field.NewInt64(table, "circle_record_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Username = field.NewString(table, "username")
	r.Amount = field.NewFloat64(table, "amount")
	r.ReceiveAt = field.NewField(table, "receive_at")
	r.Status = field.NewInt64(table, "status")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *registerReward) WithContext(ctx context.Context) IRegisterRewardDo {
	return r.registerRewardDo.WithContext(ctx)
}

func (r registerReward) TableName() string { return r.registerRewardDo.TableName() }

func (r registerReward) Alias() string { return r.registerRewardDo.Alias() }

func (r registerReward) Columns(cols ...field.Expr) gen.Columns {
	return r.registerRewardDo.Columns(cols...)
}

func (r *registerReward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registerReward) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["circle_record_id"] = r.CircleRecordID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["username"] = r.Username
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["receive_at"] = r.ReceiveAt
	r.fieldMap["status"] = r.Status
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r registerReward) clone(db *gorm.DB) registerReward {
	r.registerRewardDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registerReward) replaceDB(db *gorm.DB) registerReward {
	r.registerRewardDo.ReplaceDB(db)
	return r
}

type registerRewardDo struct{ gen.DO }

type IRegisterRewardDo interface {
	gen.SubQuery
	Debug() IRegisterRewardDo
	WithContext(ctx context.Context) IRegisterRewardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegisterRewardDo
	WriteDB() IRegisterRewardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegisterRewardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegisterRewardDo
	Not(conds ...gen.Condition) IRegisterRewardDo
	Or(conds ...gen.Condition) IRegisterRewardDo
	Select(conds ...field.Expr) IRegisterRewardDo
	Where(conds ...gen.Condition) IRegisterRewardDo
	Order(conds ...field.Expr) IRegisterRewardDo
	Distinct(cols ...field.Expr) IRegisterRewardDo
	Omit(cols ...field.Expr) IRegisterRewardDo
	Join(table schema.Tabler, on ...field.Expr) IRegisterRewardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegisterRewardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegisterRewardDo
	Group(cols ...field.Expr) IRegisterRewardDo
	Having(conds ...gen.Condition) IRegisterRewardDo
	Limit(limit int) IRegisterRewardDo
	Offset(offset int) IRegisterRewardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisterRewardDo
	Unscoped() IRegisterRewardDo
	Create(values ...*model.RegisterReward) error
	CreateInBatches(values []*model.RegisterReward, batchSize int) error
	Save(values ...*model.RegisterReward) error
	First() (*model.RegisterReward, error)
	Take() (*model.RegisterReward, error)
	Last() (*model.RegisterReward, error)
	Find() ([]*model.RegisterReward, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisterReward, err error)
	FindInBatches(result *[]*model.RegisterReward, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RegisterReward) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegisterRewardDo
	Assign(attrs ...field.AssignExpr) IRegisterRewardDo
	Joins(fields ...field.RelationField) IRegisterRewardDo
	Preload(fields ...field.RelationField) IRegisterRewardDo
	FirstOrInit() (*model.RegisterReward, error)
	FirstOrCreate() (*model.RegisterReward, error)
	FindByPage(offset int, limit int) (result []*model.RegisterReward, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegisterRewardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r registerRewardDo) Debug() IRegisterRewardDo {
	return r.withDO(r.DO.Debug())
}

func (r registerRewardDo) WithContext(ctx context.Context) IRegisterRewardDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registerRewardDo) ReadDB() IRegisterRewardDo {
	return r.Clauses(dbresolver.Read)
}

func (r registerRewardDo) WriteDB() IRegisterRewardDo {
	return r.Clauses(dbresolver.Write)
}

func (r registerRewardDo) Session(config *gorm.Session) IRegisterRewardDo {
	return r.withDO(r.DO.Session(config))
}

func (r registerRewardDo) Clauses(conds ...clause.Expression) IRegisterRewardDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registerRewardDo) Returning(value interface{}, columns ...string) IRegisterRewardDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registerRewardDo) Not(conds ...gen.Condition) IRegisterRewardDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registerRewardDo) Or(conds ...gen.Condition) IRegisterRewardDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registerRewardDo) Select(conds ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registerRewardDo) Where(conds ...gen.Condition) IRegisterRewardDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registerRewardDo) Order(conds ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registerRewardDo) Distinct(cols ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registerRewardDo) Omit(cols ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registerRewardDo) Join(table schema.Tabler, on ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registerRewardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registerRewardDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registerRewardDo) Group(cols ...field.Expr) IRegisterRewardDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registerRewardDo) Having(conds ...gen.Condition) IRegisterRewardDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registerRewardDo) Limit(limit int) IRegisterRewardDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registerRewardDo) Offset(offset int) IRegisterRewardDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registerRewardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisterRewardDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registerRewardDo) Unscoped() IRegisterRewardDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registerRewardDo) Create(values ...*model.RegisterReward) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registerRewardDo) CreateInBatches(values []*model.RegisterReward, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registerRewardDo) Save(values ...*model.RegisterReward) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registerRewardDo) First() (*model.RegisterReward, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterReward), nil
	}
}

func (r registerRewardDo) Take() (*model.RegisterReward, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterReward), nil
	}
}

func (r registerRewardDo) Last() (*model.RegisterReward, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterReward), nil
	}
}

func (r registerRewardDo) Find() ([]*model.RegisterReward, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegisterReward), err
}

func (r registerRewardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisterReward, err error) {
	buf := make([]*model.RegisterReward, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registerRewardDo) FindInBatches(result *[]*model.RegisterReward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registerRewardDo) Attrs(attrs ...field.AssignExpr) IRegisterRewardDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registerRewardDo) Assign(attrs ...field.AssignExpr) IRegisterRewardDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registerRewardDo) Joins(fields ...field.RelationField) IRegisterRewardDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registerRewardDo) Preload(fields ...field.RelationField) IRegisterRewardDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registerRewardDo) FirstOrInit() (*model.RegisterReward, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterReward), nil
	}
}

func (r registerRewardDo) FirstOrCreate() (*model.RegisterReward, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterReward), nil
	}
}

func (r registerRewardDo) FindByPage(offset int, limit int) (result []*model.RegisterReward, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registerRewardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registerRewardDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registerRewardDo) Delete(models ...*model.RegisterReward) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registerRewardDo) withDO(do gen.Dao) *registerRewardDo {
	r.DO = *do.(*gen.DO)
	return r
}
