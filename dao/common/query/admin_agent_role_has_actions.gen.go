// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminAgentRoleHasAction(db *gorm.DB, opts ...gen.DOOption) adminAgentRoleHasAction {
	_adminAgentRoleHasAction := adminAgentRoleHasAction{}

	_adminAgentRoleHasAction.adminAgentRoleHasActionDo.UseDB(db, opts...)
	_adminAgentRoleHasAction.adminAgentRoleHasActionDo.UseModel(&model.AdminAgentRoleHasAction{})

	tableName := _adminAgentRoleHasAction.adminAgentRoleHasActionDo.TableName()
	_adminAgentRoleHasAction.ALL = field.NewAsterisk(tableName)
	_adminAgentRoleHasAction.ID = field.NewInt64(tableName, "id")
	_adminAgentRoleHasAction.AdminAgentRoleID = field.NewInt64(tableName, "admin_agent_role_id")
	_adminAgentRoleHasAction.AgentActionID = field.NewInt64(tableName, "agent_action_id")
	_adminAgentRoleHasAction.CreatedAt = field.NewField(tableName, "created_at")
	_adminAgentRoleHasAction.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminAgentRoleHasAction.fillFieldMap()

	return _adminAgentRoleHasAction
}

type adminAgentRoleHasAction struct {
	adminAgentRoleHasActionDo adminAgentRoleHasActionDo

	ALL              field.Asterisk
	ID               field.Int64
	AdminAgentRoleID field.Int64
	AgentActionID    field.Int64
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (a adminAgentRoleHasAction) Table(newTableName string) *adminAgentRoleHasAction {
	a.adminAgentRoleHasActionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminAgentRoleHasAction) As(alias string) *adminAgentRoleHasAction {
	a.adminAgentRoleHasActionDo.DO = *(a.adminAgentRoleHasActionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminAgentRoleHasAction) updateTableName(table string) *adminAgentRoleHasAction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminAgentRoleID = field.NewInt64(table, "admin_agent_role_id")
	a.AgentActionID = field.NewInt64(table, "agent_action_id")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminAgentRoleHasAction) WithContext(ctx context.Context) IAdminAgentRoleHasActionDo {
	return a.adminAgentRoleHasActionDo.WithContext(ctx)
}

func (a adminAgentRoleHasAction) TableName() string { return a.adminAgentRoleHasActionDo.TableName() }

func (a adminAgentRoleHasAction) Alias() string { return a.adminAgentRoleHasActionDo.Alias() }

func (a adminAgentRoleHasAction) Columns(cols ...field.Expr) gen.Columns {
	return a.adminAgentRoleHasActionDo.Columns(cols...)
}

func (a *adminAgentRoleHasAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminAgentRoleHasAction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_agent_role_id"] = a.AdminAgentRoleID
	a.fieldMap["agent_action_id"] = a.AgentActionID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminAgentRoleHasAction) clone(db *gorm.DB) adminAgentRoleHasAction {
	a.adminAgentRoleHasActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminAgentRoleHasAction) replaceDB(db *gorm.DB) adminAgentRoleHasAction {
	a.adminAgentRoleHasActionDo.ReplaceDB(db)
	return a
}

type adminAgentRoleHasActionDo struct{ gen.DO }

type IAdminAgentRoleHasActionDo interface {
	gen.SubQuery
	Debug() IAdminAgentRoleHasActionDo
	WithContext(ctx context.Context) IAdminAgentRoleHasActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminAgentRoleHasActionDo
	WriteDB() IAdminAgentRoleHasActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminAgentRoleHasActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminAgentRoleHasActionDo
	Not(conds ...gen.Condition) IAdminAgentRoleHasActionDo
	Or(conds ...gen.Condition) IAdminAgentRoleHasActionDo
	Select(conds ...field.Expr) IAdminAgentRoleHasActionDo
	Where(conds ...gen.Condition) IAdminAgentRoleHasActionDo
	Order(conds ...field.Expr) IAdminAgentRoleHasActionDo
	Distinct(cols ...field.Expr) IAdminAgentRoleHasActionDo
	Omit(cols ...field.Expr) IAdminAgentRoleHasActionDo
	Join(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo
	Group(cols ...field.Expr) IAdminAgentRoleHasActionDo
	Having(conds ...gen.Condition) IAdminAgentRoleHasActionDo
	Limit(limit int) IAdminAgentRoleHasActionDo
	Offset(offset int) IAdminAgentRoleHasActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentRoleHasActionDo
	Unscoped() IAdminAgentRoleHasActionDo
	Create(values ...*model.AdminAgentRoleHasAction) error
	CreateInBatches(values []*model.AdminAgentRoleHasAction, batchSize int) error
	Save(values ...*model.AdminAgentRoleHasAction) error
	First() (*model.AdminAgentRoleHasAction, error)
	Take() (*model.AdminAgentRoleHasAction, error)
	Last() (*model.AdminAgentRoleHasAction, error)
	Find() ([]*model.AdminAgentRoleHasAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentRoleHasAction, err error)
	FindInBatches(result *[]*model.AdminAgentRoleHasAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminAgentRoleHasAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminAgentRoleHasActionDo
	Assign(attrs ...field.AssignExpr) IAdminAgentRoleHasActionDo
	Joins(fields ...field.RelationField) IAdminAgentRoleHasActionDo
	Preload(fields ...field.RelationField) IAdminAgentRoleHasActionDo
	FirstOrInit() (*model.AdminAgentRoleHasAction, error)
	FirstOrCreate() (*model.AdminAgentRoleHasAction, error)
	FindByPage(offset int, limit int) (result []*model.AdminAgentRoleHasAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminAgentRoleHasActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminAgentRoleHasActionDo) Debug() IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Debug())
}

func (a adminAgentRoleHasActionDo) WithContext(ctx context.Context) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminAgentRoleHasActionDo) ReadDB() IAdminAgentRoleHasActionDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminAgentRoleHasActionDo) WriteDB() IAdminAgentRoleHasActionDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminAgentRoleHasActionDo) Session(config *gorm.Session) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminAgentRoleHasActionDo) Clauses(conds ...clause.Expression) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminAgentRoleHasActionDo) Returning(value interface{}, columns ...string) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminAgentRoleHasActionDo) Not(conds ...gen.Condition) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminAgentRoleHasActionDo) Or(conds ...gen.Condition) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminAgentRoleHasActionDo) Select(conds ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminAgentRoleHasActionDo) Where(conds ...gen.Condition) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminAgentRoleHasActionDo) Order(conds ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminAgentRoleHasActionDo) Distinct(cols ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminAgentRoleHasActionDo) Omit(cols ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminAgentRoleHasActionDo) Join(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminAgentRoleHasActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminAgentRoleHasActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminAgentRoleHasActionDo) Group(cols ...field.Expr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminAgentRoleHasActionDo) Having(conds ...gen.Condition) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminAgentRoleHasActionDo) Limit(limit int) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminAgentRoleHasActionDo) Offset(offset int) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminAgentRoleHasActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminAgentRoleHasActionDo) Unscoped() IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminAgentRoleHasActionDo) Create(values ...*model.AdminAgentRoleHasAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminAgentRoleHasActionDo) CreateInBatches(values []*model.AdminAgentRoleHasAction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminAgentRoleHasActionDo) Save(values ...*model.AdminAgentRoleHasAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminAgentRoleHasActionDo) First() (*model.AdminAgentRoleHasAction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRoleHasAction), nil
	}
}

func (a adminAgentRoleHasActionDo) Take() (*model.AdminAgentRoleHasAction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRoleHasAction), nil
	}
}

func (a adminAgentRoleHasActionDo) Last() (*model.AdminAgentRoleHasAction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRoleHasAction), nil
	}
}

func (a adminAgentRoleHasActionDo) Find() ([]*model.AdminAgentRoleHasAction, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminAgentRoleHasAction), err
}

func (a adminAgentRoleHasActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentRoleHasAction, err error) {
	buf := make([]*model.AdminAgentRoleHasAction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminAgentRoleHasActionDo) FindInBatches(result *[]*model.AdminAgentRoleHasAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminAgentRoleHasActionDo) Attrs(attrs ...field.AssignExpr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminAgentRoleHasActionDo) Assign(attrs ...field.AssignExpr) IAdminAgentRoleHasActionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminAgentRoleHasActionDo) Joins(fields ...field.RelationField) IAdminAgentRoleHasActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminAgentRoleHasActionDo) Preload(fields ...field.RelationField) IAdminAgentRoleHasActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminAgentRoleHasActionDo) FirstOrInit() (*model.AdminAgentRoleHasAction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRoleHasAction), nil
	}
}

func (a adminAgentRoleHasActionDo) FirstOrCreate() (*model.AdminAgentRoleHasAction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRoleHasAction), nil
	}
}

func (a adminAgentRoleHasActionDo) FindByPage(offset int, limit int) (result []*model.AdminAgentRoleHasAction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminAgentRoleHasActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminAgentRoleHasActionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminAgentRoleHasActionDo) Delete(models ...*model.AdminAgentRoleHasAction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminAgentRoleHasActionDo) withDO(do gen.Dao) *adminAgentRoleHasActionDo {
	a.DO = *do.(*gen.DO)
	return a
}
