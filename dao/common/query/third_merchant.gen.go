// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newThirdMerchant(db *gorm.DB, opts ...gen.DOOption) thirdMerchant {
	_thirdMerchant := thirdMerchant{}

	_thirdMerchant.thirdMerchantDo.UseDB(db, opts...)
	_thirdMerchant.thirdMerchantDo.UseModel(&model.ThirdMerchant{})

	tableName := _thirdMerchant.thirdMerchantDo.TableName()
	_thirdMerchant.ALL = field.NewAsterisk(tableName)
	_thirdMerchant.ID = field.NewInt64(tableName, "id")
	_thirdMerchant.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_thirdMerchant.MerchantNum = field.NewString(tableName, "merchant_num")
	_thirdMerchant.Remark = field.NewString(tableName, "remark")
	_thirdMerchant.IsOpen = field.NewInt64(tableName, "is_open")
	_thirdMerchant.CreatedAt = field.NewField(tableName, "created_at")
	_thirdMerchant.UpdatedAt = field.NewField(tableName, "updated_at")
	_thirdMerchant.AdminUser = field.NewString(tableName, "admin_user")

	_thirdMerchant.fillFieldMap()

	return _thirdMerchant
}

// thirdMerchant 三方商户管理
type thirdMerchant struct {
	thirdMerchantDo thirdMerchantDo

	ALL               field.Asterisk
	ID                field.Int64  // id
	ThirdMerchantName field.String // 三方商户名称
	MerchantNum       field.String // 商户编号
	Remark            field.String // 备注
	IsOpen            field.Int64  // 1启用 0禁用
	CreatedAt         field.Field  // 创建时间
	UpdatedAt         field.Field  // 修改时间
	AdminUser         field.String // 修改人

	fieldMap map[string]field.Expr
}

func (t thirdMerchant) Table(newTableName string) *thirdMerchant {
	t.thirdMerchantDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdMerchant) As(alias string) *thirdMerchant {
	t.thirdMerchantDo.DO = *(t.thirdMerchantDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdMerchant) updateTableName(table string) *thirdMerchant {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	t.MerchantNum = field.NewString(table, "merchant_num")
	t.Remark = field.NewString(table, "remark")
	t.IsOpen = field.NewInt64(table, "is_open")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")
	t.AdminUser = field.NewString(table, "admin_user")

	t.fillFieldMap()

	return t
}

func (t *thirdMerchant) WithContext(ctx context.Context) IThirdMerchantDo {
	return t.thirdMerchantDo.WithContext(ctx)
}

func (t thirdMerchant) TableName() string { return t.thirdMerchantDo.TableName() }

func (t thirdMerchant) Alias() string { return t.thirdMerchantDo.Alias() }

func (t thirdMerchant) Columns(cols ...field.Expr) gen.Columns {
	return t.thirdMerchantDo.Columns(cols...)
}

func (t *thirdMerchant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdMerchant) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["third_merchant_name"] = t.ThirdMerchantName
	t.fieldMap["merchant_num"] = t.MerchantNum
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["is_open"] = t.IsOpen
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["admin_user"] = t.AdminUser
}

func (t thirdMerchant) clone(db *gorm.DB) thirdMerchant {
	t.thirdMerchantDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdMerchant) replaceDB(db *gorm.DB) thirdMerchant {
	t.thirdMerchantDo.ReplaceDB(db)
	return t
}

type thirdMerchantDo struct{ gen.DO }

type IThirdMerchantDo interface {
	gen.SubQuery
	Debug() IThirdMerchantDo
	WithContext(ctx context.Context) IThirdMerchantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThirdMerchantDo
	WriteDB() IThirdMerchantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThirdMerchantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThirdMerchantDo
	Not(conds ...gen.Condition) IThirdMerchantDo
	Or(conds ...gen.Condition) IThirdMerchantDo
	Select(conds ...field.Expr) IThirdMerchantDo
	Where(conds ...gen.Condition) IThirdMerchantDo
	Order(conds ...field.Expr) IThirdMerchantDo
	Distinct(cols ...field.Expr) IThirdMerchantDo
	Omit(cols ...field.Expr) IThirdMerchantDo
	Join(table schema.Tabler, on ...field.Expr) IThirdMerchantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThirdMerchantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThirdMerchantDo
	Group(cols ...field.Expr) IThirdMerchantDo
	Having(conds ...gen.Condition) IThirdMerchantDo
	Limit(limit int) IThirdMerchantDo
	Offset(offset int) IThirdMerchantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdMerchantDo
	Unscoped() IThirdMerchantDo
	Create(values ...*model.ThirdMerchant) error
	CreateInBatches(values []*model.ThirdMerchant, batchSize int) error
	Save(values ...*model.ThirdMerchant) error
	First() (*model.ThirdMerchant, error)
	Take() (*model.ThirdMerchant, error)
	Last() (*model.ThirdMerchant, error)
	Find() ([]*model.ThirdMerchant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdMerchant, err error)
	FindInBatches(result *[]*model.ThirdMerchant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThirdMerchant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThirdMerchantDo
	Assign(attrs ...field.AssignExpr) IThirdMerchantDo
	Joins(fields ...field.RelationField) IThirdMerchantDo
	Preload(fields ...field.RelationField) IThirdMerchantDo
	FirstOrInit() (*model.ThirdMerchant, error)
	FirstOrCreate() (*model.ThirdMerchant, error)
	FindByPage(offset int, limit int) (result []*model.ThirdMerchant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThirdMerchantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t thirdMerchantDo) Debug() IThirdMerchantDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdMerchantDo) WithContext(ctx context.Context) IThirdMerchantDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdMerchantDo) ReadDB() IThirdMerchantDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdMerchantDo) WriteDB() IThirdMerchantDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdMerchantDo) Session(config *gorm.Session) IThirdMerchantDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdMerchantDo) Clauses(conds ...clause.Expression) IThirdMerchantDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdMerchantDo) Returning(value interface{}, columns ...string) IThirdMerchantDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdMerchantDo) Not(conds ...gen.Condition) IThirdMerchantDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdMerchantDo) Or(conds ...gen.Condition) IThirdMerchantDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdMerchantDo) Select(conds ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdMerchantDo) Where(conds ...gen.Condition) IThirdMerchantDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdMerchantDo) Order(conds ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdMerchantDo) Distinct(cols ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdMerchantDo) Omit(cols ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdMerchantDo) Join(table schema.Tabler, on ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdMerchantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdMerchantDo) RightJoin(table schema.Tabler, on ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdMerchantDo) Group(cols ...field.Expr) IThirdMerchantDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdMerchantDo) Having(conds ...gen.Condition) IThirdMerchantDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdMerchantDo) Limit(limit int) IThirdMerchantDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdMerchantDo) Offset(offset int) IThirdMerchantDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdMerchantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThirdMerchantDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdMerchantDo) Unscoped() IThirdMerchantDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdMerchantDo) Create(values ...*model.ThirdMerchant) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdMerchantDo) CreateInBatches(values []*model.ThirdMerchant, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdMerchantDo) Save(values ...*model.ThirdMerchant) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdMerchantDo) First() (*model.ThirdMerchant, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdMerchant), nil
	}
}

func (t thirdMerchantDo) Take() (*model.ThirdMerchant, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdMerchant), nil
	}
}

func (t thirdMerchantDo) Last() (*model.ThirdMerchant, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdMerchant), nil
	}
}

func (t thirdMerchantDo) Find() ([]*model.ThirdMerchant, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdMerchant), err
}

func (t thirdMerchantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdMerchant, err error) {
	buf := make([]*model.ThirdMerchant, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdMerchantDo) FindInBatches(result *[]*model.ThirdMerchant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdMerchantDo) Attrs(attrs ...field.AssignExpr) IThirdMerchantDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdMerchantDo) Assign(attrs ...field.AssignExpr) IThirdMerchantDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdMerchantDo) Joins(fields ...field.RelationField) IThirdMerchantDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdMerchantDo) Preload(fields ...field.RelationField) IThirdMerchantDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdMerchantDo) FirstOrInit() (*model.ThirdMerchant, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdMerchant), nil
	}
}

func (t thirdMerchantDo) FirstOrCreate() (*model.ThirdMerchant, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdMerchant), nil
	}
}

func (t thirdMerchantDo) FindByPage(offset int, limit int) (result []*model.ThirdMerchant, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdMerchantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdMerchantDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdMerchantDo) Delete(models ...*model.ThirdMerchant) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdMerchantDo) withDO(do gen.Dao) *thirdMerchantDo {
	t.DO = *do.(*gen.DO)
	return t
}
