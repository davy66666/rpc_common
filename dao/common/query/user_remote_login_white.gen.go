// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRemoteLoginWhite(db *gorm.DB, opts ...gen.DOOption) userRemoteLoginWhite {
	_userRemoteLoginWhite := userRemoteLoginWhite{}

	_userRemoteLoginWhite.userRemoteLoginWhiteDo.UseDB(db, opts...)
	_userRemoteLoginWhite.userRemoteLoginWhiteDo.UseModel(&model.UserRemoteLoginWhite{})

	tableName := _userRemoteLoginWhite.userRemoteLoginWhiteDo.TableName()
	_userRemoteLoginWhite.ALL = field.NewAsterisk(tableName)
	_userRemoteLoginWhite.ID = field.NewInt64(tableName, "id")
	_userRemoteLoginWhite.UserID = field.NewInt64(tableName, "user_id")
	_userRemoteLoginWhite.Username = field.NewString(tableName, "username")
	_userRemoteLoginWhite.IsOpen = field.NewInt64(tableName, "is_open")
	_userRemoteLoginWhite.Remark = field.NewString(tableName, "remark")
	_userRemoteLoginWhite.AdminName = field.NewString(tableName, "admin_name")
	_userRemoteLoginWhite.CreatedAt = field.NewField(tableName, "created_at")
	_userRemoteLoginWhite.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRemoteLoginWhite.fillFieldMap()

	return _userRemoteLoginWhite
}

type userRemoteLoginWhite struct {
	userRemoteLoginWhiteDo userRemoteLoginWhiteDo

	ALL       field.Asterisk
	ID        field.Int64  // id
	UserID    field.Int64  // user_id
	Username  field.String // 用户昵称
	IsOpen    field.Int64  // 1 启用 0 禁用
	Remark    field.String // 备注
	AdminName field.String // 操作人
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userRemoteLoginWhite) Table(newTableName string) *userRemoteLoginWhite {
	u.userRemoteLoginWhiteDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRemoteLoginWhite) As(alias string) *userRemoteLoginWhite {
	u.userRemoteLoginWhiteDo.DO = *(u.userRemoteLoginWhiteDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRemoteLoginWhite) updateTableName(table string) *userRemoteLoginWhite {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.Remark = field.NewString(table, "remark")
	u.AdminName = field.NewString(table, "admin_name")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRemoteLoginWhite) WithContext(ctx context.Context) IUserRemoteLoginWhiteDo {
	return u.userRemoteLoginWhiteDo.WithContext(ctx)
}

func (u userRemoteLoginWhite) TableName() string { return u.userRemoteLoginWhiteDo.TableName() }

func (u userRemoteLoginWhite) Alias() string { return u.userRemoteLoginWhiteDo.Alias() }

func (u userRemoteLoginWhite) Columns(cols ...field.Expr) gen.Columns {
	return u.userRemoteLoginWhiteDo.Columns(cols...)
}

func (u *userRemoteLoginWhite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRemoteLoginWhite) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["admin_name"] = u.AdminName
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRemoteLoginWhite) clone(db *gorm.DB) userRemoteLoginWhite {
	u.userRemoteLoginWhiteDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRemoteLoginWhite) replaceDB(db *gorm.DB) userRemoteLoginWhite {
	u.userRemoteLoginWhiteDo.ReplaceDB(db)
	return u
}

type userRemoteLoginWhiteDo struct{ gen.DO }

type IUserRemoteLoginWhiteDo interface {
	gen.SubQuery
	Debug() IUserRemoteLoginWhiteDo
	WithContext(ctx context.Context) IUserRemoteLoginWhiteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRemoteLoginWhiteDo
	WriteDB() IUserRemoteLoginWhiteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRemoteLoginWhiteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRemoteLoginWhiteDo
	Not(conds ...gen.Condition) IUserRemoteLoginWhiteDo
	Or(conds ...gen.Condition) IUserRemoteLoginWhiteDo
	Select(conds ...field.Expr) IUserRemoteLoginWhiteDo
	Where(conds ...gen.Condition) IUserRemoteLoginWhiteDo
	Order(conds ...field.Expr) IUserRemoteLoginWhiteDo
	Distinct(cols ...field.Expr) IUserRemoteLoginWhiteDo
	Omit(cols ...field.Expr) IUserRemoteLoginWhiteDo
	Join(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo
	Group(cols ...field.Expr) IUserRemoteLoginWhiteDo
	Having(conds ...gen.Condition) IUserRemoteLoginWhiteDo
	Limit(limit int) IUserRemoteLoginWhiteDo
	Offset(offset int) IUserRemoteLoginWhiteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRemoteLoginWhiteDo
	Unscoped() IUserRemoteLoginWhiteDo
	Create(values ...*model.UserRemoteLoginWhite) error
	CreateInBatches(values []*model.UserRemoteLoginWhite, batchSize int) error
	Save(values ...*model.UserRemoteLoginWhite) error
	First() (*model.UserRemoteLoginWhite, error)
	Take() (*model.UserRemoteLoginWhite, error)
	Last() (*model.UserRemoteLoginWhite, error)
	Find() ([]*model.UserRemoteLoginWhite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRemoteLoginWhite, err error)
	FindInBatches(result *[]*model.UserRemoteLoginWhite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRemoteLoginWhite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRemoteLoginWhiteDo
	Assign(attrs ...field.AssignExpr) IUserRemoteLoginWhiteDo
	Joins(fields ...field.RelationField) IUserRemoteLoginWhiteDo
	Preload(fields ...field.RelationField) IUserRemoteLoginWhiteDo
	FirstOrInit() (*model.UserRemoteLoginWhite, error)
	FirstOrCreate() (*model.UserRemoteLoginWhite, error)
	FindByPage(offset int, limit int) (result []*model.UserRemoteLoginWhite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRemoteLoginWhiteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRemoteLoginWhiteDo) Debug() IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Debug())
}

func (u userRemoteLoginWhiteDo) WithContext(ctx context.Context) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRemoteLoginWhiteDo) ReadDB() IUserRemoteLoginWhiteDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRemoteLoginWhiteDo) WriteDB() IUserRemoteLoginWhiteDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRemoteLoginWhiteDo) Session(config *gorm.Session) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRemoteLoginWhiteDo) Clauses(conds ...clause.Expression) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRemoteLoginWhiteDo) Returning(value interface{}, columns ...string) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRemoteLoginWhiteDo) Not(conds ...gen.Condition) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRemoteLoginWhiteDo) Or(conds ...gen.Condition) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRemoteLoginWhiteDo) Select(conds ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRemoteLoginWhiteDo) Where(conds ...gen.Condition) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRemoteLoginWhiteDo) Order(conds ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRemoteLoginWhiteDo) Distinct(cols ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRemoteLoginWhiteDo) Omit(cols ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRemoteLoginWhiteDo) Join(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRemoteLoginWhiteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRemoteLoginWhiteDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRemoteLoginWhiteDo) Group(cols ...field.Expr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRemoteLoginWhiteDo) Having(conds ...gen.Condition) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRemoteLoginWhiteDo) Limit(limit int) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRemoteLoginWhiteDo) Offset(offset int) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRemoteLoginWhiteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRemoteLoginWhiteDo) Unscoped() IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRemoteLoginWhiteDo) Create(values ...*model.UserRemoteLoginWhite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRemoteLoginWhiteDo) CreateInBatches(values []*model.UserRemoteLoginWhite, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRemoteLoginWhiteDo) Save(values ...*model.UserRemoteLoginWhite) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRemoteLoginWhiteDo) First() (*model.UserRemoteLoginWhite, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginWhite), nil
	}
}

func (u userRemoteLoginWhiteDo) Take() (*model.UserRemoteLoginWhite, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginWhite), nil
	}
}

func (u userRemoteLoginWhiteDo) Last() (*model.UserRemoteLoginWhite, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginWhite), nil
	}
}

func (u userRemoteLoginWhiteDo) Find() ([]*model.UserRemoteLoginWhite, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRemoteLoginWhite), err
}

func (u userRemoteLoginWhiteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRemoteLoginWhite, err error) {
	buf := make([]*model.UserRemoteLoginWhite, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRemoteLoginWhiteDo) FindInBatches(result *[]*model.UserRemoteLoginWhite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRemoteLoginWhiteDo) Attrs(attrs ...field.AssignExpr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRemoteLoginWhiteDo) Assign(attrs ...field.AssignExpr) IUserRemoteLoginWhiteDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRemoteLoginWhiteDo) Joins(fields ...field.RelationField) IUserRemoteLoginWhiteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRemoteLoginWhiteDo) Preload(fields ...field.RelationField) IUserRemoteLoginWhiteDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRemoteLoginWhiteDo) FirstOrInit() (*model.UserRemoteLoginWhite, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginWhite), nil
	}
}

func (u userRemoteLoginWhiteDo) FirstOrCreate() (*model.UserRemoteLoginWhite, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginWhite), nil
	}
}

func (u userRemoteLoginWhiteDo) FindByPage(offset int, limit int) (result []*model.UserRemoteLoginWhite, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRemoteLoginWhiteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRemoteLoginWhiteDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRemoteLoginWhiteDo) Delete(models ...*model.UserRemoteLoginWhite) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRemoteLoginWhiteDo) withDO(do gen.Dao) *userRemoteLoginWhiteDo {
	u.DO = *do.(*gen.DO)
	return u
}
