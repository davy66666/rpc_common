// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newIPAreaWhitelist(db *gorm.DB, opts ...gen.DOOption) iPAreaWhitelist {
	_iPAreaWhitelist := iPAreaWhitelist{}

	_iPAreaWhitelist.iPAreaWhitelistDo.UseDB(db, opts...)
	_iPAreaWhitelist.iPAreaWhitelistDo.UseModel(&model.IPAreaWhitelist{})

	tableName := _iPAreaWhitelist.iPAreaWhitelistDo.TableName()
	_iPAreaWhitelist.ALL = field.NewAsterisk(tableName)
	_iPAreaWhitelist.ID = field.NewInt64(tableName, "id")
	_iPAreaWhitelist.Country = field.NewString(tableName, "country")
	_iPAreaWhitelist.IsOpen = field.NewInt64(tableName, "is_open")
	_iPAreaWhitelist.AdminName = field.NewString(tableName, "admin_name")
	_iPAreaWhitelist.CreatedAt = field.NewField(tableName, "created_at")
	_iPAreaWhitelist.UpdatedAt = field.NewField(tableName, "updated_at")

	_iPAreaWhitelist.fillFieldMap()

	return _iPAreaWhitelist
}

// iPAreaWhitelist ip地区白名单
type iPAreaWhitelist struct {
	iPAreaWhitelistDo iPAreaWhitelistDo

	ALL       field.Asterisk
	ID        field.Int64
	Country   field.String // 会员名称
	IsOpen    field.Int64  // 是否启用: 0否, 1:是
	AdminName field.String // 操作管理员
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (i iPAreaWhitelist) Table(newTableName string) *iPAreaWhitelist {
	i.iPAreaWhitelistDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iPAreaWhitelist) As(alias string) *iPAreaWhitelist {
	i.iPAreaWhitelistDo.DO = *(i.iPAreaWhitelistDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iPAreaWhitelist) updateTableName(table string) *iPAreaWhitelist {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Country = field.NewString(table, "country")
	i.IsOpen = field.NewInt64(table, "is_open")
	i.AdminName = field.NewString(table, "admin_name")
	i.CreatedAt = field.NewField(table, "created_at")
	i.UpdatedAt = field.NewField(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *iPAreaWhitelist) WithContext(ctx context.Context) IIPAreaWhitelistDo {
	return i.iPAreaWhitelistDo.WithContext(ctx)
}

func (i iPAreaWhitelist) TableName() string { return i.iPAreaWhitelistDo.TableName() }

func (i iPAreaWhitelist) Alias() string { return i.iPAreaWhitelistDo.Alias() }

func (i iPAreaWhitelist) Columns(cols ...field.Expr) gen.Columns {
	return i.iPAreaWhitelistDo.Columns(cols...)
}

func (i *iPAreaWhitelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iPAreaWhitelist) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["country"] = i.Country
	i.fieldMap["is_open"] = i.IsOpen
	i.fieldMap["admin_name"] = i.AdminName
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i iPAreaWhitelist) clone(db *gorm.DB) iPAreaWhitelist {
	i.iPAreaWhitelistDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iPAreaWhitelist) replaceDB(db *gorm.DB) iPAreaWhitelist {
	i.iPAreaWhitelistDo.ReplaceDB(db)
	return i
}

type iPAreaWhitelistDo struct{ gen.DO }

type IIPAreaWhitelistDo interface {
	gen.SubQuery
	Debug() IIPAreaWhitelistDo
	WithContext(ctx context.Context) IIPAreaWhitelistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIPAreaWhitelistDo
	WriteDB() IIPAreaWhitelistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIPAreaWhitelistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIPAreaWhitelistDo
	Not(conds ...gen.Condition) IIPAreaWhitelistDo
	Or(conds ...gen.Condition) IIPAreaWhitelistDo
	Select(conds ...field.Expr) IIPAreaWhitelistDo
	Where(conds ...gen.Condition) IIPAreaWhitelistDo
	Order(conds ...field.Expr) IIPAreaWhitelistDo
	Distinct(cols ...field.Expr) IIPAreaWhitelistDo
	Omit(cols ...field.Expr) IIPAreaWhitelistDo
	Join(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo
	Group(cols ...field.Expr) IIPAreaWhitelistDo
	Having(conds ...gen.Condition) IIPAreaWhitelistDo
	Limit(limit int) IIPAreaWhitelistDo
	Offset(offset int) IIPAreaWhitelistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIPAreaWhitelistDo
	Unscoped() IIPAreaWhitelistDo
	Create(values ...*model.IPAreaWhitelist) error
	CreateInBatches(values []*model.IPAreaWhitelist, batchSize int) error
	Save(values ...*model.IPAreaWhitelist) error
	First() (*model.IPAreaWhitelist, error)
	Take() (*model.IPAreaWhitelist, error)
	Last() (*model.IPAreaWhitelist, error)
	Find() ([]*model.IPAreaWhitelist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPAreaWhitelist, err error)
	FindInBatches(result *[]*model.IPAreaWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IPAreaWhitelist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIPAreaWhitelistDo
	Assign(attrs ...field.AssignExpr) IIPAreaWhitelistDo
	Joins(fields ...field.RelationField) IIPAreaWhitelistDo
	Preload(fields ...field.RelationField) IIPAreaWhitelistDo
	FirstOrInit() (*model.IPAreaWhitelist, error)
	FirstOrCreate() (*model.IPAreaWhitelist, error)
	FindByPage(offset int, limit int) (result []*model.IPAreaWhitelist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIPAreaWhitelistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iPAreaWhitelistDo) Debug() IIPAreaWhitelistDo {
	return i.withDO(i.DO.Debug())
}

func (i iPAreaWhitelistDo) WithContext(ctx context.Context) IIPAreaWhitelistDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iPAreaWhitelistDo) ReadDB() IIPAreaWhitelistDo {
	return i.Clauses(dbresolver.Read)
}

func (i iPAreaWhitelistDo) WriteDB() IIPAreaWhitelistDo {
	return i.Clauses(dbresolver.Write)
}

func (i iPAreaWhitelistDo) Session(config *gorm.Session) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Session(config))
}

func (i iPAreaWhitelistDo) Clauses(conds ...clause.Expression) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iPAreaWhitelistDo) Returning(value interface{}, columns ...string) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iPAreaWhitelistDo) Not(conds ...gen.Condition) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iPAreaWhitelistDo) Or(conds ...gen.Condition) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iPAreaWhitelistDo) Select(conds ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iPAreaWhitelistDo) Where(conds ...gen.Condition) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iPAreaWhitelistDo) Order(conds ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iPAreaWhitelistDo) Distinct(cols ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iPAreaWhitelistDo) Omit(cols ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iPAreaWhitelistDo) Join(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iPAreaWhitelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iPAreaWhitelistDo) RightJoin(table schema.Tabler, on ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iPAreaWhitelistDo) Group(cols ...field.Expr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iPAreaWhitelistDo) Having(conds ...gen.Condition) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iPAreaWhitelistDo) Limit(limit int) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iPAreaWhitelistDo) Offset(offset int) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iPAreaWhitelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iPAreaWhitelistDo) Unscoped() IIPAreaWhitelistDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iPAreaWhitelistDo) Create(values ...*model.IPAreaWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iPAreaWhitelistDo) CreateInBatches(values []*model.IPAreaWhitelist, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iPAreaWhitelistDo) Save(values ...*model.IPAreaWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iPAreaWhitelistDo) First() (*model.IPAreaWhitelist, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPAreaWhitelist), nil
	}
}

func (i iPAreaWhitelistDo) Take() (*model.IPAreaWhitelist, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPAreaWhitelist), nil
	}
}

func (i iPAreaWhitelistDo) Last() (*model.IPAreaWhitelist, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPAreaWhitelist), nil
	}
}

func (i iPAreaWhitelistDo) Find() ([]*model.IPAreaWhitelist, error) {
	result, err := i.DO.Find()
	return result.([]*model.IPAreaWhitelist), err
}

func (i iPAreaWhitelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPAreaWhitelist, err error) {
	buf := make([]*model.IPAreaWhitelist, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iPAreaWhitelistDo) FindInBatches(result *[]*model.IPAreaWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iPAreaWhitelistDo) Attrs(attrs ...field.AssignExpr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iPAreaWhitelistDo) Assign(attrs ...field.AssignExpr) IIPAreaWhitelistDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iPAreaWhitelistDo) Joins(fields ...field.RelationField) IIPAreaWhitelistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iPAreaWhitelistDo) Preload(fields ...field.RelationField) IIPAreaWhitelistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iPAreaWhitelistDo) FirstOrInit() (*model.IPAreaWhitelist, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPAreaWhitelist), nil
	}
}

func (i iPAreaWhitelistDo) FirstOrCreate() (*model.IPAreaWhitelist, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPAreaWhitelist), nil
	}
}

func (i iPAreaWhitelistDo) FindByPage(offset int, limit int) (result []*model.IPAreaWhitelist, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iPAreaWhitelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iPAreaWhitelistDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iPAreaWhitelistDo) Delete(models ...*model.IPAreaWhitelist) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iPAreaWhitelistDo) withDO(do gen.Dao) *iPAreaWhitelistDo {
	i.DO = *do.(*gen.DO)
	return i
}
