// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFastPay(db *gorm.DB, opts ...gen.DOOption) fastPay {
	_fastPay := fastPay{}

	_fastPay.fastPayDo.UseDB(db, opts...)
	_fastPay.fastPayDo.UseModel(&model.FastPay{})

	tableName := _fastPay.fastPayDo.TableName()
	_fastPay.ALL = field.NewAsterisk(tableName)
	_fastPay.ID = field.NewInt64(tableName, "id")
	_fastPay.PayType = field.NewString(tableName, "pay_type")
	_fastPay.PayName = field.NewString(tableName, "pay_name")
	_fastPay.ChannelPolicy = field.NewString(tableName, "channel_policy")
	_fastPay.FixedRange = field.NewString(tableName, "fixed_range")
	_fastPay.Range = field.NewString(tableName, "range")
	_fastPay.OnlinePayBind = field.NewString(tableName, "online_pay_bind")
	_fastPay.Remark = field.NewString(tableName, "remark")
	_fastPay.IsOpen = field.NewString(tableName, "is_open")
	_fastPay.AdminUser = field.NewString(tableName, "admin_user")
	_fastPay.CreatedAt = field.NewField(tableName, "created_at")
	_fastPay.UpdatedAt = field.NewField(tableName, "updated_at")
	_fastPay.OfflinePayBind = field.NewString(tableName, "offline_pay_bind")
	_fastPay.MatchOne = field.NewInt64(tableName, "match_one")
	_fastPay.MatchTwo = field.NewInt64(tableName, "match_two")
	_fastPay.MatchThree = field.NewInt64(tableName, "match_three")

	_fastPay.fillFieldMap()

	return _fastPay
}

type fastPay struct {
	fastPayDo fastPayDo

	ALL            field.Asterisk
	ID             field.Int64
	PayType        field.String // pay_types表中的en_name
	PayName        field.String // 支付中文名
	ChannelPolicy  field.String // 极速通道配置策略
	FixedRange     field.String // 固定额度区间
	Range          field.String // 匹配范围，json格式,min_money:最小金额，max_money:最大金额，eg:[{"min_money":0, "max_money":100}, {"min_money":600, "max_money":1000}]
	OnlinePayBind  field.String // 三方配置
	Remark         field.String // 备注
	IsOpen         field.String // 是否开启0:否;1:是
	AdminUser      field.String // 管理员
	CreatedAt      field.Field
	UpdatedAt      field.Field
	OfflinePayBind field.String // 卡商配置
	MatchOne       field.Int64  // 匹配顺序第一位
	MatchTwo       field.Int64  // 匹配顺序第二位
	MatchThree     field.Int64  // 匹配顺序第三位

	fieldMap map[string]field.Expr
}

func (f fastPay) Table(newTableName string) *fastPay {
	f.fastPayDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fastPay) As(alias string) *fastPay {
	f.fastPayDo.DO = *(f.fastPayDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fastPay) updateTableName(table string) *fastPay {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.PayType = field.NewString(table, "pay_type")
	f.PayName = field.NewString(table, "pay_name")
	f.ChannelPolicy = field.NewString(table, "channel_policy")
	f.FixedRange = field.NewString(table, "fixed_range")
	f.Range = field.NewString(table, "range")
	f.OnlinePayBind = field.NewString(table, "online_pay_bind")
	f.Remark = field.NewString(table, "remark")
	f.IsOpen = field.NewString(table, "is_open")
	f.AdminUser = field.NewString(table, "admin_user")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")
	f.OfflinePayBind = field.NewString(table, "offline_pay_bind")
	f.MatchOne = field.NewInt64(table, "match_one")
	f.MatchTwo = field.NewInt64(table, "match_two")
	f.MatchThree = field.NewInt64(table, "match_three")

	f.fillFieldMap()

	return f
}

func (f *fastPay) WithContext(ctx context.Context) IFastPayDo { return f.fastPayDo.WithContext(ctx) }

func (f fastPay) TableName() string { return f.fastPayDo.TableName() }

func (f fastPay) Alias() string { return f.fastPayDo.Alias() }

func (f fastPay) Columns(cols ...field.Expr) gen.Columns { return f.fastPayDo.Columns(cols...) }

func (f *fastPay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fastPay) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["pay_type"] = f.PayType
	f.fieldMap["pay_name"] = f.PayName
	f.fieldMap["channel_policy"] = f.ChannelPolicy
	f.fieldMap["fixed_range"] = f.FixedRange
	f.fieldMap["range"] = f.Range
	f.fieldMap["online_pay_bind"] = f.OnlinePayBind
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["is_open"] = f.IsOpen
	f.fieldMap["admin_user"] = f.AdminUser
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["offline_pay_bind"] = f.OfflinePayBind
	f.fieldMap["match_one"] = f.MatchOne
	f.fieldMap["match_two"] = f.MatchTwo
	f.fieldMap["match_three"] = f.MatchThree
}

func (f fastPay) clone(db *gorm.DB) fastPay {
	f.fastPayDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fastPay) replaceDB(db *gorm.DB) fastPay {
	f.fastPayDo.ReplaceDB(db)
	return f
}

type fastPayDo struct{ gen.DO }

type IFastPayDo interface {
	gen.SubQuery
	Debug() IFastPayDo
	WithContext(ctx context.Context) IFastPayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFastPayDo
	WriteDB() IFastPayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFastPayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFastPayDo
	Not(conds ...gen.Condition) IFastPayDo
	Or(conds ...gen.Condition) IFastPayDo
	Select(conds ...field.Expr) IFastPayDo
	Where(conds ...gen.Condition) IFastPayDo
	Order(conds ...field.Expr) IFastPayDo
	Distinct(cols ...field.Expr) IFastPayDo
	Omit(cols ...field.Expr) IFastPayDo
	Join(table schema.Tabler, on ...field.Expr) IFastPayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFastPayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFastPayDo
	Group(cols ...field.Expr) IFastPayDo
	Having(conds ...gen.Condition) IFastPayDo
	Limit(limit int) IFastPayDo
	Offset(offset int) IFastPayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFastPayDo
	Unscoped() IFastPayDo
	Create(values ...*model.FastPay) error
	CreateInBatches(values []*model.FastPay, batchSize int) error
	Save(values ...*model.FastPay) error
	First() (*model.FastPay, error)
	Take() (*model.FastPay, error)
	Last() (*model.FastPay, error)
	Find() ([]*model.FastPay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FastPay, err error)
	FindInBatches(result *[]*model.FastPay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FastPay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFastPayDo
	Assign(attrs ...field.AssignExpr) IFastPayDo
	Joins(fields ...field.RelationField) IFastPayDo
	Preload(fields ...field.RelationField) IFastPayDo
	FirstOrInit() (*model.FastPay, error)
	FirstOrCreate() (*model.FastPay, error)
	FindByPage(offset int, limit int) (result []*model.FastPay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFastPayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fastPayDo) Debug() IFastPayDo {
	return f.withDO(f.DO.Debug())
}

func (f fastPayDo) WithContext(ctx context.Context) IFastPayDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fastPayDo) ReadDB() IFastPayDo {
	return f.Clauses(dbresolver.Read)
}

func (f fastPayDo) WriteDB() IFastPayDo {
	return f.Clauses(dbresolver.Write)
}

func (f fastPayDo) Session(config *gorm.Session) IFastPayDo {
	return f.withDO(f.DO.Session(config))
}

func (f fastPayDo) Clauses(conds ...clause.Expression) IFastPayDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fastPayDo) Returning(value interface{}, columns ...string) IFastPayDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fastPayDo) Not(conds ...gen.Condition) IFastPayDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fastPayDo) Or(conds ...gen.Condition) IFastPayDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fastPayDo) Select(conds ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fastPayDo) Where(conds ...gen.Condition) IFastPayDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fastPayDo) Order(conds ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fastPayDo) Distinct(cols ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fastPayDo) Omit(cols ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fastPayDo) Join(table schema.Tabler, on ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fastPayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fastPayDo) RightJoin(table schema.Tabler, on ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fastPayDo) Group(cols ...field.Expr) IFastPayDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fastPayDo) Having(conds ...gen.Condition) IFastPayDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fastPayDo) Limit(limit int) IFastPayDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fastPayDo) Offset(offset int) IFastPayDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fastPayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFastPayDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fastPayDo) Unscoped() IFastPayDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fastPayDo) Create(values ...*model.FastPay) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fastPayDo) CreateInBatches(values []*model.FastPay, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fastPayDo) Save(values ...*model.FastPay) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fastPayDo) First() (*model.FastPay, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FastPay), nil
	}
}

func (f fastPayDo) Take() (*model.FastPay, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FastPay), nil
	}
}

func (f fastPayDo) Last() (*model.FastPay, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FastPay), nil
	}
}

func (f fastPayDo) Find() ([]*model.FastPay, error) {
	result, err := f.DO.Find()
	return result.([]*model.FastPay), err
}

func (f fastPayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FastPay, err error) {
	buf := make([]*model.FastPay, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fastPayDo) FindInBatches(result *[]*model.FastPay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fastPayDo) Attrs(attrs ...field.AssignExpr) IFastPayDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fastPayDo) Assign(attrs ...field.AssignExpr) IFastPayDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fastPayDo) Joins(fields ...field.RelationField) IFastPayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fastPayDo) Preload(fields ...field.RelationField) IFastPayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fastPayDo) FirstOrInit() (*model.FastPay, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FastPay), nil
	}
}

func (f fastPayDo) FirstOrCreate() (*model.FastPay, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FastPay), nil
	}
}

func (f fastPayDo) FindByPage(offset int, limit int) (result []*model.FastPay, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fastPayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fastPayDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fastPayDo) Delete(models ...*model.FastPay) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fastPayDo) withDO(do gen.Dao) *fastPayDo {
	f.DO = *do.(*gen.DO)
	return f
}
