// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityReport(db *gorm.DB, opts ...gen.DOOption) activityReport {
	_activityReport := activityReport{}

	_activityReport.activityReportDo.UseDB(db, opts...)
	_activityReport.activityReportDo.UseModel(&model.ActivityReport{})

	tableName := _activityReport.activityReportDo.TableName()
	_activityReport.ALL = field.NewAsterisk(tableName)
	_activityReport.ID = field.NewInt64(tableName, "id")
	_activityReport.UserID = field.NewInt64(tableName, "user_id")
	_activityReport.TotalWinTimes = field.NewInt64(tableName, "total_win_times")
	_activityReport.TotalCoefficient = field.NewFloat64(tableName, "total_coefficient")
	_activityReport.TotalDeposit = field.NewFloat64(tableName, "total_deposit")
	_activityReport.TotalReward = field.NewFloat64(tableName, "total_reward")
	_activityReport.MatchEventSum = field.NewString(tableName, "match_event_sum")
	_activityReport.CreatedAt = field.NewField(tableName, "created_at")
	_activityReport.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityReport.fillFieldMap()

	return _activityReport
}

// activityReport 统计报表
type activityReport struct {
	activityReportDo activityReportDo

	ALL              field.Asterisk
	ID               field.Int64
	UserID           field.Int64   // 队长id
	TotalWinTimes    field.Int64   // 猜赢次数
	TotalCoefficient field.Float64 // 竞猜系数
	TotalDeposit     field.Float64 // 团队存款
	TotalReward      field.Float64 // 团队奖励
	MatchEventSum    field.String  // 分组竞猜统计
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (a activityReport) Table(newTableName string) *activityReport {
	a.activityReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityReport) As(alias string) *activityReport {
	a.activityReportDo.DO = *(a.activityReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityReport) updateTableName(table string) *activityReport {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.TotalWinTimes = field.NewInt64(table, "total_win_times")
	a.TotalCoefficient = field.NewFloat64(table, "total_coefficient")
	a.TotalDeposit = field.NewFloat64(table, "total_deposit")
	a.TotalReward = field.NewFloat64(table, "total_reward")
	a.MatchEventSum = field.NewString(table, "match_event_sum")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityReport) WithContext(ctx context.Context) IActivityReportDo {
	return a.activityReportDo.WithContext(ctx)
}

func (a activityReport) TableName() string { return a.activityReportDo.TableName() }

func (a activityReport) Alias() string { return a.activityReportDo.Alias() }

func (a activityReport) Columns(cols ...field.Expr) gen.Columns {
	return a.activityReportDo.Columns(cols...)
}

func (a *activityReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["total_win_times"] = a.TotalWinTimes
	a.fieldMap["total_coefficient"] = a.TotalCoefficient
	a.fieldMap["total_deposit"] = a.TotalDeposit
	a.fieldMap["total_reward"] = a.TotalReward
	a.fieldMap["match_event_sum"] = a.MatchEventSum
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityReport) clone(db *gorm.DB) activityReport {
	a.activityReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityReport) replaceDB(db *gorm.DB) activityReport {
	a.activityReportDo.ReplaceDB(db)
	return a
}

type activityReportDo struct{ gen.DO }

type IActivityReportDo interface {
	gen.SubQuery
	Debug() IActivityReportDo
	WithContext(ctx context.Context) IActivityReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityReportDo
	WriteDB() IActivityReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityReportDo
	Not(conds ...gen.Condition) IActivityReportDo
	Or(conds ...gen.Condition) IActivityReportDo
	Select(conds ...field.Expr) IActivityReportDo
	Where(conds ...gen.Condition) IActivityReportDo
	Order(conds ...field.Expr) IActivityReportDo
	Distinct(cols ...field.Expr) IActivityReportDo
	Omit(cols ...field.Expr) IActivityReportDo
	Join(table schema.Tabler, on ...field.Expr) IActivityReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityReportDo
	Group(cols ...field.Expr) IActivityReportDo
	Having(conds ...gen.Condition) IActivityReportDo
	Limit(limit int) IActivityReportDo
	Offset(offset int) IActivityReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityReportDo
	Unscoped() IActivityReportDo
	Create(values ...*model.ActivityReport) error
	CreateInBatches(values []*model.ActivityReport, batchSize int) error
	Save(values ...*model.ActivityReport) error
	First() (*model.ActivityReport, error)
	Take() (*model.ActivityReport, error)
	Last() (*model.ActivityReport, error)
	Find() ([]*model.ActivityReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityReport, err error)
	FindInBatches(result *[]*model.ActivityReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityReportDo
	Assign(attrs ...field.AssignExpr) IActivityReportDo
	Joins(fields ...field.RelationField) IActivityReportDo
	Preload(fields ...field.RelationField) IActivityReportDo
	FirstOrInit() (*model.ActivityReport, error)
	FirstOrCreate() (*model.ActivityReport, error)
	FindByPage(offset int, limit int) (result []*model.ActivityReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityReportDo) Debug() IActivityReportDo {
	return a.withDO(a.DO.Debug())
}

func (a activityReportDo) WithContext(ctx context.Context) IActivityReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityReportDo) ReadDB() IActivityReportDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityReportDo) WriteDB() IActivityReportDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityReportDo) Session(config *gorm.Session) IActivityReportDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityReportDo) Clauses(conds ...clause.Expression) IActivityReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityReportDo) Returning(value interface{}, columns ...string) IActivityReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityReportDo) Not(conds ...gen.Condition) IActivityReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityReportDo) Or(conds ...gen.Condition) IActivityReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityReportDo) Select(conds ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityReportDo) Where(conds ...gen.Condition) IActivityReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityReportDo) Order(conds ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityReportDo) Distinct(cols ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityReportDo) Omit(cols ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityReportDo) Join(table schema.Tabler, on ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityReportDo) Group(cols ...field.Expr) IActivityReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityReportDo) Having(conds ...gen.Condition) IActivityReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityReportDo) Limit(limit int) IActivityReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityReportDo) Offset(offset int) IActivityReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityReportDo) Unscoped() IActivityReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityReportDo) Create(values ...*model.ActivityReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityReportDo) CreateInBatches(values []*model.ActivityReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityReportDo) Save(values ...*model.ActivityReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityReportDo) First() (*model.ActivityReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityReport), nil
	}
}

func (a activityReportDo) Take() (*model.ActivityReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityReport), nil
	}
}

func (a activityReportDo) Last() (*model.ActivityReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityReport), nil
	}
}

func (a activityReportDo) Find() ([]*model.ActivityReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityReport), err
}

func (a activityReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityReport, err error) {
	buf := make([]*model.ActivityReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityReportDo) FindInBatches(result *[]*model.ActivityReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityReportDo) Attrs(attrs ...field.AssignExpr) IActivityReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityReportDo) Assign(attrs ...field.AssignExpr) IActivityReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityReportDo) Joins(fields ...field.RelationField) IActivityReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityReportDo) Preload(fields ...field.RelationField) IActivityReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityReportDo) FirstOrInit() (*model.ActivityReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityReport), nil
	}
}

func (a activityReportDo) FirstOrCreate() (*model.ActivityReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityReport), nil
	}
}

func (a activityReportDo) FindByPage(offset int, limit int) (result []*model.ActivityReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityReportDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityReportDo) Delete(models ...*model.ActivityReport) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityReportDo) withDO(do gen.Dao) *activityReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
