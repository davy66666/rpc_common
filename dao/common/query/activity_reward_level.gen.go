// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityRewardLevel(db *gorm.DB, opts ...gen.DOOption) activityRewardLevel {
	_activityRewardLevel := activityRewardLevel{}

	_activityRewardLevel.activityRewardLevelDo.UseDB(db, opts...)
	_activityRewardLevel.activityRewardLevelDo.UseModel(&model.ActivityRewardLevel{})

	tableName := _activityRewardLevel.activityRewardLevelDo.TableName()
	_activityRewardLevel.ALL = field.NewAsterisk(tableName)
	_activityRewardLevel.ID = field.NewInt64(tableName, "id")
	_activityRewardLevel.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityRewardLevel.Level = field.NewInt64(tableName, "level")
	_activityRewardLevel.LevelName = field.NewString(tableName, "level_name")
	_activityRewardLevel.LevelNums = field.NewInt64(tableName, "level_nums")
	_activityRewardLevel.Description = field.NewString(tableName, "description")
	_activityRewardLevel.LevelList = field.NewString(tableName, "level_list")
	_activityRewardLevel.CreatedAt = field.NewField(tableName, "created_at")
	_activityRewardLevel.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityRewardLevel.fillFieldMap()

	return _activityRewardLevel
}

// activityRewardLevel 活动奖励等级
type activityRewardLevel struct {
	activityRewardLevelDo activityRewardLevelDo

	ALL         field.Asterisk
	ID          field.Int64
	ActivityID  field.Int64  // 配置ID
	Level       field.Int64  // 奖项等级水平 0:特等奖，1:一等奖，2:二等奖
	LevelName   field.String // 名称
	LevelNums   field.Int64  // 奖项数量
	Description field.String // 奖品描述
	LevelList   field.String // 中奖名单
	CreatedAt   field.Field  // 创建时间
	UpdatedAt   field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityRewardLevel) Table(newTableName string) *activityRewardLevel {
	a.activityRewardLevelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityRewardLevel) As(alias string) *activityRewardLevel {
	a.activityRewardLevelDo.DO = *(a.activityRewardLevelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityRewardLevel) updateTableName(table string) *activityRewardLevel {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.Level = field.NewInt64(table, "level")
	a.LevelName = field.NewString(table, "level_name")
	a.LevelNums = field.NewInt64(table, "level_nums")
	a.Description = field.NewString(table, "description")
	a.LevelList = field.NewString(table, "level_list")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityRewardLevel) WithContext(ctx context.Context) IActivityRewardLevelDo {
	return a.activityRewardLevelDo.WithContext(ctx)
}

func (a activityRewardLevel) TableName() string { return a.activityRewardLevelDo.TableName() }

func (a activityRewardLevel) Alias() string { return a.activityRewardLevelDo.Alias() }

func (a activityRewardLevel) Columns(cols ...field.Expr) gen.Columns {
	return a.activityRewardLevelDo.Columns(cols...)
}

func (a *activityRewardLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityRewardLevel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["level"] = a.Level
	a.fieldMap["level_name"] = a.LevelName
	a.fieldMap["level_nums"] = a.LevelNums
	a.fieldMap["description"] = a.Description
	a.fieldMap["level_list"] = a.LevelList
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityRewardLevel) clone(db *gorm.DB) activityRewardLevel {
	a.activityRewardLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityRewardLevel) replaceDB(db *gorm.DB) activityRewardLevel {
	a.activityRewardLevelDo.ReplaceDB(db)
	return a
}

type activityRewardLevelDo struct{ gen.DO }

type IActivityRewardLevelDo interface {
	gen.SubQuery
	Debug() IActivityRewardLevelDo
	WithContext(ctx context.Context) IActivityRewardLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityRewardLevelDo
	WriteDB() IActivityRewardLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityRewardLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityRewardLevelDo
	Not(conds ...gen.Condition) IActivityRewardLevelDo
	Or(conds ...gen.Condition) IActivityRewardLevelDo
	Select(conds ...field.Expr) IActivityRewardLevelDo
	Where(conds ...gen.Condition) IActivityRewardLevelDo
	Order(conds ...field.Expr) IActivityRewardLevelDo
	Distinct(cols ...field.Expr) IActivityRewardLevelDo
	Omit(cols ...field.Expr) IActivityRewardLevelDo
	Join(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo
	Group(cols ...field.Expr) IActivityRewardLevelDo
	Having(conds ...gen.Condition) IActivityRewardLevelDo
	Limit(limit int) IActivityRewardLevelDo
	Offset(offset int) IActivityRewardLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardLevelDo
	Unscoped() IActivityRewardLevelDo
	Create(values ...*model.ActivityRewardLevel) error
	CreateInBatches(values []*model.ActivityRewardLevel, batchSize int) error
	Save(values ...*model.ActivityRewardLevel) error
	First() (*model.ActivityRewardLevel, error)
	Take() (*model.ActivityRewardLevel, error)
	Last() (*model.ActivityRewardLevel, error)
	Find() ([]*model.ActivityRewardLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardLevel, err error)
	FindInBatches(result *[]*model.ActivityRewardLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityRewardLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityRewardLevelDo
	Assign(attrs ...field.AssignExpr) IActivityRewardLevelDo
	Joins(fields ...field.RelationField) IActivityRewardLevelDo
	Preload(fields ...field.RelationField) IActivityRewardLevelDo
	FirstOrInit() (*model.ActivityRewardLevel, error)
	FirstOrCreate() (*model.ActivityRewardLevel, error)
	FindByPage(offset int, limit int) (result []*model.ActivityRewardLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityRewardLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityRewardLevelDo) Debug() IActivityRewardLevelDo {
	return a.withDO(a.DO.Debug())
}

func (a activityRewardLevelDo) WithContext(ctx context.Context) IActivityRewardLevelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityRewardLevelDo) ReadDB() IActivityRewardLevelDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityRewardLevelDo) WriteDB() IActivityRewardLevelDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityRewardLevelDo) Session(config *gorm.Session) IActivityRewardLevelDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityRewardLevelDo) Clauses(conds ...clause.Expression) IActivityRewardLevelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityRewardLevelDo) Returning(value interface{}, columns ...string) IActivityRewardLevelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityRewardLevelDo) Not(conds ...gen.Condition) IActivityRewardLevelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityRewardLevelDo) Or(conds ...gen.Condition) IActivityRewardLevelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityRewardLevelDo) Select(conds ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityRewardLevelDo) Where(conds ...gen.Condition) IActivityRewardLevelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityRewardLevelDo) Order(conds ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityRewardLevelDo) Distinct(cols ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityRewardLevelDo) Omit(cols ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityRewardLevelDo) Join(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityRewardLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityRewardLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityRewardLevelDo) Group(cols ...field.Expr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityRewardLevelDo) Having(conds ...gen.Condition) IActivityRewardLevelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityRewardLevelDo) Limit(limit int) IActivityRewardLevelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityRewardLevelDo) Offset(offset int) IActivityRewardLevelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityRewardLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardLevelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityRewardLevelDo) Unscoped() IActivityRewardLevelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityRewardLevelDo) Create(values ...*model.ActivityRewardLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityRewardLevelDo) CreateInBatches(values []*model.ActivityRewardLevel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityRewardLevelDo) Save(values ...*model.ActivityRewardLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityRewardLevelDo) First() (*model.ActivityRewardLevel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLevel), nil
	}
}

func (a activityRewardLevelDo) Take() (*model.ActivityRewardLevel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLevel), nil
	}
}

func (a activityRewardLevelDo) Last() (*model.ActivityRewardLevel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLevel), nil
	}
}

func (a activityRewardLevelDo) Find() ([]*model.ActivityRewardLevel, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityRewardLevel), err
}

func (a activityRewardLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardLevel, err error) {
	buf := make([]*model.ActivityRewardLevel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityRewardLevelDo) FindInBatches(result *[]*model.ActivityRewardLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityRewardLevelDo) Attrs(attrs ...field.AssignExpr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityRewardLevelDo) Assign(attrs ...field.AssignExpr) IActivityRewardLevelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityRewardLevelDo) Joins(fields ...field.RelationField) IActivityRewardLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityRewardLevelDo) Preload(fields ...field.RelationField) IActivityRewardLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityRewardLevelDo) FirstOrInit() (*model.ActivityRewardLevel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLevel), nil
	}
}

func (a activityRewardLevelDo) FirstOrCreate() (*model.ActivityRewardLevel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardLevel), nil
	}
}

func (a activityRewardLevelDo) FindByPage(offset int, limit int) (result []*model.ActivityRewardLevel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityRewardLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityRewardLevelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityRewardLevelDo) Delete(models ...*model.ActivityRewardLevel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityRewardLevelDo) withDO(do gen.Dao) *activityRewardLevelDo {
	a.DO = *do.(*gen.DO)
	return a
}
