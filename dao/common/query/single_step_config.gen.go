// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSingleStepConfig(db *gorm.DB, opts ...gen.DOOption) singleStepConfig {
	_singleStepConfig := singleStepConfig{}

	_singleStepConfig.singleStepConfigDo.UseDB(db, opts...)
	_singleStepConfig.singleStepConfigDo.UseModel(&model.SingleStepConfig{})

	tableName := _singleStepConfig.singleStepConfigDo.TableName()
	_singleStepConfig.ALL = field.NewAsterisk(tableName)
	_singleStepConfig.ID = field.NewInt64(tableName, "id")
	_singleStepConfig.Money = field.NewInt64(tableName, "money")
	_singleStepConfig.Number = field.NewInt64(tableName, "number")
	_singleStepConfig.AdminUser = field.NewString(tableName, "admin_user")
	_singleStepConfig.CreatedAt = field.NewField(tableName, "created_at")
	_singleStepConfig.UpdatedAt = field.NewField(tableName, "updated_at")
	_singleStepConfig.SplitMoney = field.NewString(tableName, "split_money")
	_singleStepConfig.BankType = field.NewInt64(tableName, "bank_type")

	_singleStepConfig.fillFieldMap()

	return _singleStepConfig
}

// singleStepConfig 拆单金额表
type singleStepConfig struct {
	singleStepConfigDo singleStepConfigDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	Money      field.Int64  // 分单金额
	Number     field.Int64  // 分单笔数
	AdminUser  field.String // 操作人
	CreatedAt  field.Field  // 创建时间
	UpdatedAt  field.Field  // 更新时间
	SplitMoney field.String // 拆单金额数组
	BankType   field.Int64  // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币

	fieldMap map[string]field.Expr
}

func (s singleStepConfig) Table(newTableName string) *singleStepConfig {
	s.singleStepConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s singleStepConfig) As(alias string) *singleStepConfig {
	s.singleStepConfigDo.DO = *(s.singleStepConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *singleStepConfig) updateTableName(table string) *singleStepConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Money = field.NewInt64(table, "money")
	s.Number = field.NewInt64(table, "number")
	s.AdminUser = field.NewString(table, "admin_user")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.SplitMoney = field.NewString(table, "split_money")
	s.BankType = field.NewInt64(table, "bank_type")

	s.fillFieldMap()

	return s
}

func (s *singleStepConfig) WithContext(ctx context.Context) ISingleStepConfigDo {
	return s.singleStepConfigDo.WithContext(ctx)
}

func (s singleStepConfig) TableName() string { return s.singleStepConfigDo.TableName() }

func (s singleStepConfig) Alias() string { return s.singleStepConfigDo.Alias() }

func (s singleStepConfig) Columns(cols ...field.Expr) gen.Columns {
	return s.singleStepConfigDo.Columns(cols...)
}

func (s *singleStepConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *singleStepConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["money"] = s.Money
	s.fieldMap["number"] = s.Number
	s.fieldMap["admin_user"] = s.AdminUser
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["split_money"] = s.SplitMoney
	s.fieldMap["bank_type"] = s.BankType
}

func (s singleStepConfig) clone(db *gorm.DB) singleStepConfig {
	s.singleStepConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s singleStepConfig) replaceDB(db *gorm.DB) singleStepConfig {
	s.singleStepConfigDo.ReplaceDB(db)
	return s
}

type singleStepConfigDo struct{ gen.DO }

type ISingleStepConfigDo interface {
	gen.SubQuery
	Debug() ISingleStepConfigDo
	WithContext(ctx context.Context) ISingleStepConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISingleStepConfigDo
	WriteDB() ISingleStepConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISingleStepConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISingleStepConfigDo
	Not(conds ...gen.Condition) ISingleStepConfigDo
	Or(conds ...gen.Condition) ISingleStepConfigDo
	Select(conds ...field.Expr) ISingleStepConfigDo
	Where(conds ...gen.Condition) ISingleStepConfigDo
	Order(conds ...field.Expr) ISingleStepConfigDo
	Distinct(cols ...field.Expr) ISingleStepConfigDo
	Omit(cols ...field.Expr) ISingleStepConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo
	Group(cols ...field.Expr) ISingleStepConfigDo
	Having(conds ...gen.Condition) ISingleStepConfigDo
	Limit(limit int) ISingleStepConfigDo
	Offset(offset int) ISingleStepConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleStepConfigDo
	Unscoped() ISingleStepConfigDo
	Create(values ...*model.SingleStepConfig) error
	CreateInBatches(values []*model.SingleStepConfig, batchSize int) error
	Save(values ...*model.SingleStepConfig) error
	First() (*model.SingleStepConfig, error)
	Take() (*model.SingleStepConfig, error)
	Last() (*model.SingleStepConfig, error)
	Find() ([]*model.SingleStepConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleStepConfig, err error)
	FindInBatches(result *[]*model.SingleStepConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SingleStepConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISingleStepConfigDo
	Assign(attrs ...field.AssignExpr) ISingleStepConfigDo
	Joins(fields ...field.RelationField) ISingleStepConfigDo
	Preload(fields ...field.RelationField) ISingleStepConfigDo
	FirstOrInit() (*model.SingleStepConfig, error)
	FirstOrCreate() (*model.SingleStepConfig, error)
	FindByPage(offset int, limit int) (result []*model.SingleStepConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISingleStepConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s singleStepConfigDo) Debug() ISingleStepConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s singleStepConfigDo) WithContext(ctx context.Context) ISingleStepConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s singleStepConfigDo) ReadDB() ISingleStepConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s singleStepConfigDo) WriteDB() ISingleStepConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s singleStepConfigDo) Session(config *gorm.Session) ISingleStepConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s singleStepConfigDo) Clauses(conds ...clause.Expression) ISingleStepConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s singleStepConfigDo) Returning(value interface{}, columns ...string) ISingleStepConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s singleStepConfigDo) Not(conds ...gen.Condition) ISingleStepConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s singleStepConfigDo) Or(conds ...gen.Condition) ISingleStepConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s singleStepConfigDo) Select(conds ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s singleStepConfigDo) Where(conds ...gen.Condition) ISingleStepConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s singleStepConfigDo) Order(conds ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s singleStepConfigDo) Distinct(cols ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s singleStepConfigDo) Omit(cols ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s singleStepConfigDo) Join(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s singleStepConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s singleStepConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s singleStepConfigDo) Group(cols ...field.Expr) ISingleStepConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s singleStepConfigDo) Having(conds ...gen.Condition) ISingleStepConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s singleStepConfigDo) Limit(limit int) ISingleStepConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s singleStepConfigDo) Offset(offset int) ISingleStepConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s singleStepConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleStepConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s singleStepConfigDo) Unscoped() ISingleStepConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s singleStepConfigDo) Create(values ...*model.SingleStepConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s singleStepConfigDo) CreateInBatches(values []*model.SingleStepConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s singleStepConfigDo) Save(values ...*model.SingleStepConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s singleStepConfigDo) First() (*model.SingleStepConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleStepConfig), nil
	}
}

func (s singleStepConfigDo) Take() (*model.SingleStepConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleStepConfig), nil
	}
}

func (s singleStepConfigDo) Last() (*model.SingleStepConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleStepConfig), nil
	}
}

func (s singleStepConfigDo) Find() ([]*model.SingleStepConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SingleStepConfig), err
}

func (s singleStepConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleStepConfig, err error) {
	buf := make([]*model.SingleStepConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s singleStepConfigDo) FindInBatches(result *[]*model.SingleStepConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s singleStepConfigDo) Attrs(attrs ...field.AssignExpr) ISingleStepConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s singleStepConfigDo) Assign(attrs ...field.AssignExpr) ISingleStepConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s singleStepConfigDo) Joins(fields ...field.RelationField) ISingleStepConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s singleStepConfigDo) Preload(fields ...field.RelationField) ISingleStepConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s singleStepConfigDo) FirstOrInit() (*model.SingleStepConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleStepConfig), nil
	}
}

func (s singleStepConfigDo) FirstOrCreate() (*model.SingleStepConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleStepConfig), nil
	}
}

func (s singleStepConfigDo) FindByPage(offset int, limit int) (result []*model.SingleStepConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s singleStepConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s singleStepConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s singleStepConfigDo) Delete(models ...*model.SingleStepConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *singleStepConfigDo) withDO(do gen.Dao) *singleStepConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
