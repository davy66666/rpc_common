// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserInfoEditRecord(db *gorm.DB, opts ...gen.DOOption) userInfoEditRecord {
	_userInfoEditRecord := userInfoEditRecord{}

	_userInfoEditRecord.userInfoEditRecordDo.UseDB(db, opts...)
	_userInfoEditRecord.userInfoEditRecordDo.UseModel(&model.UserInfoEditRecord{})

	tableName := _userInfoEditRecord.userInfoEditRecordDo.TableName()
	_userInfoEditRecord.ALL = field.NewAsterisk(tableName)
	_userInfoEditRecord.ID = field.NewInt64(tableName, "id")
	_userInfoEditRecord.UserID = field.NewInt64(tableName, "user_id")
	_userInfoEditRecord.Username = field.NewString(tableName, "username")
	_userInfoEditRecord.InfoType = field.NewInt64(tableName, "info_type")
	_userInfoEditRecord.Before = field.NewString(tableName, "before")
	_userInfoEditRecord.After = field.NewString(tableName, "after")
	_userInfoEditRecord.OperatorType = field.NewInt64(tableName, "operator_type")
	_userInfoEditRecord.OperatorAccount = field.NewString(tableName, "operator_account")
	_userInfoEditRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userInfoEditRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userInfoEditRecord.fillFieldMap()

	return _userInfoEditRecord
}

type userInfoEditRecord struct {
	userInfoEditRecordDo userInfoEditRecordDo

	ALL             field.Asterisk
	ID              field.Int64
	UserID          field.Int64  // 用户ID
	Username        field.String // 用户账号
	InfoType        field.Int64  // 会员资料修改类型(1手机号 2登陆密码 3 收款账户 4真实姓名 5 生日)
	Before          field.String // 修改前资料
	After           field.String // 修改后资料
	OperatorType    field.Int64  // 修改人类型(1系统 2会员)
	OperatorAccount field.String // 修改人账号
	CreatedAt       field.Field  // 新增时间
	UpdatedAt       field.Field  // 修改时间

	fieldMap map[string]field.Expr
}

func (u userInfoEditRecord) Table(newTableName string) *userInfoEditRecord {
	u.userInfoEditRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfoEditRecord) As(alias string) *userInfoEditRecord {
	u.userInfoEditRecordDo.DO = *(u.userInfoEditRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfoEditRecord) updateTableName(table string) *userInfoEditRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.InfoType = field.NewInt64(table, "info_type")
	u.Before = field.NewString(table, "before")
	u.After = field.NewString(table, "after")
	u.OperatorType = field.NewInt64(table, "operator_type")
	u.OperatorAccount = field.NewString(table, "operator_account")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userInfoEditRecord) WithContext(ctx context.Context) IUserInfoEditRecordDo {
	return u.userInfoEditRecordDo.WithContext(ctx)
}

func (u userInfoEditRecord) TableName() string { return u.userInfoEditRecordDo.TableName() }

func (u userInfoEditRecord) Alias() string { return u.userInfoEditRecordDo.Alias() }

func (u userInfoEditRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userInfoEditRecordDo.Columns(cols...)
}

func (u *userInfoEditRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfoEditRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["info_type"] = u.InfoType
	u.fieldMap["before"] = u.Before
	u.fieldMap["after"] = u.After
	u.fieldMap["operator_type"] = u.OperatorType
	u.fieldMap["operator_account"] = u.OperatorAccount
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userInfoEditRecord) clone(db *gorm.DB) userInfoEditRecord {
	u.userInfoEditRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfoEditRecord) replaceDB(db *gorm.DB) userInfoEditRecord {
	u.userInfoEditRecordDo.ReplaceDB(db)
	return u
}

type userInfoEditRecordDo struct{ gen.DO }

type IUserInfoEditRecordDo interface {
	gen.SubQuery
	Debug() IUserInfoEditRecordDo
	WithContext(ctx context.Context) IUserInfoEditRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfoEditRecordDo
	WriteDB() IUserInfoEditRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfoEditRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfoEditRecordDo
	Not(conds ...gen.Condition) IUserInfoEditRecordDo
	Or(conds ...gen.Condition) IUserInfoEditRecordDo
	Select(conds ...field.Expr) IUserInfoEditRecordDo
	Where(conds ...gen.Condition) IUserInfoEditRecordDo
	Order(conds ...field.Expr) IUserInfoEditRecordDo
	Distinct(cols ...field.Expr) IUserInfoEditRecordDo
	Omit(cols ...field.Expr) IUserInfoEditRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo
	Group(cols ...field.Expr) IUserInfoEditRecordDo
	Having(conds ...gen.Condition) IUserInfoEditRecordDo
	Limit(limit int) IUserInfoEditRecordDo
	Offset(offset int) IUserInfoEditRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoEditRecordDo
	Unscoped() IUserInfoEditRecordDo
	Create(values ...*model.UserInfoEditRecord) error
	CreateInBatches(values []*model.UserInfoEditRecord, batchSize int) error
	Save(values ...*model.UserInfoEditRecord) error
	First() (*model.UserInfoEditRecord, error)
	Take() (*model.UserInfoEditRecord, error)
	Last() (*model.UserInfoEditRecord, error)
	Find() ([]*model.UserInfoEditRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoEditRecord, err error)
	FindInBatches(result *[]*model.UserInfoEditRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfoEditRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfoEditRecordDo
	Assign(attrs ...field.AssignExpr) IUserInfoEditRecordDo
	Joins(fields ...field.RelationField) IUserInfoEditRecordDo
	Preload(fields ...field.RelationField) IUserInfoEditRecordDo
	FirstOrInit() (*model.UserInfoEditRecord, error)
	FirstOrCreate() (*model.UserInfoEditRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserInfoEditRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfoEditRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInfoEditRecordDo) Debug() IUserInfoEditRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoEditRecordDo) WithContext(ctx context.Context) IUserInfoEditRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoEditRecordDo) ReadDB() IUserInfoEditRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoEditRecordDo) WriteDB() IUserInfoEditRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoEditRecordDo) Session(config *gorm.Session) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInfoEditRecordDo) Clauses(conds ...clause.Expression) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoEditRecordDo) Returning(value interface{}, columns ...string) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoEditRecordDo) Not(conds ...gen.Condition) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoEditRecordDo) Or(conds ...gen.Condition) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoEditRecordDo) Select(conds ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoEditRecordDo) Where(conds ...gen.Condition) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoEditRecordDo) Order(conds ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoEditRecordDo) Distinct(cols ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoEditRecordDo) Omit(cols ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoEditRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoEditRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoEditRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoEditRecordDo) Group(cols ...field.Expr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoEditRecordDo) Having(conds ...gen.Condition) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoEditRecordDo) Limit(limit int) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoEditRecordDo) Offset(offset int) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoEditRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoEditRecordDo) Unscoped() IUserInfoEditRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoEditRecordDo) Create(values ...*model.UserInfoEditRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoEditRecordDo) CreateInBatches(values []*model.UserInfoEditRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoEditRecordDo) Save(values ...*model.UserInfoEditRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoEditRecordDo) First() (*model.UserInfoEditRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoEditRecord), nil
	}
}

func (u userInfoEditRecordDo) Take() (*model.UserInfoEditRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoEditRecord), nil
	}
}

func (u userInfoEditRecordDo) Last() (*model.UserInfoEditRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoEditRecord), nil
	}
}

func (u userInfoEditRecordDo) Find() ([]*model.UserInfoEditRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfoEditRecord), err
}

func (u userInfoEditRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoEditRecord, err error) {
	buf := make([]*model.UserInfoEditRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoEditRecordDo) FindInBatches(result *[]*model.UserInfoEditRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoEditRecordDo) Attrs(attrs ...field.AssignExpr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoEditRecordDo) Assign(attrs ...field.AssignExpr) IUserInfoEditRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoEditRecordDo) Joins(fields ...field.RelationField) IUserInfoEditRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoEditRecordDo) Preload(fields ...field.RelationField) IUserInfoEditRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoEditRecordDo) FirstOrInit() (*model.UserInfoEditRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoEditRecord), nil
	}
}

func (u userInfoEditRecordDo) FirstOrCreate() (*model.UserInfoEditRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoEditRecord), nil
	}
}

func (u userInfoEditRecordDo) FindByPage(offset int, limit int) (result []*model.UserInfoEditRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoEditRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoEditRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfoEditRecordDo) Delete(models ...*model.UserInfoEditRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfoEditRecordDo) withDO(do gen.Dao) *userInfoEditRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
