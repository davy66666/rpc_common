// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLuckyRecord(db *gorm.DB, opts ...gen.DOOption) luckyRecord {
	_luckyRecord := luckyRecord{}

	_luckyRecord.luckyRecordDo.UseDB(db, opts...)
	_luckyRecord.luckyRecordDo.UseModel(&model.LuckyRecord{})

	tableName := _luckyRecord.luckyRecordDo.TableName()
	_luckyRecord.ALL = field.NewAsterisk(tableName)
	_luckyRecord.ID = field.NewInt64(tableName, "id")
	_luckyRecord.UserID = field.NewInt64(tableName, "user_id")
	_luckyRecord.Username = field.NewString(tableName, "username")
	_luckyRecord.Chance = field.NewInt64(tableName, "chance")
	_luckyRecord.ActivityRewardLevelID = field.NewInt64(tableName, "activity_reward_level_id")
	_luckyRecord.TigerForm = field.NewString(tableName, "tiger_form")
	_luckyRecord.Result = field.NewString(tableName, "result")
	_luckyRecord.Status = field.NewInt64(tableName, "status")
	_luckyRecord.CreatedAt = field.NewField(tableName, "created_at")
	_luckyRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_luckyRecord.fillFieldMap()

	return _luckyRecord
}

// luckyRecord 抽奖记录
type luckyRecord struct {
	luckyRecordDo luckyRecordDo

	ALL                   field.Asterisk
	ID                    field.Int64
	UserID                field.Int64  // 用户ID
	Username              field.String // 用户名
	Chance                field.Int64  // 剩余抽奖次数
	ActivityRewardLevelID field.Int64  // 摇奖结果关联 activity_reward_level
	TigerForm             field.String // 抽中的老虎机组合形式
	Result                field.String // 奖励
	Status                field.Int64  // 状态 0未抽中 1已抽中
	CreatedAt             field.Field  // 创建时间
	UpdatedAt             field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (l luckyRecord) Table(newTableName string) *luckyRecord {
	l.luckyRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l luckyRecord) As(alias string) *luckyRecord {
	l.luckyRecordDo.DO = *(l.luckyRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *luckyRecord) updateTableName(table string) *luckyRecord {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.UserID = field.NewInt64(table, "user_id")
	l.Username = field.NewString(table, "username")
	l.Chance = field.NewInt64(table, "chance")
	l.ActivityRewardLevelID = field.NewInt64(table, "activity_reward_level_id")
	l.TigerForm = field.NewString(table, "tiger_form")
	l.Result = field.NewString(table, "result")
	l.Status = field.NewInt64(table, "status")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *luckyRecord) WithContext(ctx context.Context) ILuckyRecordDo {
	return l.luckyRecordDo.WithContext(ctx)
}

func (l luckyRecord) TableName() string { return l.luckyRecordDo.TableName() }

func (l luckyRecord) Alias() string { return l.luckyRecordDo.Alias() }

func (l luckyRecord) Columns(cols ...field.Expr) gen.Columns { return l.luckyRecordDo.Columns(cols...) }

func (l *luckyRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *luckyRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["username"] = l.Username
	l.fieldMap["chance"] = l.Chance
	l.fieldMap["activity_reward_level_id"] = l.ActivityRewardLevelID
	l.fieldMap["tiger_form"] = l.TigerForm
	l.fieldMap["result"] = l.Result
	l.fieldMap["status"] = l.Status
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l luckyRecord) clone(db *gorm.DB) luckyRecord {
	l.luckyRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l luckyRecord) replaceDB(db *gorm.DB) luckyRecord {
	l.luckyRecordDo.ReplaceDB(db)
	return l
}

type luckyRecordDo struct{ gen.DO }

type ILuckyRecordDo interface {
	gen.SubQuery
	Debug() ILuckyRecordDo
	WithContext(ctx context.Context) ILuckyRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILuckyRecordDo
	WriteDB() ILuckyRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILuckyRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILuckyRecordDo
	Not(conds ...gen.Condition) ILuckyRecordDo
	Or(conds ...gen.Condition) ILuckyRecordDo
	Select(conds ...field.Expr) ILuckyRecordDo
	Where(conds ...gen.Condition) ILuckyRecordDo
	Order(conds ...field.Expr) ILuckyRecordDo
	Distinct(cols ...field.Expr) ILuckyRecordDo
	Omit(cols ...field.Expr) ILuckyRecordDo
	Join(table schema.Tabler, on ...field.Expr) ILuckyRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILuckyRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILuckyRecordDo
	Group(cols ...field.Expr) ILuckyRecordDo
	Having(conds ...gen.Condition) ILuckyRecordDo
	Limit(limit int) ILuckyRecordDo
	Offset(offset int) ILuckyRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILuckyRecordDo
	Unscoped() ILuckyRecordDo
	Create(values ...*model.LuckyRecord) error
	CreateInBatches(values []*model.LuckyRecord, batchSize int) error
	Save(values ...*model.LuckyRecord) error
	First() (*model.LuckyRecord, error)
	Take() (*model.LuckyRecord, error)
	Last() (*model.LuckyRecord, error)
	Find() ([]*model.LuckyRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LuckyRecord, err error)
	FindInBatches(result *[]*model.LuckyRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LuckyRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILuckyRecordDo
	Assign(attrs ...field.AssignExpr) ILuckyRecordDo
	Joins(fields ...field.RelationField) ILuckyRecordDo
	Preload(fields ...field.RelationField) ILuckyRecordDo
	FirstOrInit() (*model.LuckyRecord, error)
	FirstOrCreate() (*model.LuckyRecord, error)
	FindByPage(offset int, limit int) (result []*model.LuckyRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILuckyRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l luckyRecordDo) Debug() ILuckyRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l luckyRecordDo) WithContext(ctx context.Context) ILuckyRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l luckyRecordDo) ReadDB() ILuckyRecordDo {
	return l.Clauses(dbresolver.Read)
}

func (l luckyRecordDo) WriteDB() ILuckyRecordDo {
	return l.Clauses(dbresolver.Write)
}

func (l luckyRecordDo) Session(config *gorm.Session) ILuckyRecordDo {
	return l.withDO(l.DO.Session(config))
}

func (l luckyRecordDo) Clauses(conds ...clause.Expression) ILuckyRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l luckyRecordDo) Returning(value interface{}, columns ...string) ILuckyRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l luckyRecordDo) Not(conds ...gen.Condition) ILuckyRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l luckyRecordDo) Or(conds ...gen.Condition) ILuckyRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l luckyRecordDo) Select(conds ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l luckyRecordDo) Where(conds ...gen.Condition) ILuckyRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l luckyRecordDo) Order(conds ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l luckyRecordDo) Distinct(cols ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l luckyRecordDo) Omit(cols ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l luckyRecordDo) Join(table schema.Tabler, on ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l luckyRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l luckyRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l luckyRecordDo) Group(cols ...field.Expr) ILuckyRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l luckyRecordDo) Having(conds ...gen.Condition) ILuckyRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l luckyRecordDo) Limit(limit int) ILuckyRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l luckyRecordDo) Offset(offset int) ILuckyRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l luckyRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILuckyRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l luckyRecordDo) Unscoped() ILuckyRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l luckyRecordDo) Create(values ...*model.LuckyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l luckyRecordDo) CreateInBatches(values []*model.LuckyRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l luckyRecordDo) Save(values ...*model.LuckyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l luckyRecordDo) First() (*model.LuckyRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LuckyRecord), nil
	}
}

func (l luckyRecordDo) Take() (*model.LuckyRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LuckyRecord), nil
	}
}

func (l luckyRecordDo) Last() (*model.LuckyRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LuckyRecord), nil
	}
}

func (l luckyRecordDo) Find() ([]*model.LuckyRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LuckyRecord), err
}

func (l luckyRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LuckyRecord, err error) {
	buf := make([]*model.LuckyRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l luckyRecordDo) FindInBatches(result *[]*model.LuckyRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l luckyRecordDo) Attrs(attrs ...field.AssignExpr) ILuckyRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l luckyRecordDo) Assign(attrs ...field.AssignExpr) ILuckyRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l luckyRecordDo) Joins(fields ...field.RelationField) ILuckyRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l luckyRecordDo) Preload(fields ...field.RelationField) ILuckyRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l luckyRecordDo) FirstOrInit() (*model.LuckyRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LuckyRecord), nil
	}
}

func (l luckyRecordDo) FirstOrCreate() (*model.LuckyRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LuckyRecord), nil
	}
}

func (l luckyRecordDo) FindByPage(offset int, limit int) (result []*model.LuckyRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l luckyRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l luckyRecordDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l luckyRecordDo) Delete(models ...*model.LuckyRecord) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *luckyRecordDo) withDO(do gen.Dao) *luckyRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
