// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRegisterGiftConfig(db *gorm.DB, opts ...gen.DOOption) registerGiftConfig {
	_registerGiftConfig := registerGiftConfig{}

	_registerGiftConfig.registerGiftConfigDo.UseDB(db, opts...)
	_registerGiftConfig.registerGiftConfigDo.UseModel(&model.RegisterGiftConfig{})

	tableName := _registerGiftConfig.registerGiftConfigDo.TableName()
	_registerGiftConfig.ALL = field.NewAsterisk(tableName)
	_registerGiftConfig.ID = field.NewInt64(tableName, "id")
	_registerGiftConfig.LoginDays = field.NewInt64(tableName, "login_days")
	_registerGiftConfig.SameIPCount = field.NewInt64(tableName, "same_ip_count")
	_registerGiftConfig.SameNameCount = field.NewInt64(tableName, "same_name_count")
	_registerGiftConfig.SamePhoneCount = field.NewInt64(tableName, "same_phone_count")
	_registerGiftConfig.SameBankcardCount = field.NewInt64(tableName, "same_bankcard_count")
	_registerGiftConfig.SameUsdtCount = field.NewInt64(tableName, "same_usdt_count")
	_registerGiftConfig.Places = field.NewString(tableName, "places")
	_registerGiftConfig.IPList = field.NewString(tableName, "ip_list")
	_registerGiftConfig.NameList = field.NewString(tableName, "name_list")
	_registerGiftConfig.PhoneList = field.NewString(tableName, "phone_list")
	_registerGiftConfig.BankcardList = field.NewString(tableName, "bankcard_list")
	_registerGiftConfig.UsdtList = field.NewString(tableName, "usdt_list")
	_registerGiftConfig.IPListPath = field.NewString(tableName, "ip_list_path")
	_registerGiftConfig.NameListPath = field.NewString(tableName, "name_list_path")
	_registerGiftConfig.PhoneListPath = field.NewString(tableName, "phone_list_path")
	_registerGiftConfig.BankcardListPath = field.NewString(tableName, "bankcard_list_path")
	_registerGiftConfig.UsdtListPath = field.NewString(tableName, "usdt_list_path")
	_registerGiftConfig.Amount = field.NewInt64(tableName, "amount")
	_registerGiftConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_registerGiftConfig.CreatedAt = field.NewField(tableName, "created_at")
	_registerGiftConfig.UpdatedAt = field.NewField(tableName, "updated_at")
	_registerGiftConfig.AdminName = field.NewString(tableName, "admin_name")
	_registerGiftConfig.IPListUploadAt = field.NewField(tableName, "ip_list_upload_at")
	_registerGiftConfig.NameListUploadAt = field.NewField(tableName, "name_list_upload_at")
	_registerGiftConfig.PhoneListUploadAt = field.NewField(tableName, "phone_list_upload_at")
	_registerGiftConfig.BankcardListUploadAt = field.NewField(tableName, "bankcard_list_upload_at")
	_registerGiftConfig.UsdtListUploadAt = field.NewField(tableName, "usdt_list_upload_at")

	_registerGiftConfig.fillFieldMap()

	return _registerGiftConfig
}

// registerGiftConfig 注册彩金配置
type registerGiftConfig struct {
	registerGiftConfigDo registerGiftConfigDo

	ALL                  field.Asterisk
	ID                   field.Int64
	LoginDays            field.Int64  // 登录时间（天）
	SameIPCount          field.Int64  // 同IP注册数（含自己）
	SameNameCount        field.Int64  // 同姓名注册数（含自己）
	SamePhoneCount       field.Int64  // 同手机号注册数（含自己）
	SameBankcardCount    field.Int64  // 同银行卡列表
	SameUsdtCount        field.Int64  // 同trc20地址注册数(含自己)
	Places               field.String // 归属地（数组 1:IP 2:手机号码归属地 3:银行卡归属地）
	IPList               field.String // ip名单
	NameList             field.String // 姓名名单
	PhoneList            field.String // 手机号名单
	BankcardList         field.String // 银行卡名单
	UsdtList             field.String // trc20地址名单
	IPListPath           field.String // ip名单文件路径
	NameListPath         field.String // 姓名名单文件路径
	PhoneListPath        field.String // 电话名单文件路径
	BankcardListPath     field.String // 银行卡名单文件路径
	UsdtListPath         field.String // trc20地址名单文件路径
	Amount               field.Int64  // 赠送彩金额度
	IsOpen               field.Int64  // 是否启用
	CreatedAt            field.Field
	UpdatedAt            field.Field
	AdminName            field.String // 管理员
	IPListUploadAt       field.Field  // ip名单上传时间
	NameListUploadAt     field.Field  // 姓名名单上传时间
	PhoneListUploadAt    field.Field  // 电话名单上传时间
	BankcardListUploadAt field.Field  // 银行卡名单上传时间
	UsdtListUploadAt     field.Field  // trc20地址名单上传时间

	fieldMap map[string]field.Expr
}

func (r registerGiftConfig) Table(newTableName string) *registerGiftConfig {
	r.registerGiftConfigDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registerGiftConfig) As(alias string) *registerGiftConfig {
	r.registerGiftConfigDo.DO = *(r.registerGiftConfigDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registerGiftConfig) updateTableName(table string) *registerGiftConfig {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.LoginDays = field.NewInt64(table, "login_days")
	r.SameIPCount = field.NewInt64(table, "same_ip_count")
	r.SameNameCount = field.NewInt64(table, "same_name_count")
	r.SamePhoneCount = field.NewInt64(table, "same_phone_count")
	r.SameBankcardCount = field.NewInt64(table, "same_bankcard_count")
	r.SameUsdtCount = field.NewInt64(table, "same_usdt_count")
	r.Places = field.NewString(table, "places")
	r.IPList = field.NewString(table, "ip_list")
	r.NameList = field.NewString(table, "name_list")
	r.PhoneList = field.NewString(table, "phone_list")
	r.BankcardList = field.NewString(table, "bankcard_list")
	r.UsdtList = field.NewString(table, "usdt_list")
	r.IPListPath = field.NewString(table, "ip_list_path")
	r.NameListPath = field.NewString(table, "name_list_path")
	r.PhoneListPath = field.NewString(table, "phone_list_path")
	r.BankcardListPath = field.NewString(table, "bankcard_list_path")
	r.UsdtListPath = field.NewString(table, "usdt_list_path")
	r.Amount = field.NewInt64(table, "amount")
	r.IsOpen = field.NewInt64(table, "is_open")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.AdminName = field.NewString(table, "admin_name")
	r.IPListUploadAt = field.NewField(table, "ip_list_upload_at")
	r.NameListUploadAt = field.NewField(table, "name_list_upload_at")
	r.PhoneListUploadAt = field.NewField(table, "phone_list_upload_at")
	r.BankcardListUploadAt = field.NewField(table, "bankcard_list_upload_at")
	r.UsdtListUploadAt = field.NewField(table, "usdt_list_upload_at")

	r.fillFieldMap()

	return r
}

func (r *registerGiftConfig) WithContext(ctx context.Context) IRegisterGiftConfigDo {
	return r.registerGiftConfigDo.WithContext(ctx)
}

func (r registerGiftConfig) TableName() string { return r.registerGiftConfigDo.TableName() }

func (r registerGiftConfig) Alias() string { return r.registerGiftConfigDo.Alias() }

func (r registerGiftConfig) Columns(cols ...field.Expr) gen.Columns {
	return r.registerGiftConfigDo.Columns(cols...)
}

func (r *registerGiftConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registerGiftConfig) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 28)
	r.fieldMap["id"] = r.ID
	r.fieldMap["login_days"] = r.LoginDays
	r.fieldMap["same_ip_count"] = r.SameIPCount
	r.fieldMap["same_name_count"] = r.SameNameCount
	r.fieldMap["same_phone_count"] = r.SamePhoneCount
	r.fieldMap["same_bankcard_count"] = r.SameBankcardCount
	r.fieldMap["same_usdt_count"] = r.SameUsdtCount
	r.fieldMap["places"] = r.Places
	r.fieldMap["ip_list"] = r.IPList
	r.fieldMap["name_list"] = r.NameList
	r.fieldMap["phone_list"] = r.PhoneList
	r.fieldMap["bankcard_list"] = r.BankcardList
	r.fieldMap["usdt_list"] = r.UsdtList
	r.fieldMap["ip_list_path"] = r.IPListPath
	r.fieldMap["name_list_path"] = r.NameListPath
	r.fieldMap["phone_list_path"] = r.PhoneListPath
	r.fieldMap["bankcard_list_path"] = r.BankcardListPath
	r.fieldMap["usdt_list_path"] = r.UsdtListPath
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["is_open"] = r.IsOpen
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["ip_list_upload_at"] = r.IPListUploadAt
	r.fieldMap["name_list_upload_at"] = r.NameListUploadAt
	r.fieldMap["phone_list_upload_at"] = r.PhoneListUploadAt
	r.fieldMap["bankcard_list_upload_at"] = r.BankcardListUploadAt
	r.fieldMap["usdt_list_upload_at"] = r.UsdtListUploadAt
}

func (r registerGiftConfig) clone(db *gorm.DB) registerGiftConfig {
	r.registerGiftConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registerGiftConfig) replaceDB(db *gorm.DB) registerGiftConfig {
	r.registerGiftConfigDo.ReplaceDB(db)
	return r
}

type registerGiftConfigDo struct{ gen.DO }

type IRegisterGiftConfigDo interface {
	gen.SubQuery
	Debug() IRegisterGiftConfigDo
	WithContext(ctx context.Context) IRegisterGiftConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegisterGiftConfigDo
	WriteDB() IRegisterGiftConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegisterGiftConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegisterGiftConfigDo
	Not(conds ...gen.Condition) IRegisterGiftConfigDo
	Or(conds ...gen.Condition) IRegisterGiftConfigDo
	Select(conds ...field.Expr) IRegisterGiftConfigDo
	Where(conds ...gen.Condition) IRegisterGiftConfigDo
	Order(conds ...field.Expr) IRegisterGiftConfigDo
	Distinct(cols ...field.Expr) IRegisterGiftConfigDo
	Omit(cols ...field.Expr) IRegisterGiftConfigDo
	Join(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo
	Group(cols ...field.Expr) IRegisterGiftConfigDo
	Having(conds ...gen.Condition) IRegisterGiftConfigDo
	Limit(limit int) IRegisterGiftConfigDo
	Offset(offset int) IRegisterGiftConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisterGiftConfigDo
	Unscoped() IRegisterGiftConfigDo
	Create(values ...*model.RegisterGiftConfig) error
	CreateInBatches(values []*model.RegisterGiftConfig, batchSize int) error
	Save(values ...*model.RegisterGiftConfig) error
	First() (*model.RegisterGiftConfig, error)
	Take() (*model.RegisterGiftConfig, error)
	Last() (*model.RegisterGiftConfig, error)
	Find() ([]*model.RegisterGiftConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisterGiftConfig, err error)
	FindInBatches(result *[]*model.RegisterGiftConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RegisterGiftConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegisterGiftConfigDo
	Assign(attrs ...field.AssignExpr) IRegisterGiftConfigDo
	Joins(fields ...field.RelationField) IRegisterGiftConfigDo
	Preload(fields ...field.RelationField) IRegisterGiftConfigDo
	FirstOrInit() (*model.RegisterGiftConfig, error)
	FirstOrCreate() (*model.RegisterGiftConfig, error)
	FindByPage(offset int, limit int) (result []*model.RegisterGiftConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegisterGiftConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r registerGiftConfigDo) Debug() IRegisterGiftConfigDo {
	return r.withDO(r.DO.Debug())
}

func (r registerGiftConfigDo) WithContext(ctx context.Context) IRegisterGiftConfigDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registerGiftConfigDo) ReadDB() IRegisterGiftConfigDo {
	return r.Clauses(dbresolver.Read)
}

func (r registerGiftConfigDo) WriteDB() IRegisterGiftConfigDo {
	return r.Clauses(dbresolver.Write)
}

func (r registerGiftConfigDo) Session(config *gorm.Session) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Session(config))
}

func (r registerGiftConfigDo) Clauses(conds ...clause.Expression) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registerGiftConfigDo) Returning(value interface{}, columns ...string) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registerGiftConfigDo) Not(conds ...gen.Condition) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registerGiftConfigDo) Or(conds ...gen.Condition) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registerGiftConfigDo) Select(conds ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registerGiftConfigDo) Where(conds ...gen.Condition) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registerGiftConfigDo) Order(conds ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registerGiftConfigDo) Distinct(cols ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registerGiftConfigDo) Omit(cols ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registerGiftConfigDo) Join(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registerGiftConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registerGiftConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registerGiftConfigDo) Group(cols ...field.Expr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registerGiftConfigDo) Having(conds ...gen.Condition) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registerGiftConfigDo) Limit(limit int) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registerGiftConfigDo) Offset(offset int) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registerGiftConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registerGiftConfigDo) Unscoped() IRegisterGiftConfigDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registerGiftConfigDo) Create(values ...*model.RegisterGiftConfig) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registerGiftConfigDo) CreateInBatches(values []*model.RegisterGiftConfig, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registerGiftConfigDo) Save(values ...*model.RegisterGiftConfig) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registerGiftConfigDo) First() (*model.RegisterGiftConfig, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterGiftConfig), nil
	}
}

func (r registerGiftConfigDo) Take() (*model.RegisterGiftConfig, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterGiftConfig), nil
	}
}

func (r registerGiftConfigDo) Last() (*model.RegisterGiftConfig, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterGiftConfig), nil
	}
}

func (r registerGiftConfigDo) Find() ([]*model.RegisterGiftConfig, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegisterGiftConfig), err
}

func (r registerGiftConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisterGiftConfig, err error) {
	buf := make([]*model.RegisterGiftConfig, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registerGiftConfigDo) FindInBatches(result *[]*model.RegisterGiftConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registerGiftConfigDo) Attrs(attrs ...field.AssignExpr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registerGiftConfigDo) Assign(attrs ...field.AssignExpr) IRegisterGiftConfigDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registerGiftConfigDo) Joins(fields ...field.RelationField) IRegisterGiftConfigDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registerGiftConfigDo) Preload(fields ...field.RelationField) IRegisterGiftConfigDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registerGiftConfigDo) FirstOrInit() (*model.RegisterGiftConfig, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterGiftConfig), nil
	}
}

func (r registerGiftConfigDo) FirstOrCreate() (*model.RegisterGiftConfig, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisterGiftConfig), nil
	}
}

func (r registerGiftConfigDo) FindByPage(offset int, limit int) (result []*model.RegisterGiftConfig, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registerGiftConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registerGiftConfigDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registerGiftConfigDo) Delete(models ...*model.RegisterGiftConfig) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registerGiftConfigDo) withDO(do gen.Dao) *registerGiftConfigDo {
	r.DO = *do.(*gen.DO)
	return r
}
