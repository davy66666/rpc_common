// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserPasswordLog(db *gorm.DB, opts ...gen.DOOption) userPasswordLog {
	_userPasswordLog := userPasswordLog{}

	_userPasswordLog.userPasswordLogDo.UseDB(db, opts...)
	_userPasswordLog.userPasswordLogDo.UseModel(&model.UserPasswordLog{})

	tableName := _userPasswordLog.userPasswordLogDo.TableName()
	_userPasswordLog.ALL = field.NewAsterisk(tableName)
	_userPasswordLog.ID = field.NewInt64(tableName, "id")
	_userPasswordLog.UserID = field.NewInt64(tableName, "user_id")
	_userPasswordLog.Username = field.NewString(tableName, "username")
	_userPasswordLog.Phone = field.NewString(tableName, "phone")
	_userPasswordLog.Type = field.NewInt64(tableName, "type")
	_userPasswordLog.OldPassword = field.NewString(tableName, "old_password")
	_userPasswordLog.NewPassword = field.NewString(tableName, "new_password")
	_userPasswordLog.Domain = field.NewString(tableName, "domain")
	_userPasswordLog.IP = field.NewString(tableName, "ip")
	_userPasswordLog.IPArea = field.NewString(tableName, "ip_area")
	_userPasswordLog.Plat = field.NewInt64(tableName, "plat")
	_userPasswordLog.CreatedAt = field.NewField(tableName, "created_at")
	_userPasswordLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userPasswordLog.fillFieldMap()

	return _userPasswordLog
}

// userPasswordLog 用户密码操作相关的日志
type userPasswordLog struct {
	userPasswordLogDo userPasswordLogDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64  // 会员id
	Username    field.String // 会员名称
	Phone       field.String
	Type        field.Int64  // 1:重置登录密码, 2:找回密码
	OldPassword field.String // 旧密码
	NewPassword field.String // 新密码
	Domain      field.String // 域名
	IP          field.String // ip
	IPArea      field.String // ip区域
	Plat        field.Int64  // 平台
	CreatedAt   field.Field  // 创建时间
	UpdatedAt   field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (u userPasswordLog) Table(newTableName string) *userPasswordLog {
	u.userPasswordLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPasswordLog) As(alias string) *userPasswordLog {
	u.userPasswordLogDo.DO = *(u.userPasswordLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPasswordLog) updateTableName(table string) *userPasswordLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.Phone = field.NewString(table, "phone")
	u.Type = field.NewInt64(table, "type")
	u.OldPassword = field.NewString(table, "old_password")
	u.NewPassword = field.NewString(table, "new_password")
	u.Domain = field.NewString(table, "domain")
	u.IP = field.NewString(table, "ip")
	u.IPArea = field.NewString(table, "ip_area")
	u.Plat = field.NewInt64(table, "plat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userPasswordLog) WithContext(ctx context.Context) IUserPasswordLogDo {
	return u.userPasswordLogDo.WithContext(ctx)
}

func (u userPasswordLog) TableName() string { return u.userPasswordLogDo.TableName() }

func (u userPasswordLog) Alias() string { return u.userPasswordLogDo.Alias() }

func (u userPasswordLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userPasswordLogDo.Columns(cols...)
}

func (u *userPasswordLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPasswordLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["type"] = u.Type
	u.fieldMap["old_password"] = u.OldPassword
	u.fieldMap["new_password"] = u.NewPassword
	u.fieldMap["domain"] = u.Domain
	u.fieldMap["ip"] = u.IP
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userPasswordLog) clone(db *gorm.DB) userPasswordLog {
	u.userPasswordLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPasswordLog) replaceDB(db *gorm.DB) userPasswordLog {
	u.userPasswordLogDo.ReplaceDB(db)
	return u
}

type userPasswordLogDo struct{ gen.DO }

type IUserPasswordLogDo interface {
	gen.SubQuery
	Debug() IUserPasswordLogDo
	WithContext(ctx context.Context) IUserPasswordLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPasswordLogDo
	WriteDB() IUserPasswordLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPasswordLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPasswordLogDo
	Not(conds ...gen.Condition) IUserPasswordLogDo
	Or(conds ...gen.Condition) IUserPasswordLogDo
	Select(conds ...field.Expr) IUserPasswordLogDo
	Where(conds ...gen.Condition) IUserPasswordLogDo
	Order(conds ...field.Expr) IUserPasswordLogDo
	Distinct(cols ...field.Expr) IUserPasswordLogDo
	Omit(cols ...field.Expr) IUserPasswordLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo
	Group(cols ...field.Expr) IUserPasswordLogDo
	Having(conds ...gen.Condition) IUserPasswordLogDo
	Limit(limit int) IUserPasswordLogDo
	Offset(offset int) IUserPasswordLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPasswordLogDo
	Unscoped() IUserPasswordLogDo
	Create(values ...*model.UserPasswordLog) error
	CreateInBatches(values []*model.UserPasswordLog, batchSize int) error
	Save(values ...*model.UserPasswordLog) error
	First() (*model.UserPasswordLog, error)
	Take() (*model.UserPasswordLog, error)
	Last() (*model.UserPasswordLog, error)
	Find() ([]*model.UserPasswordLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPasswordLog, err error)
	FindInBatches(result *[]*model.UserPasswordLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPasswordLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPasswordLogDo
	Assign(attrs ...field.AssignExpr) IUserPasswordLogDo
	Joins(fields ...field.RelationField) IUserPasswordLogDo
	Preload(fields ...field.RelationField) IUserPasswordLogDo
	FirstOrInit() (*model.UserPasswordLog, error)
	FirstOrCreate() (*model.UserPasswordLog, error)
	FindByPage(offset int, limit int) (result []*model.UserPasswordLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPasswordLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPasswordLogDo) Debug() IUserPasswordLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userPasswordLogDo) WithContext(ctx context.Context) IUserPasswordLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPasswordLogDo) ReadDB() IUserPasswordLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPasswordLogDo) WriteDB() IUserPasswordLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPasswordLogDo) Session(config *gorm.Session) IUserPasswordLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPasswordLogDo) Clauses(conds ...clause.Expression) IUserPasswordLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPasswordLogDo) Returning(value interface{}, columns ...string) IUserPasswordLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPasswordLogDo) Not(conds ...gen.Condition) IUserPasswordLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPasswordLogDo) Or(conds ...gen.Condition) IUserPasswordLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPasswordLogDo) Select(conds ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPasswordLogDo) Where(conds ...gen.Condition) IUserPasswordLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPasswordLogDo) Order(conds ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPasswordLogDo) Distinct(cols ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPasswordLogDo) Omit(cols ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPasswordLogDo) Join(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPasswordLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPasswordLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPasswordLogDo) Group(cols ...field.Expr) IUserPasswordLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPasswordLogDo) Having(conds ...gen.Condition) IUserPasswordLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPasswordLogDo) Limit(limit int) IUserPasswordLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPasswordLogDo) Offset(offset int) IUserPasswordLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPasswordLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPasswordLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPasswordLogDo) Unscoped() IUserPasswordLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPasswordLogDo) Create(values ...*model.UserPasswordLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPasswordLogDo) CreateInBatches(values []*model.UserPasswordLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPasswordLogDo) Save(values ...*model.UserPasswordLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPasswordLogDo) First() (*model.UserPasswordLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPasswordLog), nil
	}
}

func (u userPasswordLogDo) Take() (*model.UserPasswordLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPasswordLog), nil
	}
}

func (u userPasswordLogDo) Last() (*model.UserPasswordLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPasswordLog), nil
	}
}

func (u userPasswordLogDo) Find() ([]*model.UserPasswordLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPasswordLog), err
}

func (u userPasswordLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPasswordLog, err error) {
	buf := make([]*model.UserPasswordLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPasswordLogDo) FindInBatches(result *[]*model.UserPasswordLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPasswordLogDo) Attrs(attrs ...field.AssignExpr) IUserPasswordLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPasswordLogDo) Assign(attrs ...field.AssignExpr) IUserPasswordLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPasswordLogDo) Joins(fields ...field.RelationField) IUserPasswordLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPasswordLogDo) Preload(fields ...field.RelationField) IUserPasswordLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPasswordLogDo) FirstOrInit() (*model.UserPasswordLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPasswordLog), nil
	}
}

func (u userPasswordLogDo) FirstOrCreate() (*model.UserPasswordLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPasswordLog), nil
	}
}

func (u userPasswordLogDo) FindByPage(offset int, limit int) (result []*model.UserPasswordLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPasswordLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPasswordLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPasswordLogDo) Delete(models ...*model.UserPasswordLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPasswordLogDo) withDO(do gen.Dao) *userPasswordLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
