// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAllowanceAssistanceCircle(db *gorm.DB, opts ...gen.DOOption) allowanceAssistanceCircle {
	_allowanceAssistanceCircle := allowanceAssistanceCircle{}

	_allowanceAssistanceCircle.allowanceAssistanceCircleDo.UseDB(db, opts...)
	_allowanceAssistanceCircle.allowanceAssistanceCircleDo.UseModel(&model.AllowanceAssistanceCircle{})

	tableName := _allowanceAssistanceCircle.allowanceAssistanceCircleDo.TableName()
	_allowanceAssistanceCircle.ALL = field.NewAsterisk(tableName)
	_allowanceAssistanceCircle.ID = field.NewInt64(tableName, "id")
	_allowanceAssistanceCircle.NoSn = field.NewString(tableName, "no_sn")
	_allowanceAssistanceCircle.UserID = field.NewInt64(tableName, "user_id")
	_allowanceAssistanceCircle.Username = field.NewString(tableName, "username")
	_allowanceAssistanceCircle.PayLevelID = field.NewInt64(tableName, "pay_level_id")
	_allowanceAssistanceCircle.PayLevelName = field.NewString(tableName, "pay_level_name")
	_allowanceAssistanceCircle.StartAt = field.NewField(tableName, "start_at")
	_allowanceAssistanceCircle.EndAt = field.NewField(tableName, "end_at")
	_allowanceAssistanceCircle.NeedAssistanceNum = field.NewInt64(tableName, "need_assistance_num")
	_allowanceAssistanceCircle.Amount = field.NewFloat64(tableName, "amount")
	_allowanceAssistanceCircle.Status = field.NewInt64(tableName, "status")
	_allowanceAssistanceCircle.Version = field.NewInt64(tableName, "version")
	_allowanceAssistanceCircle.AdminID = field.NewInt64(tableName, "admin_id")
	_allowanceAssistanceCircle.AdminName = field.NewString(tableName, "admin_name")
	_allowanceAssistanceCircle.AuditRemark = field.NewString(tableName, "audit_remark")
	_allowanceAssistanceCircle.AuditTime = field.NewField(tableName, "audit_time")
	_allowanceAssistanceCircle.PickupTime = field.NewField(tableName, "pickup_time")
	_allowanceAssistanceCircle.CreatedAt = field.NewField(tableName, "created_at")
	_allowanceAssistanceCircle.UpdatedAt = field.NewField(tableName, "updated_at")

	_allowanceAssistanceCircle.fillFieldMap()

	return _allowanceAssistanceCircle
}

// allowanceAssistanceCircle 助力周期记录
type allowanceAssistanceCircle struct {
	allowanceAssistanceCircleDo allowanceAssistanceCircleDo

	ALL               field.Asterisk
	ID                field.Int64
	NoSn              field.String  // 津贴编号
	UserID            field.Int64   // 用户id
	Username          field.String  // 用户名
	PayLevelID        field.Int64   // 用户支付层级id
	PayLevelName      field.String  // 用户支付层级名称
	StartAt           field.Field   // 开始时间
	EndAt             field.Field   // 结束时间
	NeedAssistanceNum field.Int64   // 需要的助力数量
	Amount            field.Float64 // 奖励金额
	Status            field.Int64   // 0:未达标, 1:待领取, 2:待审核, 3:审核成功, 4:审核失败
	Version           field.Int64   // 版本
	AdminID           field.Int64   // 审核人id
	AdminName         field.String  // 审核人
	AuditRemark       field.String  // 审核备注
	AuditTime         field.Field   // 审核时间
	PickupTime        field.Field   // 领取时间
	CreatedAt         field.Field
	UpdatedAt         field.Field

	fieldMap map[string]field.Expr
}

func (a allowanceAssistanceCircle) Table(newTableName string) *allowanceAssistanceCircle {
	a.allowanceAssistanceCircleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allowanceAssistanceCircle) As(alias string) *allowanceAssistanceCircle {
	a.allowanceAssistanceCircleDo.DO = *(a.allowanceAssistanceCircleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allowanceAssistanceCircle) updateTableName(table string) *allowanceAssistanceCircle {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.NoSn = field.NewString(table, "no_sn")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.PayLevelID = field.NewInt64(table, "pay_level_id")
	a.PayLevelName = field.NewString(table, "pay_level_name")
	a.StartAt = field.NewField(table, "start_at")
	a.EndAt = field.NewField(table, "end_at")
	a.NeedAssistanceNum = field.NewInt64(table, "need_assistance_num")
	a.Amount = field.NewFloat64(table, "amount")
	a.Status = field.NewInt64(table, "status")
	a.Version = field.NewInt64(table, "version")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.AdminName = field.NewString(table, "admin_name")
	a.AuditRemark = field.NewString(table, "audit_remark")
	a.AuditTime = field.NewField(table, "audit_time")
	a.PickupTime = field.NewField(table, "pickup_time")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *allowanceAssistanceCircle) WithContext(ctx context.Context) IAllowanceAssistanceCircleDo {
	return a.allowanceAssistanceCircleDo.WithContext(ctx)
}

func (a allowanceAssistanceCircle) TableName() string {
	return a.allowanceAssistanceCircleDo.TableName()
}

func (a allowanceAssistanceCircle) Alias() string { return a.allowanceAssistanceCircleDo.Alias() }

func (a allowanceAssistanceCircle) Columns(cols ...field.Expr) gen.Columns {
	return a.allowanceAssistanceCircleDo.Columns(cols...)
}

func (a *allowanceAssistanceCircle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allowanceAssistanceCircle) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["id"] = a.ID
	a.fieldMap["no_sn"] = a.NoSn
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["pay_level_id"] = a.PayLevelID
	a.fieldMap["pay_level_name"] = a.PayLevelName
	a.fieldMap["start_at"] = a.StartAt
	a.fieldMap["end_at"] = a.EndAt
	a.fieldMap["need_assistance_num"] = a.NeedAssistanceNum
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["status"] = a.Status
	a.fieldMap["version"] = a.Version
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["audit_remark"] = a.AuditRemark
	a.fieldMap["audit_time"] = a.AuditTime
	a.fieldMap["pickup_time"] = a.PickupTime
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a allowanceAssistanceCircle) clone(db *gorm.DB) allowanceAssistanceCircle {
	a.allowanceAssistanceCircleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allowanceAssistanceCircle) replaceDB(db *gorm.DB) allowanceAssistanceCircle {
	a.allowanceAssistanceCircleDo.ReplaceDB(db)
	return a
}

type allowanceAssistanceCircleDo struct{ gen.DO }

type IAllowanceAssistanceCircleDo interface {
	gen.SubQuery
	Debug() IAllowanceAssistanceCircleDo
	WithContext(ctx context.Context) IAllowanceAssistanceCircleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllowanceAssistanceCircleDo
	WriteDB() IAllowanceAssistanceCircleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllowanceAssistanceCircleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllowanceAssistanceCircleDo
	Not(conds ...gen.Condition) IAllowanceAssistanceCircleDo
	Or(conds ...gen.Condition) IAllowanceAssistanceCircleDo
	Select(conds ...field.Expr) IAllowanceAssistanceCircleDo
	Where(conds ...gen.Condition) IAllowanceAssistanceCircleDo
	Order(conds ...field.Expr) IAllowanceAssistanceCircleDo
	Distinct(cols ...field.Expr) IAllowanceAssistanceCircleDo
	Omit(cols ...field.Expr) IAllowanceAssistanceCircleDo
	Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo
	Group(cols ...field.Expr) IAllowanceAssistanceCircleDo
	Having(conds ...gen.Condition) IAllowanceAssistanceCircleDo
	Limit(limit int) IAllowanceAssistanceCircleDo
	Offset(offset int) IAllowanceAssistanceCircleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceCircleDo
	Unscoped() IAllowanceAssistanceCircleDo
	Create(values ...*model.AllowanceAssistanceCircle) error
	CreateInBatches(values []*model.AllowanceAssistanceCircle, batchSize int) error
	Save(values ...*model.AllowanceAssistanceCircle) error
	First() (*model.AllowanceAssistanceCircle, error)
	Take() (*model.AllowanceAssistanceCircle, error)
	Last() (*model.AllowanceAssistanceCircle, error)
	Find() ([]*model.AllowanceAssistanceCircle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceCircle, err error)
	FindInBatches(result *[]*model.AllowanceAssistanceCircle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllowanceAssistanceCircle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceCircleDo
	Assign(attrs ...field.AssignExpr) IAllowanceAssistanceCircleDo
	Joins(fields ...field.RelationField) IAllowanceAssistanceCircleDo
	Preload(fields ...field.RelationField) IAllowanceAssistanceCircleDo
	FirstOrInit() (*model.AllowanceAssistanceCircle, error)
	FirstOrCreate() (*model.AllowanceAssistanceCircle, error)
	FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceCircle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllowanceAssistanceCircleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allowanceAssistanceCircleDo) Debug() IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Debug())
}

func (a allowanceAssistanceCircleDo) WithContext(ctx context.Context) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allowanceAssistanceCircleDo) ReadDB() IAllowanceAssistanceCircleDo {
	return a.Clauses(dbresolver.Read)
}

func (a allowanceAssistanceCircleDo) WriteDB() IAllowanceAssistanceCircleDo {
	return a.Clauses(dbresolver.Write)
}

func (a allowanceAssistanceCircleDo) Session(config *gorm.Session) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Session(config))
}

func (a allowanceAssistanceCircleDo) Clauses(conds ...clause.Expression) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allowanceAssistanceCircleDo) Returning(value interface{}, columns ...string) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allowanceAssistanceCircleDo) Not(conds ...gen.Condition) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allowanceAssistanceCircleDo) Or(conds ...gen.Condition) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allowanceAssistanceCircleDo) Select(conds ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allowanceAssistanceCircleDo) Where(conds ...gen.Condition) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allowanceAssistanceCircleDo) Order(conds ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allowanceAssistanceCircleDo) Distinct(cols ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allowanceAssistanceCircleDo) Omit(cols ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allowanceAssistanceCircleDo) Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allowanceAssistanceCircleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allowanceAssistanceCircleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allowanceAssistanceCircleDo) Group(cols ...field.Expr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allowanceAssistanceCircleDo) Having(conds ...gen.Condition) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allowanceAssistanceCircleDo) Limit(limit int) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allowanceAssistanceCircleDo) Offset(offset int) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allowanceAssistanceCircleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allowanceAssistanceCircleDo) Unscoped() IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allowanceAssistanceCircleDo) Create(values ...*model.AllowanceAssistanceCircle) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allowanceAssistanceCircleDo) CreateInBatches(values []*model.AllowanceAssistanceCircle, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allowanceAssistanceCircleDo) Save(values ...*model.AllowanceAssistanceCircle) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allowanceAssistanceCircleDo) First() (*model.AllowanceAssistanceCircle, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceCircle), nil
	}
}

func (a allowanceAssistanceCircleDo) Take() (*model.AllowanceAssistanceCircle, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceCircle), nil
	}
}

func (a allowanceAssistanceCircleDo) Last() (*model.AllowanceAssistanceCircle, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceCircle), nil
	}
}

func (a allowanceAssistanceCircleDo) Find() ([]*model.AllowanceAssistanceCircle, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllowanceAssistanceCircle), err
}

func (a allowanceAssistanceCircleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceCircle, err error) {
	buf := make([]*model.AllowanceAssistanceCircle, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allowanceAssistanceCircleDo) FindInBatches(result *[]*model.AllowanceAssistanceCircle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allowanceAssistanceCircleDo) Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allowanceAssistanceCircleDo) Assign(attrs ...field.AssignExpr) IAllowanceAssistanceCircleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allowanceAssistanceCircleDo) Joins(fields ...field.RelationField) IAllowanceAssistanceCircleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allowanceAssistanceCircleDo) Preload(fields ...field.RelationField) IAllowanceAssistanceCircleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allowanceAssistanceCircleDo) FirstOrInit() (*model.AllowanceAssistanceCircle, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceCircle), nil
	}
}

func (a allowanceAssistanceCircleDo) FirstOrCreate() (*model.AllowanceAssistanceCircle, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceCircle), nil
	}
}

func (a allowanceAssistanceCircleDo) FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceCircle, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allowanceAssistanceCircleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allowanceAssistanceCircleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allowanceAssistanceCircleDo) Delete(models ...*model.AllowanceAssistanceCircle) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allowanceAssistanceCircleDo) withDO(do gen.Dao) *allowanceAssistanceCircleDo {
	a.DO = *do.(*gen.DO)
	return a
}
