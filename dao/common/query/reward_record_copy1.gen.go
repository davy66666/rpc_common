// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRewardRecordCopy1(db *gorm.DB, opts ...gen.DOOption) rewardRecordCopy1 {
	_rewardRecordCopy1 := rewardRecordCopy1{}

	_rewardRecordCopy1.rewardRecordCopy1Do.UseDB(db, opts...)
	_rewardRecordCopy1.rewardRecordCopy1Do.UseModel(&model.RewardRecordCopy1{})

	tableName := _rewardRecordCopy1.rewardRecordCopy1Do.TableName()
	_rewardRecordCopy1.ALL = field.NewAsterisk(tableName)
	_rewardRecordCopy1.ID = field.NewInt64(tableName, "id")
	_rewardRecordCopy1.CircleRecordID = field.NewInt64(tableName, "circle_record_id")
	_rewardRecordCopy1.UserID = field.NewInt64(tableName, "user_id")
	_rewardRecordCopy1.TeamID = field.NewInt64(tableName, "team_id")
	_rewardRecordCopy1.Username = field.NewString(tableName, "username")
	_rewardRecordCopy1.TeamName = field.NewString(tableName, "team_name")
	_rewardRecordCopy1.TeamInviteCode = field.NewString(tableName, "team_invite_code")
	_rewardRecordCopy1.TeamDeposit = field.NewFloat64(tableName, "team_deposit")
	_rewardRecordCopy1.TeamCoefficient = field.NewFloat64(tableName, "team_coefficient")
	_rewardRecordCopy1.TeamAmount = field.NewFloat64(tableName, "team_amount")
	_rewardRecordCopy1.MineDeposit = field.NewFloat64(tableName, "mine_deposit")
	_rewardRecordCopy1.Amount = field.NewFloat64(tableName, "amount")
	_rewardRecordCopy1.Status = field.NewInt64(tableName, "status")
	_rewardRecordCopy1.ReceiveAt = field.NewField(tableName, "receive_at")
	_rewardRecordCopy1.RegisterAt = field.NewField(tableName, "register_at")
	_rewardRecordCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_rewardRecordCopy1.UpdatedAt = field.NewField(tableName, "updated_at")

	_rewardRecordCopy1.fillFieldMap()

	return _rewardRecordCopy1
}

// rewardRecordCopy1 领取记录
type rewardRecordCopy1 struct {
	rewardRecordCopy1Do rewardRecordCopy1Do

	ALL             field.Asterisk
	ID              field.Int64
	CircleRecordID  field.Int64   // 周期id
	UserID          field.Int64   // 用户ID
	TeamID          field.Int64   // 队伍ID
	Username        field.String  // 用户名
	TeamName        field.String  // 队伍名称
	TeamInviteCode  field.String  // 队伍邀请码
	TeamDeposit     field.Float64 // 团队存款
	TeamCoefficient field.Float64 // 团队系数
	TeamAmount      field.Float64 // 团队奖励
	MineDeposit     field.Float64 // 我的存款
	Amount          field.Float64 // 领取金额
	Status          field.Int64   // 状态 0未领取 1已领取
	ReceiveAt       field.Field   // 领取时间
	RegisterAt      field.Field   // 注册时间
	CreatedAt       field.Field   // 创建时间
	UpdatedAt       field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (r rewardRecordCopy1) Table(newTableName string) *rewardRecordCopy1 {
	r.rewardRecordCopy1Do.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rewardRecordCopy1) As(alias string) *rewardRecordCopy1 {
	r.rewardRecordCopy1Do.DO = *(r.rewardRecordCopy1Do.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rewardRecordCopy1) updateTableName(table string) *rewardRecordCopy1 {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CircleRecordID = field.NewInt64(table, "circle_record_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.TeamID = field.NewInt64(table, "team_id")
	r.Username = field.NewString(table, "username")
	r.TeamName = field.NewString(table, "team_name")
	r.TeamInviteCode = field.NewString(table, "team_invite_code")
	r.TeamDeposit = field.NewFloat64(table, "team_deposit")
	r.TeamCoefficient = field.NewFloat64(table, "team_coefficient")
	r.TeamAmount = field.NewFloat64(table, "team_amount")
	r.MineDeposit = field.NewFloat64(table, "mine_deposit")
	r.Amount = field.NewFloat64(table, "amount")
	r.Status = field.NewInt64(table, "status")
	r.ReceiveAt = field.NewField(table, "receive_at")
	r.RegisterAt = field.NewField(table, "register_at")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *rewardRecordCopy1) WithContext(ctx context.Context) IRewardRecordCopy1Do {
	return r.rewardRecordCopy1Do.WithContext(ctx)
}

func (r rewardRecordCopy1) TableName() string { return r.rewardRecordCopy1Do.TableName() }

func (r rewardRecordCopy1) Alias() string { return r.rewardRecordCopy1Do.Alias() }

func (r rewardRecordCopy1) Columns(cols ...field.Expr) gen.Columns {
	return r.rewardRecordCopy1Do.Columns(cols...)
}

func (r *rewardRecordCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rewardRecordCopy1) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 17)
	r.fieldMap["id"] = r.ID
	r.fieldMap["circle_record_id"] = r.CircleRecordID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["team_id"] = r.TeamID
	r.fieldMap["username"] = r.Username
	r.fieldMap["team_name"] = r.TeamName
	r.fieldMap["team_invite_code"] = r.TeamInviteCode
	r.fieldMap["team_deposit"] = r.TeamDeposit
	r.fieldMap["team_coefficient"] = r.TeamCoefficient
	r.fieldMap["team_amount"] = r.TeamAmount
	r.fieldMap["mine_deposit"] = r.MineDeposit
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["status"] = r.Status
	r.fieldMap["receive_at"] = r.ReceiveAt
	r.fieldMap["register_at"] = r.RegisterAt
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r rewardRecordCopy1) clone(db *gorm.DB) rewardRecordCopy1 {
	r.rewardRecordCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rewardRecordCopy1) replaceDB(db *gorm.DB) rewardRecordCopy1 {
	r.rewardRecordCopy1Do.ReplaceDB(db)
	return r
}

type rewardRecordCopy1Do struct{ gen.DO }

type IRewardRecordCopy1Do interface {
	gen.SubQuery
	Debug() IRewardRecordCopy1Do
	WithContext(ctx context.Context) IRewardRecordCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRewardRecordCopy1Do
	WriteDB() IRewardRecordCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRewardRecordCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRewardRecordCopy1Do
	Not(conds ...gen.Condition) IRewardRecordCopy1Do
	Or(conds ...gen.Condition) IRewardRecordCopy1Do
	Select(conds ...field.Expr) IRewardRecordCopy1Do
	Where(conds ...gen.Condition) IRewardRecordCopy1Do
	Order(conds ...field.Expr) IRewardRecordCopy1Do
	Distinct(cols ...field.Expr) IRewardRecordCopy1Do
	Omit(cols ...field.Expr) IRewardRecordCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do
	Group(cols ...field.Expr) IRewardRecordCopy1Do
	Having(conds ...gen.Condition) IRewardRecordCopy1Do
	Limit(limit int) IRewardRecordCopy1Do
	Offset(offset int) IRewardRecordCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardRecordCopy1Do
	Unscoped() IRewardRecordCopy1Do
	Create(values ...*model.RewardRecordCopy1) error
	CreateInBatches(values []*model.RewardRecordCopy1, batchSize int) error
	Save(values ...*model.RewardRecordCopy1) error
	First() (*model.RewardRecordCopy1, error)
	Take() (*model.RewardRecordCopy1, error)
	Last() (*model.RewardRecordCopy1, error)
	Find() ([]*model.RewardRecordCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RewardRecordCopy1, err error)
	FindInBatches(result *[]*model.RewardRecordCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RewardRecordCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRewardRecordCopy1Do
	Assign(attrs ...field.AssignExpr) IRewardRecordCopy1Do
	Joins(fields ...field.RelationField) IRewardRecordCopy1Do
	Preload(fields ...field.RelationField) IRewardRecordCopy1Do
	FirstOrInit() (*model.RewardRecordCopy1, error)
	FirstOrCreate() (*model.RewardRecordCopy1, error)
	FindByPage(offset int, limit int) (result []*model.RewardRecordCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRewardRecordCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rewardRecordCopy1Do) Debug() IRewardRecordCopy1Do {
	return r.withDO(r.DO.Debug())
}

func (r rewardRecordCopy1Do) WithContext(ctx context.Context) IRewardRecordCopy1Do {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rewardRecordCopy1Do) ReadDB() IRewardRecordCopy1Do {
	return r.Clauses(dbresolver.Read)
}

func (r rewardRecordCopy1Do) WriteDB() IRewardRecordCopy1Do {
	return r.Clauses(dbresolver.Write)
}

func (r rewardRecordCopy1Do) Session(config *gorm.Session) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Session(config))
}

func (r rewardRecordCopy1Do) Clauses(conds ...clause.Expression) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rewardRecordCopy1Do) Returning(value interface{}, columns ...string) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rewardRecordCopy1Do) Not(conds ...gen.Condition) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Not(conds...))
}

func (r rewardRecordCopy1Do) Or(conds ...gen.Condition) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Or(conds...))
}

func (r rewardRecordCopy1Do) Select(conds ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Select(conds...))
}

func (r rewardRecordCopy1Do) Where(conds ...gen.Condition) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Where(conds...))
}

func (r rewardRecordCopy1Do) Order(conds ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Order(conds...))
}

func (r rewardRecordCopy1Do) Distinct(cols ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rewardRecordCopy1Do) Omit(cols ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rewardRecordCopy1Do) Join(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rewardRecordCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rewardRecordCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rewardRecordCopy1Do) Group(cols ...field.Expr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Group(cols...))
}

func (r rewardRecordCopy1Do) Having(conds ...gen.Condition) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Having(conds...))
}

func (r rewardRecordCopy1Do) Limit(limit int) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Limit(limit))
}

func (r rewardRecordCopy1Do) Offset(offset int) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Offset(offset))
}

func (r rewardRecordCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rewardRecordCopy1Do) Unscoped() IRewardRecordCopy1Do {
	return r.withDO(r.DO.Unscoped())
}

func (r rewardRecordCopy1Do) Create(values ...*model.RewardRecordCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rewardRecordCopy1Do) CreateInBatches(values []*model.RewardRecordCopy1, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rewardRecordCopy1Do) Save(values ...*model.RewardRecordCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rewardRecordCopy1Do) First() (*model.RewardRecordCopy1, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecordCopy1), nil
	}
}

func (r rewardRecordCopy1Do) Take() (*model.RewardRecordCopy1, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecordCopy1), nil
	}
}

func (r rewardRecordCopy1Do) Last() (*model.RewardRecordCopy1, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecordCopy1), nil
	}
}

func (r rewardRecordCopy1Do) Find() ([]*model.RewardRecordCopy1, error) {
	result, err := r.DO.Find()
	return result.([]*model.RewardRecordCopy1), err
}

func (r rewardRecordCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RewardRecordCopy1, err error) {
	buf := make([]*model.RewardRecordCopy1, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rewardRecordCopy1Do) FindInBatches(result *[]*model.RewardRecordCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rewardRecordCopy1Do) Attrs(attrs ...field.AssignExpr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rewardRecordCopy1Do) Assign(attrs ...field.AssignExpr) IRewardRecordCopy1Do {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rewardRecordCopy1Do) Joins(fields ...field.RelationField) IRewardRecordCopy1Do {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rewardRecordCopy1Do) Preload(fields ...field.RelationField) IRewardRecordCopy1Do {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rewardRecordCopy1Do) FirstOrInit() (*model.RewardRecordCopy1, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecordCopy1), nil
	}
}

func (r rewardRecordCopy1Do) FirstOrCreate() (*model.RewardRecordCopy1, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecordCopy1), nil
	}
}

func (r rewardRecordCopy1Do) FindByPage(offset int, limit int) (result []*model.RewardRecordCopy1, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rewardRecordCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rewardRecordCopy1Do) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rewardRecordCopy1Do) Delete(models ...*model.RewardRecordCopy1) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rewardRecordCopy1Do) withDO(do gen.Dao) *rewardRecordCopy1Do {
	r.DO = *do.(*gen.DO)
	return r
}
