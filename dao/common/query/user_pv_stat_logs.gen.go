// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserPvStatLog(db *gorm.DB, opts ...gen.DOOption) userPvStatLog {
	_userPvStatLog := userPvStatLog{}

	_userPvStatLog.userPvStatLogDo.UseDB(db, opts...)
	_userPvStatLog.userPvStatLogDo.UseModel(&model.UserPvStatLog{})

	tableName := _userPvStatLog.userPvStatLogDo.TableName()
	_userPvStatLog.ALL = field.NewAsterisk(tableName)
	_userPvStatLog.ID = field.NewInt64(tableName, "id")
	_userPvStatLog.RouteURL = field.NewString(tableName, "route_url")
	_userPvStatLog.Pv = field.NewInt64(tableName, "pv")
	_userPvStatLog.Uv = field.NewInt64(tableName, "uv")
	_userPvStatLog.CreatedAt = field.NewField(tableName, "created_at")
	_userPvStatLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userPvStatLog.fillFieldMap()

	return _userPvStatLog
}

// userPvStatLog 访问记录统计表
type userPvStatLog struct {
	userPvStatLogDo userPvStatLogDo

	ALL       field.Asterisk
	ID        field.Int64
	RouteURL  field.String // 路由地址
	Pv        field.Int64  // 页面访问次数
	Uv        field.Int64  // 用户访问次数
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userPvStatLog) Table(newTableName string) *userPvStatLog {
	u.userPvStatLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPvStatLog) As(alias string) *userPvStatLog {
	u.userPvStatLogDo.DO = *(u.userPvStatLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPvStatLog) updateTableName(table string) *userPvStatLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.RouteURL = field.NewString(table, "route_url")
	u.Pv = field.NewInt64(table, "pv")
	u.Uv = field.NewInt64(table, "uv")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userPvStatLog) WithContext(ctx context.Context) IUserPvStatLogDo {
	return u.userPvStatLogDo.WithContext(ctx)
}

func (u userPvStatLog) TableName() string { return u.userPvStatLogDo.TableName() }

func (u userPvStatLog) Alias() string { return u.userPvStatLogDo.Alias() }

func (u userPvStatLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userPvStatLogDo.Columns(cols...)
}

func (u *userPvStatLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPvStatLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["route_url"] = u.RouteURL
	u.fieldMap["pv"] = u.Pv
	u.fieldMap["uv"] = u.Uv
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userPvStatLog) clone(db *gorm.DB) userPvStatLog {
	u.userPvStatLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPvStatLog) replaceDB(db *gorm.DB) userPvStatLog {
	u.userPvStatLogDo.ReplaceDB(db)
	return u
}

type userPvStatLogDo struct{ gen.DO }

type IUserPvStatLogDo interface {
	gen.SubQuery
	Debug() IUserPvStatLogDo
	WithContext(ctx context.Context) IUserPvStatLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPvStatLogDo
	WriteDB() IUserPvStatLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPvStatLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPvStatLogDo
	Not(conds ...gen.Condition) IUserPvStatLogDo
	Or(conds ...gen.Condition) IUserPvStatLogDo
	Select(conds ...field.Expr) IUserPvStatLogDo
	Where(conds ...gen.Condition) IUserPvStatLogDo
	Order(conds ...field.Expr) IUserPvStatLogDo
	Distinct(cols ...field.Expr) IUserPvStatLogDo
	Omit(cols ...field.Expr) IUserPvStatLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo
	Group(cols ...field.Expr) IUserPvStatLogDo
	Having(conds ...gen.Condition) IUserPvStatLogDo
	Limit(limit int) IUserPvStatLogDo
	Offset(offset int) IUserPvStatLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPvStatLogDo
	Unscoped() IUserPvStatLogDo
	Create(values ...*model.UserPvStatLog) error
	CreateInBatches(values []*model.UserPvStatLog, batchSize int) error
	Save(values ...*model.UserPvStatLog) error
	First() (*model.UserPvStatLog, error)
	Take() (*model.UserPvStatLog, error)
	Last() (*model.UserPvStatLog, error)
	Find() ([]*model.UserPvStatLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPvStatLog, err error)
	FindInBatches(result *[]*model.UserPvStatLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPvStatLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPvStatLogDo
	Assign(attrs ...field.AssignExpr) IUserPvStatLogDo
	Joins(fields ...field.RelationField) IUserPvStatLogDo
	Preload(fields ...field.RelationField) IUserPvStatLogDo
	FirstOrInit() (*model.UserPvStatLog, error)
	FirstOrCreate() (*model.UserPvStatLog, error)
	FindByPage(offset int, limit int) (result []*model.UserPvStatLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPvStatLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPvStatLogDo) Debug() IUserPvStatLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userPvStatLogDo) WithContext(ctx context.Context) IUserPvStatLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPvStatLogDo) ReadDB() IUserPvStatLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPvStatLogDo) WriteDB() IUserPvStatLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPvStatLogDo) Session(config *gorm.Session) IUserPvStatLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPvStatLogDo) Clauses(conds ...clause.Expression) IUserPvStatLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPvStatLogDo) Returning(value interface{}, columns ...string) IUserPvStatLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPvStatLogDo) Not(conds ...gen.Condition) IUserPvStatLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPvStatLogDo) Or(conds ...gen.Condition) IUserPvStatLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPvStatLogDo) Select(conds ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPvStatLogDo) Where(conds ...gen.Condition) IUserPvStatLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPvStatLogDo) Order(conds ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPvStatLogDo) Distinct(cols ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPvStatLogDo) Omit(cols ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPvStatLogDo) Join(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPvStatLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPvStatLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPvStatLogDo) Group(cols ...field.Expr) IUserPvStatLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPvStatLogDo) Having(conds ...gen.Condition) IUserPvStatLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPvStatLogDo) Limit(limit int) IUserPvStatLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPvStatLogDo) Offset(offset int) IUserPvStatLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPvStatLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPvStatLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPvStatLogDo) Unscoped() IUserPvStatLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPvStatLogDo) Create(values ...*model.UserPvStatLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPvStatLogDo) CreateInBatches(values []*model.UserPvStatLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPvStatLogDo) Save(values ...*model.UserPvStatLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPvStatLogDo) First() (*model.UserPvStatLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvStatLog), nil
	}
}

func (u userPvStatLogDo) Take() (*model.UserPvStatLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvStatLog), nil
	}
}

func (u userPvStatLogDo) Last() (*model.UserPvStatLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvStatLog), nil
	}
}

func (u userPvStatLogDo) Find() ([]*model.UserPvStatLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPvStatLog), err
}

func (u userPvStatLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPvStatLog, err error) {
	buf := make([]*model.UserPvStatLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPvStatLogDo) FindInBatches(result *[]*model.UserPvStatLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPvStatLogDo) Attrs(attrs ...field.AssignExpr) IUserPvStatLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPvStatLogDo) Assign(attrs ...field.AssignExpr) IUserPvStatLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPvStatLogDo) Joins(fields ...field.RelationField) IUserPvStatLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPvStatLogDo) Preload(fields ...field.RelationField) IUserPvStatLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPvStatLogDo) FirstOrInit() (*model.UserPvStatLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvStatLog), nil
	}
}

func (u userPvStatLogDo) FirstOrCreate() (*model.UserPvStatLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPvStatLog), nil
	}
}

func (u userPvStatLogDo) FindByPage(offset int, limit int) (result []*model.UserPvStatLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPvStatLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPvStatLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPvStatLogDo) Delete(models ...*model.UserPvStatLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPvStatLogDo) withDO(do gen.Dao) *userPvStatLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
