// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGameRecordDefault(db *gorm.DB, opts ...gen.DOOption) gameRecordDefault {
	_gameRecordDefault := gameRecordDefault{}

	_gameRecordDefault.gameRecordDefaultDo.UseDB(db, opts...)
	_gameRecordDefault.gameRecordDefaultDo.UseModel(&model.GameRecordDefault{})

	tableName := _gameRecordDefault.gameRecordDefaultDo.TableName()
	_gameRecordDefault.ALL = field.NewAsterisk(tableName)
	_gameRecordDefault.ID = field.NewInt64(tableName, "id")
	_gameRecordDefault.SeriesID = field.NewInt64(tableName, "series_id")
	_gameRecordDefault.SeriesName = field.NewString(tableName, "series_name")
	_gameRecordDefault.GameID = field.NewInt64(tableName, "game_id")
	_gameRecordDefault.GameCode = field.NewString(tableName, "game_code")
	_gameRecordDefault.GameRecordPicURL = field.NewString(tableName, "game_record_pic_url")
	_gameRecordDefault.CnName = field.NewString(tableName, "cn_name")
	_gameRecordDefault.Remark = field.NewString(tableName, "remark")
	_gameRecordDefault.IsTest = field.NewInt64(tableName, "is_test")
	_gameRecordDefault.IsOpen = field.NewInt64(tableName, "is_open")
	_gameRecordDefault.Sort = field.NewInt64(tableName, "sort")
	_gameRecordDefault.AdminID = field.NewInt64(tableName, "admin_id")
	_gameRecordDefault.AdminName = field.NewString(tableName, "admin_name")
	_gameRecordDefault.CreatedAt = field.NewField(tableName, "created_at")
	_gameRecordDefault.UpdatedAt = field.NewField(tableName, "updated_at")

	_gameRecordDefault.fillFieldMap()

	return _gameRecordDefault
}

type gameRecordDefault struct {
	gameRecordDefaultDo gameRecordDefaultDo

	ALL              field.Asterisk
	ID               field.Int64
	SeriesID         field.Int64  // 系列ID,series表
	SeriesName       field.String // 系列名称
	GameID           field.Int64  // 产品Id
	GameCode         field.String // 产品Code
	GameRecordPicURL field.String // 游戏记录图片
	CnName           field.String // 中文名称
	Remark           field.String // 备注
	IsTest           field.Int64  // 是否为测试 0否 1是
	IsOpen           field.Int64  // 是否开启 0否 1是
	Sort             field.Int64  // 排序 值越小越前
	AdminID          field.Int64  // 操作员ID
	AdminName        field.String // 操作管理员
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (g gameRecordDefault) Table(newTableName string) *gameRecordDefault {
	g.gameRecordDefaultDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameRecordDefault) As(alias string) *gameRecordDefault {
	g.gameRecordDefaultDo.DO = *(g.gameRecordDefaultDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameRecordDefault) updateTableName(table string) *gameRecordDefault {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.SeriesID = field.NewInt64(table, "series_id")
	g.SeriesName = field.NewString(table, "series_name")
	g.GameID = field.NewInt64(table, "game_id")
	g.GameCode = field.NewString(table, "game_code")
	g.GameRecordPicURL = field.NewString(table, "game_record_pic_url")
	g.CnName = field.NewString(table, "cn_name")
	g.Remark = field.NewString(table, "remark")
	g.IsTest = field.NewInt64(table, "is_test")
	g.IsOpen = field.NewInt64(table, "is_open")
	g.Sort = field.NewInt64(table, "sort")
	g.AdminID = field.NewInt64(table, "admin_id")
	g.AdminName = field.NewString(table, "admin_name")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *gameRecordDefault) WithContext(ctx context.Context) IGameRecordDefaultDo {
	return g.gameRecordDefaultDo.WithContext(ctx)
}

func (g gameRecordDefault) TableName() string { return g.gameRecordDefaultDo.TableName() }

func (g gameRecordDefault) Alias() string { return g.gameRecordDefaultDo.Alias() }

func (g gameRecordDefault) Columns(cols ...field.Expr) gen.Columns {
	return g.gameRecordDefaultDo.Columns(cols...)
}

func (g *gameRecordDefault) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameRecordDefault) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["series_id"] = g.SeriesID
	g.fieldMap["series_name"] = g.SeriesName
	g.fieldMap["game_id"] = g.GameID
	g.fieldMap["game_code"] = g.GameCode
	g.fieldMap["game_record_pic_url"] = g.GameRecordPicURL
	g.fieldMap["cn_name"] = g.CnName
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["is_test"] = g.IsTest
	g.fieldMap["is_open"] = g.IsOpen
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["admin_id"] = g.AdminID
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gameRecordDefault) clone(db *gorm.DB) gameRecordDefault {
	g.gameRecordDefaultDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameRecordDefault) replaceDB(db *gorm.DB) gameRecordDefault {
	g.gameRecordDefaultDo.ReplaceDB(db)
	return g
}

type gameRecordDefaultDo struct{ gen.DO }

type IGameRecordDefaultDo interface {
	gen.SubQuery
	Debug() IGameRecordDefaultDo
	WithContext(ctx context.Context) IGameRecordDefaultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameRecordDefaultDo
	WriteDB() IGameRecordDefaultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameRecordDefaultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameRecordDefaultDo
	Not(conds ...gen.Condition) IGameRecordDefaultDo
	Or(conds ...gen.Condition) IGameRecordDefaultDo
	Select(conds ...field.Expr) IGameRecordDefaultDo
	Where(conds ...gen.Condition) IGameRecordDefaultDo
	Order(conds ...field.Expr) IGameRecordDefaultDo
	Distinct(cols ...field.Expr) IGameRecordDefaultDo
	Omit(cols ...field.Expr) IGameRecordDefaultDo
	Join(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo
	Group(cols ...field.Expr) IGameRecordDefaultDo
	Having(conds ...gen.Condition) IGameRecordDefaultDo
	Limit(limit int) IGameRecordDefaultDo
	Offset(offset int) IGameRecordDefaultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRecordDefaultDo
	Unscoped() IGameRecordDefaultDo
	Create(values ...*model.GameRecordDefault) error
	CreateInBatches(values []*model.GameRecordDefault, batchSize int) error
	Save(values ...*model.GameRecordDefault) error
	First() (*model.GameRecordDefault, error)
	Take() (*model.GameRecordDefault, error)
	Last() (*model.GameRecordDefault, error)
	Find() ([]*model.GameRecordDefault, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRecordDefault, err error)
	FindInBatches(result *[]*model.GameRecordDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameRecordDefault) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameRecordDefaultDo
	Assign(attrs ...field.AssignExpr) IGameRecordDefaultDo
	Joins(fields ...field.RelationField) IGameRecordDefaultDo
	Preload(fields ...field.RelationField) IGameRecordDefaultDo
	FirstOrInit() (*model.GameRecordDefault, error)
	FirstOrCreate() (*model.GameRecordDefault, error)
	FindByPage(offset int, limit int) (result []*model.GameRecordDefault, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameRecordDefaultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameRecordDefaultDo) Debug() IGameRecordDefaultDo {
	return g.withDO(g.DO.Debug())
}

func (g gameRecordDefaultDo) WithContext(ctx context.Context) IGameRecordDefaultDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameRecordDefaultDo) ReadDB() IGameRecordDefaultDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameRecordDefaultDo) WriteDB() IGameRecordDefaultDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameRecordDefaultDo) Session(config *gorm.Session) IGameRecordDefaultDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameRecordDefaultDo) Clauses(conds ...clause.Expression) IGameRecordDefaultDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameRecordDefaultDo) Returning(value interface{}, columns ...string) IGameRecordDefaultDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameRecordDefaultDo) Not(conds ...gen.Condition) IGameRecordDefaultDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameRecordDefaultDo) Or(conds ...gen.Condition) IGameRecordDefaultDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameRecordDefaultDo) Select(conds ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameRecordDefaultDo) Where(conds ...gen.Condition) IGameRecordDefaultDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameRecordDefaultDo) Order(conds ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameRecordDefaultDo) Distinct(cols ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameRecordDefaultDo) Omit(cols ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameRecordDefaultDo) Join(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameRecordDefaultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameRecordDefaultDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameRecordDefaultDo) Group(cols ...field.Expr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameRecordDefaultDo) Having(conds ...gen.Condition) IGameRecordDefaultDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameRecordDefaultDo) Limit(limit int) IGameRecordDefaultDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameRecordDefaultDo) Offset(offset int) IGameRecordDefaultDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameRecordDefaultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRecordDefaultDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameRecordDefaultDo) Unscoped() IGameRecordDefaultDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameRecordDefaultDo) Create(values ...*model.GameRecordDefault) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameRecordDefaultDo) CreateInBatches(values []*model.GameRecordDefault, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameRecordDefaultDo) Save(values ...*model.GameRecordDefault) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameRecordDefaultDo) First() (*model.GameRecordDefault, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecordDefault), nil
	}
}

func (g gameRecordDefaultDo) Take() (*model.GameRecordDefault, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecordDefault), nil
	}
}

func (g gameRecordDefaultDo) Last() (*model.GameRecordDefault, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecordDefault), nil
	}
}

func (g gameRecordDefaultDo) Find() ([]*model.GameRecordDefault, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameRecordDefault), err
}

func (g gameRecordDefaultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRecordDefault, err error) {
	buf := make([]*model.GameRecordDefault, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameRecordDefaultDo) FindInBatches(result *[]*model.GameRecordDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameRecordDefaultDo) Attrs(attrs ...field.AssignExpr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameRecordDefaultDo) Assign(attrs ...field.AssignExpr) IGameRecordDefaultDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameRecordDefaultDo) Joins(fields ...field.RelationField) IGameRecordDefaultDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameRecordDefaultDo) Preload(fields ...field.RelationField) IGameRecordDefaultDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameRecordDefaultDo) FirstOrInit() (*model.GameRecordDefault, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecordDefault), nil
	}
}

func (g gameRecordDefaultDo) FirstOrCreate() (*model.GameRecordDefault, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecordDefault), nil
	}
}

func (g gameRecordDefaultDo) FindByPage(offset int, limit int) (result []*model.GameRecordDefault, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameRecordDefaultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameRecordDefaultDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameRecordDefaultDo) Delete(models ...*model.GameRecordDefault) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameRecordDefaultDo) withDO(do gen.Dao) *gameRecordDefaultDo {
	g.DO = *do.(*gen.DO)
	return g
}
