// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGiftMoneyBatch(db *gorm.DB, opts ...gen.DOOption) giftMoneyBatch {
	_giftMoneyBatch := giftMoneyBatch{}

	_giftMoneyBatch.giftMoneyBatchDo.UseDB(db, opts...)
	_giftMoneyBatch.giftMoneyBatchDo.UseModel(&model.GiftMoneyBatch{})

	tableName := _giftMoneyBatch.giftMoneyBatchDo.TableName()
	_giftMoneyBatch.ALL = field.NewAsterisk(tableName)
	_giftMoneyBatch.ID = field.NewInt64(tableName, "id")
	_giftMoneyBatch.Amount = field.NewFloat64(tableName, "amount")
	_giftMoneyBatch.Money = field.NewFloat64(tableName, "money")
	_giftMoneyBatch.BetAmountRate = field.NewInt64(tableName, "bet_amount_rate")
	_giftMoneyBatch.Remark = field.NewString(tableName, "remark")
	_giftMoneyBatch.TotalCount = field.NewInt64(tableName, "total_count")
	_giftMoneyBatch.SuccessCount = field.NewInt64(tableName, "success_count")
	_giftMoneyBatch.FailCount = field.NewInt64(tableName, "fail_count")
	_giftMoneyBatch.AdminName = field.NewString(tableName, "admin_name")
	_giftMoneyBatch.CreatedAt = field.NewField(tableName, "created_at")
	_giftMoneyBatch.UpdatedAt = field.NewField(tableName, "updated_at")

	_giftMoneyBatch.fillFieldMap()

	return _giftMoneyBatch
}

type giftMoneyBatch struct {
	giftMoneyBatchDo giftMoneyBatchDo

	ALL           field.Asterisk
	ID            field.Int64
	Amount        field.Float64 // 金额
	Money         field.Float64 // 本金金额
	BetAmountRate field.Int64   // 打码倍数
	Remark        field.String  // 备注
	TotalCount    field.Int64   // 总共次数
	SuccessCount  field.Int64   // 成功次数
	FailCount     field.Int64   // 失败次数
	AdminName     field.String  // 操作管理员
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (g giftMoneyBatch) Table(newTableName string) *giftMoneyBatch {
	g.giftMoneyBatchDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g giftMoneyBatch) As(alias string) *giftMoneyBatch {
	g.giftMoneyBatchDo.DO = *(g.giftMoneyBatchDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *giftMoneyBatch) updateTableName(table string) *giftMoneyBatch {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Amount = field.NewFloat64(table, "amount")
	g.Money = field.NewFloat64(table, "money")
	g.BetAmountRate = field.NewInt64(table, "bet_amount_rate")
	g.Remark = field.NewString(table, "remark")
	g.TotalCount = field.NewInt64(table, "total_count")
	g.SuccessCount = field.NewInt64(table, "success_count")
	g.FailCount = field.NewInt64(table, "fail_count")
	g.AdminName = field.NewString(table, "admin_name")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *giftMoneyBatch) WithContext(ctx context.Context) IGiftMoneyBatchDo {
	return g.giftMoneyBatchDo.WithContext(ctx)
}

func (g giftMoneyBatch) TableName() string { return g.giftMoneyBatchDo.TableName() }

func (g giftMoneyBatch) Alias() string { return g.giftMoneyBatchDo.Alias() }

func (g giftMoneyBatch) Columns(cols ...field.Expr) gen.Columns {
	return g.giftMoneyBatchDo.Columns(cols...)
}

func (g *giftMoneyBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *giftMoneyBatch) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["money"] = g.Money
	g.fieldMap["bet_amount_rate"] = g.BetAmountRate
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["total_count"] = g.TotalCount
	g.fieldMap["success_count"] = g.SuccessCount
	g.fieldMap["fail_count"] = g.FailCount
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g giftMoneyBatch) clone(db *gorm.DB) giftMoneyBatch {
	g.giftMoneyBatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g giftMoneyBatch) replaceDB(db *gorm.DB) giftMoneyBatch {
	g.giftMoneyBatchDo.ReplaceDB(db)
	return g
}

type giftMoneyBatchDo struct{ gen.DO }

type IGiftMoneyBatchDo interface {
	gen.SubQuery
	Debug() IGiftMoneyBatchDo
	WithContext(ctx context.Context) IGiftMoneyBatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiftMoneyBatchDo
	WriteDB() IGiftMoneyBatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiftMoneyBatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiftMoneyBatchDo
	Not(conds ...gen.Condition) IGiftMoneyBatchDo
	Or(conds ...gen.Condition) IGiftMoneyBatchDo
	Select(conds ...field.Expr) IGiftMoneyBatchDo
	Where(conds ...gen.Condition) IGiftMoneyBatchDo
	Order(conds ...field.Expr) IGiftMoneyBatchDo
	Distinct(cols ...field.Expr) IGiftMoneyBatchDo
	Omit(cols ...field.Expr) IGiftMoneyBatchDo
	Join(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo
	Group(cols ...field.Expr) IGiftMoneyBatchDo
	Having(conds ...gen.Condition) IGiftMoneyBatchDo
	Limit(limit int) IGiftMoneyBatchDo
	Offset(offset int) IGiftMoneyBatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftMoneyBatchDo
	Unscoped() IGiftMoneyBatchDo
	Create(values ...*model.GiftMoneyBatch) error
	CreateInBatches(values []*model.GiftMoneyBatch, batchSize int) error
	Save(values ...*model.GiftMoneyBatch) error
	First() (*model.GiftMoneyBatch, error)
	Take() (*model.GiftMoneyBatch, error)
	Last() (*model.GiftMoneyBatch, error)
	Find() ([]*model.GiftMoneyBatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftMoneyBatch, err error)
	FindInBatches(result *[]*model.GiftMoneyBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GiftMoneyBatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiftMoneyBatchDo
	Assign(attrs ...field.AssignExpr) IGiftMoneyBatchDo
	Joins(fields ...field.RelationField) IGiftMoneyBatchDo
	Preload(fields ...field.RelationField) IGiftMoneyBatchDo
	FirstOrInit() (*model.GiftMoneyBatch, error)
	FirstOrCreate() (*model.GiftMoneyBatch, error)
	FindByPage(offset int, limit int) (result []*model.GiftMoneyBatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiftMoneyBatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giftMoneyBatchDo) Debug() IGiftMoneyBatchDo {
	return g.withDO(g.DO.Debug())
}

func (g giftMoneyBatchDo) WithContext(ctx context.Context) IGiftMoneyBatchDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giftMoneyBatchDo) ReadDB() IGiftMoneyBatchDo {
	return g.Clauses(dbresolver.Read)
}

func (g giftMoneyBatchDo) WriteDB() IGiftMoneyBatchDo {
	return g.Clauses(dbresolver.Write)
}

func (g giftMoneyBatchDo) Session(config *gorm.Session) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Session(config))
}

func (g giftMoneyBatchDo) Clauses(conds ...clause.Expression) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giftMoneyBatchDo) Returning(value interface{}, columns ...string) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giftMoneyBatchDo) Not(conds ...gen.Condition) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giftMoneyBatchDo) Or(conds ...gen.Condition) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giftMoneyBatchDo) Select(conds ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giftMoneyBatchDo) Where(conds ...gen.Condition) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giftMoneyBatchDo) Order(conds ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giftMoneyBatchDo) Distinct(cols ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giftMoneyBatchDo) Omit(cols ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giftMoneyBatchDo) Join(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giftMoneyBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giftMoneyBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giftMoneyBatchDo) Group(cols ...field.Expr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giftMoneyBatchDo) Having(conds ...gen.Condition) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giftMoneyBatchDo) Limit(limit int) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giftMoneyBatchDo) Offset(offset int) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giftMoneyBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giftMoneyBatchDo) Unscoped() IGiftMoneyBatchDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giftMoneyBatchDo) Create(values ...*model.GiftMoneyBatch) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giftMoneyBatchDo) CreateInBatches(values []*model.GiftMoneyBatch, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giftMoneyBatchDo) Save(values ...*model.GiftMoneyBatch) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giftMoneyBatchDo) First() (*model.GiftMoneyBatch, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyBatch), nil
	}
}

func (g giftMoneyBatchDo) Take() (*model.GiftMoneyBatch, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyBatch), nil
	}
}

func (g giftMoneyBatchDo) Last() (*model.GiftMoneyBatch, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyBatch), nil
	}
}

func (g giftMoneyBatchDo) Find() ([]*model.GiftMoneyBatch, error) {
	result, err := g.DO.Find()
	return result.([]*model.GiftMoneyBatch), err
}

func (g giftMoneyBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiftMoneyBatch, err error) {
	buf := make([]*model.GiftMoneyBatch, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giftMoneyBatchDo) FindInBatches(result *[]*model.GiftMoneyBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giftMoneyBatchDo) Attrs(attrs ...field.AssignExpr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giftMoneyBatchDo) Assign(attrs ...field.AssignExpr) IGiftMoneyBatchDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giftMoneyBatchDo) Joins(fields ...field.RelationField) IGiftMoneyBatchDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giftMoneyBatchDo) Preload(fields ...field.RelationField) IGiftMoneyBatchDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giftMoneyBatchDo) FirstOrInit() (*model.GiftMoneyBatch, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyBatch), nil
	}
}

func (g giftMoneyBatchDo) FirstOrCreate() (*model.GiftMoneyBatch, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiftMoneyBatch), nil
	}
}

func (g giftMoneyBatchDo) FindByPage(offset int, limit int) (result []*model.GiftMoneyBatch, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giftMoneyBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giftMoneyBatchDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giftMoneyBatchDo) Delete(models ...*model.GiftMoneyBatch) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giftMoneyBatchDo) withDO(do gen.Dao) *giftMoneyBatchDo {
	g.DO = *do.(*gen.DO)
	return g
}
