// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentUser(db *gorm.DB, opts ...gen.DOOption) agentUser {
	_agentUser := agentUser{}

	_agentUser.agentUserDo.UseDB(db, opts...)
	_agentUser.agentUserDo.UseModel(&model.AgentUser{})

	tableName := _agentUser.agentUserDo.TableName()
	_agentUser.ALL = field.NewAsterisk(tableName)
	_agentUser.ID = field.NewInt64(tableName, "id")
	_agentUser.AdminUserID = field.NewInt64(tableName, "admin_user_id")
	_agentUser.AgentUser = field.NewString(tableName, "agent_user")
	_agentUser.ParentID = field.NewInt64(tableName, "parent_id")
	_agentUser.ParentName = field.NewString(tableName, "parent_name")
	_agentUser.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentUser.YongjinRate = field.NewFloat64(tableName, "yongjin_rate")
	_agentUser.RealName = field.NewString(tableName, "real_name")
	_agentUser.Tel = field.NewString(tableName, "tel")
	_agentUser.Email = field.NewString(tableName, "email")
	_agentUser.Qq = field.NewString(tableName, "qq")
	_agentUser.BankType = field.NewInt64(tableName, "bank_type")
	_agentUser.Wechat = field.NewString(tableName, "wechat")
	_agentUser.BankName = field.NewString(tableName, "bank_name")
	_agentUser.Account = field.NewString(tableName, "account")
	_agentUser.Branch = field.NewString(tableName, "branch")
	_agentUser.URL = field.NewString(tableName, "url")
	_agentUser.Protocol = field.NewString(tableName, "protocol")
	_agentUser.ProtocolURL = field.NewString(tableName, "protocol_url")
	_agentUser.CreatedAt = field.NewField(tableName, "created_at")
	_agentUser.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentUser.Domain = field.NewString(tableName, "domain")
	_agentUser.LastUpdatedPasswordAt = field.NewField(tableName, "last_updated_password_at")

	_agentUser.fillFieldMap()

	return _agentUser
}

type agentUser struct {
	agentUserDo agentUserDo

	ALL                   field.Asterisk
	ID                    field.Int64
	AdminUserID           field.Int64
	AgentUser             field.String  // 代理账号
	ParentID              field.Int64   // 直属上级
	ParentName            field.String  // 直属上级
	ForefatherIds         field.String  // 上级树
	YongjinRate           field.Float64 // 返佣百分比5%
	RealName              field.String  // 真实姓名
	Tel                   field.String  // 收件人手机号
	Email                 field.String  // email
	Qq                    field.String  // qq
	BankType              field.Int64   // 1:银行卡, 2:数字钱包
	Wechat                field.String  // 微信
	BankName              field.String  // 出款银行
	Account               field.String  // 银行账号
	Branch                field.String  // 开户行地址
	URL                   field.String  // 推广地址
	Protocol              field.String  // 协议
	ProtocolURL           field.String  // 协议地址
	CreatedAt             field.Field
	UpdatedAt             field.Field
	Domain                field.String // 专属域名
	LastUpdatedPasswordAt field.Field  // 最后一次修改密码时间

	fieldMap map[string]field.Expr
}

func (a agentUser) Table(newTableName string) *agentUser {
	a.agentUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentUser) As(alias string) *agentUser {
	a.agentUserDo.DO = *(a.agentUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentUser) updateTableName(table string) *agentUser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminUserID = field.NewInt64(table, "admin_user_id")
	a.AgentUser = field.NewString(table, "agent_user")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.YongjinRate = field.NewFloat64(table, "yongjin_rate")
	a.RealName = field.NewString(table, "real_name")
	a.Tel = field.NewString(table, "tel")
	a.Email = field.NewString(table, "email")
	a.Qq = field.NewString(table, "qq")
	a.BankType = field.NewInt64(table, "bank_type")
	a.Wechat = field.NewString(table, "wechat")
	a.BankName = field.NewString(table, "bank_name")
	a.Account = field.NewString(table, "account")
	a.Branch = field.NewString(table, "branch")
	a.URL = field.NewString(table, "url")
	a.Protocol = field.NewString(table, "protocol")
	a.ProtocolURL = field.NewString(table, "protocol_url")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.Domain = field.NewString(table, "domain")
	a.LastUpdatedPasswordAt = field.NewField(table, "last_updated_password_at")

	a.fillFieldMap()

	return a
}

func (a *agentUser) WithContext(ctx context.Context) IAgentUserDo {
	return a.agentUserDo.WithContext(ctx)
}

func (a agentUser) TableName() string { return a.agentUserDo.TableName() }

func (a agentUser) Alias() string { return a.agentUserDo.Alias() }

func (a agentUser) Columns(cols ...field.Expr) gen.Columns { return a.agentUserDo.Columns(cols...) }

func (a *agentUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 23)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_user_id"] = a.AdminUserID
	a.fieldMap["agent_user"] = a.AgentUser
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["yongjin_rate"] = a.YongjinRate
	a.fieldMap["real_name"] = a.RealName
	a.fieldMap["tel"] = a.Tel
	a.fieldMap["email"] = a.Email
	a.fieldMap["qq"] = a.Qq
	a.fieldMap["bank_type"] = a.BankType
	a.fieldMap["wechat"] = a.Wechat
	a.fieldMap["bank_name"] = a.BankName
	a.fieldMap["account"] = a.Account
	a.fieldMap["branch"] = a.Branch
	a.fieldMap["url"] = a.URL
	a.fieldMap["protocol"] = a.Protocol
	a.fieldMap["protocol_url"] = a.ProtocolURL
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["domain"] = a.Domain
	a.fieldMap["last_updated_password_at"] = a.LastUpdatedPasswordAt
}

func (a agentUser) clone(db *gorm.DB) agentUser {
	a.agentUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentUser) replaceDB(db *gorm.DB) agentUser {
	a.agentUserDo.ReplaceDB(db)
	return a
}

type agentUserDo struct{ gen.DO }

type IAgentUserDo interface {
	gen.SubQuery
	Debug() IAgentUserDo
	WithContext(ctx context.Context) IAgentUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentUserDo
	WriteDB() IAgentUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentUserDo
	Not(conds ...gen.Condition) IAgentUserDo
	Or(conds ...gen.Condition) IAgentUserDo
	Select(conds ...field.Expr) IAgentUserDo
	Where(conds ...gen.Condition) IAgentUserDo
	Order(conds ...field.Expr) IAgentUserDo
	Distinct(cols ...field.Expr) IAgentUserDo
	Omit(cols ...field.Expr) IAgentUserDo
	Join(table schema.Tabler, on ...field.Expr) IAgentUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentUserDo
	Group(cols ...field.Expr) IAgentUserDo
	Having(conds ...gen.Condition) IAgentUserDo
	Limit(limit int) IAgentUserDo
	Offset(offset int) IAgentUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUserDo
	Unscoped() IAgentUserDo
	Create(values ...*model.AgentUser) error
	CreateInBatches(values []*model.AgentUser, batchSize int) error
	Save(values ...*model.AgentUser) error
	First() (*model.AgentUser, error)
	Take() (*model.AgentUser, error)
	Last() (*model.AgentUser, error)
	Find() ([]*model.AgentUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUser, err error)
	FindInBatches(result *[]*model.AgentUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentUserDo
	Assign(attrs ...field.AssignExpr) IAgentUserDo
	Joins(fields ...field.RelationField) IAgentUserDo
	Preload(fields ...field.RelationField) IAgentUserDo
	FirstOrInit() (*model.AgentUser, error)
	FirstOrCreate() (*model.AgentUser, error)
	FindByPage(offset int, limit int) (result []*model.AgentUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentUserDo) Debug() IAgentUserDo {
	return a.withDO(a.DO.Debug())
}

func (a agentUserDo) WithContext(ctx context.Context) IAgentUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentUserDo) ReadDB() IAgentUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentUserDo) WriteDB() IAgentUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentUserDo) Session(config *gorm.Session) IAgentUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentUserDo) Clauses(conds ...clause.Expression) IAgentUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentUserDo) Returning(value interface{}, columns ...string) IAgentUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentUserDo) Not(conds ...gen.Condition) IAgentUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentUserDo) Or(conds ...gen.Condition) IAgentUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentUserDo) Select(conds ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentUserDo) Where(conds ...gen.Condition) IAgentUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentUserDo) Order(conds ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentUserDo) Distinct(cols ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentUserDo) Omit(cols ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentUserDo) Join(table schema.Tabler, on ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentUserDo) Group(cols ...field.Expr) IAgentUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentUserDo) Having(conds ...gen.Condition) IAgentUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentUserDo) Limit(limit int) IAgentUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentUserDo) Offset(offset int) IAgentUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentUserDo) Unscoped() IAgentUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentUserDo) Create(values ...*model.AgentUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentUserDo) CreateInBatches(values []*model.AgentUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentUserDo) Save(values ...*model.AgentUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentUserDo) First() (*model.AgentUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUser), nil
	}
}

func (a agentUserDo) Take() (*model.AgentUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUser), nil
	}
}

func (a agentUserDo) Last() (*model.AgentUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUser), nil
	}
}

func (a agentUserDo) Find() ([]*model.AgentUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentUser), err
}

func (a agentUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUser, err error) {
	buf := make([]*model.AgentUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentUserDo) FindInBatches(result *[]*model.AgentUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentUserDo) Attrs(attrs ...field.AssignExpr) IAgentUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentUserDo) Assign(attrs ...field.AssignExpr) IAgentUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentUserDo) Joins(fields ...field.RelationField) IAgentUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentUserDo) Preload(fields ...field.RelationField) IAgentUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentUserDo) FirstOrInit() (*model.AgentUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUser), nil
	}
}

func (a agentUserDo) FirstOrCreate() (*model.AgentUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUser), nil
	}
}

func (a agentUserDo) FindByPage(offset int, limit int) (result []*model.AgentUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentUserDo) Delete(models ...*model.AgentUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentUserDo) withDO(do gen.Dao) *agentUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
