// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityTypesCopy1(db *gorm.DB, opts ...gen.DOOption) activityTypesCopy1 {
	_activityTypesCopy1 := activityTypesCopy1{}

	_activityTypesCopy1.activityTypesCopy1Do.UseDB(db, opts...)
	_activityTypesCopy1.activityTypesCopy1Do.UseModel(&model.ActivityTypesCopy1{})

	tableName := _activityTypesCopy1.activityTypesCopy1Do.TableName()
	_activityTypesCopy1.ALL = field.NewAsterisk(tableName)
	_activityTypesCopy1.ID = field.NewInt64(tableName, "id")
	_activityTypesCopy1.Name = field.NewString(tableName, "name")
	_activityTypesCopy1.NameEn = field.NewString(tableName, "name_en")
	_activityTypesCopy1.IconURL = field.NewString(tableName, "icon_url")
	_activityTypesCopy1.CloseIconURL = field.NewString(tableName, "close_icon_url")
	_activityTypesCopy1.Remark = field.NewString(tableName, "remark")
	_activityTypesCopy1.Sort = field.NewInt64(tableName, "sort")
	_activityTypesCopy1.Plat = field.NewInt64(tableName, "plat")
	_activityTypesCopy1.IsOpen = field.NewInt64(tableName, "is_open")
	_activityTypesCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_activityTypesCopy1.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityTypesCopy1.fillFieldMap()

	return _activityTypesCopy1
}

// activityTypesCopy1 活动分类表
type activityTypesCopy1 struct {
	activityTypesCopy1Do activityTypesCopy1Do

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String // 活动类型名
	NameEn       field.String // 英文名称
	IconURL      field.String // 活动icon
	CloseIconURL field.String // 未激活情况下的icon
	Remark       field.String // 备注
	Sort         field.Int64  // 排序字段, 值越小排序靠前
	Plat         field.Int64  // 1:h5, 2:pc
	IsOpen       field.Int64  // 是否开启0:否;1:是
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (a activityTypesCopy1) Table(newTableName string) *activityTypesCopy1 {
	a.activityTypesCopy1Do.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityTypesCopy1) As(alias string) *activityTypesCopy1 {
	a.activityTypesCopy1Do.DO = *(a.activityTypesCopy1Do.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityTypesCopy1) updateTableName(table string) *activityTypesCopy1 {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.NameEn = field.NewString(table, "name_en")
	a.IconURL = field.NewString(table, "icon_url")
	a.CloseIconURL = field.NewString(table, "close_icon_url")
	a.Remark = field.NewString(table, "remark")
	a.Sort = field.NewInt64(table, "sort")
	a.Plat = field.NewInt64(table, "plat")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityTypesCopy1) WithContext(ctx context.Context) IActivityTypesCopy1Do {
	return a.activityTypesCopy1Do.WithContext(ctx)
}

func (a activityTypesCopy1) TableName() string { return a.activityTypesCopy1Do.TableName() }

func (a activityTypesCopy1) Alias() string { return a.activityTypesCopy1Do.Alias() }

func (a activityTypesCopy1) Columns(cols ...field.Expr) gen.Columns {
	return a.activityTypesCopy1Do.Columns(cols...)
}

func (a *activityTypesCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityTypesCopy1) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["name_en"] = a.NameEn
	a.fieldMap["icon_url"] = a.IconURL
	a.fieldMap["close_icon_url"] = a.CloseIconURL
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityTypesCopy1) clone(db *gorm.DB) activityTypesCopy1 {
	a.activityTypesCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityTypesCopy1) replaceDB(db *gorm.DB) activityTypesCopy1 {
	a.activityTypesCopy1Do.ReplaceDB(db)
	return a
}

type activityTypesCopy1Do struct{ gen.DO }

type IActivityTypesCopy1Do interface {
	gen.SubQuery
	Debug() IActivityTypesCopy1Do
	WithContext(ctx context.Context) IActivityTypesCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityTypesCopy1Do
	WriteDB() IActivityTypesCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityTypesCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityTypesCopy1Do
	Not(conds ...gen.Condition) IActivityTypesCopy1Do
	Or(conds ...gen.Condition) IActivityTypesCopy1Do
	Select(conds ...field.Expr) IActivityTypesCopy1Do
	Where(conds ...gen.Condition) IActivityTypesCopy1Do
	Order(conds ...field.Expr) IActivityTypesCopy1Do
	Distinct(cols ...field.Expr) IActivityTypesCopy1Do
	Omit(cols ...field.Expr) IActivityTypesCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do
	Group(cols ...field.Expr) IActivityTypesCopy1Do
	Having(conds ...gen.Condition) IActivityTypesCopy1Do
	Limit(limit int) IActivityTypesCopy1Do
	Offset(offset int) IActivityTypesCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTypesCopy1Do
	Unscoped() IActivityTypesCopy1Do
	Create(values ...*model.ActivityTypesCopy1) error
	CreateInBatches(values []*model.ActivityTypesCopy1, batchSize int) error
	Save(values ...*model.ActivityTypesCopy1) error
	First() (*model.ActivityTypesCopy1, error)
	Take() (*model.ActivityTypesCopy1, error)
	Last() (*model.ActivityTypesCopy1, error)
	Find() ([]*model.ActivityTypesCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTypesCopy1, err error)
	FindInBatches(result *[]*model.ActivityTypesCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityTypesCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityTypesCopy1Do
	Assign(attrs ...field.AssignExpr) IActivityTypesCopy1Do
	Joins(fields ...field.RelationField) IActivityTypesCopy1Do
	Preload(fields ...field.RelationField) IActivityTypesCopy1Do
	FirstOrInit() (*model.ActivityTypesCopy1, error)
	FirstOrCreate() (*model.ActivityTypesCopy1, error)
	FindByPage(offset int, limit int) (result []*model.ActivityTypesCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityTypesCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityTypesCopy1Do) Debug() IActivityTypesCopy1Do {
	return a.withDO(a.DO.Debug())
}

func (a activityTypesCopy1Do) WithContext(ctx context.Context) IActivityTypesCopy1Do {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityTypesCopy1Do) ReadDB() IActivityTypesCopy1Do {
	return a.Clauses(dbresolver.Read)
}

func (a activityTypesCopy1Do) WriteDB() IActivityTypesCopy1Do {
	return a.Clauses(dbresolver.Write)
}

func (a activityTypesCopy1Do) Session(config *gorm.Session) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Session(config))
}

func (a activityTypesCopy1Do) Clauses(conds ...clause.Expression) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityTypesCopy1Do) Returning(value interface{}, columns ...string) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityTypesCopy1Do) Not(conds ...gen.Condition) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityTypesCopy1Do) Or(conds ...gen.Condition) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityTypesCopy1Do) Select(conds ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityTypesCopy1Do) Where(conds ...gen.Condition) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityTypesCopy1Do) Order(conds ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityTypesCopy1Do) Distinct(cols ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityTypesCopy1Do) Omit(cols ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityTypesCopy1Do) Join(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityTypesCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityTypesCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityTypesCopy1Do) Group(cols ...field.Expr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityTypesCopy1Do) Having(conds ...gen.Condition) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityTypesCopy1Do) Limit(limit int) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityTypesCopy1Do) Offset(offset int) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityTypesCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityTypesCopy1Do) Unscoped() IActivityTypesCopy1Do {
	return a.withDO(a.DO.Unscoped())
}

func (a activityTypesCopy1Do) Create(values ...*model.ActivityTypesCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityTypesCopy1Do) CreateInBatches(values []*model.ActivityTypesCopy1, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityTypesCopy1Do) Save(values ...*model.ActivityTypesCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityTypesCopy1Do) First() (*model.ActivityTypesCopy1, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTypesCopy1), nil
	}
}

func (a activityTypesCopy1Do) Take() (*model.ActivityTypesCopy1, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTypesCopy1), nil
	}
}

func (a activityTypesCopy1Do) Last() (*model.ActivityTypesCopy1, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTypesCopy1), nil
	}
}

func (a activityTypesCopy1Do) Find() ([]*model.ActivityTypesCopy1, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityTypesCopy1), err
}

func (a activityTypesCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTypesCopy1, err error) {
	buf := make([]*model.ActivityTypesCopy1, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityTypesCopy1Do) FindInBatches(result *[]*model.ActivityTypesCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityTypesCopy1Do) Attrs(attrs ...field.AssignExpr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityTypesCopy1Do) Assign(attrs ...field.AssignExpr) IActivityTypesCopy1Do {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityTypesCopy1Do) Joins(fields ...field.RelationField) IActivityTypesCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityTypesCopy1Do) Preload(fields ...field.RelationField) IActivityTypesCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityTypesCopy1Do) FirstOrInit() (*model.ActivityTypesCopy1, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTypesCopy1), nil
	}
}

func (a activityTypesCopy1Do) FirstOrCreate() (*model.ActivityTypesCopy1, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTypesCopy1), nil
	}
}

func (a activityTypesCopy1Do) FindByPage(offset int, limit int) (result []*model.ActivityTypesCopy1, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityTypesCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityTypesCopy1Do) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityTypesCopy1Do) Delete(models ...*model.ActivityTypesCopy1) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityTypesCopy1Do) withDO(do gen.Dao) *activityTypesCopy1Do {
	a.DO = *do.(*gen.DO)
	return a
}
