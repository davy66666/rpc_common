// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivitySportChart(db *gorm.DB, opts ...gen.DOOption) activitySportChart {
	_activitySportChart := activitySportChart{}

	_activitySportChart.activitySportChartDo.UseDB(db, opts...)
	_activitySportChart.activitySportChartDo.UseModel(&model.ActivitySportChart{})

	tableName := _activitySportChart.activitySportChartDo.TableName()
	_activitySportChart.ALL = field.NewAsterisk(tableName)
	_activitySportChart.ID = field.NewInt64(tableName, "id")
	_activitySportChart.Rank = field.NewInt64(tableName, "rank")
	_activitySportChart.Username = field.NewString(tableName, "username")
	_activitySportChart.Amount = field.NewFloat64(tableName, "amount")
	_activitySportChart.CreatedAt = field.NewField(tableName, "created_at")
	_activitySportChart.UpdatedAt = field.NewField(tableName, "updated_at")

	_activitySportChart.fillFieldMap()

	return _activitySportChart
}

// activitySportChart 中奖排行表
type activitySportChart struct {
	activitySportChartDo activitySportChartDo

	ALL       field.Asterisk
	ID        field.Int64
	Rank      field.Int64   // 排名
	Username  field.String  // 会员名称
	Amount    field.Float64 // 彩金
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (a activitySportChart) Table(newTableName string) *activitySportChart {
	a.activitySportChartDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activitySportChart) As(alias string) *activitySportChart {
	a.activitySportChartDo.DO = *(a.activitySportChartDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activitySportChart) updateTableName(table string) *activitySportChart {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Rank = field.NewInt64(table, "rank")
	a.Username = field.NewString(table, "username")
	a.Amount = field.NewFloat64(table, "amount")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activitySportChart) WithContext(ctx context.Context) IActivitySportChartDo {
	return a.activitySportChartDo.WithContext(ctx)
}

func (a activitySportChart) TableName() string { return a.activitySportChartDo.TableName() }

func (a activitySportChart) Alias() string { return a.activitySportChartDo.Alias() }

func (a activitySportChart) Columns(cols ...field.Expr) gen.Columns {
	return a.activitySportChartDo.Columns(cols...)
}

func (a *activitySportChart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activitySportChart) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["rank"] = a.Rank
	a.fieldMap["username"] = a.Username
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activitySportChart) clone(db *gorm.DB) activitySportChart {
	a.activitySportChartDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activitySportChart) replaceDB(db *gorm.DB) activitySportChart {
	a.activitySportChartDo.ReplaceDB(db)
	return a
}

type activitySportChartDo struct{ gen.DO }

type IActivitySportChartDo interface {
	gen.SubQuery
	Debug() IActivitySportChartDo
	WithContext(ctx context.Context) IActivitySportChartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivitySportChartDo
	WriteDB() IActivitySportChartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivitySportChartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivitySportChartDo
	Not(conds ...gen.Condition) IActivitySportChartDo
	Or(conds ...gen.Condition) IActivitySportChartDo
	Select(conds ...field.Expr) IActivitySportChartDo
	Where(conds ...gen.Condition) IActivitySportChartDo
	Order(conds ...field.Expr) IActivitySportChartDo
	Distinct(cols ...field.Expr) IActivitySportChartDo
	Omit(cols ...field.Expr) IActivitySportChartDo
	Join(table schema.Tabler, on ...field.Expr) IActivitySportChartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportChartDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportChartDo
	Group(cols ...field.Expr) IActivitySportChartDo
	Having(conds ...gen.Condition) IActivitySportChartDo
	Limit(limit int) IActivitySportChartDo
	Offset(offset int) IActivitySportChartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportChartDo
	Unscoped() IActivitySportChartDo
	Create(values ...*model.ActivitySportChart) error
	CreateInBatches(values []*model.ActivitySportChart, batchSize int) error
	Save(values ...*model.ActivitySportChart) error
	First() (*model.ActivitySportChart, error)
	Take() (*model.ActivitySportChart, error)
	Last() (*model.ActivitySportChart, error)
	Find() ([]*model.ActivitySportChart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportChart, err error)
	FindInBatches(result *[]*model.ActivitySportChart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivitySportChart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivitySportChartDo
	Assign(attrs ...field.AssignExpr) IActivitySportChartDo
	Joins(fields ...field.RelationField) IActivitySportChartDo
	Preload(fields ...field.RelationField) IActivitySportChartDo
	FirstOrInit() (*model.ActivitySportChart, error)
	FirstOrCreate() (*model.ActivitySportChart, error)
	FindByPage(offset int, limit int) (result []*model.ActivitySportChart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivitySportChartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activitySportChartDo) Debug() IActivitySportChartDo {
	return a.withDO(a.DO.Debug())
}

func (a activitySportChartDo) WithContext(ctx context.Context) IActivitySportChartDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activitySportChartDo) ReadDB() IActivitySportChartDo {
	return a.Clauses(dbresolver.Read)
}

func (a activitySportChartDo) WriteDB() IActivitySportChartDo {
	return a.Clauses(dbresolver.Write)
}

func (a activitySportChartDo) Session(config *gorm.Session) IActivitySportChartDo {
	return a.withDO(a.DO.Session(config))
}

func (a activitySportChartDo) Clauses(conds ...clause.Expression) IActivitySportChartDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activitySportChartDo) Returning(value interface{}, columns ...string) IActivitySportChartDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activitySportChartDo) Not(conds ...gen.Condition) IActivitySportChartDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activitySportChartDo) Or(conds ...gen.Condition) IActivitySportChartDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activitySportChartDo) Select(conds ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activitySportChartDo) Where(conds ...gen.Condition) IActivitySportChartDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activitySportChartDo) Order(conds ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activitySportChartDo) Distinct(cols ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activitySportChartDo) Omit(cols ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activitySportChartDo) Join(table schema.Tabler, on ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activitySportChartDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activitySportChartDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activitySportChartDo) Group(cols ...field.Expr) IActivitySportChartDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activitySportChartDo) Having(conds ...gen.Condition) IActivitySportChartDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activitySportChartDo) Limit(limit int) IActivitySportChartDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activitySportChartDo) Offset(offset int) IActivitySportChartDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activitySportChartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportChartDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activitySportChartDo) Unscoped() IActivitySportChartDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activitySportChartDo) Create(values ...*model.ActivitySportChart) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activitySportChartDo) CreateInBatches(values []*model.ActivitySportChart, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activitySportChartDo) Save(values ...*model.ActivitySportChart) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activitySportChartDo) First() (*model.ActivitySportChart, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportChart), nil
	}
}

func (a activitySportChartDo) Take() (*model.ActivitySportChart, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportChart), nil
	}
}

func (a activitySportChartDo) Last() (*model.ActivitySportChart, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportChart), nil
	}
}

func (a activitySportChartDo) Find() ([]*model.ActivitySportChart, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivitySportChart), err
}

func (a activitySportChartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportChart, err error) {
	buf := make([]*model.ActivitySportChart, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activitySportChartDo) FindInBatches(result *[]*model.ActivitySportChart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activitySportChartDo) Attrs(attrs ...field.AssignExpr) IActivitySportChartDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activitySportChartDo) Assign(attrs ...field.AssignExpr) IActivitySportChartDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activitySportChartDo) Joins(fields ...field.RelationField) IActivitySportChartDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activitySportChartDo) Preload(fields ...field.RelationField) IActivitySportChartDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activitySportChartDo) FirstOrInit() (*model.ActivitySportChart, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportChart), nil
	}
}

func (a activitySportChartDo) FirstOrCreate() (*model.ActivitySportChart, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportChart), nil
	}
}

func (a activitySportChartDo) FindByPage(offset int, limit int) (result []*model.ActivitySportChart, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activitySportChartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activitySportChartDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activitySportChartDo) Delete(models ...*model.ActivitySportChart) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activitySportChartDo) withDO(do gen.Dao) *activitySportChartDo {
	a.DO = *do.(*gen.DO)
	return a
}
