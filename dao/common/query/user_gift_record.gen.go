// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserGiftRecord(db *gorm.DB, opts ...gen.DOOption) userGiftRecord {
	_userGiftRecord := userGiftRecord{}

	_userGiftRecord.userGiftRecordDo.UseDB(db, opts...)
	_userGiftRecord.userGiftRecordDo.UseModel(&model.UserGiftRecord{})

	tableName := _userGiftRecord.userGiftRecordDo.TableName()
	_userGiftRecord.ALL = field.NewAsterisk(tableName)
	_userGiftRecord.ID = field.NewInt64(tableName, "id")
	_userGiftRecord.UserID = field.NewInt64(tableName, "user_id")
	_userGiftRecord.Account = field.NewString(tableName, "account")
	_userGiftRecord.RealName = field.NewString(tableName, "real_name")
	_userGiftRecord.Phone = field.NewString(tableName, "phone")
	_userGiftRecord.IP = field.NewString(tableName, "ip")
	_userGiftRecord.BankName = field.NewString(tableName, "bank_name")
	_userGiftRecord.BankCard = field.NewString(tableName, "bank_card")
	_userGiftRecord.GiftMoney = field.NewFloat64(tableName, "gift_money")
	_userGiftRecord.Type = field.NewInt64(tableName, "type")
	_userGiftRecord.Status = field.NewInt64(tableName, "status")
	_userGiftRecord.Plat = field.NewInt64(tableName, "plat")
	_userGiftRecord.ReceiveAt = field.NewField(tableName, "receive_at")
	_userGiftRecord.RegisterAt = field.NewField(tableName, "register_at")
	_userGiftRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userGiftRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userGiftRecord.fillFieldMap()

	return _userGiftRecord
}

// userGiftRecord 用户彩金领取记录
type userGiftRecord struct {
	userGiftRecordDo userGiftRecordDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64   // 用户id
	Account    field.String  // 账号
	RealName   field.String  // 真实姓名
	Phone      field.String  // 手机号
	IP         field.String  // ip
	BankName   field.String  // 开户行
	BankCard   field.String  // 银行卡
	GiftMoney  field.Float64 // 彩金
	Type       field.Int64   // 礼金类型, 1:新用户注册类礼金; 2:新注册时间内存款类,3:存款类,4:投注类
	Status     field.Int64   // 是领取 0:否;1:是
	Plat       field.Int64   // 平台
	ReceiveAt  field.Field   // 领取时间
	RegisterAt field.Field   // 注册时间
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (u userGiftRecord) Table(newTableName string) *userGiftRecord {
	u.userGiftRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGiftRecord) As(alias string) *userGiftRecord {
	u.userGiftRecordDo.DO = *(u.userGiftRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGiftRecord) updateTableName(table string) *userGiftRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Account = field.NewString(table, "account")
	u.RealName = field.NewString(table, "real_name")
	u.Phone = field.NewString(table, "phone")
	u.IP = field.NewString(table, "ip")
	u.BankName = field.NewString(table, "bank_name")
	u.BankCard = field.NewString(table, "bank_card")
	u.GiftMoney = field.NewFloat64(table, "gift_money")
	u.Type = field.NewInt64(table, "type")
	u.Status = field.NewInt64(table, "status")
	u.Plat = field.NewInt64(table, "plat")
	u.ReceiveAt = field.NewField(table, "receive_at")
	u.RegisterAt = field.NewField(table, "register_at")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGiftRecord) WithContext(ctx context.Context) IUserGiftRecordDo {
	return u.userGiftRecordDo.WithContext(ctx)
}

func (u userGiftRecord) TableName() string { return u.userGiftRecordDo.TableName() }

func (u userGiftRecord) Alias() string { return u.userGiftRecordDo.Alias() }

func (u userGiftRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userGiftRecordDo.Columns(cols...)
}

func (u *userGiftRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGiftRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 16)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["account"] = u.Account
	u.fieldMap["real_name"] = u.RealName
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["ip"] = u.IP
	u.fieldMap["bank_name"] = u.BankName
	u.fieldMap["bank_card"] = u.BankCard
	u.fieldMap["gift_money"] = u.GiftMoney
	u.fieldMap["type"] = u.Type
	u.fieldMap["status"] = u.Status
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["receive_at"] = u.ReceiveAt
	u.fieldMap["register_at"] = u.RegisterAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGiftRecord) clone(db *gorm.DB) userGiftRecord {
	u.userGiftRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGiftRecord) replaceDB(db *gorm.DB) userGiftRecord {
	u.userGiftRecordDo.ReplaceDB(db)
	return u
}

type userGiftRecordDo struct{ gen.DO }

type IUserGiftRecordDo interface {
	gen.SubQuery
	Debug() IUserGiftRecordDo
	WithContext(ctx context.Context) IUserGiftRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGiftRecordDo
	WriteDB() IUserGiftRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGiftRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGiftRecordDo
	Not(conds ...gen.Condition) IUserGiftRecordDo
	Or(conds ...gen.Condition) IUserGiftRecordDo
	Select(conds ...field.Expr) IUserGiftRecordDo
	Where(conds ...gen.Condition) IUserGiftRecordDo
	Order(conds ...field.Expr) IUserGiftRecordDo
	Distinct(cols ...field.Expr) IUserGiftRecordDo
	Omit(cols ...field.Expr) IUserGiftRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo
	Group(cols ...field.Expr) IUserGiftRecordDo
	Having(conds ...gen.Condition) IUserGiftRecordDo
	Limit(limit int) IUserGiftRecordDo
	Offset(offset int) IUserGiftRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGiftRecordDo
	Unscoped() IUserGiftRecordDo
	Create(values ...*model.UserGiftRecord) error
	CreateInBatches(values []*model.UserGiftRecord, batchSize int) error
	Save(values ...*model.UserGiftRecord) error
	First() (*model.UserGiftRecord, error)
	Take() (*model.UserGiftRecord, error)
	Last() (*model.UserGiftRecord, error)
	Find() ([]*model.UserGiftRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGiftRecord, err error)
	FindInBatches(result *[]*model.UserGiftRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGiftRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGiftRecordDo
	Assign(attrs ...field.AssignExpr) IUserGiftRecordDo
	Joins(fields ...field.RelationField) IUserGiftRecordDo
	Preload(fields ...field.RelationField) IUserGiftRecordDo
	FirstOrInit() (*model.UserGiftRecord, error)
	FirstOrCreate() (*model.UserGiftRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserGiftRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGiftRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGiftRecordDo) Debug() IUserGiftRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userGiftRecordDo) WithContext(ctx context.Context) IUserGiftRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGiftRecordDo) ReadDB() IUserGiftRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGiftRecordDo) WriteDB() IUserGiftRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGiftRecordDo) Session(config *gorm.Session) IUserGiftRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGiftRecordDo) Clauses(conds ...clause.Expression) IUserGiftRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGiftRecordDo) Returning(value interface{}, columns ...string) IUserGiftRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGiftRecordDo) Not(conds ...gen.Condition) IUserGiftRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGiftRecordDo) Or(conds ...gen.Condition) IUserGiftRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGiftRecordDo) Select(conds ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGiftRecordDo) Where(conds ...gen.Condition) IUserGiftRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGiftRecordDo) Order(conds ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGiftRecordDo) Distinct(cols ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGiftRecordDo) Omit(cols ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGiftRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGiftRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGiftRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGiftRecordDo) Group(cols ...field.Expr) IUserGiftRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGiftRecordDo) Having(conds ...gen.Condition) IUserGiftRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGiftRecordDo) Limit(limit int) IUserGiftRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGiftRecordDo) Offset(offset int) IUserGiftRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGiftRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGiftRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGiftRecordDo) Unscoped() IUserGiftRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGiftRecordDo) Create(values ...*model.UserGiftRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGiftRecordDo) CreateInBatches(values []*model.UserGiftRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGiftRecordDo) Save(values ...*model.UserGiftRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGiftRecordDo) First() (*model.UserGiftRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftRecord), nil
	}
}

func (u userGiftRecordDo) Take() (*model.UserGiftRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftRecord), nil
	}
}

func (u userGiftRecordDo) Last() (*model.UserGiftRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftRecord), nil
	}
}

func (u userGiftRecordDo) Find() ([]*model.UserGiftRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGiftRecord), err
}

func (u userGiftRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGiftRecord, err error) {
	buf := make([]*model.UserGiftRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGiftRecordDo) FindInBatches(result *[]*model.UserGiftRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGiftRecordDo) Attrs(attrs ...field.AssignExpr) IUserGiftRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGiftRecordDo) Assign(attrs ...field.AssignExpr) IUserGiftRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGiftRecordDo) Joins(fields ...field.RelationField) IUserGiftRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGiftRecordDo) Preload(fields ...field.RelationField) IUserGiftRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGiftRecordDo) FirstOrInit() (*model.UserGiftRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftRecord), nil
	}
}

func (u userGiftRecordDo) FirstOrCreate() (*model.UserGiftRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftRecord), nil
	}
}

func (u userGiftRecordDo) FindByPage(offset int, limit int) (result []*model.UserGiftRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGiftRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGiftRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGiftRecordDo) Delete(models ...*model.UserGiftRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGiftRecordDo) withDO(do gen.Dao) *userGiftRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
