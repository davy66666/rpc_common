// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserSuccessRechargeDatum(db *gorm.DB, opts ...gen.DOOption) userSuccessRechargeDatum {
	_userSuccessRechargeDatum := userSuccessRechargeDatum{}

	_userSuccessRechargeDatum.userSuccessRechargeDatumDo.UseDB(db, opts...)
	_userSuccessRechargeDatum.userSuccessRechargeDatumDo.UseModel(&model.UserSuccessRechargeDatum{})

	tableName := _userSuccessRechargeDatum.userSuccessRechargeDatumDo.TableName()
	_userSuccessRechargeDatum.ALL = field.NewAsterisk(tableName)
	_userSuccessRechargeDatum.ID = field.NewInt64(tableName, "id")
	_userSuccessRechargeDatum.UserID = field.NewInt64(tableName, "user_id")
	_userSuccessRechargeDatum.Username = field.NewString(tableName, "username")
	_userSuccessRechargeDatum.DateAt = field.NewTime(tableName, "date_at")
	_userSuccessRechargeDatum.YearValue = field.NewInt64(tableName, "year_value")
	_userSuccessRechargeDatum.UserLevel = field.NewInt64(tableName, "user_level")
	_userSuccessRechargeDatum.UserLevelName = field.NewString(tableName, "user_level_name")
	_userSuccessRechargeDatum.UserPayLevel = field.NewInt64(tableName, "user_pay_level")
	_userSuccessRechargeDatum.UserPayLevelName = field.NewString(tableName, "user_pay_level_name")
	_userSuccessRechargeDatum.Amount = field.NewFloat64(tableName, "amount")
	_userSuccessRechargeDatum.BillNo = field.NewString(tableName, "bill_no")
	_userSuccessRechargeDatum.LoginTime = field.NewField(tableName, "login_time")
	_userSuccessRechargeDatum.RechargeTime = field.NewField(tableName, "recharge_time")
	_userSuccessRechargeDatum.IsOnline = field.NewInt64(tableName, "is_online")
	_userSuccessRechargeDatum.IsCharge = field.NewInt64(tableName, "is_charge")
	_userSuccessRechargeDatum.BankType = field.NewInt64(tableName, "bank_type")
	_userSuccessRechargeDatum.PayType = field.NewString(tableName, "pay_type")
	_userSuccessRechargeDatum.RechargeChannelName = field.NewString(tableName, "recharge_channel_name")
	_userSuccessRechargeDatum.RechargeSubChannelName = field.NewString(tableName, "recharge_sub_channel_name")
	_userSuccessRechargeDatum.LoginAreaProvince = field.NewString(tableName, "login_area_province")
	_userSuccessRechargeDatum.LoginAreaCity = field.NewString(tableName, "login_area_city")
	_userSuccessRechargeDatum.LoginAreaCounty = field.NewString(tableName, "login_area_county")
	_userSuccessRechargeDatum.DirectAgent = field.NewString(tableName, "direct_agent")
	_userSuccessRechargeDatum.DirectGeneralAgent = field.NewString(tableName, "direct_general_agent")
	_userSuccessRechargeDatum.IsFirstCharge = field.NewInt64(tableName, "is_first_charge")
	_userSuccessRechargeDatum.RechargeClickNum = field.NewInt64(tableName, "recharge_click_num")
	_userSuccessRechargeDatum.CreatedAt = field.NewField(tableName, "created_at")
	_userSuccessRechargeDatum.UpdatedAt = field.NewField(tableName, "updated_at")
	_userSuccessRechargeDatum.OldID = field.NewInt64(tableName, "old_id")
	_userSuccessRechargeDatum.IsNormal = field.NewInt64(tableName, "is_normal")

	_userSuccessRechargeDatum.fillFieldMap()

	return _userSuccessRechargeDatum
}

// userSuccessRechargeDatum 用户充值成功明细数据表
type userSuccessRechargeDatum struct {
	userSuccessRechargeDatumDo userSuccessRechargeDatumDo

	ALL                    field.Asterisk
	ID                     field.Int64   // 自增id
	UserID                 field.Int64   // 用户id
	Username               field.String  // 用户名
	DateAt                 field.Time    // 时间date
	YearValue              field.Int64   // 年度
	UserLevel              field.Int64   // 用户vip等级level(例如4,5,6)
	UserLevelName          field.String  // 用户vip层级名称
	UserPayLevel           field.Int64   // 用户支付层级ID 对应pay_levels表id
	UserPayLevelName       field.String  // 用户支付层级名称
	Amount                 field.Float64 // 充值金额
	BillNo                 field.String  // 订单号
	LoginTime              field.Field   // 登录时间
	RechargeTime           field.Field   // 充值时间
	IsOnline               field.Int64   // 0:线下, 1:线上
	IsCharge               field.Int64   // 0:未充值, 1:已充值
	BankType               field.Int64   // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	PayType                field.String  // pay_types表中的en_name
	RechargeChannelName    field.String  // 充值渠道名称
	RechargeSubChannelName field.String  // 充值子渠道名称
	LoginAreaProvince      field.String  // 登录省地址
	LoginAreaCity          field.String  // 登录市地址
	LoginAreaCounty        field.String  // 登录县地址
	DirectAgent            field.String  // 所属直属代理
	DirectGeneralAgent     field.String  // 所属总代理
	IsFirstCharge          field.Int64   // 是否第一次充值,0:否,1:是,
	RechargeClickNum       field.Int64   // 充值路径点击次数
	CreatedAt              field.Field   // 记录创建时间
	UpdatedAt              field.Field   // 记录更新时间
	OldID                  field.Int64   // 旧表的id
	IsNormal               field.Int64   // 0:网银转账,1:非网银转账

	fieldMap map[string]field.Expr
}

func (u userSuccessRechargeDatum) Table(newTableName string) *userSuccessRechargeDatum {
	u.userSuccessRechargeDatumDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSuccessRechargeDatum) As(alias string) *userSuccessRechargeDatum {
	u.userSuccessRechargeDatumDo.DO = *(u.userSuccessRechargeDatumDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSuccessRechargeDatum) updateTableName(table string) *userSuccessRechargeDatum {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.DateAt = field.NewTime(table, "date_at")
	u.YearValue = field.NewInt64(table, "year_value")
	u.UserLevel = field.NewInt64(table, "user_level")
	u.UserLevelName = field.NewString(table, "user_level_name")
	u.UserPayLevel = field.NewInt64(table, "user_pay_level")
	u.UserPayLevelName = field.NewString(table, "user_pay_level_name")
	u.Amount = field.NewFloat64(table, "amount")
	u.BillNo = field.NewString(table, "bill_no")
	u.LoginTime = field.NewField(table, "login_time")
	u.RechargeTime = field.NewField(table, "recharge_time")
	u.IsOnline = field.NewInt64(table, "is_online")
	u.IsCharge = field.NewInt64(table, "is_charge")
	u.BankType = field.NewInt64(table, "bank_type")
	u.PayType = field.NewString(table, "pay_type")
	u.RechargeChannelName = field.NewString(table, "recharge_channel_name")
	u.RechargeSubChannelName = field.NewString(table, "recharge_sub_channel_name")
	u.LoginAreaProvince = field.NewString(table, "login_area_province")
	u.LoginAreaCity = field.NewString(table, "login_area_city")
	u.LoginAreaCounty = field.NewString(table, "login_area_county")
	u.DirectAgent = field.NewString(table, "direct_agent")
	u.DirectGeneralAgent = field.NewString(table, "direct_general_agent")
	u.IsFirstCharge = field.NewInt64(table, "is_first_charge")
	u.RechargeClickNum = field.NewInt64(table, "recharge_click_num")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.OldID = field.NewInt64(table, "old_id")
	u.IsNormal = field.NewInt64(table, "is_normal")

	u.fillFieldMap()

	return u
}

func (u *userSuccessRechargeDatum) WithContext(ctx context.Context) IUserSuccessRechargeDatumDo {
	return u.userSuccessRechargeDatumDo.WithContext(ctx)
}

func (u userSuccessRechargeDatum) TableName() string { return u.userSuccessRechargeDatumDo.TableName() }

func (u userSuccessRechargeDatum) Alias() string { return u.userSuccessRechargeDatumDo.Alias() }

func (u userSuccessRechargeDatum) Columns(cols ...field.Expr) gen.Columns {
	return u.userSuccessRechargeDatumDo.Columns(cols...)
}

func (u *userSuccessRechargeDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSuccessRechargeDatum) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 30)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["year_value"] = u.YearValue
	u.fieldMap["user_level"] = u.UserLevel
	u.fieldMap["user_level_name"] = u.UserLevelName
	u.fieldMap["user_pay_level"] = u.UserPayLevel
	u.fieldMap["user_pay_level_name"] = u.UserPayLevelName
	u.fieldMap["amount"] = u.Amount
	u.fieldMap["bill_no"] = u.BillNo
	u.fieldMap["login_time"] = u.LoginTime
	u.fieldMap["recharge_time"] = u.RechargeTime
	u.fieldMap["is_online"] = u.IsOnline
	u.fieldMap["is_charge"] = u.IsCharge
	u.fieldMap["bank_type"] = u.BankType
	u.fieldMap["pay_type"] = u.PayType
	u.fieldMap["recharge_channel_name"] = u.RechargeChannelName
	u.fieldMap["recharge_sub_channel_name"] = u.RechargeSubChannelName
	u.fieldMap["login_area_province"] = u.LoginAreaProvince
	u.fieldMap["login_area_city"] = u.LoginAreaCity
	u.fieldMap["login_area_county"] = u.LoginAreaCounty
	u.fieldMap["direct_agent"] = u.DirectAgent
	u.fieldMap["direct_general_agent"] = u.DirectGeneralAgent
	u.fieldMap["is_first_charge"] = u.IsFirstCharge
	u.fieldMap["recharge_click_num"] = u.RechargeClickNum
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["old_id"] = u.OldID
	u.fieldMap["is_normal"] = u.IsNormal
}

func (u userSuccessRechargeDatum) clone(db *gorm.DB) userSuccessRechargeDatum {
	u.userSuccessRechargeDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSuccessRechargeDatum) replaceDB(db *gorm.DB) userSuccessRechargeDatum {
	u.userSuccessRechargeDatumDo.ReplaceDB(db)
	return u
}

type userSuccessRechargeDatumDo struct{ gen.DO }

type IUserSuccessRechargeDatumDo interface {
	gen.SubQuery
	Debug() IUserSuccessRechargeDatumDo
	WithContext(ctx context.Context) IUserSuccessRechargeDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSuccessRechargeDatumDo
	WriteDB() IUserSuccessRechargeDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSuccessRechargeDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSuccessRechargeDatumDo
	Not(conds ...gen.Condition) IUserSuccessRechargeDatumDo
	Or(conds ...gen.Condition) IUserSuccessRechargeDatumDo
	Select(conds ...field.Expr) IUserSuccessRechargeDatumDo
	Where(conds ...gen.Condition) IUserSuccessRechargeDatumDo
	Order(conds ...field.Expr) IUserSuccessRechargeDatumDo
	Distinct(cols ...field.Expr) IUserSuccessRechargeDatumDo
	Omit(cols ...field.Expr) IUserSuccessRechargeDatumDo
	Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo
	Group(cols ...field.Expr) IUserSuccessRechargeDatumDo
	Having(conds ...gen.Condition) IUserSuccessRechargeDatumDo
	Limit(limit int) IUserSuccessRechargeDatumDo
	Offset(offset int) IUserSuccessRechargeDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeDatumDo
	Unscoped() IUserSuccessRechargeDatumDo
	Create(values ...*model.UserSuccessRechargeDatum) error
	CreateInBatches(values []*model.UserSuccessRechargeDatum, batchSize int) error
	Save(values ...*model.UserSuccessRechargeDatum) error
	First() (*model.UserSuccessRechargeDatum, error)
	Take() (*model.UserSuccessRechargeDatum, error)
	Last() (*model.UserSuccessRechargeDatum, error)
	Find() ([]*model.UserSuccessRechargeDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeDatum, err error)
	FindInBatches(result *[]*model.UserSuccessRechargeDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSuccessRechargeDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeDatumDo
	Assign(attrs ...field.AssignExpr) IUserSuccessRechargeDatumDo
	Joins(fields ...field.RelationField) IUserSuccessRechargeDatumDo
	Preload(fields ...field.RelationField) IUserSuccessRechargeDatumDo
	FirstOrInit() (*model.UserSuccessRechargeDatum, error)
	FirstOrCreate() (*model.UserSuccessRechargeDatum, error)
	FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSuccessRechargeDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSuccessRechargeDatumDo) Debug() IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Debug())
}

func (u userSuccessRechargeDatumDo) WithContext(ctx context.Context) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSuccessRechargeDatumDo) ReadDB() IUserSuccessRechargeDatumDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSuccessRechargeDatumDo) WriteDB() IUserSuccessRechargeDatumDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSuccessRechargeDatumDo) Session(config *gorm.Session) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSuccessRechargeDatumDo) Clauses(conds ...clause.Expression) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSuccessRechargeDatumDo) Returning(value interface{}, columns ...string) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSuccessRechargeDatumDo) Not(conds ...gen.Condition) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSuccessRechargeDatumDo) Or(conds ...gen.Condition) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSuccessRechargeDatumDo) Select(conds ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSuccessRechargeDatumDo) Where(conds ...gen.Condition) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSuccessRechargeDatumDo) Order(conds ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSuccessRechargeDatumDo) Distinct(cols ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSuccessRechargeDatumDo) Omit(cols ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSuccessRechargeDatumDo) Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSuccessRechargeDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSuccessRechargeDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSuccessRechargeDatumDo) Group(cols ...field.Expr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSuccessRechargeDatumDo) Having(conds ...gen.Condition) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSuccessRechargeDatumDo) Limit(limit int) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSuccessRechargeDatumDo) Offset(offset int) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSuccessRechargeDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSuccessRechargeDatumDo) Unscoped() IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSuccessRechargeDatumDo) Create(values ...*model.UserSuccessRechargeDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSuccessRechargeDatumDo) CreateInBatches(values []*model.UserSuccessRechargeDatum, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSuccessRechargeDatumDo) Save(values ...*model.UserSuccessRechargeDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSuccessRechargeDatumDo) First() (*model.UserSuccessRechargeDatum, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeDatum), nil
	}
}

func (u userSuccessRechargeDatumDo) Take() (*model.UserSuccessRechargeDatum, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeDatum), nil
	}
}

func (u userSuccessRechargeDatumDo) Last() (*model.UserSuccessRechargeDatum, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeDatum), nil
	}
}

func (u userSuccessRechargeDatumDo) Find() ([]*model.UserSuccessRechargeDatum, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSuccessRechargeDatum), err
}

func (u userSuccessRechargeDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeDatum, err error) {
	buf := make([]*model.UserSuccessRechargeDatum, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSuccessRechargeDatumDo) FindInBatches(result *[]*model.UserSuccessRechargeDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSuccessRechargeDatumDo) Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSuccessRechargeDatumDo) Assign(attrs ...field.AssignExpr) IUserSuccessRechargeDatumDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSuccessRechargeDatumDo) Joins(fields ...field.RelationField) IUserSuccessRechargeDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSuccessRechargeDatumDo) Preload(fields ...field.RelationField) IUserSuccessRechargeDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSuccessRechargeDatumDo) FirstOrInit() (*model.UserSuccessRechargeDatum, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeDatum), nil
	}
}

func (u userSuccessRechargeDatumDo) FirstOrCreate() (*model.UserSuccessRechargeDatum, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeDatum), nil
	}
}

func (u userSuccessRechargeDatumDo) FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeDatum, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSuccessRechargeDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSuccessRechargeDatumDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSuccessRechargeDatumDo) Delete(models ...*model.UserSuccessRechargeDatum) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSuccessRechargeDatumDo) withDO(do gen.Dao) *userSuccessRechargeDatumDo {
	u.DO = *do.(*gen.DO)
	return u
}
