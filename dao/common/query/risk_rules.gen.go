// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskRule(db *gorm.DB, opts ...gen.DOOption) riskRule {
	_riskRule := riskRule{}

	_riskRule.riskRuleDo.UseDB(db, opts...)
	_riskRule.riskRuleDo.UseModel(&model.RiskRule{})

	tableName := _riskRule.riskRuleDo.TableName()
	_riskRule.ALL = field.NewAsterisk(tableName)
	_riskRule.ID = field.NewInt64(tableName, "id")
	_riskRule.RuleTypeID = field.NewInt64(tableName, "rule_type_id")
	_riskRule.RuleID = field.NewInt64(tableName, "rule_id")
	_riskRule.RuleName = field.NewString(tableName, "rule_name")
	_riskRule.AdminName = field.NewString(tableName, "admin_name")
	_riskRule.CreatedAt = field.NewField(tableName, "created_at")
	_riskRule.UpdatedAt = field.NewField(tableName, "updated_at")
	_riskRule.Type = field.NewInt64(tableName, "type")
	_riskRule.RuleTypeChildID = field.NewInt64(tableName, "rule_type_child_id")

	_riskRule.fillFieldMap()

	return _riskRule
}

// riskRule 规则
type riskRule struct {
	riskRuleDo riskRuleDo

	ALL             field.Asterisk
	ID              field.Int64
	RuleTypeID      field.Int64  // 类型id
	RuleID          field.Int64  // 规则id
	RuleName        field.String // 规则名称
	AdminName       field.String // 操作人
	CreatedAt       field.Field
	UpdatedAt       field.Field
	Type            field.Int64 // 类型 1：优惠 2：提款
	RuleTypeChildID field.Int64 // 子类型id

	fieldMap map[string]field.Expr
}

func (r riskRule) Table(newTableName string) *riskRule {
	r.riskRuleDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskRule) As(alias string) *riskRule {
	r.riskRuleDo.DO = *(r.riskRuleDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskRule) updateTableName(table string) *riskRule {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RuleTypeID = field.NewInt64(table, "rule_type_id")
	r.RuleID = field.NewInt64(table, "rule_id")
	r.RuleName = field.NewString(table, "rule_name")
	r.AdminName = field.NewString(table, "admin_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.Type = field.NewInt64(table, "type")
	r.RuleTypeChildID = field.NewInt64(table, "rule_type_child_id")

	r.fillFieldMap()

	return r
}

func (r *riskRule) WithContext(ctx context.Context) IRiskRuleDo { return r.riskRuleDo.WithContext(ctx) }

func (r riskRule) TableName() string { return r.riskRuleDo.TableName() }

func (r riskRule) Alias() string { return r.riskRuleDo.Alias() }

func (r riskRule) Columns(cols ...field.Expr) gen.Columns { return r.riskRuleDo.Columns(cols...) }

func (r *riskRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskRule) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["rule_type_id"] = r.RuleTypeID
	r.fieldMap["rule_id"] = r.RuleID
	r.fieldMap["rule_name"] = r.RuleName
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["type"] = r.Type
	r.fieldMap["rule_type_child_id"] = r.RuleTypeChildID
}

func (r riskRule) clone(db *gorm.DB) riskRule {
	r.riskRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskRule) replaceDB(db *gorm.DB) riskRule {
	r.riskRuleDo.ReplaceDB(db)
	return r
}

type riskRuleDo struct{ gen.DO }

type IRiskRuleDo interface {
	gen.SubQuery
	Debug() IRiskRuleDo
	WithContext(ctx context.Context) IRiskRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskRuleDo
	WriteDB() IRiskRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskRuleDo
	Not(conds ...gen.Condition) IRiskRuleDo
	Or(conds ...gen.Condition) IRiskRuleDo
	Select(conds ...field.Expr) IRiskRuleDo
	Where(conds ...gen.Condition) IRiskRuleDo
	Order(conds ...field.Expr) IRiskRuleDo
	Distinct(cols ...field.Expr) IRiskRuleDo
	Omit(cols ...field.Expr) IRiskRuleDo
	Join(table schema.Tabler, on ...field.Expr) IRiskRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleDo
	Group(cols ...field.Expr) IRiskRuleDo
	Having(conds ...gen.Condition) IRiskRuleDo
	Limit(limit int) IRiskRuleDo
	Offset(offset int) IRiskRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleDo
	Unscoped() IRiskRuleDo
	Create(values ...*model.RiskRule) error
	CreateInBatches(values []*model.RiskRule, batchSize int) error
	Save(values ...*model.RiskRule) error
	First() (*model.RiskRule, error)
	Take() (*model.RiskRule, error)
	Last() (*model.RiskRule, error)
	Find() ([]*model.RiskRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRule, err error)
	FindInBatches(result *[]*model.RiskRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskRuleDo
	Assign(attrs ...field.AssignExpr) IRiskRuleDo
	Joins(fields ...field.RelationField) IRiskRuleDo
	Preload(fields ...field.RelationField) IRiskRuleDo
	FirstOrInit() (*model.RiskRule, error)
	FirstOrCreate() (*model.RiskRule, error)
	FindByPage(offset int, limit int) (result []*model.RiskRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskRuleDo) Debug() IRiskRuleDo {
	return r.withDO(r.DO.Debug())
}

func (r riskRuleDo) WithContext(ctx context.Context) IRiskRuleDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskRuleDo) ReadDB() IRiskRuleDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskRuleDo) WriteDB() IRiskRuleDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskRuleDo) Session(config *gorm.Session) IRiskRuleDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskRuleDo) Clauses(conds ...clause.Expression) IRiskRuleDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskRuleDo) Returning(value interface{}, columns ...string) IRiskRuleDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskRuleDo) Not(conds ...gen.Condition) IRiskRuleDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskRuleDo) Or(conds ...gen.Condition) IRiskRuleDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskRuleDo) Select(conds ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskRuleDo) Where(conds ...gen.Condition) IRiskRuleDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskRuleDo) Order(conds ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskRuleDo) Distinct(cols ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskRuleDo) Omit(cols ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskRuleDo) Join(table schema.Tabler, on ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskRuleDo) Group(cols ...field.Expr) IRiskRuleDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskRuleDo) Having(conds ...gen.Condition) IRiskRuleDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskRuleDo) Limit(limit int) IRiskRuleDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskRuleDo) Offset(offset int) IRiskRuleDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskRuleDo) Unscoped() IRiskRuleDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskRuleDo) Create(values ...*model.RiskRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskRuleDo) CreateInBatches(values []*model.RiskRule, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskRuleDo) Save(values ...*model.RiskRule) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskRuleDo) First() (*model.RiskRule, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRule), nil
	}
}

func (r riskRuleDo) Take() (*model.RiskRule, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRule), nil
	}
}

func (r riskRuleDo) Last() (*model.RiskRule, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRule), nil
	}
}

func (r riskRuleDo) Find() ([]*model.RiskRule, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskRule), err
}

func (r riskRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRule, err error) {
	buf := make([]*model.RiskRule, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskRuleDo) FindInBatches(result *[]*model.RiskRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskRuleDo) Attrs(attrs ...field.AssignExpr) IRiskRuleDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskRuleDo) Assign(attrs ...field.AssignExpr) IRiskRuleDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskRuleDo) Joins(fields ...field.RelationField) IRiskRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskRuleDo) Preload(fields ...field.RelationField) IRiskRuleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskRuleDo) FirstOrInit() (*model.RiskRule, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRule), nil
	}
}

func (r riskRuleDo) FirstOrCreate() (*model.RiskRule, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRule), nil
	}
}

func (r riskRuleDo) FindByPage(offset int, limit int) (result []*model.RiskRule, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskRuleDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskRuleDo) Delete(models ...*model.RiskRule) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskRuleDo) withDO(do gen.Dao) *riskRuleDo {
	r.DO = *do.(*gen.DO)
	return r
}
