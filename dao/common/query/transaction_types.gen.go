// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransactionType(db *gorm.DB, opts ...gen.DOOption) transactionType {
	_transactionType := transactionType{}

	_transactionType.transactionTypeDo.UseDB(db, opts...)
	_transactionType.transactionTypeDo.UseModel(&model.TransactionType{})

	tableName := _transactionType.transactionTypeDo.TableName()
	_transactionType.ALL = field.NewAsterisk(tableName)
	_transactionType.ID = field.NewInt64(tableName, "id")
	_transactionType.ParentID = field.NewInt64(tableName, "parent_id")
	_transactionType.CnTitle = field.NewString(tableName, "cn_title")
	_transactionType.EnTitle = field.NewString(tableName, "en_title")
	_transactionType.Description = field.NewString(tableName, "description")
	_transactionType.Amount = field.NewInt64(tableName, "amount")
	_transactionType.Deposit = field.NewInt64(tableName, "deposit")
	_transactionType.DepositTimes = field.NewInt64(tableName, "deposit_times")
	_transactionType.Withdraw = field.NewInt64(tableName, "withdraw")
	_transactionType.WithdrawTimes = field.NewInt64(tableName, "withdraw_times")
	_transactionType.TodayProfit = field.NewInt64(tableName, "today_profit")
	_transactionType.BetAmount = field.NewInt64(tableName, "bet_amount")
	_transactionType.Tuijian = field.NewInt64(tableName, "tuijian")
	_transactionType.AgentYongjin = field.NewInt64(tableName, "agent_yongjin")
	_transactionType.IncomeMaxLimit = field.NewInt64(tableName, "income_max_limit")
	_transactionType.PayLevel = field.NewInt64(tableName, "pay_level")
	_transactionType.IsOpen = field.NewInt64(tableName, "is_open")
	_transactionType.CreatedAt = field.NewField(tableName, "created_at")
	_transactionType.UpdatedAt = field.NewField(tableName, "updated_at")

	_transactionType.fillFieldMap()

	return _transactionType
}

type transactionType struct {
	transactionTypeDo transactionTypeDo

	ALL            field.Asterisk
	ID             field.Int64
	ParentID       field.Int64
	CnTitle        field.String
	EnTitle        field.String
	Description    field.String
	Amount         field.Int64
	Deposit        field.Int64 // 充值
	DepositTimes   field.Int64 // 总的充值次数
	Withdraw       field.Int64 // 提款
	WithdrawTimes  field.Int64 // 总的提款次数
	TodayProfit    field.Int64 // 0:不统计今日盈亏;1:统计今日盈亏
	BetAmount      field.Int64 // 0:不统计打码;1:统计打码
	Tuijian        field.Int64 // 推荐奖励
	AgentYongjin   field.Int64 // 是否统计代理佣金0:否；1：统计
	IncomeMaxLimit field.Int64 // 充值时单笔限额
	PayLevel       field.Int64 // 是否需要判断支付层级升级
	IsOpen         field.Int64 // 是否开启0:否1：是
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t transactionType) Table(newTableName string) *transactionType {
	t.transactionTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionType) As(alias string) *transactionType {
	t.transactionTypeDo.DO = *(t.transactionTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionType) updateTableName(table string) *transactionType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ParentID = field.NewInt64(table, "parent_id")
	t.CnTitle = field.NewString(table, "cn_title")
	t.EnTitle = field.NewString(table, "en_title")
	t.Description = field.NewString(table, "description")
	t.Amount = field.NewInt64(table, "amount")
	t.Deposit = field.NewInt64(table, "deposit")
	t.DepositTimes = field.NewInt64(table, "deposit_times")
	t.Withdraw = field.NewInt64(table, "withdraw")
	t.WithdrawTimes = field.NewInt64(table, "withdraw_times")
	t.TodayProfit = field.NewInt64(table, "today_profit")
	t.BetAmount = field.NewInt64(table, "bet_amount")
	t.Tuijian = field.NewInt64(table, "tuijian")
	t.AgentYongjin = field.NewInt64(table, "agent_yongjin")
	t.IncomeMaxLimit = field.NewInt64(table, "income_max_limit")
	t.PayLevel = field.NewInt64(table, "pay_level")
	t.IsOpen = field.NewInt64(table, "is_open")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactionType) WithContext(ctx context.Context) ITransactionTypeDo {
	return t.transactionTypeDo.WithContext(ctx)
}

func (t transactionType) TableName() string { return t.transactionTypeDo.TableName() }

func (t transactionType) Alias() string { return t.transactionTypeDo.Alias() }

func (t transactionType) Columns(cols ...field.Expr) gen.Columns {
	return t.transactionTypeDo.Columns(cols...)
}

func (t *transactionType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.ID
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["cn_title"] = t.CnTitle
	t.fieldMap["en_title"] = t.EnTitle
	t.fieldMap["description"] = t.Description
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["deposit"] = t.Deposit
	t.fieldMap["deposit_times"] = t.DepositTimes
	t.fieldMap["withdraw"] = t.Withdraw
	t.fieldMap["withdraw_times"] = t.WithdrawTimes
	t.fieldMap["today_profit"] = t.TodayProfit
	t.fieldMap["bet_amount"] = t.BetAmount
	t.fieldMap["tuijian"] = t.Tuijian
	t.fieldMap["agent_yongjin"] = t.AgentYongjin
	t.fieldMap["income_max_limit"] = t.IncomeMaxLimit
	t.fieldMap["pay_level"] = t.PayLevel
	t.fieldMap["is_open"] = t.IsOpen
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactionType) clone(db *gorm.DB) transactionType {
	t.transactionTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionType) replaceDB(db *gorm.DB) transactionType {
	t.transactionTypeDo.ReplaceDB(db)
	return t
}

type transactionTypeDo struct{ gen.DO }

type ITransactionTypeDo interface {
	gen.SubQuery
	Debug() ITransactionTypeDo
	WithContext(ctx context.Context) ITransactionTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionTypeDo
	WriteDB() ITransactionTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionTypeDo
	Not(conds ...gen.Condition) ITransactionTypeDo
	Or(conds ...gen.Condition) ITransactionTypeDo
	Select(conds ...field.Expr) ITransactionTypeDo
	Where(conds ...gen.Condition) ITransactionTypeDo
	Order(conds ...field.Expr) ITransactionTypeDo
	Distinct(cols ...field.Expr) ITransactionTypeDo
	Omit(cols ...field.Expr) ITransactionTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionTypeDo
	Group(cols ...field.Expr) ITransactionTypeDo
	Having(conds ...gen.Condition) ITransactionTypeDo
	Limit(limit int) ITransactionTypeDo
	Offset(offset int) ITransactionTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionTypeDo
	Unscoped() ITransactionTypeDo
	Create(values ...*model.TransactionType) error
	CreateInBatches(values []*model.TransactionType, batchSize int) error
	Save(values ...*model.TransactionType) error
	First() (*model.TransactionType, error)
	Take() (*model.TransactionType, error)
	Last() (*model.TransactionType, error)
	Find() ([]*model.TransactionType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionType, err error)
	FindInBatches(result *[]*model.TransactionType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionTypeDo
	Assign(attrs ...field.AssignExpr) ITransactionTypeDo
	Joins(fields ...field.RelationField) ITransactionTypeDo
	Preload(fields ...field.RelationField) ITransactionTypeDo
	FirstOrInit() (*model.TransactionType, error)
	FirstOrCreate() (*model.TransactionType, error)
	FindByPage(offset int, limit int) (result []*model.TransactionType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionTypeDo) Debug() ITransactionTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionTypeDo) WithContext(ctx context.Context) ITransactionTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionTypeDo) ReadDB() ITransactionTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionTypeDo) WriteDB() ITransactionTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionTypeDo) Session(config *gorm.Session) ITransactionTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionTypeDo) Clauses(conds ...clause.Expression) ITransactionTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionTypeDo) Returning(value interface{}, columns ...string) ITransactionTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionTypeDo) Not(conds ...gen.Condition) ITransactionTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionTypeDo) Or(conds ...gen.Condition) ITransactionTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionTypeDo) Select(conds ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionTypeDo) Where(conds ...gen.Condition) ITransactionTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionTypeDo) Order(conds ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionTypeDo) Distinct(cols ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionTypeDo) Omit(cols ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionTypeDo) Join(table schema.Tabler, on ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionTypeDo) Group(cols ...field.Expr) ITransactionTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionTypeDo) Having(conds ...gen.Condition) ITransactionTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionTypeDo) Limit(limit int) ITransactionTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionTypeDo) Offset(offset int) ITransactionTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionTypeDo) Unscoped() ITransactionTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionTypeDo) Create(values ...*model.TransactionType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionTypeDo) CreateInBatches(values []*model.TransactionType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionTypeDo) Save(values ...*model.TransactionType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionTypeDo) First() (*model.TransactionType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionType), nil
	}
}

func (t transactionTypeDo) Take() (*model.TransactionType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionType), nil
	}
}

func (t transactionTypeDo) Last() (*model.TransactionType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionType), nil
	}
}

func (t transactionTypeDo) Find() ([]*model.TransactionType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionType), err
}

func (t transactionTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionType, err error) {
	buf := make([]*model.TransactionType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionTypeDo) FindInBatches(result *[]*model.TransactionType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionTypeDo) Attrs(attrs ...field.AssignExpr) ITransactionTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionTypeDo) Assign(attrs ...field.AssignExpr) ITransactionTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionTypeDo) Joins(fields ...field.RelationField) ITransactionTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionTypeDo) Preload(fields ...field.RelationField) ITransactionTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionTypeDo) FirstOrInit() (*model.TransactionType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionType), nil
	}
}

func (t transactionTypeDo) FirstOrCreate() (*model.TransactionType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionType), nil
	}
}

func (t transactionTypeDo) FindByPage(offset int, limit int) (result []*model.TransactionType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionTypeDo) Delete(models ...*model.TransactionType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionTypeDo) withDO(do gen.Dao) *transactionTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
