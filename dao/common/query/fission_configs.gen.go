// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFissionConfig(db *gorm.DB, opts ...gen.DOOption) fissionConfig {
	_fissionConfig := fissionConfig{}

	_fissionConfig.fissionConfigDo.UseDB(db, opts...)
	_fissionConfig.fissionConfigDo.UseModel(&model.FissionConfig{})

	tableName := _fissionConfig.fissionConfigDo.TableName()
	_fissionConfig.ALL = field.NewAsterisk(tableName)
	_fissionConfig.ID = field.NewInt64(tableName, "id")
	_fissionConfig.SeriesID = field.NewInt64(tableName, "series_id")
	_fissionConfig.SeriesName = field.NewString(tableName, "series_name")
	_fissionConfig.RebateRate = field.NewString(tableName, "rebate_rate")
	_fissionConfig.AdminUser = field.NewString(tableName, "admin_user")
	_fissionConfig.CreatedAt = field.NewField(tableName, "created_at")
	_fissionConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_fissionConfig.fillFieldMap()

	return _fissionConfig
}

// fissionConfig 裂变配置
type fissionConfig struct {
	fissionConfigDo fissionConfigDo

	ALL        field.Asterisk
	ID         field.Int64
	SeriesID   field.Int64  // 游戏分类id
	SeriesName field.String // 游戏分类name
	RebateRate field.String // 返佣比例
	AdminUser  field.String // 操作人
	CreatedAt  field.Field  // 添加时间
	UpdatedAt  field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fissionConfig) Table(newTableName string) *fissionConfig {
	f.fissionConfigDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fissionConfig) As(alias string) *fissionConfig {
	f.fissionConfigDo.DO = *(f.fissionConfigDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fissionConfig) updateTableName(table string) *fissionConfig {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.SeriesID = field.NewInt64(table, "series_id")
	f.SeriesName = field.NewString(table, "series_name")
	f.RebateRate = field.NewString(table, "rebate_rate")
	f.AdminUser = field.NewString(table, "admin_user")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fissionConfig) WithContext(ctx context.Context) IFissionConfigDo {
	return f.fissionConfigDo.WithContext(ctx)
}

func (f fissionConfig) TableName() string { return f.fissionConfigDo.TableName() }

func (f fissionConfig) Alias() string { return f.fissionConfigDo.Alias() }

func (f fissionConfig) Columns(cols ...field.Expr) gen.Columns {
	return f.fissionConfigDo.Columns(cols...)
}

func (f *fissionConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fissionConfig) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["series_id"] = f.SeriesID
	f.fieldMap["series_name"] = f.SeriesName
	f.fieldMap["rebate_rate"] = f.RebateRate
	f.fieldMap["admin_user"] = f.AdminUser
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fissionConfig) clone(db *gorm.DB) fissionConfig {
	f.fissionConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fissionConfig) replaceDB(db *gorm.DB) fissionConfig {
	f.fissionConfigDo.ReplaceDB(db)
	return f
}

type fissionConfigDo struct{ gen.DO }

type IFissionConfigDo interface {
	gen.SubQuery
	Debug() IFissionConfigDo
	WithContext(ctx context.Context) IFissionConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFissionConfigDo
	WriteDB() IFissionConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFissionConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFissionConfigDo
	Not(conds ...gen.Condition) IFissionConfigDo
	Or(conds ...gen.Condition) IFissionConfigDo
	Select(conds ...field.Expr) IFissionConfigDo
	Where(conds ...gen.Condition) IFissionConfigDo
	Order(conds ...field.Expr) IFissionConfigDo
	Distinct(cols ...field.Expr) IFissionConfigDo
	Omit(cols ...field.Expr) IFissionConfigDo
	Join(table schema.Tabler, on ...field.Expr) IFissionConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFissionConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFissionConfigDo
	Group(cols ...field.Expr) IFissionConfigDo
	Having(conds ...gen.Condition) IFissionConfigDo
	Limit(limit int) IFissionConfigDo
	Offset(offset int) IFissionConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionConfigDo
	Unscoped() IFissionConfigDo
	Create(values ...*model.FissionConfig) error
	CreateInBatches(values []*model.FissionConfig, batchSize int) error
	Save(values ...*model.FissionConfig) error
	First() (*model.FissionConfig, error)
	Take() (*model.FissionConfig, error)
	Last() (*model.FissionConfig, error)
	Find() ([]*model.FissionConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionConfig, err error)
	FindInBatches(result *[]*model.FissionConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FissionConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFissionConfigDo
	Assign(attrs ...field.AssignExpr) IFissionConfigDo
	Joins(fields ...field.RelationField) IFissionConfigDo
	Preload(fields ...field.RelationField) IFissionConfigDo
	FirstOrInit() (*model.FissionConfig, error)
	FirstOrCreate() (*model.FissionConfig, error)
	FindByPage(offset int, limit int) (result []*model.FissionConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFissionConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fissionConfigDo) Debug() IFissionConfigDo {
	return f.withDO(f.DO.Debug())
}

func (f fissionConfigDo) WithContext(ctx context.Context) IFissionConfigDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fissionConfigDo) ReadDB() IFissionConfigDo {
	return f.Clauses(dbresolver.Read)
}

func (f fissionConfigDo) WriteDB() IFissionConfigDo {
	return f.Clauses(dbresolver.Write)
}

func (f fissionConfigDo) Session(config *gorm.Session) IFissionConfigDo {
	return f.withDO(f.DO.Session(config))
}

func (f fissionConfigDo) Clauses(conds ...clause.Expression) IFissionConfigDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fissionConfigDo) Returning(value interface{}, columns ...string) IFissionConfigDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fissionConfigDo) Not(conds ...gen.Condition) IFissionConfigDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fissionConfigDo) Or(conds ...gen.Condition) IFissionConfigDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fissionConfigDo) Select(conds ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fissionConfigDo) Where(conds ...gen.Condition) IFissionConfigDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fissionConfigDo) Order(conds ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fissionConfigDo) Distinct(cols ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fissionConfigDo) Omit(cols ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fissionConfigDo) Join(table schema.Tabler, on ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fissionConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fissionConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fissionConfigDo) Group(cols ...field.Expr) IFissionConfigDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fissionConfigDo) Having(conds ...gen.Condition) IFissionConfigDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fissionConfigDo) Limit(limit int) IFissionConfigDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fissionConfigDo) Offset(offset int) IFissionConfigDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fissionConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionConfigDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fissionConfigDo) Unscoped() IFissionConfigDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fissionConfigDo) Create(values ...*model.FissionConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fissionConfigDo) CreateInBatches(values []*model.FissionConfig, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fissionConfigDo) Save(values ...*model.FissionConfig) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fissionConfigDo) First() (*model.FissionConfig, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionConfig), nil
	}
}

func (f fissionConfigDo) Take() (*model.FissionConfig, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionConfig), nil
	}
}

func (f fissionConfigDo) Last() (*model.FissionConfig, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionConfig), nil
	}
}

func (f fissionConfigDo) Find() ([]*model.FissionConfig, error) {
	result, err := f.DO.Find()
	return result.([]*model.FissionConfig), err
}

func (f fissionConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionConfig, err error) {
	buf := make([]*model.FissionConfig, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fissionConfigDo) FindInBatches(result *[]*model.FissionConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fissionConfigDo) Attrs(attrs ...field.AssignExpr) IFissionConfigDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fissionConfigDo) Assign(attrs ...field.AssignExpr) IFissionConfigDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fissionConfigDo) Joins(fields ...field.RelationField) IFissionConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fissionConfigDo) Preload(fields ...field.RelationField) IFissionConfigDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fissionConfigDo) FirstOrInit() (*model.FissionConfig, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionConfig), nil
	}
}

func (f fissionConfigDo) FirstOrCreate() (*model.FissionConfig, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionConfig), nil
	}
}

func (f fissionConfigDo) FindByPage(offset int, limit int) (result []*model.FissionConfig, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fissionConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fissionConfigDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fissionConfigDo) Delete(models ...*model.FissionConfig) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fissionConfigDo) withDO(do gen.Dao) *fissionConfigDo {
	f.DO = *do.(*gen.DO)
	return f
}
