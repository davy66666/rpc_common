// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFissionExclusiveRewardsOpenLog(db *gorm.DB, opts ...gen.DOOption) fissionExclusiveRewardsOpenLog {
	_fissionExclusiveRewardsOpenLog := fissionExclusiveRewardsOpenLog{}

	_fissionExclusiveRewardsOpenLog.fissionExclusiveRewardsOpenLogDo.UseDB(db, opts...)
	_fissionExclusiveRewardsOpenLog.fissionExclusiveRewardsOpenLogDo.UseModel(&model.FissionExclusiveRewardsOpenLog{})

	tableName := _fissionExclusiveRewardsOpenLog.fissionExclusiveRewardsOpenLogDo.TableName()
	_fissionExclusiveRewardsOpenLog.ALL = field.NewAsterisk(tableName)
	_fissionExclusiveRewardsOpenLog.ID = field.NewInt64(tableName, "id")
	_fissionExclusiveRewardsOpenLog.UserID = field.NewInt64(tableName, "user_id")
	_fissionExclusiveRewardsOpenLog.CreatedAt = field.NewField(tableName, "created_at")
	_fissionExclusiveRewardsOpenLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_fissionExclusiveRewardsOpenLog.fillFieldMap()

	return _fissionExclusiveRewardsOpenLog
}

// fissionExclusiveRewardsOpenLog 专属奖励拆开记录
type fissionExclusiveRewardsOpenLog struct {
	fissionExclusiveRewardsOpenLogDo fissionExclusiveRewardsOpenLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64 // 用戶id
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (f fissionExclusiveRewardsOpenLog) Table(newTableName string) *fissionExclusiveRewardsOpenLog {
	f.fissionExclusiveRewardsOpenLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fissionExclusiveRewardsOpenLog) As(alias string) *fissionExclusiveRewardsOpenLog {
	f.fissionExclusiveRewardsOpenLogDo.DO = *(f.fissionExclusiveRewardsOpenLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fissionExclusiveRewardsOpenLog) updateTableName(table string) *fissionExclusiveRewardsOpenLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fissionExclusiveRewardsOpenLog) WithContext(ctx context.Context) IFissionExclusiveRewardsOpenLogDo {
	return f.fissionExclusiveRewardsOpenLogDo.WithContext(ctx)
}

func (f fissionExclusiveRewardsOpenLog) TableName() string {
	return f.fissionExclusiveRewardsOpenLogDo.TableName()
}

func (f fissionExclusiveRewardsOpenLog) Alias() string {
	return f.fissionExclusiveRewardsOpenLogDo.Alias()
}

func (f fissionExclusiveRewardsOpenLog) Columns(cols ...field.Expr) gen.Columns {
	return f.fissionExclusiveRewardsOpenLogDo.Columns(cols...)
}

func (f *fissionExclusiveRewardsOpenLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fissionExclusiveRewardsOpenLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fissionExclusiveRewardsOpenLog) clone(db *gorm.DB) fissionExclusiveRewardsOpenLog {
	f.fissionExclusiveRewardsOpenLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fissionExclusiveRewardsOpenLog) replaceDB(db *gorm.DB) fissionExclusiveRewardsOpenLog {
	f.fissionExclusiveRewardsOpenLogDo.ReplaceDB(db)
	return f
}

type fissionExclusiveRewardsOpenLogDo struct{ gen.DO }

type IFissionExclusiveRewardsOpenLogDo interface {
	gen.SubQuery
	Debug() IFissionExclusiveRewardsOpenLogDo
	WithContext(ctx context.Context) IFissionExclusiveRewardsOpenLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFissionExclusiveRewardsOpenLogDo
	WriteDB() IFissionExclusiveRewardsOpenLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFissionExclusiveRewardsOpenLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFissionExclusiveRewardsOpenLogDo
	Not(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo
	Or(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo
	Select(conds ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Where(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo
	Order(conds ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Distinct(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Omit(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Join(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Group(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo
	Having(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo
	Limit(limit int) IFissionExclusiveRewardsOpenLogDo
	Offset(offset int) IFissionExclusiveRewardsOpenLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionExclusiveRewardsOpenLogDo
	Unscoped() IFissionExclusiveRewardsOpenLogDo
	Create(values ...*model.FissionExclusiveRewardsOpenLog) error
	CreateInBatches(values []*model.FissionExclusiveRewardsOpenLog, batchSize int) error
	Save(values ...*model.FissionExclusiveRewardsOpenLog) error
	First() (*model.FissionExclusiveRewardsOpenLog, error)
	Take() (*model.FissionExclusiveRewardsOpenLog, error)
	Last() (*model.FissionExclusiveRewardsOpenLog, error)
	Find() ([]*model.FissionExclusiveRewardsOpenLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionExclusiveRewardsOpenLog, err error)
	FindInBatches(result *[]*model.FissionExclusiveRewardsOpenLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FissionExclusiveRewardsOpenLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFissionExclusiveRewardsOpenLogDo
	Assign(attrs ...field.AssignExpr) IFissionExclusiveRewardsOpenLogDo
	Joins(fields ...field.RelationField) IFissionExclusiveRewardsOpenLogDo
	Preload(fields ...field.RelationField) IFissionExclusiveRewardsOpenLogDo
	FirstOrInit() (*model.FissionExclusiveRewardsOpenLog, error)
	FirstOrCreate() (*model.FissionExclusiveRewardsOpenLog, error)
	FindByPage(offset int, limit int) (result []*model.FissionExclusiveRewardsOpenLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFissionExclusiveRewardsOpenLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fissionExclusiveRewardsOpenLogDo) Debug() IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Debug())
}

func (f fissionExclusiveRewardsOpenLogDo) WithContext(ctx context.Context) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fissionExclusiveRewardsOpenLogDo) ReadDB() IFissionExclusiveRewardsOpenLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fissionExclusiveRewardsOpenLogDo) WriteDB() IFissionExclusiveRewardsOpenLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fissionExclusiveRewardsOpenLogDo) Session(config *gorm.Session) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fissionExclusiveRewardsOpenLogDo) Clauses(conds ...clause.Expression) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Returning(value interface{}, columns ...string) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fissionExclusiveRewardsOpenLogDo) Not(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Or(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Select(conds ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Where(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Order(conds ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Distinct(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fissionExclusiveRewardsOpenLogDo) Omit(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fissionExclusiveRewardsOpenLogDo) Join(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fissionExclusiveRewardsOpenLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fissionExclusiveRewardsOpenLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fissionExclusiveRewardsOpenLogDo) Group(cols ...field.Expr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fissionExclusiveRewardsOpenLogDo) Having(conds ...gen.Condition) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fissionExclusiveRewardsOpenLogDo) Limit(limit int) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fissionExclusiveRewardsOpenLogDo) Offset(offset int) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fissionExclusiveRewardsOpenLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fissionExclusiveRewardsOpenLogDo) Unscoped() IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fissionExclusiveRewardsOpenLogDo) Create(values ...*model.FissionExclusiveRewardsOpenLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fissionExclusiveRewardsOpenLogDo) CreateInBatches(values []*model.FissionExclusiveRewardsOpenLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fissionExclusiveRewardsOpenLogDo) Save(values ...*model.FissionExclusiveRewardsOpenLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fissionExclusiveRewardsOpenLogDo) First() (*model.FissionExclusiveRewardsOpenLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveRewardsOpenLog), nil
	}
}

func (f fissionExclusiveRewardsOpenLogDo) Take() (*model.FissionExclusiveRewardsOpenLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveRewardsOpenLog), nil
	}
}

func (f fissionExclusiveRewardsOpenLogDo) Last() (*model.FissionExclusiveRewardsOpenLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveRewardsOpenLog), nil
	}
}

func (f fissionExclusiveRewardsOpenLogDo) Find() ([]*model.FissionExclusiveRewardsOpenLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FissionExclusiveRewardsOpenLog), err
}

func (f fissionExclusiveRewardsOpenLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionExclusiveRewardsOpenLog, err error) {
	buf := make([]*model.FissionExclusiveRewardsOpenLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fissionExclusiveRewardsOpenLogDo) FindInBatches(result *[]*model.FissionExclusiveRewardsOpenLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fissionExclusiveRewardsOpenLogDo) Attrs(attrs ...field.AssignExpr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fissionExclusiveRewardsOpenLogDo) Assign(attrs ...field.AssignExpr) IFissionExclusiveRewardsOpenLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fissionExclusiveRewardsOpenLogDo) Joins(fields ...field.RelationField) IFissionExclusiveRewardsOpenLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fissionExclusiveRewardsOpenLogDo) Preload(fields ...field.RelationField) IFissionExclusiveRewardsOpenLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fissionExclusiveRewardsOpenLogDo) FirstOrInit() (*model.FissionExclusiveRewardsOpenLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveRewardsOpenLog), nil
	}
}

func (f fissionExclusiveRewardsOpenLogDo) FirstOrCreate() (*model.FissionExclusiveRewardsOpenLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveRewardsOpenLog), nil
	}
}

func (f fissionExclusiveRewardsOpenLogDo) FindByPage(offset int, limit int) (result []*model.FissionExclusiveRewardsOpenLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fissionExclusiveRewardsOpenLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fissionExclusiveRewardsOpenLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fissionExclusiveRewardsOpenLogDo) Delete(models ...*model.FissionExclusiveRewardsOpenLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fissionExclusiveRewardsOpenLogDo) withDO(do gen.Dao) *fissionExclusiveRewardsOpenLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
