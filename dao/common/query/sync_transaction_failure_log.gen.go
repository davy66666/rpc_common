// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSyncTransactionFailureLog(db *gorm.DB, opts ...gen.DOOption) syncTransactionFailureLog {
	_syncTransactionFailureLog := syncTransactionFailureLog{}

	_syncTransactionFailureLog.syncTransactionFailureLogDo.UseDB(db, opts...)
	_syncTransactionFailureLog.syncTransactionFailureLogDo.UseModel(&model.SyncTransactionFailureLog{})

	tableName := _syncTransactionFailureLog.syncTransactionFailureLogDo.TableName()
	_syncTransactionFailureLog.ALL = field.NewAsterisk(tableName)
	_syncTransactionFailureLog.ID = field.NewInt64(tableName, "id")
	_syncTransactionFailureLog.Type = field.NewInt64(tableName, "type")
	_syncTransactionFailureLog.TransactionID = field.NewInt64(tableName, "transaction_id")
	_syncTransactionFailureLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_syncTransactionFailureLog.CreatedAt = field.NewField(tableName, "created_at")

	_syncTransactionFailureLog.fillFieldMap()

	return _syncTransactionFailureLog
}

// syncTransactionFailureLog 同步帐变记录失败日志记录
type syncTransactionFailureLog struct {
	syncTransactionFailureLogDo syncTransactionFailureLogDo

	ALL           field.Asterisk
	ID            field.Int64 // 自增id
	Type          field.Int64 // 失败类型: 1:投递job失败, 2:执行job失败
	TransactionID field.Int64 // 帐变id
	UpdatedAt     field.Field // 更新时间
	CreatedAt     field.Field // 创建时间

	fieldMap map[string]field.Expr
}

func (s syncTransactionFailureLog) Table(newTableName string) *syncTransactionFailureLog {
	s.syncTransactionFailureLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncTransactionFailureLog) As(alias string) *syncTransactionFailureLog {
	s.syncTransactionFailureLogDo.DO = *(s.syncTransactionFailureLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncTransactionFailureLog) updateTableName(table string) *syncTransactionFailureLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Type = field.NewInt64(table, "type")
	s.TransactionID = field.NewInt64(table, "transaction_id")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.CreatedAt = field.NewField(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *syncTransactionFailureLog) WithContext(ctx context.Context) ISyncTransactionFailureLogDo {
	return s.syncTransactionFailureLogDo.WithContext(ctx)
}

func (s syncTransactionFailureLog) TableName() string {
	return s.syncTransactionFailureLogDo.TableName()
}

func (s syncTransactionFailureLog) Alias() string { return s.syncTransactionFailureLogDo.Alias() }

func (s syncTransactionFailureLog) Columns(cols ...field.Expr) gen.Columns {
	return s.syncTransactionFailureLogDo.Columns(cols...)
}

func (s *syncTransactionFailureLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncTransactionFailureLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["type"] = s.Type
	s.fieldMap["transaction_id"] = s.TransactionID
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s syncTransactionFailureLog) clone(db *gorm.DB) syncTransactionFailureLog {
	s.syncTransactionFailureLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncTransactionFailureLog) replaceDB(db *gorm.DB) syncTransactionFailureLog {
	s.syncTransactionFailureLogDo.ReplaceDB(db)
	return s
}

type syncTransactionFailureLogDo struct{ gen.DO }

type ISyncTransactionFailureLogDo interface {
	gen.SubQuery
	Debug() ISyncTransactionFailureLogDo
	WithContext(ctx context.Context) ISyncTransactionFailureLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISyncTransactionFailureLogDo
	WriteDB() ISyncTransactionFailureLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISyncTransactionFailureLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyncTransactionFailureLogDo
	Not(conds ...gen.Condition) ISyncTransactionFailureLogDo
	Or(conds ...gen.Condition) ISyncTransactionFailureLogDo
	Select(conds ...field.Expr) ISyncTransactionFailureLogDo
	Where(conds ...gen.Condition) ISyncTransactionFailureLogDo
	Order(conds ...field.Expr) ISyncTransactionFailureLogDo
	Distinct(cols ...field.Expr) ISyncTransactionFailureLogDo
	Omit(cols ...field.Expr) ISyncTransactionFailureLogDo
	Join(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo
	Group(cols ...field.Expr) ISyncTransactionFailureLogDo
	Having(conds ...gen.Condition) ISyncTransactionFailureLogDo
	Limit(limit int) ISyncTransactionFailureLogDo
	Offset(offset int) ISyncTransactionFailureLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncTransactionFailureLogDo
	Unscoped() ISyncTransactionFailureLogDo
	Create(values ...*model.SyncTransactionFailureLog) error
	CreateInBatches(values []*model.SyncTransactionFailureLog, batchSize int) error
	Save(values ...*model.SyncTransactionFailureLog) error
	First() (*model.SyncTransactionFailureLog, error)
	Take() (*model.SyncTransactionFailureLog, error)
	Last() (*model.SyncTransactionFailureLog, error)
	Find() ([]*model.SyncTransactionFailureLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncTransactionFailureLog, err error)
	FindInBatches(result *[]*model.SyncTransactionFailureLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SyncTransactionFailureLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyncTransactionFailureLogDo
	Assign(attrs ...field.AssignExpr) ISyncTransactionFailureLogDo
	Joins(fields ...field.RelationField) ISyncTransactionFailureLogDo
	Preload(fields ...field.RelationField) ISyncTransactionFailureLogDo
	FirstOrInit() (*model.SyncTransactionFailureLog, error)
	FirstOrCreate() (*model.SyncTransactionFailureLog, error)
	FindByPage(offset int, limit int) (result []*model.SyncTransactionFailureLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyncTransactionFailureLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syncTransactionFailureLogDo) Debug() ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Debug())
}

func (s syncTransactionFailureLogDo) WithContext(ctx context.Context) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncTransactionFailureLogDo) ReadDB() ISyncTransactionFailureLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncTransactionFailureLogDo) WriteDB() ISyncTransactionFailureLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncTransactionFailureLogDo) Session(config *gorm.Session) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncTransactionFailureLogDo) Clauses(conds ...clause.Expression) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncTransactionFailureLogDo) Returning(value interface{}, columns ...string) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncTransactionFailureLogDo) Not(conds ...gen.Condition) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncTransactionFailureLogDo) Or(conds ...gen.Condition) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncTransactionFailureLogDo) Select(conds ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncTransactionFailureLogDo) Where(conds ...gen.Condition) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncTransactionFailureLogDo) Order(conds ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncTransactionFailureLogDo) Distinct(cols ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncTransactionFailureLogDo) Omit(cols ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncTransactionFailureLogDo) Join(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncTransactionFailureLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncTransactionFailureLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncTransactionFailureLogDo) Group(cols ...field.Expr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncTransactionFailureLogDo) Having(conds ...gen.Condition) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncTransactionFailureLogDo) Limit(limit int) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncTransactionFailureLogDo) Offset(offset int) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncTransactionFailureLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncTransactionFailureLogDo) Unscoped() ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncTransactionFailureLogDo) Create(values ...*model.SyncTransactionFailureLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncTransactionFailureLogDo) CreateInBatches(values []*model.SyncTransactionFailureLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncTransactionFailureLogDo) Save(values ...*model.SyncTransactionFailureLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncTransactionFailureLogDo) First() (*model.SyncTransactionFailureLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTransactionFailureLog), nil
	}
}

func (s syncTransactionFailureLogDo) Take() (*model.SyncTransactionFailureLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTransactionFailureLog), nil
	}
}

func (s syncTransactionFailureLogDo) Last() (*model.SyncTransactionFailureLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTransactionFailureLog), nil
	}
}

func (s syncTransactionFailureLogDo) Find() ([]*model.SyncTransactionFailureLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncTransactionFailureLog), err
}

func (s syncTransactionFailureLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncTransactionFailureLog, err error) {
	buf := make([]*model.SyncTransactionFailureLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncTransactionFailureLogDo) FindInBatches(result *[]*model.SyncTransactionFailureLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncTransactionFailureLogDo) Attrs(attrs ...field.AssignExpr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncTransactionFailureLogDo) Assign(attrs ...field.AssignExpr) ISyncTransactionFailureLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncTransactionFailureLogDo) Joins(fields ...field.RelationField) ISyncTransactionFailureLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncTransactionFailureLogDo) Preload(fields ...field.RelationField) ISyncTransactionFailureLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncTransactionFailureLogDo) FirstOrInit() (*model.SyncTransactionFailureLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTransactionFailureLog), nil
	}
}

func (s syncTransactionFailureLogDo) FirstOrCreate() (*model.SyncTransactionFailureLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTransactionFailureLog), nil
	}
}

func (s syncTransactionFailureLogDo) FindByPage(offset int, limit int) (result []*model.SyncTransactionFailureLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncTransactionFailureLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncTransactionFailureLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncTransactionFailureLogDo) Delete(models ...*model.SyncTransactionFailureLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncTransactionFailureLogDo) withDO(do gen.Dao) *syncTransactionFailureLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
