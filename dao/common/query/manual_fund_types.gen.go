// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newManualFundType(db *gorm.DB, opts ...gen.DOOption) manualFundType {
	_manualFundType := manualFundType{}

	_manualFundType.manualFundTypeDo.UseDB(db, opts...)
	_manualFundType.manualFundTypeDo.UseModel(&model.ManualFundType{})

	tableName := _manualFundType.manualFundTypeDo.TableName()
	_manualFundType.ALL = field.NewAsterisk(tableName)
	_manualFundType.ID = field.NewInt64(tableName, "id")
	_manualFundType.Name = field.NewString(tableName, "name")
	_manualFundType.AdminName = field.NewString(tableName, "admin_name")
	_manualFundType.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_manualFundType.CreatedAt = field.NewField(tableName, "created_at")
	_manualFundType.UpdatedAt = field.NewField(tableName, "updated_at")

	_manualFundType.fillFieldMap()

	return _manualFundType
}

// manualFundType 手动操作资金类型表
type manualFundType struct {
	manualFundTypeDo manualFundTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 类型名称
	AdminName field.String // 操作人
	IsDeleted field.Int64  // 是否删除, 0:未删除, 1:删除
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (m manualFundType) Table(newTableName string) *manualFundType {
	m.manualFundTypeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m manualFundType) As(alias string) *manualFundType {
	m.manualFundTypeDo.DO = *(m.manualFundTypeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *manualFundType) updateTableName(table string) *manualFundType {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Name = field.NewString(table, "name")
	m.AdminName = field.NewString(table, "admin_name")
	m.IsDeleted = field.NewInt64(table, "is_deleted")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *manualFundType) WithContext(ctx context.Context) IManualFundTypeDo {
	return m.manualFundTypeDo.WithContext(ctx)
}

func (m manualFundType) TableName() string { return m.manualFundTypeDo.TableName() }

func (m manualFundType) Alias() string { return m.manualFundTypeDo.Alias() }

func (m manualFundType) Columns(cols ...field.Expr) gen.Columns {
	return m.manualFundTypeDo.Columns(cols...)
}

func (m *manualFundType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manualFundType) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["admin_name"] = m.AdminName
	m.fieldMap["is_deleted"] = m.IsDeleted
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m manualFundType) clone(db *gorm.DB) manualFundType {
	m.manualFundTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m manualFundType) replaceDB(db *gorm.DB) manualFundType {
	m.manualFundTypeDo.ReplaceDB(db)
	return m
}

type manualFundTypeDo struct{ gen.DO }

type IManualFundTypeDo interface {
	gen.SubQuery
	Debug() IManualFundTypeDo
	WithContext(ctx context.Context) IManualFundTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IManualFundTypeDo
	WriteDB() IManualFundTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IManualFundTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IManualFundTypeDo
	Not(conds ...gen.Condition) IManualFundTypeDo
	Or(conds ...gen.Condition) IManualFundTypeDo
	Select(conds ...field.Expr) IManualFundTypeDo
	Where(conds ...gen.Condition) IManualFundTypeDo
	Order(conds ...field.Expr) IManualFundTypeDo
	Distinct(cols ...field.Expr) IManualFundTypeDo
	Omit(cols ...field.Expr) IManualFundTypeDo
	Join(table schema.Tabler, on ...field.Expr) IManualFundTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IManualFundTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IManualFundTypeDo
	Group(cols ...field.Expr) IManualFundTypeDo
	Having(conds ...gen.Condition) IManualFundTypeDo
	Limit(limit int) IManualFundTypeDo
	Offset(offset int) IManualFundTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IManualFundTypeDo
	Unscoped() IManualFundTypeDo
	Create(values ...*model.ManualFundType) error
	CreateInBatches(values []*model.ManualFundType, batchSize int) error
	Save(values ...*model.ManualFundType) error
	First() (*model.ManualFundType, error)
	Take() (*model.ManualFundType, error)
	Last() (*model.ManualFundType, error)
	Find() ([]*model.ManualFundType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ManualFundType, err error)
	FindInBatches(result *[]*model.ManualFundType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ManualFundType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IManualFundTypeDo
	Assign(attrs ...field.AssignExpr) IManualFundTypeDo
	Joins(fields ...field.RelationField) IManualFundTypeDo
	Preload(fields ...field.RelationField) IManualFundTypeDo
	FirstOrInit() (*model.ManualFundType, error)
	FirstOrCreate() (*model.ManualFundType, error)
	FindByPage(offset int, limit int) (result []*model.ManualFundType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IManualFundTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m manualFundTypeDo) Debug() IManualFundTypeDo {
	return m.withDO(m.DO.Debug())
}

func (m manualFundTypeDo) WithContext(ctx context.Context) IManualFundTypeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m manualFundTypeDo) ReadDB() IManualFundTypeDo {
	return m.Clauses(dbresolver.Read)
}

func (m manualFundTypeDo) WriteDB() IManualFundTypeDo {
	return m.Clauses(dbresolver.Write)
}

func (m manualFundTypeDo) Session(config *gorm.Session) IManualFundTypeDo {
	return m.withDO(m.DO.Session(config))
}

func (m manualFundTypeDo) Clauses(conds ...clause.Expression) IManualFundTypeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m manualFundTypeDo) Returning(value interface{}, columns ...string) IManualFundTypeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m manualFundTypeDo) Not(conds ...gen.Condition) IManualFundTypeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m manualFundTypeDo) Or(conds ...gen.Condition) IManualFundTypeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m manualFundTypeDo) Select(conds ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m manualFundTypeDo) Where(conds ...gen.Condition) IManualFundTypeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m manualFundTypeDo) Order(conds ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m manualFundTypeDo) Distinct(cols ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m manualFundTypeDo) Omit(cols ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m manualFundTypeDo) Join(table schema.Tabler, on ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m manualFundTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m manualFundTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m manualFundTypeDo) Group(cols ...field.Expr) IManualFundTypeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m manualFundTypeDo) Having(conds ...gen.Condition) IManualFundTypeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m manualFundTypeDo) Limit(limit int) IManualFundTypeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m manualFundTypeDo) Offset(offset int) IManualFundTypeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m manualFundTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IManualFundTypeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m manualFundTypeDo) Unscoped() IManualFundTypeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m manualFundTypeDo) Create(values ...*model.ManualFundType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m manualFundTypeDo) CreateInBatches(values []*model.ManualFundType, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m manualFundTypeDo) Save(values ...*model.ManualFundType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m manualFundTypeDo) First() (*model.ManualFundType, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManualFundType), nil
	}
}

func (m manualFundTypeDo) Take() (*model.ManualFundType, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManualFundType), nil
	}
}

func (m manualFundTypeDo) Last() (*model.ManualFundType, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManualFundType), nil
	}
}

func (m manualFundTypeDo) Find() ([]*model.ManualFundType, error) {
	result, err := m.DO.Find()
	return result.([]*model.ManualFundType), err
}

func (m manualFundTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ManualFundType, err error) {
	buf := make([]*model.ManualFundType, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m manualFundTypeDo) FindInBatches(result *[]*model.ManualFundType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m manualFundTypeDo) Attrs(attrs ...field.AssignExpr) IManualFundTypeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m manualFundTypeDo) Assign(attrs ...field.AssignExpr) IManualFundTypeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m manualFundTypeDo) Joins(fields ...field.RelationField) IManualFundTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m manualFundTypeDo) Preload(fields ...field.RelationField) IManualFundTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m manualFundTypeDo) FirstOrInit() (*model.ManualFundType, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManualFundType), nil
	}
}

func (m manualFundTypeDo) FirstOrCreate() (*model.ManualFundType, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManualFundType), nil
	}
}

func (m manualFundTypeDo) FindByPage(offset int, limit int) (result []*model.ManualFundType, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m manualFundTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m manualFundTypeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m manualFundTypeDo) Delete(models ...*model.ManualFundType) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *manualFundTypeDo) withDO(do gen.Dao) *manualFundTypeDo {
	m.DO = *do.(*gen.DO)
	return m
}
