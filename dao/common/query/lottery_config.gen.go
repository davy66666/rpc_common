// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLotteryConfig(db *gorm.DB, opts ...gen.DOOption) lotteryConfig {
	_lotteryConfig := lotteryConfig{}

	_lotteryConfig.lotteryConfigDo.UseDB(db, opts...)
	_lotteryConfig.lotteryConfigDo.UseModel(&model.LotteryConfig{})

	tableName := _lotteryConfig.lotteryConfigDo.TableName()
	_lotteryConfig.ALL = field.NewAsterisk(tableName)
	_lotteryConfig.ID = field.NewInt64(tableName, "id")
	_lotteryConfig.ActivityID = field.NewInt64(tableName, "activity_id")
	_lotteryConfig.ProbabilityType = field.NewInt64(tableName, "probability_type")
	_lotteryConfig.OperatorName = field.NewString(tableName, "operator_name")
	_lotteryConfig.PlayName = field.NewString(tableName, "play_name")
	_lotteryConfig.Persons = field.NewInt64(tableName, "persons")
	_lotteryConfig.Chance = field.NewInt64(tableName, "chance")
	_lotteryConfig.Status = field.NewInt64(tableName, "status")
	_lotteryConfig.CreatedAt = field.NewField(tableName, "created_at")
	_lotteryConfig.UpdatedAt = field.NewField(tableName, "updated_at")
	_lotteryConfig.StartAt = field.NewField(tableName, "start_at")
	_lotteryConfig.EndAt = field.NewField(tableName, "end_at")

	_lotteryConfig.fillFieldMap()

	return _lotteryConfig
}

// lotteryConfig 大转盘配置表
type lotteryConfig struct {
	lotteryConfigDo lotteryConfigDo

	ALL             field.Asterisk
	ID              field.Int64
	ActivityID      field.Int64  // 活动ID
	ProbabilityType field.Int64  // 概率类型，0固定概率，1浮动概率
	OperatorName    field.String // 操作人
	PlayName        field.String // 玩法名称
	Persons         field.Int64  // 可参与人数，默认-1 不限制
	Chance          field.Int64  // 人均抽奖次数，默认-1 不限制
	Status          field.Int64  // 状态; 0无效 1有效
	CreatedAt       field.Field
	UpdatedAt       field.Field
	StartAt         field.Field // 开始时间
	EndAt           field.Field // 结束时间

	fieldMap map[string]field.Expr
}

func (l lotteryConfig) Table(newTableName string) *lotteryConfig {
	l.lotteryConfigDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotteryConfig) As(alias string) *lotteryConfig {
	l.lotteryConfigDo.DO = *(l.lotteryConfigDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotteryConfig) updateTableName(table string) *lotteryConfig {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.ActivityID = field.NewInt64(table, "activity_id")
	l.ProbabilityType = field.NewInt64(table, "probability_type")
	l.OperatorName = field.NewString(table, "operator_name")
	l.PlayName = field.NewString(table, "play_name")
	l.Persons = field.NewInt64(table, "persons")
	l.Chance = field.NewInt64(table, "chance")
	l.Status = field.NewInt64(table, "status")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")
	l.StartAt = field.NewField(table, "start_at")
	l.EndAt = field.NewField(table, "end_at")

	l.fillFieldMap()

	return l
}

func (l *lotteryConfig) WithContext(ctx context.Context) ILotteryConfigDo {
	return l.lotteryConfigDo.WithContext(ctx)
}

func (l lotteryConfig) TableName() string { return l.lotteryConfigDo.TableName() }

func (l lotteryConfig) Alias() string { return l.lotteryConfigDo.Alias() }

func (l lotteryConfig) Columns(cols ...field.Expr) gen.Columns {
	return l.lotteryConfigDo.Columns(cols...)
}

func (l *lotteryConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotteryConfig) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.ID
	l.fieldMap["activity_id"] = l.ActivityID
	l.fieldMap["probability_type"] = l.ProbabilityType
	l.fieldMap["operator_name"] = l.OperatorName
	l.fieldMap["play_name"] = l.PlayName
	l.fieldMap["persons"] = l.Persons
	l.fieldMap["chance"] = l.Chance
	l.fieldMap["status"] = l.Status
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["start_at"] = l.StartAt
	l.fieldMap["end_at"] = l.EndAt
}

func (l lotteryConfig) clone(db *gorm.DB) lotteryConfig {
	l.lotteryConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotteryConfig) replaceDB(db *gorm.DB) lotteryConfig {
	l.lotteryConfigDo.ReplaceDB(db)
	return l
}

type lotteryConfigDo struct{ gen.DO }

type ILotteryConfigDo interface {
	gen.SubQuery
	Debug() ILotteryConfigDo
	WithContext(ctx context.Context) ILotteryConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotteryConfigDo
	WriteDB() ILotteryConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotteryConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotteryConfigDo
	Not(conds ...gen.Condition) ILotteryConfigDo
	Or(conds ...gen.Condition) ILotteryConfigDo
	Select(conds ...field.Expr) ILotteryConfigDo
	Where(conds ...gen.Condition) ILotteryConfigDo
	Order(conds ...field.Expr) ILotteryConfigDo
	Distinct(cols ...field.Expr) ILotteryConfigDo
	Omit(cols ...field.Expr) ILotteryConfigDo
	Join(table schema.Tabler, on ...field.Expr) ILotteryConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotteryConfigDo
	Group(cols ...field.Expr) ILotteryConfigDo
	Having(conds ...gen.Condition) ILotteryConfigDo
	Limit(limit int) ILotteryConfigDo
	Offset(offset int) ILotteryConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryConfigDo
	Unscoped() ILotteryConfigDo
	Create(values ...*model.LotteryConfig) error
	CreateInBatches(values []*model.LotteryConfig, batchSize int) error
	Save(values ...*model.LotteryConfig) error
	First() (*model.LotteryConfig, error)
	Take() (*model.LotteryConfig, error)
	Last() (*model.LotteryConfig, error)
	Find() ([]*model.LotteryConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryConfig, err error)
	FindInBatches(result *[]*model.LotteryConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LotteryConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotteryConfigDo
	Assign(attrs ...field.AssignExpr) ILotteryConfigDo
	Joins(fields ...field.RelationField) ILotteryConfigDo
	Preload(fields ...field.RelationField) ILotteryConfigDo
	FirstOrInit() (*model.LotteryConfig, error)
	FirstOrCreate() (*model.LotteryConfig, error)
	FindByPage(offset int, limit int) (result []*model.LotteryConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotteryConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotteryConfigDo) Debug() ILotteryConfigDo {
	return l.withDO(l.DO.Debug())
}

func (l lotteryConfigDo) WithContext(ctx context.Context) ILotteryConfigDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotteryConfigDo) ReadDB() ILotteryConfigDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotteryConfigDo) WriteDB() ILotteryConfigDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotteryConfigDo) Session(config *gorm.Session) ILotteryConfigDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotteryConfigDo) Clauses(conds ...clause.Expression) ILotteryConfigDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotteryConfigDo) Returning(value interface{}, columns ...string) ILotteryConfigDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotteryConfigDo) Not(conds ...gen.Condition) ILotteryConfigDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotteryConfigDo) Or(conds ...gen.Condition) ILotteryConfigDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotteryConfigDo) Select(conds ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotteryConfigDo) Where(conds ...gen.Condition) ILotteryConfigDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotteryConfigDo) Order(conds ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotteryConfigDo) Distinct(cols ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotteryConfigDo) Omit(cols ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotteryConfigDo) Join(table schema.Tabler, on ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotteryConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotteryConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotteryConfigDo) Group(cols ...field.Expr) ILotteryConfigDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotteryConfigDo) Having(conds ...gen.Condition) ILotteryConfigDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotteryConfigDo) Limit(limit int) ILotteryConfigDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotteryConfigDo) Offset(offset int) ILotteryConfigDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotteryConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryConfigDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotteryConfigDo) Unscoped() ILotteryConfigDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotteryConfigDo) Create(values ...*model.LotteryConfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotteryConfigDo) CreateInBatches(values []*model.LotteryConfig, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotteryConfigDo) Save(values ...*model.LotteryConfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotteryConfigDo) First() (*model.LotteryConfig, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryConfig), nil
	}
}

func (l lotteryConfigDo) Take() (*model.LotteryConfig, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryConfig), nil
	}
}

func (l lotteryConfigDo) Last() (*model.LotteryConfig, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryConfig), nil
	}
}

func (l lotteryConfigDo) Find() ([]*model.LotteryConfig, error) {
	result, err := l.DO.Find()
	return result.([]*model.LotteryConfig), err
}

func (l lotteryConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryConfig, err error) {
	buf := make([]*model.LotteryConfig, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotteryConfigDo) FindInBatches(result *[]*model.LotteryConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotteryConfigDo) Attrs(attrs ...field.AssignExpr) ILotteryConfigDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotteryConfigDo) Assign(attrs ...field.AssignExpr) ILotteryConfigDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotteryConfigDo) Joins(fields ...field.RelationField) ILotteryConfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotteryConfigDo) Preload(fields ...field.RelationField) ILotteryConfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotteryConfigDo) FirstOrInit() (*model.LotteryConfig, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryConfig), nil
	}
}

func (l lotteryConfigDo) FirstOrCreate() (*model.LotteryConfig, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryConfig), nil
	}
}

func (l lotteryConfigDo) FindByPage(offset int, limit int) (result []*model.LotteryConfig, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotteryConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotteryConfigDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotteryConfigDo) Delete(models ...*model.LotteryConfig) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotteryConfigDo) withDO(do gen.Dao) *lotteryConfigDo {
	l.DO = *do.(*gen.DO)
	return l
}
