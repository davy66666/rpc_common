// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newBankCardAllocateLog(db *gorm.DB, opts ...gen.DOOption) bankCardAllocateLog {
	_bankCardAllocateLog := bankCardAllocateLog{}

	_bankCardAllocateLog.bankCardAllocateLogDo.UseDB(db, opts...)
	_bankCardAllocateLog.bankCardAllocateLogDo.UseModel(&model.BankCardAllocateLog{})

	tableName := _bankCardAllocateLog.bankCardAllocateLogDo.TableName()
	_bankCardAllocateLog.ALL = field.NewAsterisk(tableName)
	_bankCardAllocateLog.ID = field.NewInt64(tableName, "id")
	_bankCardAllocateLog.BankCard = field.NewString(tableName, "bank_card")
	_bankCardAllocateLog.PayLevel = field.NewInt64(tableName, "pay_level")
	_bankCardAllocateLog.Number = field.NewInt64(tableName, "number")
	_bankCardAllocateLog.DateAt = field.NewString(tableName, "date_at")
	_bankCardAllocateLog.IsOpen = field.NewInt64(tableName, "is_open")
	_bankCardAllocateLog.CreatedAt = field.NewField(tableName, "created_at")
	_bankCardAllocateLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_bankCardAllocateLog.fillFieldMap()

	return _bankCardAllocateLog
}

// bankCardAllocateLog 银行卡分配量统计日志
type bankCardAllocateLog struct {
	bankCardAllocateLogDo bankCardAllocateLogDo

	ALL       field.Asterisk
	ID        field.Int64
	BankCard  field.String // 银行卡号
	PayLevel  field.Int64  // 支付层级
	Number    field.Int64  // 次数
	DateAt    field.String // 当天时间
	IsOpen    field.Int64  // 是否开启 0:否;1:是
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (b bankCardAllocateLog) Table(newTableName string) *bankCardAllocateLog {
	b.bankCardAllocateLogDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankCardAllocateLog) As(alias string) *bankCardAllocateLog {
	b.bankCardAllocateLogDo.DO = *(b.bankCardAllocateLogDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankCardAllocateLog) updateTableName(table string) *bankCardAllocateLog {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BankCard = field.NewString(table, "bank_card")
	b.PayLevel = field.NewInt64(table, "pay_level")
	b.Number = field.NewInt64(table, "number")
	b.DateAt = field.NewString(table, "date_at")
	b.IsOpen = field.NewInt64(table, "is_open")
	b.CreatedAt = field.NewField(table, "created_at")
	b.UpdatedAt = field.NewField(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *bankCardAllocateLog) WithContext(ctx context.Context) IBankCardAllocateLogDo {
	return b.bankCardAllocateLogDo.WithContext(ctx)
}

func (b bankCardAllocateLog) TableName() string { return b.bankCardAllocateLogDo.TableName() }

func (b bankCardAllocateLog) Alias() string { return b.bankCardAllocateLogDo.Alias() }

func (b bankCardAllocateLog) Columns(cols ...field.Expr) gen.Columns {
	return b.bankCardAllocateLogDo.Columns(cols...)
}

func (b *bankCardAllocateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankCardAllocateLog) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["bank_card"] = b.BankCard
	b.fieldMap["pay_level"] = b.PayLevel
	b.fieldMap["number"] = b.Number
	b.fieldMap["date_at"] = b.DateAt
	b.fieldMap["is_open"] = b.IsOpen
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b bankCardAllocateLog) clone(db *gorm.DB) bankCardAllocateLog {
	b.bankCardAllocateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankCardAllocateLog) replaceDB(db *gorm.DB) bankCardAllocateLog {
	b.bankCardAllocateLogDo.ReplaceDB(db)
	return b
}

type bankCardAllocateLogDo struct{ gen.DO }

type IBankCardAllocateLogDo interface {
	gen.SubQuery
	Debug() IBankCardAllocateLogDo
	WithContext(ctx context.Context) IBankCardAllocateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBankCardAllocateLogDo
	WriteDB() IBankCardAllocateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBankCardAllocateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBankCardAllocateLogDo
	Not(conds ...gen.Condition) IBankCardAllocateLogDo
	Or(conds ...gen.Condition) IBankCardAllocateLogDo
	Select(conds ...field.Expr) IBankCardAllocateLogDo
	Where(conds ...gen.Condition) IBankCardAllocateLogDo
	Order(conds ...field.Expr) IBankCardAllocateLogDo
	Distinct(cols ...field.Expr) IBankCardAllocateLogDo
	Omit(cols ...field.Expr) IBankCardAllocateLogDo
	Join(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo
	Group(cols ...field.Expr) IBankCardAllocateLogDo
	Having(conds ...gen.Condition) IBankCardAllocateLogDo
	Limit(limit int) IBankCardAllocateLogDo
	Offset(offset int) IBankCardAllocateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBankCardAllocateLogDo
	Unscoped() IBankCardAllocateLogDo
	Create(values ...*model.BankCardAllocateLog) error
	CreateInBatches(values []*model.BankCardAllocateLog, batchSize int) error
	Save(values ...*model.BankCardAllocateLog) error
	First() (*model.BankCardAllocateLog, error)
	Take() (*model.BankCardAllocateLog, error)
	Last() (*model.BankCardAllocateLog, error)
	Find() ([]*model.BankCardAllocateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankCardAllocateLog, err error)
	FindInBatches(result *[]*model.BankCardAllocateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BankCardAllocateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBankCardAllocateLogDo
	Assign(attrs ...field.AssignExpr) IBankCardAllocateLogDo
	Joins(fields ...field.RelationField) IBankCardAllocateLogDo
	Preload(fields ...field.RelationField) IBankCardAllocateLogDo
	FirstOrInit() (*model.BankCardAllocateLog, error)
	FirstOrCreate() (*model.BankCardAllocateLog, error)
	FindByPage(offset int, limit int) (result []*model.BankCardAllocateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBankCardAllocateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bankCardAllocateLogDo) Debug() IBankCardAllocateLogDo {
	return b.withDO(b.DO.Debug())
}

func (b bankCardAllocateLogDo) WithContext(ctx context.Context) IBankCardAllocateLogDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankCardAllocateLogDo) ReadDB() IBankCardAllocateLogDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankCardAllocateLogDo) WriteDB() IBankCardAllocateLogDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankCardAllocateLogDo) Session(config *gorm.Session) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankCardAllocateLogDo) Clauses(conds ...clause.Expression) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankCardAllocateLogDo) Returning(value interface{}, columns ...string) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankCardAllocateLogDo) Not(conds ...gen.Condition) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankCardAllocateLogDo) Or(conds ...gen.Condition) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankCardAllocateLogDo) Select(conds ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankCardAllocateLogDo) Where(conds ...gen.Condition) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankCardAllocateLogDo) Order(conds ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankCardAllocateLogDo) Distinct(cols ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankCardAllocateLogDo) Omit(cols ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankCardAllocateLogDo) Join(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankCardAllocateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankCardAllocateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankCardAllocateLogDo) Group(cols ...field.Expr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankCardAllocateLogDo) Having(conds ...gen.Condition) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankCardAllocateLogDo) Limit(limit int) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankCardAllocateLogDo) Offset(offset int) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankCardAllocateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankCardAllocateLogDo) Unscoped() IBankCardAllocateLogDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankCardAllocateLogDo) Create(values ...*model.BankCardAllocateLog) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankCardAllocateLogDo) CreateInBatches(values []*model.BankCardAllocateLog, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankCardAllocateLogDo) Save(values ...*model.BankCardAllocateLog) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankCardAllocateLogDo) First() (*model.BankCardAllocateLog, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardAllocateLog), nil
	}
}

func (b bankCardAllocateLogDo) Take() (*model.BankCardAllocateLog, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardAllocateLog), nil
	}
}

func (b bankCardAllocateLogDo) Last() (*model.BankCardAllocateLog, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardAllocateLog), nil
	}
}

func (b bankCardAllocateLogDo) Find() ([]*model.BankCardAllocateLog, error) {
	result, err := b.DO.Find()
	return result.([]*model.BankCardAllocateLog), err
}

func (b bankCardAllocateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankCardAllocateLog, err error) {
	buf := make([]*model.BankCardAllocateLog, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankCardAllocateLogDo) FindInBatches(result *[]*model.BankCardAllocateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankCardAllocateLogDo) Attrs(attrs ...field.AssignExpr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankCardAllocateLogDo) Assign(attrs ...field.AssignExpr) IBankCardAllocateLogDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankCardAllocateLogDo) Joins(fields ...field.RelationField) IBankCardAllocateLogDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankCardAllocateLogDo) Preload(fields ...field.RelationField) IBankCardAllocateLogDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankCardAllocateLogDo) FirstOrInit() (*model.BankCardAllocateLog, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardAllocateLog), nil
	}
}

func (b bankCardAllocateLogDo) FirstOrCreate() (*model.BankCardAllocateLog, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardAllocateLog), nil
	}
}

func (b bankCardAllocateLogDo) FindByPage(offset int, limit int) (result []*model.BankCardAllocateLog, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankCardAllocateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankCardAllocateLogDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankCardAllocateLogDo) Delete(models ...*model.BankCardAllocateLog) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankCardAllocateLogDo) withDO(do gen.Dao) *bankCardAllocateLogDo {
	b.DO = *do.(*gen.DO)
	return b
}
