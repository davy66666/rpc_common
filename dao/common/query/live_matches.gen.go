// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLiveMatch(db *gorm.DB, opts ...gen.DOOption) liveMatch {
	_liveMatch := liveMatch{}

	_liveMatch.liveMatchDo.UseDB(db, opts...)
	_liveMatch.liveMatchDo.UseModel(&model.LiveMatch{})

	tableName := _liveMatch.liveMatchDo.TableName()
	_liveMatch.ALL = field.NewAsterisk(tableName)
	_liveMatch.ID = field.NewInt64(tableName, "id")
	_liveMatch.MatchID = field.NewInt64(tableName, "matchId")
	_liveMatch.GameID = field.NewInt64(tableName, "gameId")
	_liveMatch.GameIcon = field.NewString(tableName, "gameIcon")
	_liveMatch.SeriesID = field.NewInt64(tableName, "seriesId")
	_liveMatch.SeriesName = field.NewString(tableName, "seriesName")
	_liveMatch.SeriesLogo = field.NewString(tableName, "seriesLogo")
	_liveMatch.LeagueID = field.NewInt64(tableName, "leagueId")
	_liveMatch.LeagueName = field.NewString(tableName, "leagueName")
	_liveMatch.LeagueLogo = field.NewString(tableName, "leagueLogo")
	_liveMatch.LeagueLevel = field.NewInt64(tableName, "leagueLevel")
	_liveMatch.Bo = field.NewInt64(tableName, "bo")
	_liveMatch.Status = field.NewInt64(tableName, "status")
	_liveMatch.State = field.NewInt64(tableName, "state")
	_liveMatch.Finished = field.NewInt64(tableName, "finished")
	_liveMatch.StartTime = field.NewInt64(tableName, "startTime")
	_liveMatch.GameTime = field.NewInt64(tableName, "gameTime")
	_liveMatch.BpPhase = field.NewInt64(tableName, "bpPhase")
	_liveMatch.Round = field.NewInt64(tableName, "round")
	_liveMatch.RoundNum = field.NewInt64(tableName, "roundNum")
	_liveMatch.WinTeam = field.NewInt64(tableName, "winTeam")
	_liveMatch.Home = field.NewInt64(tableName, "home")
	_liveMatch.HomeName = field.NewString(tableName, "homeName")
	_liveMatch.HomeScore = field.NewInt64(tableName, "homeScore")
	_liveMatch.HomeLogo = field.NewString(tableName, "homeLogo")
	_liveMatch.HomeKill = field.NewInt64(tableName, "homeKill")
	_liveMatch.HomeWinRate = field.NewFloat64(tableName, "homeWinRate")
	_liveMatch.Away = field.NewInt64(tableName, "away")
	_liveMatch.AwayName = field.NewString(tableName, "awayName")
	_liveMatch.AwayScore = field.NewInt64(tableName, "awayScore")
	_liveMatch.AwayLogo = field.NewString(tableName, "awayLogo")
	_liveMatch.AwayKill = field.NewInt64(tableName, "awayKill")
	_liveMatch.AwayWinRate = field.NewFloat64(tableName, "awayWinRate")
	_liveMatch.HasPro = field.NewInt64(tableName, "hasPro")
	_liveMatch.IsAttention = field.NewInt64(tableName, "isAttention")
	_liveMatch.HasPlan = field.NewInt64(tableName, "hasPlan")
	_liveMatch.Top = field.NewInt64(tableName, "top")
	_liveMatch.Menu = field.NewInt64(tableName, "menu")
	_liveMatch.AnimationURL = field.NewString(tableName, "animationUrl")
	_liveMatch.HomeThreePointGoals = field.NewInt64(tableName, "homeThreePointGoals")
	_liveMatch.AwayThreePointGoals = field.NewInt64(tableName, "awayThreePointGoals")
	_liveMatch.HomeCornerKick = field.NewInt64(tableName, "homeCornerKick")
	_liveMatch.AwayCornerKick = field.NewInt64(tableName, "awayCornerKick")
	_liveMatch.HomeYellowCard = field.NewInt64(tableName, "homeYellowCard")
	_liveMatch.HomeRedCard = field.NewInt64(tableName, "homeRedCard")
	_liveMatch.AwayYellowCard = field.NewInt64(tableName, "awayYellowCard")
	_liveMatch.AwayRedCard = field.NewInt64(tableName, "awayRedCard")
	_liveMatch.AwayFirstHalfScore = field.NewInt64(tableName, "awayFirstHalfScore")
	_liveMatch.HomeFirstHalfScore = field.NewInt64(tableName, "homeFirstHalfScore")
	_liveMatch.IconType = field.NewInt64(tableName, "iconType")
	_liveMatch.LiveUrls = field.NewString(tableName, "liveUrls")
	_liveMatch.IsLive = field.NewInt64(tableName, "isLive")
	_liveMatch.LiveImage = field.NewString(tableName, "liveImage")
	_liveMatch.AwayGoldsDiff = field.NewInt64(tableName, "awayGoldsDiff")
	_liveMatch.HomeGoldsDiff = field.NewInt64(tableName, "homeGoldsDiff")
	_liveMatch.WinTeamIDList = field.NewString(tableName, "winTeamIdList")
	_liveMatch.GameAbbr = field.NewString(tableName, "gameAbbr")
	_liveMatch.AnchorRoomVos = field.NewString(tableName, "anchorRoomVos")
	_liveMatch.StageName = field.NewString(tableName, "stageName")
	_liveMatch.ViewStyle = field.NewString(tableName, "viewStyle")
	_liveMatch.CreatedAt = field.NewField(tableName, "created_at")
	_liveMatch.UpdatedAt = field.NewField(tableName, "updated_at")

	_liveMatch.fillFieldMap()

	return _liveMatch
}

// liveMatch 直播比赛信息表
type liveMatch struct {
	liveMatchDo liveMatchDo

	ALL                 field.Asterisk
	ID                  field.Int64
	MatchID             field.Int64   // 比赛ID
	GameID              field.Int64   // 游戏ID：201 篮球，202 足球
	GameIcon            field.String  // 游戏icon
	SeriesID            field.Int64   // 赛事ID
	SeriesName          field.String  // 赛事名称
	SeriesLogo          field.String  // 赛事Logo
	LeagueID            field.Int64   // 联赛ID
	LeagueName          field.String  // 联赛名称
	LeagueLogo          field.String  // 联赛Logo
	LeagueLevel         field.Int64   // 联赛等级
	Bo                  field.Int64   // 赛制
	Status              field.Int64   // 比赛状态：1-upcoming(未开始)  2-live(进行中) 3-past(已结束) 4-cancel(已取消)
	State               field.Int64   // 比赛节点（体育专用）
	Finished            field.Int64   // 小局是否完成
	StartTime           field.Int64   // 开始时间
	GameTime            field.Int64   // 当前游戏时间（单位：秒，非正在比赛的值为0）
	BpPhase             field.Int64   // 是否Bp阶段（目前用于dota2）
	Round               field.Int64   // 当前第几局（非正在比赛值为0）
	RoundNum            field.Int64   // 当前回合（CS:GO）
	WinTeam             field.Int64   // 获胜队伍ID（未结束的比赛值为null）
	Home                field.Int64   // 主队ID
	HomeName            field.String  // 主队简称
	HomeScore           field.Int64   // 主队得分
	HomeLogo            field.String  // 主队Logo
	HomeKill            field.Int64   // 主队击杀（非正在比赛值为0）
	HomeWinRate         field.Float64 // 主队胜率
	Away                field.Int64   // 客队ID
	AwayName            field.String  // 客队简称
	AwayScore           field.Int64   // 客队得分
	AwayLogo            field.String  // 客队Logo
	AwayKill            field.Int64   // 客队击杀（非正在比赛值为0）
	AwayWinRate         field.Float64 // 客队胜率
	HasPro              field.Int64   // 是否有Pro数据（进行中跟未开始）
	IsAttention         field.Int64   // 是否关注（true-已关注，false-未关注）
	HasPlan             field.Int64   // 是否有方案（进行中跟未开始）
	Top                 field.Int64   // 置顶
	Menu                field.Int64   // 体育专用
	AnimationURL        field.String  // 动画直播地址（体育专用）
	HomeThreePointGoals field.Int64   // home三分球（体育专用）
	AwayThreePointGoals field.Int64   // away三分球（体育专用）
	HomeCornerKick      field.Int64   // home角球（体育专用）
	AwayCornerKick      field.Int64   // away角球（体育专用）
	HomeYellowCard      field.Int64   // home黄牌（体育专用）
	HomeRedCard         field.Int64   // home红牌（体育专用）
	AwayYellowCard      field.Int64   // away黄牌（体育专用）
	AwayRedCard         field.Int64   // away红牌（体育专用）
	AwayFirstHalfScore  field.Int64   // away上半场得分（体育专用）
	HomeFirstHalfScore  field.Int64   // home上半场得分（体育专用）
	IconType            field.Int64   // 0：比赛前瞻 1：主播解说 2：视频直播 3：动画直播
	LiveUrls            field.String  // 直播地址集合
	IsLive              field.Int64   // 是否有直播
	LiveImage           field.String  // 直播封面图
	AwayGoldsDiff       field.Int64   // 客队金币差（PC字段）
	HomeGoldsDiff       field.Int64   // 主队金币差（PC字段）
	WinTeamIDList       field.String  // 胜利队伍Id集合（PC字段）
	GameAbbr            field.String  // 游戏简称（PC字段）
	AnchorRoomVos       field.String  // 比赛主播信息列表
	StageName           field.String  // 阶段
	ViewStyle           field.String  // 直播限制
	CreatedAt           field.Field
	UpdatedAt           field.Field

	fieldMap map[string]field.Expr
}

func (l liveMatch) Table(newTableName string) *liveMatch {
	l.liveMatchDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveMatch) As(alias string) *liveMatch {
	l.liveMatchDo.DO = *(l.liveMatchDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveMatch) updateTableName(table string) *liveMatch {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.MatchID = field.NewInt64(table, "matchId")
	l.GameID = field.NewInt64(table, "gameId")
	l.GameIcon = field.NewString(table, "gameIcon")
	l.SeriesID = field.NewInt64(table, "seriesId")
	l.SeriesName = field.NewString(table, "seriesName")
	l.SeriesLogo = field.NewString(table, "seriesLogo")
	l.LeagueID = field.NewInt64(table, "leagueId")
	l.LeagueName = field.NewString(table, "leagueName")
	l.LeagueLogo = field.NewString(table, "leagueLogo")
	l.LeagueLevel = field.NewInt64(table, "leagueLevel")
	l.Bo = field.NewInt64(table, "bo")
	l.Status = field.NewInt64(table, "status")
	l.State = field.NewInt64(table, "state")
	l.Finished = field.NewInt64(table, "finished")
	l.StartTime = field.NewInt64(table, "startTime")
	l.GameTime = field.NewInt64(table, "gameTime")
	l.BpPhase = field.NewInt64(table, "bpPhase")
	l.Round = field.NewInt64(table, "round")
	l.RoundNum = field.NewInt64(table, "roundNum")
	l.WinTeam = field.NewInt64(table, "winTeam")
	l.Home = field.NewInt64(table, "home")
	l.HomeName = field.NewString(table, "homeName")
	l.HomeScore = field.NewInt64(table, "homeScore")
	l.HomeLogo = field.NewString(table, "homeLogo")
	l.HomeKill = field.NewInt64(table, "homeKill")
	l.HomeWinRate = field.NewFloat64(table, "homeWinRate")
	l.Away = field.NewInt64(table, "away")
	l.AwayName = field.NewString(table, "awayName")
	l.AwayScore = field.NewInt64(table, "awayScore")
	l.AwayLogo = field.NewString(table, "awayLogo")
	l.AwayKill = field.NewInt64(table, "awayKill")
	l.AwayWinRate = field.NewFloat64(table, "awayWinRate")
	l.HasPro = field.NewInt64(table, "hasPro")
	l.IsAttention = field.NewInt64(table, "isAttention")
	l.HasPlan = field.NewInt64(table, "hasPlan")
	l.Top = field.NewInt64(table, "top")
	l.Menu = field.NewInt64(table, "menu")
	l.AnimationURL = field.NewString(table, "animationUrl")
	l.HomeThreePointGoals = field.NewInt64(table, "homeThreePointGoals")
	l.AwayThreePointGoals = field.NewInt64(table, "awayThreePointGoals")
	l.HomeCornerKick = field.NewInt64(table, "homeCornerKick")
	l.AwayCornerKick = field.NewInt64(table, "awayCornerKick")
	l.HomeYellowCard = field.NewInt64(table, "homeYellowCard")
	l.HomeRedCard = field.NewInt64(table, "homeRedCard")
	l.AwayYellowCard = field.NewInt64(table, "awayYellowCard")
	l.AwayRedCard = field.NewInt64(table, "awayRedCard")
	l.AwayFirstHalfScore = field.NewInt64(table, "awayFirstHalfScore")
	l.HomeFirstHalfScore = field.NewInt64(table, "homeFirstHalfScore")
	l.IconType = field.NewInt64(table, "iconType")
	l.LiveUrls = field.NewString(table, "liveUrls")
	l.IsLive = field.NewInt64(table, "isLive")
	l.LiveImage = field.NewString(table, "liveImage")
	l.AwayGoldsDiff = field.NewInt64(table, "awayGoldsDiff")
	l.HomeGoldsDiff = field.NewInt64(table, "homeGoldsDiff")
	l.WinTeamIDList = field.NewString(table, "winTeamIdList")
	l.GameAbbr = field.NewString(table, "gameAbbr")
	l.AnchorRoomVos = field.NewString(table, "anchorRoomVos")
	l.StageName = field.NewString(table, "stageName")
	l.ViewStyle = field.NewString(table, "viewStyle")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *liveMatch) WithContext(ctx context.Context) ILiveMatchDo {
	return l.liveMatchDo.WithContext(ctx)
}

func (l liveMatch) TableName() string { return l.liveMatchDo.TableName() }

func (l liveMatch) Alias() string { return l.liveMatchDo.Alias() }

func (l liveMatch) Columns(cols ...field.Expr) gen.Columns { return l.liveMatchDo.Columns(cols...) }

func (l *liveMatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveMatch) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 62)
	l.fieldMap["id"] = l.ID
	l.fieldMap["matchId"] = l.MatchID
	l.fieldMap["gameId"] = l.GameID
	l.fieldMap["gameIcon"] = l.GameIcon
	l.fieldMap["seriesId"] = l.SeriesID
	l.fieldMap["seriesName"] = l.SeriesName
	l.fieldMap["seriesLogo"] = l.SeriesLogo
	l.fieldMap["leagueId"] = l.LeagueID
	l.fieldMap["leagueName"] = l.LeagueName
	l.fieldMap["leagueLogo"] = l.LeagueLogo
	l.fieldMap["leagueLevel"] = l.LeagueLevel
	l.fieldMap["bo"] = l.Bo
	l.fieldMap["status"] = l.Status
	l.fieldMap["state"] = l.State
	l.fieldMap["finished"] = l.Finished
	l.fieldMap["startTime"] = l.StartTime
	l.fieldMap["gameTime"] = l.GameTime
	l.fieldMap["bpPhase"] = l.BpPhase
	l.fieldMap["round"] = l.Round
	l.fieldMap["roundNum"] = l.RoundNum
	l.fieldMap["winTeam"] = l.WinTeam
	l.fieldMap["home"] = l.Home
	l.fieldMap["homeName"] = l.HomeName
	l.fieldMap["homeScore"] = l.HomeScore
	l.fieldMap["homeLogo"] = l.HomeLogo
	l.fieldMap["homeKill"] = l.HomeKill
	l.fieldMap["homeWinRate"] = l.HomeWinRate
	l.fieldMap["away"] = l.Away
	l.fieldMap["awayName"] = l.AwayName
	l.fieldMap["awayScore"] = l.AwayScore
	l.fieldMap["awayLogo"] = l.AwayLogo
	l.fieldMap["awayKill"] = l.AwayKill
	l.fieldMap["awayWinRate"] = l.AwayWinRate
	l.fieldMap["hasPro"] = l.HasPro
	l.fieldMap["isAttention"] = l.IsAttention
	l.fieldMap["hasPlan"] = l.HasPlan
	l.fieldMap["top"] = l.Top
	l.fieldMap["menu"] = l.Menu
	l.fieldMap["animationUrl"] = l.AnimationURL
	l.fieldMap["homeThreePointGoals"] = l.HomeThreePointGoals
	l.fieldMap["awayThreePointGoals"] = l.AwayThreePointGoals
	l.fieldMap["homeCornerKick"] = l.HomeCornerKick
	l.fieldMap["awayCornerKick"] = l.AwayCornerKick
	l.fieldMap["homeYellowCard"] = l.HomeYellowCard
	l.fieldMap["homeRedCard"] = l.HomeRedCard
	l.fieldMap["awayYellowCard"] = l.AwayYellowCard
	l.fieldMap["awayRedCard"] = l.AwayRedCard
	l.fieldMap["awayFirstHalfScore"] = l.AwayFirstHalfScore
	l.fieldMap["homeFirstHalfScore"] = l.HomeFirstHalfScore
	l.fieldMap["iconType"] = l.IconType
	l.fieldMap["liveUrls"] = l.LiveUrls
	l.fieldMap["isLive"] = l.IsLive
	l.fieldMap["liveImage"] = l.LiveImage
	l.fieldMap["awayGoldsDiff"] = l.AwayGoldsDiff
	l.fieldMap["homeGoldsDiff"] = l.HomeGoldsDiff
	l.fieldMap["winTeamIdList"] = l.WinTeamIDList
	l.fieldMap["gameAbbr"] = l.GameAbbr
	l.fieldMap["anchorRoomVos"] = l.AnchorRoomVos
	l.fieldMap["stageName"] = l.StageName
	l.fieldMap["viewStyle"] = l.ViewStyle
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l liveMatch) clone(db *gorm.DB) liveMatch {
	l.liveMatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveMatch) replaceDB(db *gorm.DB) liveMatch {
	l.liveMatchDo.ReplaceDB(db)
	return l
}

type liveMatchDo struct{ gen.DO }

type ILiveMatchDo interface {
	gen.SubQuery
	Debug() ILiveMatchDo
	WithContext(ctx context.Context) ILiveMatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveMatchDo
	WriteDB() ILiveMatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveMatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveMatchDo
	Not(conds ...gen.Condition) ILiveMatchDo
	Or(conds ...gen.Condition) ILiveMatchDo
	Select(conds ...field.Expr) ILiveMatchDo
	Where(conds ...gen.Condition) ILiveMatchDo
	Order(conds ...field.Expr) ILiveMatchDo
	Distinct(cols ...field.Expr) ILiveMatchDo
	Omit(cols ...field.Expr) ILiveMatchDo
	Join(table schema.Tabler, on ...field.Expr) ILiveMatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveMatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveMatchDo
	Group(cols ...field.Expr) ILiveMatchDo
	Having(conds ...gen.Condition) ILiveMatchDo
	Limit(limit int) ILiveMatchDo
	Offset(offset int) ILiveMatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveMatchDo
	Unscoped() ILiveMatchDo
	Create(values ...*model.LiveMatch) error
	CreateInBatches(values []*model.LiveMatch, batchSize int) error
	Save(values ...*model.LiveMatch) error
	First() (*model.LiveMatch, error)
	Take() (*model.LiveMatch, error)
	Last() (*model.LiveMatch, error)
	Find() ([]*model.LiveMatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveMatch, err error)
	FindInBatches(result *[]*model.LiveMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveMatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveMatchDo
	Assign(attrs ...field.AssignExpr) ILiveMatchDo
	Joins(fields ...field.RelationField) ILiveMatchDo
	Preload(fields ...field.RelationField) ILiveMatchDo
	FirstOrInit() (*model.LiveMatch, error)
	FirstOrCreate() (*model.LiveMatch, error)
	FindByPage(offset int, limit int) (result []*model.LiveMatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveMatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveMatchDo) Debug() ILiveMatchDo {
	return l.withDO(l.DO.Debug())
}

func (l liveMatchDo) WithContext(ctx context.Context) ILiveMatchDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveMatchDo) ReadDB() ILiveMatchDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveMatchDo) WriteDB() ILiveMatchDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveMatchDo) Session(config *gorm.Session) ILiveMatchDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveMatchDo) Clauses(conds ...clause.Expression) ILiveMatchDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveMatchDo) Returning(value interface{}, columns ...string) ILiveMatchDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveMatchDo) Not(conds ...gen.Condition) ILiveMatchDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveMatchDo) Or(conds ...gen.Condition) ILiveMatchDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveMatchDo) Select(conds ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveMatchDo) Where(conds ...gen.Condition) ILiveMatchDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveMatchDo) Order(conds ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveMatchDo) Distinct(cols ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveMatchDo) Omit(cols ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveMatchDo) Join(table schema.Tabler, on ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveMatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveMatchDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveMatchDo) Group(cols ...field.Expr) ILiveMatchDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveMatchDo) Having(conds ...gen.Condition) ILiveMatchDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveMatchDo) Limit(limit int) ILiveMatchDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveMatchDo) Offset(offset int) ILiveMatchDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveMatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveMatchDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveMatchDo) Unscoped() ILiveMatchDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveMatchDo) Create(values ...*model.LiveMatch) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveMatchDo) CreateInBatches(values []*model.LiveMatch, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveMatchDo) Save(values ...*model.LiveMatch) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveMatchDo) First() (*model.LiveMatch, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveMatch), nil
	}
}

func (l liveMatchDo) Take() (*model.LiveMatch, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveMatch), nil
	}
}

func (l liveMatchDo) Last() (*model.LiveMatch, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveMatch), nil
	}
}

func (l liveMatchDo) Find() ([]*model.LiveMatch, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveMatch), err
}

func (l liveMatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveMatch, err error) {
	buf := make([]*model.LiveMatch, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveMatchDo) FindInBatches(result *[]*model.LiveMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveMatchDo) Attrs(attrs ...field.AssignExpr) ILiveMatchDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveMatchDo) Assign(attrs ...field.AssignExpr) ILiveMatchDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveMatchDo) Joins(fields ...field.RelationField) ILiveMatchDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveMatchDo) Preload(fields ...field.RelationField) ILiveMatchDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveMatchDo) FirstOrInit() (*model.LiveMatch, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveMatch), nil
	}
}

func (l liveMatchDo) FirstOrCreate() (*model.LiveMatch, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveMatch), nil
	}
}

func (l liveMatchDo) FindByPage(offset int, limit int) (result []*model.LiveMatch, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveMatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveMatchDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveMatchDo) Delete(models ...*model.LiveMatch) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveMatchDo) withDO(do gen.Dao) *liveMatchDo {
	l.DO = *do.(*gen.DO)
	return l
}
