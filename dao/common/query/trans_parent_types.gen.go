// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransParentType(db *gorm.DB, opts ...gen.DOOption) transParentType {
	_transParentType := transParentType{}

	_transParentType.transParentTypeDo.UseDB(db, opts...)
	_transParentType.transParentTypeDo.UseModel(&model.TransParentType{})

	tableName := _transParentType.transParentTypeDo.TableName()
	_transParentType.ALL = field.NewAsterisk(tableName)
	_transParentType.ID = field.NewInt64(tableName, "id")
	_transParentType.EnName = field.NewString(tableName, "en_name")
	_transParentType.CnName = field.NewString(tableName, "cn_name")
	_transParentType.IsOpen = field.NewInt64(tableName, "is_open")
	_transParentType.CreatedAt = field.NewField(tableName, "created_at")
	_transParentType.UpdatedAt = field.NewField(tableName, "updated_at")

	_transParentType.fillFieldMap()

	return _transParentType
}

type transParentType struct {
	transParentTypeDo transParentTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	EnName    field.String // 类型名称 英文
	CnName    field.String // 类型名称 中文
	IsOpen    field.Int64  // 是否开启0:否;1:是
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (t transParentType) Table(newTableName string) *transParentType {
	t.transParentTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transParentType) As(alias string) *transParentType {
	t.transParentTypeDo.DO = *(t.transParentTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transParentType) updateTableName(table string) *transParentType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.EnName = field.NewString(table, "en_name")
	t.CnName = field.NewString(table, "cn_name")
	t.IsOpen = field.NewInt64(table, "is_open")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transParentType) WithContext(ctx context.Context) ITransParentTypeDo {
	return t.transParentTypeDo.WithContext(ctx)
}

func (t transParentType) TableName() string { return t.transParentTypeDo.TableName() }

func (t transParentType) Alias() string { return t.transParentTypeDo.Alias() }

func (t transParentType) Columns(cols ...field.Expr) gen.Columns {
	return t.transParentTypeDo.Columns(cols...)
}

func (t *transParentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transParentType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["en_name"] = t.EnName
	t.fieldMap["cn_name"] = t.CnName
	t.fieldMap["is_open"] = t.IsOpen
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transParentType) clone(db *gorm.DB) transParentType {
	t.transParentTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transParentType) replaceDB(db *gorm.DB) transParentType {
	t.transParentTypeDo.ReplaceDB(db)
	return t
}

type transParentTypeDo struct{ gen.DO }

type ITransParentTypeDo interface {
	gen.SubQuery
	Debug() ITransParentTypeDo
	WithContext(ctx context.Context) ITransParentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransParentTypeDo
	WriteDB() ITransParentTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransParentTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransParentTypeDo
	Not(conds ...gen.Condition) ITransParentTypeDo
	Or(conds ...gen.Condition) ITransParentTypeDo
	Select(conds ...field.Expr) ITransParentTypeDo
	Where(conds ...gen.Condition) ITransParentTypeDo
	Order(conds ...field.Expr) ITransParentTypeDo
	Distinct(cols ...field.Expr) ITransParentTypeDo
	Omit(cols ...field.Expr) ITransParentTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITransParentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransParentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransParentTypeDo
	Group(cols ...field.Expr) ITransParentTypeDo
	Having(conds ...gen.Condition) ITransParentTypeDo
	Limit(limit int) ITransParentTypeDo
	Offset(offset int) ITransParentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransParentTypeDo
	Unscoped() ITransParentTypeDo
	Create(values ...*model.TransParentType) error
	CreateInBatches(values []*model.TransParentType, batchSize int) error
	Save(values ...*model.TransParentType) error
	First() (*model.TransParentType, error)
	Take() (*model.TransParentType, error)
	Last() (*model.TransParentType, error)
	Find() ([]*model.TransParentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransParentType, err error)
	FindInBatches(result *[]*model.TransParentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransParentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransParentTypeDo
	Assign(attrs ...field.AssignExpr) ITransParentTypeDo
	Joins(fields ...field.RelationField) ITransParentTypeDo
	Preload(fields ...field.RelationField) ITransParentTypeDo
	FirstOrInit() (*model.TransParentType, error)
	FirstOrCreate() (*model.TransParentType, error)
	FindByPage(offset int, limit int) (result []*model.TransParentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransParentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transParentTypeDo) Debug() ITransParentTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t transParentTypeDo) WithContext(ctx context.Context) ITransParentTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transParentTypeDo) ReadDB() ITransParentTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t transParentTypeDo) WriteDB() ITransParentTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t transParentTypeDo) Session(config *gorm.Session) ITransParentTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t transParentTypeDo) Clauses(conds ...clause.Expression) ITransParentTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transParentTypeDo) Returning(value interface{}, columns ...string) ITransParentTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transParentTypeDo) Not(conds ...gen.Condition) ITransParentTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transParentTypeDo) Or(conds ...gen.Condition) ITransParentTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transParentTypeDo) Select(conds ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transParentTypeDo) Where(conds ...gen.Condition) ITransParentTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transParentTypeDo) Order(conds ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transParentTypeDo) Distinct(cols ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transParentTypeDo) Omit(cols ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transParentTypeDo) Join(table schema.Tabler, on ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transParentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transParentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transParentTypeDo) Group(cols ...field.Expr) ITransParentTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transParentTypeDo) Having(conds ...gen.Condition) ITransParentTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transParentTypeDo) Limit(limit int) ITransParentTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transParentTypeDo) Offset(offset int) ITransParentTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transParentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransParentTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transParentTypeDo) Unscoped() ITransParentTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transParentTypeDo) Create(values ...*model.TransParentType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transParentTypeDo) CreateInBatches(values []*model.TransParentType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transParentTypeDo) Save(values ...*model.TransParentType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transParentTypeDo) First() (*model.TransParentType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransParentType), nil
	}
}

func (t transParentTypeDo) Take() (*model.TransParentType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransParentType), nil
	}
}

func (t transParentTypeDo) Last() (*model.TransParentType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransParentType), nil
	}
}

func (t transParentTypeDo) Find() ([]*model.TransParentType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransParentType), err
}

func (t transParentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransParentType, err error) {
	buf := make([]*model.TransParentType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transParentTypeDo) FindInBatches(result *[]*model.TransParentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transParentTypeDo) Attrs(attrs ...field.AssignExpr) ITransParentTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transParentTypeDo) Assign(attrs ...field.AssignExpr) ITransParentTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transParentTypeDo) Joins(fields ...field.RelationField) ITransParentTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transParentTypeDo) Preload(fields ...field.RelationField) ITransParentTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transParentTypeDo) FirstOrInit() (*model.TransParentType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransParentType), nil
	}
}

func (t transParentTypeDo) FirstOrCreate() (*model.TransParentType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransParentType), nil
	}
}

func (t transParentTypeDo) FindByPage(offset int, limit int) (result []*model.TransParentType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transParentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transParentTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transParentTypeDo) Delete(models ...*model.TransParentType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transParentTypeDo) withDO(do gen.Dao) *transParentTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
