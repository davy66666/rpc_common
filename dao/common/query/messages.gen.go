// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMessage(db *gorm.DB, opts ...gen.DOOption) message {
	_message := message{}

	_message.messageDo.UseDB(db, opts...)
	_message.messageDo.UseModel(&model.Message{})

	tableName := _message.messageDo.TableName()
	_message.ALL = field.NewAsterisk(tableName)
	_message.ID = field.NewInt64(tableName, "id")
	_message.Title = field.NewString(tableName, "title")
	_message.Content = field.NewString(tableName, "content")
	_message.MsgID = field.NewInt64(tableName, "msg_id")
	_message.MsgName = field.NewString(tableName, "msg_name")
	_message.FromUserid = field.NewInt64(tableName, "from_userid")
	_message.FromUsername = field.NewString(tableName, "from_username")
	_message.UserID = field.NewInt64(tableName, "user_id")
	_message.Username = field.NewString(tableName, "username")
	_message.IsRead = field.NewInt64(tableName, "is_read")
	_message.IsWelcome = field.NewInt64(tableName, "is_welcome")
	_message.IsTop = field.NewInt64(tableName, "is_top")
	_message.IsOpen = field.NewInt64(tableName, "is_open")
	_message.IsSolved = field.NewInt64(tableName, "is_solved")
	_message.AppPlat = field.NewInt64(tableName, "app_plat")
	_message.AdminName = field.NewString(tableName, "admin_name")
	_message.CreatedAt = field.NewField(tableName, "created_at")
	_message.UpdatedAt = field.NewField(tableName, "updated_at")
	_message.ReadiedAt = field.NewField(tableName, "readied_at")
	_message.Sort = field.NewInt64(tableName, "sort")
	_message.PayLevels = field.NewString(tableName, "pay_levels")
	_message.AgentNames = field.NewString(tableName, "agent_names")
	_message.MsgType = field.NewInt64(tableName, "msg_type")
	_message.Path = field.NewString(tableName, "path")

	_message.fillFieldMap()

	return _message
}

type message struct {
	messageDo messageDo

	ALL          field.Asterisk
	ID           field.Int64
	Title        field.String // 消息标题
	Content      field.String // 消息内容
	MsgID        field.Int64  // 消息类型id
	MsgName      field.String // 消息类型标题
	FromUserid   field.Int64  // 发送者用户id
	FromUsername field.String // 发件人
	UserID       field.Int64  // 收件用户id
	Username     field.String // 收件人
	IsRead       field.Int64  // 0未读，1已读
	IsWelcome    field.Int64  // 是否欢迎消息 0:不是;1:是
	IsTop        field.Int64  // 是否置顶0:否;1:是
	IsOpen       field.Int64  // 是否开启0:否;1:是
	IsSolved     field.Int64  // 是否解决0:未解决;1:解决
	AppPlat      field.Int64  // 平台类型 1综合 2体育
	AdminName    field.String // 添加消息的后台管理员
	CreatedAt    field.Field
	UpdatedAt    field.Field
	ReadiedAt    field.Field  // 私信管理员阅读时间
	Sort         field.Int64  // 权重
	PayLevels    field.String // 指定层级（逗号分隔)
	AgentNames   field.String // 指定代理（逗号分隔）
	MsgType      field.Int64  // 消息主体类型 0文本 1图片 2视频
	Path         field.String // 图片、视频地址

	fieldMap map[string]field.Expr
}

func (m message) Table(newTableName string) *message {
	m.messageDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m message) As(alias string) *message {
	m.messageDo.DO = *(m.messageDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *message) updateTableName(table string) *message {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Title = field.NewString(table, "title")
	m.Content = field.NewString(table, "content")
	m.MsgID = field.NewInt64(table, "msg_id")
	m.MsgName = field.NewString(table, "msg_name")
	m.FromUserid = field.NewInt64(table, "from_userid")
	m.FromUsername = field.NewString(table, "from_username")
	m.UserID = field.NewInt64(table, "user_id")
	m.Username = field.NewString(table, "username")
	m.IsRead = field.NewInt64(table, "is_read")
	m.IsWelcome = field.NewInt64(table, "is_welcome")
	m.IsTop = field.NewInt64(table, "is_top")
	m.IsOpen = field.NewInt64(table, "is_open")
	m.IsSolved = field.NewInt64(table, "is_solved")
	m.AppPlat = field.NewInt64(table, "app_plat")
	m.AdminName = field.NewString(table, "admin_name")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")
	m.ReadiedAt = field.NewField(table, "readied_at")
	m.Sort = field.NewInt64(table, "sort")
	m.PayLevels = field.NewString(table, "pay_levels")
	m.AgentNames = field.NewString(table, "agent_names")
	m.MsgType = field.NewInt64(table, "msg_type")
	m.Path = field.NewString(table, "path")

	m.fillFieldMap()

	return m
}

func (m *message) WithContext(ctx context.Context) IMessageDo { return m.messageDo.WithContext(ctx) }

func (m message) TableName() string { return m.messageDo.TableName() }

func (m message) Alias() string { return m.messageDo.Alias() }

func (m message) Columns(cols ...field.Expr) gen.Columns { return m.messageDo.Columns(cols...) }

func (m *message) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *message) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 24)
	m.fieldMap["id"] = m.ID
	m.fieldMap["title"] = m.Title
	m.fieldMap["content"] = m.Content
	m.fieldMap["msg_id"] = m.MsgID
	m.fieldMap["msg_name"] = m.MsgName
	m.fieldMap["from_userid"] = m.FromUserid
	m.fieldMap["from_username"] = m.FromUsername
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["username"] = m.Username
	m.fieldMap["is_read"] = m.IsRead
	m.fieldMap["is_welcome"] = m.IsWelcome
	m.fieldMap["is_top"] = m.IsTop
	m.fieldMap["is_open"] = m.IsOpen
	m.fieldMap["is_solved"] = m.IsSolved
	m.fieldMap["app_plat"] = m.AppPlat
	m.fieldMap["admin_name"] = m.AdminName
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["readied_at"] = m.ReadiedAt
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["pay_levels"] = m.PayLevels
	m.fieldMap["agent_names"] = m.AgentNames
	m.fieldMap["msg_type"] = m.MsgType
	m.fieldMap["path"] = m.Path
}

func (m message) clone(db *gorm.DB) message {
	m.messageDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m message) replaceDB(db *gorm.DB) message {
	m.messageDo.ReplaceDB(db)
	return m
}

type messageDo struct{ gen.DO }

type IMessageDo interface {
	gen.SubQuery
	Debug() IMessageDo
	WithContext(ctx context.Context) IMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageDo
	WriteDB() IMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageDo
	Not(conds ...gen.Condition) IMessageDo
	Or(conds ...gen.Condition) IMessageDo
	Select(conds ...field.Expr) IMessageDo
	Where(conds ...gen.Condition) IMessageDo
	Order(conds ...field.Expr) IMessageDo
	Distinct(cols ...field.Expr) IMessageDo
	Omit(cols ...field.Expr) IMessageDo
	Join(table schema.Tabler, on ...field.Expr) IMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageDo
	Group(cols ...field.Expr) IMessageDo
	Having(conds ...gen.Condition) IMessageDo
	Limit(limit int) IMessageDo
	Offset(offset int) IMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageDo
	Unscoped() IMessageDo
	Create(values ...*model.Message) error
	CreateInBatches(values []*model.Message, batchSize int) error
	Save(values ...*model.Message) error
	First() (*model.Message, error)
	Take() (*model.Message, error)
	Last() (*model.Message, error)
	Find() ([]*model.Message, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Message, err error)
	FindInBatches(result *[]*model.Message, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Message) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageDo
	Assign(attrs ...field.AssignExpr) IMessageDo
	Joins(fields ...field.RelationField) IMessageDo
	Preload(fields ...field.RelationField) IMessageDo
	FirstOrInit() (*model.Message, error)
	FirstOrCreate() (*model.Message, error)
	FindByPage(offset int, limit int) (result []*model.Message, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageDo) Debug() IMessageDo {
	return m.withDO(m.DO.Debug())
}

func (m messageDo) WithContext(ctx context.Context) IMessageDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageDo) ReadDB() IMessageDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageDo) WriteDB() IMessageDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageDo) Session(config *gorm.Session) IMessageDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageDo) Clauses(conds ...clause.Expression) IMessageDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageDo) Returning(value interface{}, columns ...string) IMessageDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageDo) Not(conds ...gen.Condition) IMessageDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageDo) Or(conds ...gen.Condition) IMessageDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageDo) Select(conds ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageDo) Where(conds ...gen.Condition) IMessageDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageDo) Order(conds ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageDo) Distinct(cols ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageDo) Omit(cols ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageDo) Join(table schema.Tabler, on ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageDo) Group(cols ...field.Expr) IMessageDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageDo) Having(conds ...gen.Condition) IMessageDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageDo) Limit(limit int) IMessageDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageDo) Offset(offset int) IMessageDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageDo) Unscoped() IMessageDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageDo) Create(values ...*model.Message) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageDo) CreateInBatches(values []*model.Message, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageDo) Save(values ...*model.Message) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageDo) First() (*model.Message, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Message), nil
	}
}

func (m messageDo) Take() (*model.Message, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Message), nil
	}
}

func (m messageDo) Last() (*model.Message, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Message), nil
	}
}

func (m messageDo) Find() ([]*model.Message, error) {
	result, err := m.DO.Find()
	return result.([]*model.Message), err
}

func (m messageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Message, err error) {
	buf := make([]*model.Message, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageDo) FindInBatches(result *[]*model.Message, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageDo) Attrs(attrs ...field.AssignExpr) IMessageDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageDo) Assign(attrs ...field.AssignExpr) IMessageDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageDo) Joins(fields ...field.RelationField) IMessageDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageDo) Preload(fields ...field.RelationField) IMessageDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageDo) FirstOrInit() (*model.Message, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Message), nil
	}
}

func (m messageDo) FirstOrCreate() (*model.Message, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Message), nil
	}
}

func (m messageDo) FindByPage(offset int, limit int) (result []*model.Message, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageDo) Delete(models ...*model.Message) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageDo) withDO(do gen.Dao) *messageDo {
	m.DO = *do.(*gen.DO)
	return m
}
