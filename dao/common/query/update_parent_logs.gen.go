// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUpdateParentLog(db *gorm.DB, opts ...gen.DOOption) updateParentLog {
	_updateParentLog := updateParentLog{}

	_updateParentLog.updateParentLogDo.UseDB(db, opts...)
	_updateParentLog.updateParentLogDo.UseModel(&model.UpdateParentLog{})

	tableName := _updateParentLog.updateParentLogDo.TableName()
	_updateParentLog.ALL = field.NewAsterisk(tableName)
	_updateParentLog.ID = field.NewInt64(tableName, "id")
	_updateParentLog.Username = field.NewString(tableName, "username")
	_updateParentLog.UserID = field.NewInt64(tableName, "user_id")
	_updateParentLog.OldParentName = field.NewString(tableName, "old_parent_name")
	_updateParentLog.NewParentName = field.NewString(tableName, "new_parent_name")
	_updateParentLog.CreatedAt = field.NewField(tableName, "created_at")
	_updateParentLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_updateParentLog.AdminName = field.NewString(tableName, "admin_name")
	_updateParentLog.Remark = field.NewString(tableName, "remark")

	_updateParentLog.fillFieldMap()

	return _updateParentLog
}

type updateParentLog struct {
	updateParentLogDo updateParentLogDo

	ALL           field.Asterisk
	ID            field.Int64
	Username      field.String // 会员名称
	UserID        field.Int64  // 会员id
	OldParentName field.String // 旧代理
	NewParentName field.String // 新代理
	CreatedAt     field.Field
	UpdatedAt     field.Field
	AdminName     field.String // 管理员
	Remark        field.String // 备注

	fieldMap map[string]field.Expr
}

func (u updateParentLog) Table(newTableName string) *updateParentLog {
	u.updateParentLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u updateParentLog) As(alias string) *updateParentLog {
	u.updateParentLogDo.DO = *(u.updateParentLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *updateParentLog) updateTableName(table string) *updateParentLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.UserID = field.NewInt64(table, "user_id")
	u.OldParentName = field.NewString(table, "old_parent_name")
	u.NewParentName = field.NewString(table, "new_parent_name")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.AdminName = field.NewString(table, "admin_name")
	u.Remark = field.NewString(table, "remark")

	u.fillFieldMap()

	return u
}

func (u *updateParentLog) WithContext(ctx context.Context) IUpdateParentLogDo {
	return u.updateParentLogDo.WithContext(ctx)
}

func (u updateParentLog) TableName() string { return u.updateParentLogDo.TableName() }

func (u updateParentLog) Alias() string { return u.updateParentLogDo.Alias() }

func (u updateParentLog) Columns(cols ...field.Expr) gen.Columns {
	return u.updateParentLogDo.Columns(cols...)
}

func (u *updateParentLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *updateParentLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["old_parent_name"] = u.OldParentName
	u.fieldMap["new_parent_name"] = u.NewParentName
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["admin_name"] = u.AdminName
	u.fieldMap["remark"] = u.Remark
}

func (u updateParentLog) clone(db *gorm.DB) updateParentLog {
	u.updateParentLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u updateParentLog) replaceDB(db *gorm.DB) updateParentLog {
	u.updateParentLogDo.ReplaceDB(db)
	return u
}

type updateParentLogDo struct{ gen.DO }

type IUpdateParentLogDo interface {
	gen.SubQuery
	Debug() IUpdateParentLogDo
	WithContext(ctx context.Context) IUpdateParentLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpdateParentLogDo
	WriteDB() IUpdateParentLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpdateParentLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpdateParentLogDo
	Not(conds ...gen.Condition) IUpdateParentLogDo
	Or(conds ...gen.Condition) IUpdateParentLogDo
	Select(conds ...field.Expr) IUpdateParentLogDo
	Where(conds ...gen.Condition) IUpdateParentLogDo
	Order(conds ...field.Expr) IUpdateParentLogDo
	Distinct(cols ...field.Expr) IUpdateParentLogDo
	Omit(cols ...field.Expr) IUpdateParentLogDo
	Join(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo
	Group(cols ...field.Expr) IUpdateParentLogDo
	Having(conds ...gen.Condition) IUpdateParentLogDo
	Limit(limit int) IUpdateParentLogDo
	Offset(offset int) IUpdateParentLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdateParentLogDo
	Unscoped() IUpdateParentLogDo
	Create(values ...*model.UpdateParentLog) error
	CreateInBatches(values []*model.UpdateParentLog, batchSize int) error
	Save(values ...*model.UpdateParentLog) error
	First() (*model.UpdateParentLog, error)
	Take() (*model.UpdateParentLog, error)
	Last() (*model.UpdateParentLog, error)
	Find() ([]*model.UpdateParentLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdateParentLog, err error)
	FindInBatches(result *[]*model.UpdateParentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpdateParentLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpdateParentLogDo
	Assign(attrs ...field.AssignExpr) IUpdateParentLogDo
	Joins(fields ...field.RelationField) IUpdateParentLogDo
	Preload(fields ...field.RelationField) IUpdateParentLogDo
	FirstOrInit() (*model.UpdateParentLog, error)
	FirstOrCreate() (*model.UpdateParentLog, error)
	FindByPage(offset int, limit int) (result []*model.UpdateParentLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpdateParentLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u updateParentLogDo) Debug() IUpdateParentLogDo {
	return u.withDO(u.DO.Debug())
}

func (u updateParentLogDo) WithContext(ctx context.Context) IUpdateParentLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u updateParentLogDo) ReadDB() IUpdateParentLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u updateParentLogDo) WriteDB() IUpdateParentLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u updateParentLogDo) Session(config *gorm.Session) IUpdateParentLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u updateParentLogDo) Clauses(conds ...clause.Expression) IUpdateParentLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u updateParentLogDo) Returning(value interface{}, columns ...string) IUpdateParentLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u updateParentLogDo) Not(conds ...gen.Condition) IUpdateParentLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u updateParentLogDo) Or(conds ...gen.Condition) IUpdateParentLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u updateParentLogDo) Select(conds ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u updateParentLogDo) Where(conds ...gen.Condition) IUpdateParentLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u updateParentLogDo) Order(conds ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u updateParentLogDo) Distinct(cols ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u updateParentLogDo) Omit(cols ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u updateParentLogDo) Join(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u updateParentLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u updateParentLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u updateParentLogDo) Group(cols ...field.Expr) IUpdateParentLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u updateParentLogDo) Having(conds ...gen.Condition) IUpdateParentLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u updateParentLogDo) Limit(limit int) IUpdateParentLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u updateParentLogDo) Offset(offset int) IUpdateParentLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u updateParentLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdateParentLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u updateParentLogDo) Unscoped() IUpdateParentLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u updateParentLogDo) Create(values ...*model.UpdateParentLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u updateParentLogDo) CreateInBatches(values []*model.UpdateParentLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u updateParentLogDo) Save(values ...*model.UpdateParentLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u updateParentLogDo) First() (*model.UpdateParentLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateParentLog), nil
	}
}

func (u updateParentLogDo) Take() (*model.UpdateParentLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateParentLog), nil
	}
}

func (u updateParentLogDo) Last() (*model.UpdateParentLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateParentLog), nil
	}
}

func (u updateParentLogDo) Find() ([]*model.UpdateParentLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpdateParentLog), err
}

func (u updateParentLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdateParentLog, err error) {
	buf := make([]*model.UpdateParentLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u updateParentLogDo) FindInBatches(result *[]*model.UpdateParentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u updateParentLogDo) Attrs(attrs ...field.AssignExpr) IUpdateParentLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u updateParentLogDo) Assign(attrs ...field.AssignExpr) IUpdateParentLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u updateParentLogDo) Joins(fields ...field.RelationField) IUpdateParentLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u updateParentLogDo) Preload(fields ...field.RelationField) IUpdateParentLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u updateParentLogDo) FirstOrInit() (*model.UpdateParentLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateParentLog), nil
	}
}

func (u updateParentLogDo) FirstOrCreate() (*model.UpdateParentLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateParentLog), nil
	}
}

func (u updateParentLogDo) FindByPage(offset int, limit int) (result []*model.UpdateParentLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u updateParentLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u updateParentLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u updateParentLogDo) Delete(models ...*model.UpdateParentLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *updateParentLogDo) withDO(do gen.Dao) *updateParentLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
