// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityTagCopy1(db *gorm.DB, opts ...gen.DOOption) activityTagCopy1 {
	_activityTagCopy1 := activityTagCopy1{}

	_activityTagCopy1.activityTagCopy1Do.UseDB(db, opts...)
	_activityTagCopy1.activityTagCopy1Do.UseModel(&model.ActivityTagCopy1{})

	tableName := _activityTagCopy1.activityTagCopy1Do.TableName()
	_activityTagCopy1.ALL = field.NewAsterisk(tableName)
	_activityTagCopy1.ID = field.NewInt64(tableName, "id")
	_activityTagCopy1.Title = field.NewString(tableName, "title")
	_activityTagCopy1.PicURL = field.NewString(tableName, "pic_url")
	_activityTagCopy1.Remark = field.NewString(tableName, "remark")
	_activityTagCopy1.Status = field.NewInt64(tableName, "status")
	_activityTagCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_activityTagCopy1.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityTagCopy1.fillFieldMap()

	return _activityTagCopy1
}

// activityTagCopy1 活动标签
type activityTagCopy1 struct {
	activityTagCopy1Do activityTagCopy1Do

	ALL       field.Asterisk
	ID        field.Int64
	Title     field.String // 标签名称
	PicURL    field.String // 图片地址
	Remark    field.String // 标签备注
	Status    field.Int64  // 0:未启用, 1:启用
	CreatedAt field.Field
	UpdatedAt field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityTagCopy1) Table(newTableName string) *activityTagCopy1 {
	a.activityTagCopy1Do.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityTagCopy1) As(alias string) *activityTagCopy1 {
	a.activityTagCopy1Do.DO = *(a.activityTagCopy1Do.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityTagCopy1) updateTableName(table string) *activityTagCopy1 {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.PicURL = field.NewString(table, "pic_url")
	a.Remark = field.NewString(table, "remark")
	a.Status = field.NewInt64(table, "status")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityTagCopy1) WithContext(ctx context.Context) IActivityTagCopy1Do {
	return a.activityTagCopy1Do.WithContext(ctx)
}

func (a activityTagCopy1) TableName() string { return a.activityTagCopy1Do.TableName() }

func (a activityTagCopy1) Alias() string { return a.activityTagCopy1Do.Alias() }

func (a activityTagCopy1) Columns(cols ...field.Expr) gen.Columns {
	return a.activityTagCopy1Do.Columns(cols...)
}

func (a *activityTagCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityTagCopy1) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["pic_url"] = a.PicURL
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityTagCopy1) clone(db *gorm.DB) activityTagCopy1 {
	a.activityTagCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityTagCopy1) replaceDB(db *gorm.DB) activityTagCopy1 {
	a.activityTagCopy1Do.ReplaceDB(db)
	return a
}

type activityTagCopy1Do struct{ gen.DO }

type IActivityTagCopy1Do interface {
	gen.SubQuery
	Debug() IActivityTagCopy1Do
	WithContext(ctx context.Context) IActivityTagCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityTagCopy1Do
	WriteDB() IActivityTagCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityTagCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityTagCopy1Do
	Not(conds ...gen.Condition) IActivityTagCopy1Do
	Or(conds ...gen.Condition) IActivityTagCopy1Do
	Select(conds ...field.Expr) IActivityTagCopy1Do
	Where(conds ...gen.Condition) IActivityTagCopy1Do
	Order(conds ...field.Expr) IActivityTagCopy1Do
	Distinct(cols ...field.Expr) IActivityTagCopy1Do
	Omit(cols ...field.Expr) IActivityTagCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do
	Group(cols ...field.Expr) IActivityTagCopy1Do
	Having(conds ...gen.Condition) IActivityTagCopy1Do
	Limit(limit int) IActivityTagCopy1Do
	Offset(offset int) IActivityTagCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTagCopy1Do
	Unscoped() IActivityTagCopy1Do
	Create(values ...*model.ActivityTagCopy1) error
	CreateInBatches(values []*model.ActivityTagCopy1, batchSize int) error
	Save(values ...*model.ActivityTagCopy1) error
	First() (*model.ActivityTagCopy1, error)
	Take() (*model.ActivityTagCopy1, error)
	Last() (*model.ActivityTagCopy1, error)
	Find() ([]*model.ActivityTagCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTagCopy1, err error)
	FindInBatches(result *[]*model.ActivityTagCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityTagCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityTagCopy1Do
	Assign(attrs ...field.AssignExpr) IActivityTagCopy1Do
	Joins(fields ...field.RelationField) IActivityTagCopy1Do
	Preload(fields ...field.RelationField) IActivityTagCopy1Do
	FirstOrInit() (*model.ActivityTagCopy1, error)
	FirstOrCreate() (*model.ActivityTagCopy1, error)
	FindByPage(offset int, limit int) (result []*model.ActivityTagCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityTagCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityTagCopy1Do) Debug() IActivityTagCopy1Do {
	return a.withDO(a.DO.Debug())
}

func (a activityTagCopy1Do) WithContext(ctx context.Context) IActivityTagCopy1Do {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityTagCopy1Do) ReadDB() IActivityTagCopy1Do {
	return a.Clauses(dbresolver.Read)
}

func (a activityTagCopy1Do) WriteDB() IActivityTagCopy1Do {
	return a.Clauses(dbresolver.Write)
}

func (a activityTagCopy1Do) Session(config *gorm.Session) IActivityTagCopy1Do {
	return a.withDO(a.DO.Session(config))
}

func (a activityTagCopy1Do) Clauses(conds ...clause.Expression) IActivityTagCopy1Do {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityTagCopy1Do) Returning(value interface{}, columns ...string) IActivityTagCopy1Do {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityTagCopy1Do) Not(conds ...gen.Condition) IActivityTagCopy1Do {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityTagCopy1Do) Or(conds ...gen.Condition) IActivityTagCopy1Do {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityTagCopy1Do) Select(conds ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityTagCopy1Do) Where(conds ...gen.Condition) IActivityTagCopy1Do {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityTagCopy1Do) Order(conds ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityTagCopy1Do) Distinct(cols ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityTagCopy1Do) Omit(cols ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityTagCopy1Do) Join(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityTagCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityTagCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityTagCopy1Do) Group(cols ...field.Expr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityTagCopy1Do) Having(conds ...gen.Condition) IActivityTagCopy1Do {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityTagCopy1Do) Limit(limit int) IActivityTagCopy1Do {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityTagCopy1Do) Offset(offset int) IActivityTagCopy1Do {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityTagCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTagCopy1Do {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityTagCopy1Do) Unscoped() IActivityTagCopy1Do {
	return a.withDO(a.DO.Unscoped())
}

func (a activityTagCopy1Do) Create(values ...*model.ActivityTagCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityTagCopy1Do) CreateInBatches(values []*model.ActivityTagCopy1, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityTagCopy1Do) Save(values ...*model.ActivityTagCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityTagCopy1Do) First() (*model.ActivityTagCopy1, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTagCopy1), nil
	}
}

func (a activityTagCopy1Do) Take() (*model.ActivityTagCopy1, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTagCopy1), nil
	}
}

func (a activityTagCopy1Do) Last() (*model.ActivityTagCopy1, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTagCopy1), nil
	}
}

func (a activityTagCopy1Do) Find() ([]*model.ActivityTagCopy1, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityTagCopy1), err
}

func (a activityTagCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTagCopy1, err error) {
	buf := make([]*model.ActivityTagCopy1, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityTagCopy1Do) FindInBatches(result *[]*model.ActivityTagCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityTagCopy1Do) Attrs(attrs ...field.AssignExpr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityTagCopy1Do) Assign(attrs ...field.AssignExpr) IActivityTagCopy1Do {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityTagCopy1Do) Joins(fields ...field.RelationField) IActivityTagCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityTagCopy1Do) Preload(fields ...field.RelationField) IActivityTagCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityTagCopy1Do) FirstOrInit() (*model.ActivityTagCopy1, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTagCopy1), nil
	}
}

func (a activityTagCopy1Do) FirstOrCreate() (*model.ActivityTagCopy1, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTagCopy1), nil
	}
}

func (a activityTagCopy1Do) FindByPage(offset int, limit int) (result []*model.ActivityTagCopy1, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityTagCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityTagCopy1Do) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityTagCopy1Do) Delete(models ...*model.ActivityTagCopy1) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityTagCopy1Do) withDO(do gen.Dao) *activityTagCopy1Do {
	a.DO = *do.(*gen.DO)
	return a
}
