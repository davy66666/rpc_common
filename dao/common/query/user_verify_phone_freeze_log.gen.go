// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserVerifyPhoneFreezeLog(db *gorm.DB, opts ...gen.DOOption) userVerifyPhoneFreezeLog {
	_userVerifyPhoneFreezeLog := userVerifyPhoneFreezeLog{}

	_userVerifyPhoneFreezeLog.userVerifyPhoneFreezeLogDo.UseDB(db, opts...)
	_userVerifyPhoneFreezeLog.userVerifyPhoneFreezeLogDo.UseModel(&model.UserVerifyPhoneFreezeLog{})

	tableName := _userVerifyPhoneFreezeLog.userVerifyPhoneFreezeLogDo.TableName()
	_userVerifyPhoneFreezeLog.ALL = field.NewAsterisk(tableName)
	_userVerifyPhoneFreezeLog.ID = field.NewInt64(tableName, "id")
	_userVerifyPhoneFreezeLog.Username = field.NewString(tableName, "username")
	_userVerifyPhoneFreezeLog.Phone = field.NewString(tableName, "phone")
	_userVerifyPhoneFreezeLog.API = field.NewString(tableName, "api")
	_userVerifyPhoneFreezeLog.Type = field.NewInt64(tableName, "type")
	_userVerifyPhoneFreezeLog.AdminUser = field.NewString(tableName, "admin_user")
	_userVerifyPhoneFreezeLog.CreatedAt = field.NewField(tableName, "created_at")
	_userVerifyPhoneFreezeLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userVerifyPhoneFreezeLog.fillFieldMap()

	return _userVerifyPhoneFreezeLog
}

type userVerifyPhoneFreezeLog struct {
	userVerifyPhoneFreezeLogDo userVerifyPhoneFreezeLogDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String // 用户昵称
	Phone     field.String // 手机号
	API       field.String // 记录请求失败接口
	Type      field.Int64  // 0 验证失败记录 1冻结记录，2管理员解冻记录
	AdminUser field.String // 管理员
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userVerifyPhoneFreezeLog) Table(newTableName string) *userVerifyPhoneFreezeLog {
	u.userVerifyPhoneFreezeLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userVerifyPhoneFreezeLog) As(alias string) *userVerifyPhoneFreezeLog {
	u.userVerifyPhoneFreezeLogDo.DO = *(u.userVerifyPhoneFreezeLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userVerifyPhoneFreezeLog) updateTableName(table string) *userVerifyPhoneFreezeLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Phone = field.NewString(table, "phone")
	u.API = field.NewString(table, "api")
	u.Type = field.NewInt64(table, "type")
	u.AdminUser = field.NewString(table, "admin_user")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userVerifyPhoneFreezeLog) WithContext(ctx context.Context) IUserVerifyPhoneFreezeLogDo {
	return u.userVerifyPhoneFreezeLogDo.WithContext(ctx)
}

func (u userVerifyPhoneFreezeLog) TableName() string { return u.userVerifyPhoneFreezeLogDo.TableName() }

func (u userVerifyPhoneFreezeLog) Alias() string { return u.userVerifyPhoneFreezeLogDo.Alias() }

func (u userVerifyPhoneFreezeLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userVerifyPhoneFreezeLogDo.Columns(cols...)
}

func (u *userVerifyPhoneFreezeLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userVerifyPhoneFreezeLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["api"] = u.API
	u.fieldMap["type"] = u.Type
	u.fieldMap["admin_user"] = u.AdminUser
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userVerifyPhoneFreezeLog) clone(db *gorm.DB) userVerifyPhoneFreezeLog {
	u.userVerifyPhoneFreezeLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userVerifyPhoneFreezeLog) replaceDB(db *gorm.DB) userVerifyPhoneFreezeLog {
	u.userVerifyPhoneFreezeLogDo.ReplaceDB(db)
	return u
}

type userVerifyPhoneFreezeLogDo struct{ gen.DO }

type IUserVerifyPhoneFreezeLogDo interface {
	gen.SubQuery
	Debug() IUserVerifyPhoneFreezeLogDo
	WithContext(ctx context.Context) IUserVerifyPhoneFreezeLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserVerifyPhoneFreezeLogDo
	WriteDB() IUserVerifyPhoneFreezeLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserVerifyPhoneFreezeLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserVerifyPhoneFreezeLogDo
	Not(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo
	Or(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo
	Select(conds ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Where(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo
	Order(conds ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Distinct(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Omit(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Group(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo
	Having(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo
	Limit(limit int) IUserVerifyPhoneFreezeLogDo
	Offset(offset int) IUserVerifyPhoneFreezeLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVerifyPhoneFreezeLogDo
	Unscoped() IUserVerifyPhoneFreezeLogDo
	Create(values ...*model.UserVerifyPhoneFreezeLog) error
	CreateInBatches(values []*model.UserVerifyPhoneFreezeLog, batchSize int) error
	Save(values ...*model.UserVerifyPhoneFreezeLog) error
	First() (*model.UserVerifyPhoneFreezeLog, error)
	Take() (*model.UserVerifyPhoneFreezeLog, error)
	Last() (*model.UserVerifyPhoneFreezeLog, error)
	Find() ([]*model.UserVerifyPhoneFreezeLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVerifyPhoneFreezeLog, err error)
	FindInBatches(result *[]*model.UserVerifyPhoneFreezeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserVerifyPhoneFreezeLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserVerifyPhoneFreezeLogDo
	Assign(attrs ...field.AssignExpr) IUserVerifyPhoneFreezeLogDo
	Joins(fields ...field.RelationField) IUserVerifyPhoneFreezeLogDo
	Preload(fields ...field.RelationField) IUserVerifyPhoneFreezeLogDo
	FirstOrInit() (*model.UserVerifyPhoneFreezeLog, error)
	FirstOrCreate() (*model.UserVerifyPhoneFreezeLog, error)
	FindByPage(offset int, limit int) (result []*model.UserVerifyPhoneFreezeLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserVerifyPhoneFreezeLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userVerifyPhoneFreezeLogDo) Debug() IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userVerifyPhoneFreezeLogDo) WithContext(ctx context.Context) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userVerifyPhoneFreezeLogDo) ReadDB() IUserVerifyPhoneFreezeLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userVerifyPhoneFreezeLogDo) WriteDB() IUserVerifyPhoneFreezeLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userVerifyPhoneFreezeLogDo) Session(config *gorm.Session) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userVerifyPhoneFreezeLogDo) Clauses(conds ...clause.Expression) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Returning(value interface{}, columns ...string) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userVerifyPhoneFreezeLogDo) Not(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Or(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Select(conds ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Where(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Order(conds ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Distinct(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userVerifyPhoneFreezeLogDo) Omit(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userVerifyPhoneFreezeLogDo) Join(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userVerifyPhoneFreezeLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userVerifyPhoneFreezeLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userVerifyPhoneFreezeLogDo) Group(cols ...field.Expr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userVerifyPhoneFreezeLogDo) Having(conds ...gen.Condition) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userVerifyPhoneFreezeLogDo) Limit(limit int) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userVerifyPhoneFreezeLogDo) Offset(offset int) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userVerifyPhoneFreezeLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userVerifyPhoneFreezeLogDo) Unscoped() IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userVerifyPhoneFreezeLogDo) Create(values ...*model.UserVerifyPhoneFreezeLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userVerifyPhoneFreezeLogDo) CreateInBatches(values []*model.UserVerifyPhoneFreezeLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userVerifyPhoneFreezeLogDo) Save(values ...*model.UserVerifyPhoneFreezeLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userVerifyPhoneFreezeLogDo) First() (*model.UserVerifyPhoneFreezeLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVerifyPhoneFreezeLog), nil
	}
}

func (u userVerifyPhoneFreezeLogDo) Take() (*model.UserVerifyPhoneFreezeLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVerifyPhoneFreezeLog), nil
	}
}

func (u userVerifyPhoneFreezeLogDo) Last() (*model.UserVerifyPhoneFreezeLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVerifyPhoneFreezeLog), nil
	}
}

func (u userVerifyPhoneFreezeLogDo) Find() ([]*model.UserVerifyPhoneFreezeLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserVerifyPhoneFreezeLog), err
}

func (u userVerifyPhoneFreezeLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVerifyPhoneFreezeLog, err error) {
	buf := make([]*model.UserVerifyPhoneFreezeLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userVerifyPhoneFreezeLogDo) FindInBatches(result *[]*model.UserVerifyPhoneFreezeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userVerifyPhoneFreezeLogDo) Attrs(attrs ...field.AssignExpr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userVerifyPhoneFreezeLogDo) Assign(attrs ...field.AssignExpr) IUserVerifyPhoneFreezeLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userVerifyPhoneFreezeLogDo) Joins(fields ...field.RelationField) IUserVerifyPhoneFreezeLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userVerifyPhoneFreezeLogDo) Preload(fields ...field.RelationField) IUserVerifyPhoneFreezeLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userVerifyPhoneFreezeLogDo) FirstOrInit() (*model.UserVerifyPhoneFreezeLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVerifyPhoneFreezeLog), nil
	}
}

func (u userVerifyPhoneFreezeLogDo) FirstOrCreate() (*model.UserVerifyPhoneFreezeLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVerifyPhoneFreezeLog), nil
	}
}

func (u userVerifyPhoneFreezeLogDo) FindByPage(offset int, limit int) (result []*model.UserVerifyPhoneFreezeLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userVerifyPhoneFreezeLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userVerifyPhoneFreezeLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userVerifyPhoneFreezeLogDo) Delete(models ...*model.UserVerifyPhoneFreezeLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userVerifyPhoneFreezeLogDo) withDO(do gen.Dao) *userVerifyPhoneFreezeLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
