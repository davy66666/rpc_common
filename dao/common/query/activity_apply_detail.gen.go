// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityApplyDetail(db *gorm.DB, opts ...gen.DOOption) activityApplyDetail {
	_activityApplyDetail := activityApplyDetail{}

	_activityApplyDetail.activityApplyDetailDo.UseDB(db, opts...)
	_activityApplyDetail.activityApplyDetailDo.UseModel(&model.ActivityApplyDetail{})

	tableName := _activityApplyDetail.activityApplyDetailDo.TableName()
	_activityApplyDetail.ALL = field.NewAsterisk(tableName)
	_activityApplyDetail.ID = field.NewInt64(tableName, "id")
	_activityApplyDetail.RecordID = field.NewInt64(tableName, "record_id")
	_activityApplyDetail.FieldID = field.NewInt64(tableName, "field_id")
	_activityApplyDetail.FieldValue = field.NewString(tableName, "field_value")
	_activityApplyDetail.CreatedAt = field.NewField(tableName, "created_at")
	_activityApplyDetail.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityApplyDetail.fillFieldMap()

	return _activityApplyDetail
}

// activityApplyDetail 活动申请详情表
type activityApplyDetail struct {
	activityApplyDetailDo activityApplyDetailDo

	ALL        field.Asterisk
	ID         field.Int64
	RecordID   field.Int64  // 活动申请id
	FieldID    field.Int64  // 字段id
	FieldValue field.String // 字段内容
	CreatedAt  field.Field  // 创建时间
	UpdatedAt  field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityApplyDetail) Table(newTableName string) *activityApplyDetail {
	a.activityApplyDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityApplyDetail) As(alias string) *activityApplyDetail {
	a.activityApplyDetailDo.DO = *(a.activityApplyDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityApplyDetail) updateTableName(table string) *activityApplyDetail {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.RecordID = field.NewInt64(table, "record_id")
	a.FieldID = field.NewInt64(table, "field_id")
	a.FieldValue = field.NewString(table, "field_value")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityApplyDetail) WithContext(ctx context.Context) IActivityApplyDetailDo {
	return a.activityApplyDetailDo.WithContext(ctx)
}

func (a activityApplyDetail) TableName() string { return a.activityApplyDetailDo.TableName() }

func (a activityApplyDetail) Alias() string { return a.activityApplyDetailDo.Alias() }

func (a activityApplyDetail) Columns(cols ...field.Expr) gen.Columns {
	return a.activityApplyDetailDo.Columns(cols...)
}

func (a *activityApplyDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityApplyDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["record_id"] = a.RecordID
	a.fieldMap["field_id"] = a.FieldID
	a.fieldMap["field_value"] = a.FieldValue
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityApplyDetail) clone(db *gorm.DB) activityApplyDetail {
	a.activityApplyDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityApplyDetail) replaceDB(db *gorm.DB) activityApplyDetail {
	a.activityApplyDetailDo.ReplaceDB(db)
	return a
}

type activityApplyDetailDo struct{ gen.DO }

type IActivityApplyDetailDo interface {
	gen.SubQuery
	Debug() IActivityApplyDetailDo
	WithContext(ctx context.Context) IActivityApplyDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityApplyDetailDo
	WriteDB() IActivityApplyDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityApplyDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityApplyDetailDo
	Not(conds ...gen.Condition) IActivityApplyDetailDo
	Or(conds ...gen.Condition) IActivityApplyDetailDo
	Select(conds ...field.Expr) IActivityApplyDetailDo
	Where(conds ...gen.Condition) IActivityApplyDetailDo
	Order(conds ...field.Expr) IActivityApplyDetailDo
	Distinct(cols ...field.Expr) IActivityApplyDetailDo
	Omit(cols ...field.Expr) IActivityApplyDetailDo
	Join(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo
	Group(cols ...field.Expr) IActivityApplyDetailDo
	Having(conds ...gen.Condition) IActivityApplyDetailDo
	Limit(limit int) IActivityApplyDetailDo
	Offset(offset int) IActivityApplyDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityApplyDetailDo
	Unscoped() IActivityApplyDetailDo
	Create(values ...*model.ActivityApplyDetail) error
	CreateInBatches(values []*model.ActivityApplyDetail, batchSize int) error
	Save(values ...*model.ActivityApplyDetail) error
	First() (*model.ActivityApplyDetail, error)
	Take() (*model.ActivityApplyDetail, error)
	Last() (*model.ActivityApplyDetail, error)
	Find() ([]*model.ActivityApplyDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityApplyDetail, err error)
	FindInBatches(result *[]*model.ActivityApplyDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityApplyDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityApplyDetailDo
	Assign(attrs ...field.AssignExpr) IActivityApplyDetailDo
	Joins(fields ...field.RelationField) IActivityApplyDetailDo
	Preload(fields ...field.RelationField) IActivityApplyDetailDo
	FirstOrInit() (*model.ActivityApplyDetail, error)
	FirstOrCreate() (*model.ActivityApplyDetail, error)
	FindByPage(offset int, limit int) (result []*model.ActivityApplyDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityApplyDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityApplyDetailDo) Debug() IActivityApplyDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a activityApplyDetailDo) WithContext(ctx context.Context) IActivityApplyDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityApplyDetailDo) ReadDB() IActivityApplyDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityApplyDetailDo) WriteDB() IActivityApplyDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityApplyDetailDo) Session(config *gorm.Session) IActivityApplyDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityApplyDetailDo) Clauses(conds ...clause.Expression) IActivityApplyDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityApplyDetailDo) Returning(value interface{}, columns ...string) IActivityApplyDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityApplyDetailDo) Not(conds ...gen.Condition) IActivityApplyDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityApplyDetailDo) Or(conds ...gen.Condition) IActivityApplyDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityApplyDetailDo) Select(conds ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityApplyDetailDo) Where(conds ...gen.Condition) IActivityApplyDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityApplyDetailDo) Order(conds ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityApplyDetailDo) Distinct(cols ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityApplyDetailDo) Omit(cols ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityApplyDetailDo) Join(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityApplyDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityApplyDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityApplyDetailDo) Group(cols ...field.Expr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityApplyDetailDo) Having(conds ...gen.Condition) IActivityApplyDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityApplyDetailDo) Limit(limit int) IActivityApplyDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityApplyDetailDo) Offset(offset int) IActivityApplyDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityApplyDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityApplyDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityApplyDetailDo) Unscoped() IActivityApplyDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityApplyDetailDo) Create(values ...*model.ActivityApplyDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityApplyDetailDo) CreateInBatches(values []*model.ActivityApplyDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityApplyDetailDo) Save(values ...*model.ActivityApplyDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityApplyDetailDo) First() (*model.ActivityApplyDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyDetail), nil
	}
}

func (a activityApplyDetailDo) Take() (*model.ActivityApplyDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyDetail), nil
	}
}

func (a activityApplyDetailDo) Last() (*model.ActivityApplyDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyDetail), nil
	}
}

func (a activityApplyDetailDo) Find() ([]*model.ActivityApplyDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityApplyDetail), err
}

func (a activityApplyDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityApplyDetail, err error) {
	buf := make([]*model.ActivityApplyDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityApplyDetailDo) FindInBatches(result *[]*model.ActivityApplyDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityApplyDetailDo) Attrs(attrs ...field.AssignExpr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityApplyDetailDo) Assign(attrs ...field.AssignExpr) IActivityApplyDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityApplyDetailDo) Joins(fields ...field.RelationField) IActivityApplyDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityApplyDetailDo) Preload(fields ...field.RelationField) IActivityApplyDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityApplyDetailDo) FirstOrInit() (*model.ActivityApplyDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyDetail), nil
	}
}

func (a activityApplyDetailDo) FirstOrCreate() (*model.ActivityApplyDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyDetail), nil
	}
}

func (a activityApplyDetailDo) FindByPage(offset int, limit int) (result []*model.ActivityApplyDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityApplyDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityApplyDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityApplyDetailDo) Delete(models ...*model.ActivityApplyDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityApplyDetailDo) withDO(do gen.Dao) *activityApplyDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
