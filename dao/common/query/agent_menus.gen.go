// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentMenu(db *gorm.DB, opts ...gen.DOOption) agentMenu {
	_agentMenu := agentMenu{}

	_agentMenu.agentMenuDo.UseDB(db, opts...)
	_agentMenu.agentMenuDo.UseModel(&model.AgentMenu{})

	tableName := _agentMenu.agentMenuDo.TableName()
	_agentMenu.ALL = field.NewAsterisk(tableName)
	_agentMenu.ID = field.NewInt64(tableName, "id")
	_agentMenu.Name = field.NewString(tableName, "name")
	_agentMenu.Code = field.NewString(tableName, "code")
	_agentMenu.ParentID = field.NewInt64(tableName, "parent_id")
	_agentMenu.IsShow = field.NewInt64(tableName, "is_show")
	_agentMenu.CreatedAt = field.NewField(tableName, "created_at")
	_agentMenu.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentMenu.OperateAdminName = field.NewString(tableName, "operate_admin_name")
	_agentMenu.Sort = field.NewInt64(tableName, "sort")
	_agentMenu.Icon = field.NewString(tableName, "icon")
	_agentMenu.RouteName = field.NewString(tableName, "route_name")

	_agentMenu.fillFieldMap()

	return _agentMenu
}

type agentMenu struct {
	agentMenuDo agentMenuDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	Code             field.String
	ParentID         field.Int64
	IsShow           field.Int64 // 是否显示
	CreatedAt        field.Field
	UpdatedAt        field.Field
	OperateAdminName field.String
	Sort             field.Int64
	Icon             field.String
	RouteName        field.String

	fieldMap map[string]field.Expr
}

func (a agentMenu) Table(newTableName string) *agentMenu {
	a.agentMenuDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentMenu) As(alias string) *agentMenu {
	a.agentMenuDo.DO = *(a.agentMenuDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentMenu) updateTableName(table string) *agentMenu {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Code = field.NewString(table, "code")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.IsShow = field.NewInt64(table, "is_show")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.OperateAdminName = field.NewString(table, "operate_admin_name")
	a.Sort = field.NewInt64(table, "sort")
	a.Icon = field.NewString(table, "icon")
	a.RouteName = field.NewString(table, "route_name")

	a.fillFieldMap()

	return a
}

func (a *agentMenu) WithContext(ctx context.Context) IAgentMenuDo {
	return a.agentMenuDo.WithContext(ctx)
}

func (a agentMenu) TableName() string { return a.agentMenuDo.TableName() }

func (a agentMenu) Alias() string { return a.agentMenuDo.Alias() }

func (a agentMenu) Columns(cols ...field.Expr) gen.Columns { return a.agentMenuDo.Columns(cols...) }

func (a *agentMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentMenu) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["code"] = a.Code
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["is_show"] = a.IsShow
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["operate_admin_name"] = a.OperateAdminName
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["icon"] = a.Icon
	a.fieldMap["route_name"] = a.RouteName
}

func (a agentMenu) clone(db *gorm.DB) agentMenu {
	a.agentMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentMenu) replaceDB(db *gorm.DB) agentMenu {
	a.agentMenuDo.ReplaceDB(db)
	return a
}

type agentMenuDo struct{ gen.DO }

type IAgentMenuDo interface {
	gen.SubQuery
	Debug() IAgentMenuDo
	WithContext(ctx context.Context) IAgentMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentMenuDo
	WriteDB() IAgentMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentMenuDo
	Not(conds ...gen.Condition) IAgentMenuDo
	Or(conds ...gen.Condition) IAgentMenuDo
	Select(conds ...field.Expr) IAgentMenuDo
	Where(conds ...gen.Condition) IAgentMenuDo
	Order(conds ...field.Expr) IAgentMenuDo
	Distinct(cols ...field.Expr) IAgentMenuDo
	Omit(cols ...field.Expr) IAgentMenuDo
	Join(table schema.Tabler, on ...field.Expr) IAgentMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentMenuDo
	Group(cols ...field.Expr) IAgentMenuDo
	Having(conds ...gen.Condition) IAgentMenuDo
	Limit(limit int) IAgentMenuDo
	Offset(offset int) IAgentMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentMenuDo
	Unscoped() IAgentMenuDo
	Create(values ...*model.AgentMenu) error
	CreateInBatches(values []*model.AgentMenu, batchSize int) error
	Save(values ...*model.AgentMenu) error
	First() (*model.AgentMenu, error)
	Take() (*model.AgentMenu, error)
	Last() (*model.AgentMenu, error)
	Find() ([]*model.AgentMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentMenu, err error)
	FindInBatches(result *[]*model.AgentMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentMenuDo
	Assign(attrs ...field.AssignExpr) IAgentMenuDo
	Joins(fields ...field.RelationField) IAgentMenuDo
	Preload(fields ...field.RelationField) IAgentMenuDo
	FirstOrInit() (*model.AgentMenu, error)
	FirstOrCreate() (*model.AgentMenu, error)
	FindByPage(offset int, limit int) (result []*model.AgentMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentMenuDo) Debug() IAgentMenuDo {
	return a.withDO(a.DO.Debug())
}

func (a agentMenuDo) WithContext(ctx context.Context) IAgentMenuDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentMenuDo) ReadDB() IAgentMenuDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentMenuDo) WriteDB() IAgentMenuDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentMenuDo) Session(config *gorm.Session) IAgentMenuDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentMenuDo) Clauses(conds ...clause.Expression) IAgentMenuDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentMenuDo) Returning(value interface{}, columns ...string) IAgentMenuDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentMenuDo) Not(conds ...gen.Condition) IAgentMenuDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentMenuDo) Or(conds ...gen.Condition) IAgentMenuDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentMenuDo) Select(conds ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentMenuDo) Where(conds ...gen.Condition) IAgentMenuDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentMenuDo) Order(conds ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentMenuDo) Distinct(cols ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentMenuDo) Omit(cols ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentMenuDo) Join(table schema.Tabler, on ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentMenuDo) Group(cols ...field.Expr) IAgentMenuDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentMenuDo) Having(conds ...gen.Condition) IAgentMenuDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentMenuDo) Limit(limit int) IAgentMenuDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentMenuDo) Offset(offset int) IAgentMenuDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentMenuDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentMenuDo) Unscoped() IAgentMenuDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentMenuDo) Create(values ...*model.AgentMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentMenuDo) CreateInBatches(values []*model.AgentMenu, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentMenuDo) Save(values ...*model.AgentMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentMenuDo) First() (*model.AgentMenu, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentMenu), nil
	}
}

func (a agentMenuDo) Take() (*model.AgentMenu, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentMenu), nil
	}
}

func (a agentMenuDo) Last() (*model.AgentMenu, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentMenu), nil
	}
}

func (a agentMenuDo) Find() ([]*model.AgentMenu, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentMenu), err
}

func (a agentMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentMenu, err error) {
	buf := make([]*model.AgentMenu, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentMenuDo) FindInBatches(result *[]*model.AgentMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentMenuDo) Attrs(attrs ...field.AssignExpr) IAgentMenuDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentMenuDo) Assign(attrs ...field.AssignExpr) IAgentMenuDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentMenuDo) Joins(fields ...field.RelationField) IAgentMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentMenuDo) Preload(fields ...field.RelationField) IAgentMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentMenuDo) FirstOrInit() (*model.AgentMenu, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentMenu), nil
	}
}

func (a agentMenuDo) FirstOrCreate() (*model.AgentMenu, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentMenu), nil
	}
}

func (a agentMenuDo) FindByPage(offset int, limit int) (result []*model.AgentMenu, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentMenuDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentMenuDo) Delete(models ...*model.AgentMenu) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentMenuDo) withDO(do gen.Dao) *agentMenuDo {
	a.DO = *do.(*gen.DO)
	return a
}
