// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserTotalBetAmount(db *gorm.DB, opts ...gen.DOOption) userTotalBetAmount {
	_userTotalBetAmount := userTotalBetAmount{}

	_userTotalBetAmount.userTotalBetAmountDo.UseDB(db, opts...)
	_userTotalBetAmount.userTotalBetAmountDo.UseModel(&model.UserTotalBetAmount{})

	tableName := _userTotalBetAmount.userTotalBetAmountDo.TableName()
	_userTotalBetAmount.ALL = field.NewAsterisk(tableName)
	_userTotalBetAmount.ID = field.NewInt64(tableName, "id")
	_userTotalBetAmount.UserID = field.NewInt64(tableName, "user_id")
	_userTotalBetAmount.Username = field.NewString(tableName, "username")
	_userTotalBetAmount.ParentName = field.NewString(tableName, "parent_name")
	_userTotalBetAmount.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userTotalBetAmount.BetNums = field.NewInt64(tableName, "bet_nums")
	_userTotalBetAmount.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_userTotalBetAmount.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userTotalBetAmount.NetAmount = field.NewFloat64(tableName, "net_amount")
	_userTotalBetAmount.GameBetNums = field.NewString(tableName, "game_bet_nums")
	_userTotalBetAmount.GameBetMoney = field.NewString(tableName, "game_bet_money")
	_userTotalBetAmount.IsOpen = field.NewInt64(tableName, "is_open")
	_userTotalBetAmount.CreatedAt = field.NewField(tableName, "created_at")
	_userTotalBetAmount.UpdatedAt = field.NewField(tableName, "updated_at")

	_userTotalBetAmount.fillFieldMap()

	return _userTotalBetAmount
}

type userTotalBetAmount struct {
	userTotalBetAmountDo userTotalBetAmountDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64   // 用户id
	Username       field.String  // 用户名
	ParentName     field.String  // 用户上级
	ForefatherIds  field.String  // 上级树,多个以逗号隔开
	BetNums        field.Int64   // 总注单量
	BetAmount      field.Float64 // 总投注金额
	ValidBetAmount field.Float64 // 总的游戏投注额
	NetAmount      field.Float64 // 玩家的所赢金额
	GameBetNums    field.String  // 投注人数{game_code:投注次数，多个以逗号分隔}
	GameBetMoney   field.String  // 游戏投注金额{game_code:投注金额，多个以逗号分隔}
	IsOpen         field.Int64   // 是否删除0:否;1:是;
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userTotalBetAmount) Table(newTableName string) *userTotalBetAmount {
	u.userTotalBetAmountDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userTotalBetAmount) As(alias string) *userTotalBetAmount {
	u.userTotalBetAmountDo.DO = *(u.userTotalBetAmountDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userTotalBetAmount) updateTableName(table string) *userTotalBetAmount {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentName = field.NewString(table, "parent_name")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.BetNums = field.NewInt64(table, "bet_nums")
	u.BetAmount = field.NewFloat64(table, "bet_amount")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.NetAmount = field.NewFloat64(table, "net_amount")
	u.GameBetNums = field.NewString(table, "game_bet_nums")
	u.GameBetMoney = field.NewString(table, "game_bet_money")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userTotalBetAmount) WithContext(ctx context.Context) IUserTotalBetAmountDo {
	return u.userTotalBetAmountDo.WithContext(ctx)
}

func (u userTotalBetAmount) TableName() string { return u.userTotalBetAmountDo.TableName() }

func (u userTotalBetAmount) Alias() string { return u.userTotalBetAmountDo.Alias() }

func (u userTotalBetAmount) Columns(cols ...field.Expr) gen.Columns {
	return u.userTotalBetAmountDo.Columns(cols...)
}

func (u *userTotalBetAmount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userTotalBetAmount) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["bet_nums"] = u.BetNums
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["net_amount"] = u.NetAmount
	u.fieldMap["game_bet_nums"] = u.GameBetNums
	u.fieldMap["game_bet_money"] = u.GameBetMoney
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userTotalBetAmount) clone(db *gorm.DB) userTotalBetAmount {
	u.userTotalBetAmountDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userTotalBetAmount) replaceDB(db *gorm.DB) userTotalBetAmount {
	u.userTotalBetAmountDo.ReplaceDB(db)
	return u
}

type userTotalBetAmountDo struct{ gen.DO }

type IUserTotalBetAmountDo interface {
	gen.SubQuery
	Debug() IUserTotalBetAmountDo
	WithContext(ctx context.Context) IUserTotalBetAmountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserTotalBetAmountDo
	WriteDB() IUserTotalBetAmountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserTotalBetAmountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserTotalBetAmountDo
	Not(conds ...gen.Condition) IUserTotalBetAmountDo
	Or(conds ...gen.Condition) IUserTotalBetAmountDo
	Select(conds ...field.Expr) IUserTotalBetAmountDo
	Where(conds ...gen.Condition) IUserTotalBetAmountDo
	Order(conds ...field.Expr) IUserTotalBetAmountDo
	Distinct(cols ...field.Expr) IUserTotalBetAmountDo
	Omit(cols ...field.Expr) IUserTotalBetAmountDo
	Join(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo
	Group(cols ...field.Expr) IUserTotalBetAmountDo
	Having(conds ...gen.Condition) IUserTotalBetAmountDo
	Limit(limit int) IUserTotalBetAmountDo
	Offset(offset int) IUserTotalBetAmountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTotalBetAmountDo
	Unscoped() IUserTotalBetAmountDo
	Create(values ...*model.UserTotalBetAmount) error
	CreateInBatches(values []*model.UserTotalBetAmount, batchSize int) error
	Save(values ...*model.UserTotalBetAmount) error
	First() (*model.UserTotalBetAmount, error)
	Take() (*model.UserTotalBetAmount, error)
	Last() (*model.UserTotalBetAmount, error)
	Find() ([]*model.UserTotalBetAmount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserTotalBetAmount, err error)
	FindInBatches(result *[]*model.UserTotalBetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserTotalBetAmount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserTotalBetAmountDo
	Assign(attrs ...field.AssignExpr) IUserTotalBetAmountDo
	Joins(fields ...field.RelationField) IUserTotalBetAmountDo
	Preload(fields ...field.RelationField) IUserTotalBetAmountDo
	FirstOrInit() (*model.UserTotalBetAmount, error)
	FirstOrCreate() (*model.UserTotalBetAmount, error)
	FindByPage(offset int, limit int) (result []*model.UserTotalBetAmount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserTotalBetAmountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userTotalBetAmountDo) Debug() IUserTotalBetAmountDo {
	return u.withDO(u.DO.Debug())
}

func (u userTotalBetAmountDo) WithContext(ctx context.Context) IUserTotalBetAmountDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userTotalBetAmountDo) ReadDB() IUserTotalBetAmountDo {
	return u.Clauses(dbresolver.Read)
}

func (u userTotalBetAmountDo) WriteDB() IUserTotalBetAmountDo {
	return u.Clauses(dbresolver.Write)
}

func (u userTotalBetAmountDo) Session(config *gorm.Session) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Session(config))
}

func (u userTotalBetAmountDo) Clauses(conds ...clause.Expression) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userTotalBetAmountDo) Returning(value interface{}, columns ...string) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userTotalBetAmountDo) Not(conds ...gen.Condition) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userTotalBetAmountDo) Or(conds ...gen.Condition) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userTotalBetAmountDo) Select(conds ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userTotalBetAmountDo) Where(conds ...gen.Condition) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userTotalBetAmountDo) Order(conds ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userTotalBetAmountDo) Distinct(cols ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userTotalBetAmountDo) Omit(cols ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userTotalBetAmountDo) Join(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userTotalBetAmountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userTotalBetAmountDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userTotalBetAmountDo) Group(cols ...field.Expr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userTotalBetAmountDo) Having(conds ...gen.Condition) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userTotalBetAmountDo) Limit(limit int) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userTotalBetAmountDo) Offset(offset int) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userTotalBetAmountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userTotalBetAmountDo) Unscoped() IUserTotalBetAmountDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userTotalBetAmountDo) Create(values ...*model.UserTotalBetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userTotalBetAmountDo) CreateInBatches(values []*model.UserTotalBetAmount, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userTotalBetAmountDo) Save(values ...*model.UserTotalBetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userTotalBetAmountDo) First() (*model.UserTotalBetAmount, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTotalBetAmount), nil
	}
}

func (u userTotalBetAmountDo) Take() (*model.UserTotalBetAmount, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTotalBetAmount), nil
	}
}

func (u userTotalBetAmountDo) Last() (*model.UserTotalBetAmount, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTotalBetAmount), nil
	}
}

func (u userTotalBetAmountDo) Find() ([]*model.UserTotalBetAmount, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserTotalBetAmount), err
}

func (u userTotalBetAmountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserTotalBetAmount, err error) {
	buf := make([]*model.UserTotalBetAmount, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userTotalBetAmountDo) FindInBatches(result *[]*model.UserTotalBetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userTotalBetAmountDo) Attrs(attrs ...field.AssignExpr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userTotalBetAmountDo) Assign(attrs ...field.AssignExpr) IUserTotalBetAmountDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userTotalBetAmountDo) Joins(fields ...field.RelationField) IUserTotalBetAmountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userTotalBetAmountDo) Preload(fields ...field.RelationField) IUserTotalBetAmountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userTotalBetAmountDo) FirstOrInit() (*model.UserTotalBetAmount, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTotalBetAmount), nil
	}
}

func (u userTotalBetAmountDo) FirstOrCreate() (*model.UserTotalBetAmount, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTotalBetAmount), nil
	}
}

func (u userTotalBetAmountDo) FindByPage(offset int, limit int) (result []*model.UserTotalBetAmount, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userTotalBetAmountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userTotalBetAmountDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userTotalBetAmountDo) Delete(models ...*model.UserTotalBetAmount) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userTotalBetAmountDo) withDO(do gen.Dao) *userTotalBetAmountDo {
	u.DO = *do.(*gen.DO)
	return u
}
