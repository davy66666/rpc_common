// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserBindThirdWallet(db *gorm.DB, opts ...gen.DOOption) userBindThirdWallet {
	_userBindThirdWallet := userBindThirdWallet{}

	_userBindThirdWallet.userBindThirdWalletDo.UseDB(db, opts...)
	_userBindThirdWallet.userBindThirdWalletDo.UseModel(&model.UserBindThirdWallet{})

	tableName := _userBindThirdWallet.userBindThirdWalletDo.TableName()
	_userBindThirdWallet.ALL = field.NewAsterisk(tableName)
	_userBindThirdWallet.ID = field.NewInt64(tableName, "id")
	_userBindThirdWallet.UserID = field.NewInt64(tableName, "user_id")
	_userBindThirdWallet.ThirdType = field.NewInt64(tableName, "third_type")
	_userBindThirdWallet.ShortName = field.NewString(tableName, "short_name")
	_userBindThirdWallet.BankName = field.NewString(tableName, "bank_name")
	_userBindThirdWallet.WalletID = field.NewString(tableName, "wallet_id")
	_userBindThirdWallet.Balance = field.NewFloat64(tableName, "balance")
	_userBindThirdWallet.Username = field.NewString(tableName, "username")
	_userBindThirdWallet.Nickname = field.NewString(tableName, "nickname")
	_userBindThirdWallet.AccessToken = field.NewString(tableName, "access_token")
	_userBindThirdWallet.Remark = field.NewString(tableName, "remark")
	_userBindThirdWallet.IsOpen = field.NewInt64(tableName, "is_open")
	_userBindThirdWallet.CreatedAt = field.NewField(tableName, "created_at")
	_userBindThirdWallet.UpdatedAt = field.NewField(tableName, "updated_at")

	_userBindThirdWallet.fillFieldMap()

	return _userBindThirdWallet
}

// userBindThirdWallet 用户绑定的第三方钱包信息
type userBindThirdWallet struct {
	userBindThirdWalletDo userBindThirdWalletDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64   // 用户ID
	ThirdType   field.Int64   // 三方类型:1:购宝
	ShortName   field.String  // 银行简称
	BankName    field.String  // 银行卡姓名
	WalletID    field.String  // 用户钱包ID
	Balance     field.Float64 // 钱包余额
	Username    field.String  // 钱包用户名
	Nickname    field.String  // 钱包昵称
	AccessToken field.String  // 钱包授权访问access_token
	Remark      field.String  // 备注
	IsOpen      field.Int64   // 是否开启 0:否;1:是
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (u userBindThirdWallet) Table(newTableName string) *userBindThirdWallet {
	u.userBindThirdWalletDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBindThirdWallet) As(alias string) *userBindThirdWallet {
	u.userBindThirdWalletDo.DO = *(u.userBindThirdWalletDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBindThirdWallet) updateTableName(table string) *userBindThirdWallet {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.ThirdType = field.NewInt64(table, "third_type")
	u.ShortName = field.NewString(table, "short_name")
	u.BankName = field.NewString(table, "bank_name")
	u.WalletID = field.NewString(table, "wallet_id")
	u.Balance = field.NewFloat64(table, "balance")
	u.Username = field.NewString(table, "username")
	u.Nickname = field.NewString(table, "nickname")
	u.AccessToken = field.NewString(table, "access_token")
	u.Remark = field.NewString(table, "remark")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userBindThirdWallet) WithContext(ctx context.Context) IUserBindThirdWalletDo {
	return u.userBindThirdWalletDo.WithContext(ctx)
}

func (u userBindThirdWallet) TableName() string { return u.userBindThirdWalletDo.TableName() }

func (u userBindThirdWallet) Alias() string { return u.userBindThirdWalletDo.Alias() }

func (u userBindThirdWallet) Columns(cols ...field.Expr) gen.Columns {
	return u.userBindThirdWalletDo.Columns(cols...)
}

func (u *userBindThirdWallet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBindThirdWallet) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["third_type"] = u.ThirdType
	u.fieldMap["short_name"] = u.ShortName
	u.fieldMap["bank_name"] = u.BankName
	u.fieldMap["wallet_id"] = u.WalletID
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["username"] = u.Username
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["access_token"] = u.AccessToken
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userBindThirdWallet) clone(db *gorm.DB) userBindThirdWallet {
	u.userBindThirdWalletDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBindThirdWallet) replaceDB(db *gorm.DB) userBindThirdWallet {
	u.userBindThirdWalletDo.ReplaceDB(db)
	return u
}

type userBindThirdWalletDo struct{ gen.DO }

type IUserBindThirdWalletDo interface {
	gen.SubQuery
	Debug() IUserBindThirdWalletDo
	WithContext(ctx context.Context) IUserBindThirdWalletDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBindThirdWalletDo
	WriteDB() IUserBindThirdWalletDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBindThirdWalletDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBindThirdWalletDo
	Not(conds ...gen.Condition) IUserBindThirdWalletDo
	Or(conds ...gen.Condition) IUserBindThirdWalletDo
	Select(conds ...field.Expr) IUserBindThirdWalletDo
	Where(conds ...gen.Condition) IUserBindThirdWalletDo
	Order(conds ...field.Expr) IUserBindThirdWalletDo
	Distinct(cols ...field.Expr) IUserBindThirdWalletDo
	Omit(cols ...field.Expr) IUserBindThirdWalletDo
	Join(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo
	Group(cols ...field.Expr) IUserBindThirdWalletDo
	Having(conds ...gen.Condition) IUserBindThirdWalletDo
	Limit(limit int) IUserBindThirdWalletDo
	Offset(offset int) IUserBindThirdWalletDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBindThirdWalletDo
	Unscoped() IUserBindThirdWalletDo
	Create(values ...*model.UserBindThirdWallet) error
	CreateInBatches(values []*model.UserBindThirdWallet, batchSize int) error
	Save(values ...*model.UserBindThirdWallet) error
	First() (*model.UserBindThirdWallet, error)
	Take() (*model.UserBindThirdWallet, error)
	Last() (*model.UserBindThirdWallet, error)
	Find() ([]*model.UserBindThirdWallet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBindThirdWallet, err error)
	FindInBatches(result *[]*model.UserBindThirdWallet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBindThirdWallet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBindThirdWalletDo
	Assign(attrs ...field.AssignExpr) IUserBindThirdWalletDo
	Joins(fields ...field.RelationField) IUserBindThirdWalletDo
	Preload(fields ...field.RelationField) IUserBindThirdWalletDo
	FirstOrInit() (*model.UserBindThirdWallet, error)
	FirstOrCreate() (*model.UserBindThirdWallet, error)
	FindByPage(offset int, limit int) (result []*model.UserBindThirdWallet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBindThirdWalletDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBindThirdWalletDo) Debug() IUserBindThirdWalletDo {
	return u.withDO(u.DO.Debug())
}

func (u userBindThirdWalletDo) WithContext(ctx context.Context) IUserBindThirdWalletDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBindThirdWalletDo) ReadDB() IUserBindThirdWalletDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBindThirdWalletDo) WriteDB() IUserBindThirdWalletDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBindThirdWalletDo) Session(config *gorm.Session) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBindThirdWalletDo) Clauses(conds ...clause.Expression) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBindThirdWalletDo) Returning(value interface{}, columns ...string) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBindThirdWalletDo) Not(conds ...gen.Condition) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBindThirdWalletDo) Or(conds ...gen.Condition) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBindThirdWalletDo) Select(conds ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBindThirdWalletDo) Where(conds ...gen.Condition) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBindThirdWalletDo) Order(conds ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBindThirdWalletDo) Distinct(cols ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBindThirdWalletDo) Omit(cols ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBindThirdWalletDo) Join(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBindThirdWalletDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBindThirdWalletDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBindThirdWalletDo) Group(cols ...field.Expr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBindThirdWalletDo) Having(conds ...gen.Condition) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBindThirdWalletDo) Limit(limit int) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBindThirdWalletDo) Offset(offset int) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBindThirdWalletDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBindThirdWalletDo) Unscoped() IUserBindThirdWalletDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBindThirdWalletDo) Create(values ...*model.UserBindThirdWallet) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBindThirdWalletDo) CreateInBatches(values []*model.UserBindThirdWallet, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBindThirdWalletDo) Save(values ...*model.UserBindThirdWallet) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBindThirdWalletDo) First() (*model.UserBindThirdWallet, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindThirdWallet), nil
	}
}

func (u userBindThirdWalletDo) Take() (*model.UserBindThirdWallet, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindThirdWallet), nil
	}
}

func (u userBindThirdWalletDo) Last() (*model.UserBindThirdWallet, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindThirdWallet), nil
	}
}

func (u userBindThirdWalletDo) Find() ([]*model.UserBindThirdWallet, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBindThirdWallet), err
}

func (u userBindThirdWalletDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBindThirdWallet, err error) {
	buf := make([]*model.UserBindThirdWallet, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBindThirdWalletDo) FindInBatches(result *[]*model.UserBindThirdWallet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBindThirdWalletDo) Attrs(attrs ...field.AssignExpr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBindThirdWalletDo) Assign(attrs ...field.AssignExpr) IUserBindThirdWalletDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBindThirdWalletDo) Joins(fields ...field.RelationField) IUserBindThirdWalletDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBindThirdWalletDo) Preload(fields ...field.RelationField) IUserBindThirdWalletDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBindThirdWalletDo) FirstOrInit() (*model.UserBindThirdWallet, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindThirdWallet), nil
	}
}

func (u userBindThirdWalletDo) FirstOrCreate() (*model.UserBindThirdWallet, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindThirdWallet), nil
	}
}

func (u userBindThirdWalletDo) FindByPage(offset int, limit int) (result []*model.UserBindThirdWallet, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBindThirdWalletDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBindThirdWalletDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBindThirdWalletDo) Delete(models ...*model.UserBindThirdWallet) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBindThirdWalletDo) withDO(do gen.Dao) *userBindThirdWalletDo {
	u.DO = *do.(*gen.DO)
	return u
}
