// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLiveBroadcastPushRecord(db *gorm.DB, opts ...gen.DOOption) liveBroadcastPushRecord {
	_liveBroadcastPushRecord := liveBroadcastPushRecord{}

	_liveBroadcastPushRecord.liveBroadcastPushRecordDo.UseDB(db, opts...)
	_liveBroadcastPushRecord.liveBroadcastPushRecordDo.UseModel(&model.LiveBroadcastPushRecord{})

	tableName := _liveBroadcastPushRecord.liveBroadcastPushRecordDo.TableName()
	_liveBroadcastPushRecord.ALL = field.NewAsterisk(tableName)
	_liveBroadcastPushRecord.ID = field.NewInt64(tableName, "id")
	_liveBroadcastPushRecord.LiveID = field.NewString(tableName, "live_id")
	_liveBroadcastPushRecord.AnchorID = field.NewInt64(tableName, "anchor_id")
	_liveBroadcastPushRecord.AnchorName = field.NewString(tableName, "anchor_name")
	_liveBroadcastPushRecord.AnchorUesrID = field.NewString(tableName, "anchor_uesr_id")
	_liveBroadcastPushRecord.LiveType = field.NewInt64(tableName, "live_type")
	_liveBroadcastPushRecord.StartTime = field.NewField(tableName, "start_time")
	_liveBroadcastPushRecord.EndTime = field.NewField(tableName, "end_time")
	_liveBroadcastPushRecord.Duration = field.NewInt64(tableName, "duration")
	_liveBroadcastPushRecord.TotalUserNum = field.NewInt64(tableName, "total_user_num")
	_liveBroadcastPushRecord.OpenUserNum = field.NewInt64(tableName, "open_user_num")
	_liveBroadcastPushRecord.OldUserNum = field.NewInt64(tableName, "old_user_num")
	_liveBroadcastPushRecord.NoOpenUserNum = field.NewInt64(tableName, "no_open_user_num")
	_liveBroadcastPushRecord.FirstRechargeAmount = field.NewFloat64(tableName, "first_recharge_amount")
	_liveBroadcastPushRecord.OpenUserDepositAmount = field.NewFloat64(tableName, "open_user_deposit_amount")
	_liveBroadcastPushRecord.OpenUserWithdrawAmount = field.NewFloat64(tableName, "open_user_withdraw_amount")
	_liveBroadcastPushRecord.OldUserDepositAmount = field.NewFloat64(tableName, "old_user_deposit_amount")
	_liveBroadcastPushRecord.OldUserWithdrawAmount = field.NewFloat64(tableName, "old_user_withdraw_amount")
	_liveBroadcastPushRecord.CreatedAt = field.NewField(tableName, "created_at")
	_liveBroadcastPushRecord.UpdatedAt = field.NewField(tableName, "updated_at")
	_liveBroadcastPushRecord.OpenUserRate = field.NewFloat64(tableName, "open_user_rate")
	_liveBroadcastPushRecord.OpenUserCustomerUnitPrice = field.NewFloat64(tableName, "open_user_customer_unit_price")

	_liveBroadcastPushRecord.fillFieldMap()

	return _liveBroadcastPushRecord
}

// liveBroadcastPushRecord 直播推送记录表
type liveBroadcastPushRecord struct {
	liveBroadcastPushRecordDo liveBroadcastPushRecordDo

	ALL                       field.Asterisk
	ID                        field.Int64
	LiveID                    field.String  // 直播ID
	AnchorID                  field.Int64   // 主播ID
	AnchorName                field.String  // 主播用户名
	AnchorUesrID              field.String  // 金年会绑定ID
	LiveType                  field.Int64   // 直播类型
	StartTime                 field.Field   // 直播开启时间
	EndTime                   field.Field   // 直播结束时间
	Duration                  field.Int64   // 直播持续时长
	TotalUserNum              field.Int64   // 观看人数
	OpenUserNum               field.Int64   // 新开户数
	OldUserNum                field.Int64   // 老客户数
	NoOpenUserNum             field.Int64   // 未开户数
	FirstRechargeAmount       field.Float64 // 开户首存总金额
	OpenUserDepositAmount     field.Float64 // 开户总存款金额
	OpenUserWithdrawAmount    field.Float64 // 开户总取款金额
	OldUserDepositAmount      field.Float64 // 老客户总存款金额
	OldUserWithdrawAmount     field.Float64 // 老客户总取款金额
	CreatedAt                 field.Field
	UpdatedAt                 field.Field
	OpenUserRate              field.Float64 // 开户占比
	OpenUserCustomerUnitPrice field.Float64 // 开户占比

	fieldMap map[string]field.Expr
}

func (l liveBroadcastPushRecord) Table(newTableName string) *liveBroadcastPushRecord {
	l.liveBroadcastPushRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveBroadcastPushRecord) As(alias string) *liveBroadcastPushRecord {
	l.liveBroadcastPushRecordDo.DO = *(l.liveBroadcastPushRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveBroadcastPushRecord) updateTableName(table string) *liveBroadcastPushRecord {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.LiveID = field.NewString(table, "live_id")
	l.AnchorID = field.NewInt64(table, "anchor_id")
	l.AnchorName = field.NewString(table, "anchor_name")
	l.AnchorUesrID = field.NewString(table, "anchor_uesr_id")
	l.LiveType = field.NewInt64(table, "live_type")
	l.StartTime = field.NewField(table, "start_time")
	l.EndTime = field.NewField(table, "end_time")
	l.Duration = field.NewInt64(table, "duration")
	l.TotalUserNum = field.NewInt64(table, "total_user_num")
	l.OpenUserNum = field.NewInt64(table, "open_user_num")
	l.OldUserNum = field.NewInt64(table, "old_user_num")
	l.NoOpenUserNum = field.NewInt64(table, "no_open_user_num")
	l.FirstRechargeAmount = field.NewFloat64(table, "first_recharge_amount")
	l.OpenUserDepositAmount = field.NewFloat64(table, "open_user_deposit_amount")
	l.OpenUserWithdrawAmount = field.NewFloat64(table, "open_user_withdraw_amount")
	l.OldUserDepositAmount = field.NewFloat64(table, "old_user_deposit_amount")
	l.OldUserWithdrawAmount = field.NewFloat64(table, "old_user_withdraw_amount")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")
	l.OpenUserRate = field.NewFloat64(table, "open_user_rate")
	l.OpenUserCustomerUnitPrice = field.NewFloat64(table, "open_user_customer_unit_price")

	l.fillFieldMap()

	return l
}

func (l *liveBroadcastPushRecord) WithContext(ctx context.Context) ILiveBroadcastPushRecordDo {
	return l.liveBroadcastPushRecordDo.WithContext(ctx)
}

func (l liveBroadcastPushRecord) TableName() string { return l.liveBroadcastPushRecordDo.TableName() }

func (l liveBroadcastPushRecord) Alias() string { return l.liveBroadcastPushRecordDo.Alias() }

func (l liveBroadcastPushRecord) Columns(cols ...field.Expr) gen.Columns {
	return l.liveBroadcastPushRecordDo.Columns(cols...)
}

func (l *liveBroadcastPushRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveBroadcastPushRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 22)
	l.fieldMap["id"] = l.ID
	l.fieldMap["live_id"] = l.LiveID
	l.fieldMap["anchor_id"] = l.AnchorID
	l.fieldMap["anchor_name"] = l.AnchorName
	l.fieldMap["anchor_uesr_id"] = l.AnchorUesrID
	l.fieldMap["live_type"] = l.LiveType
	l.fieldMap["start_time"] = l.StartTime
	l.fieldMap["end_time"] = l.EndTime
	l.fieldMap["duration"] = l.Duration
	l.fieldMap["total_user_num"] = l.TotalUserNum
	l.fieldMap["open_user_num"] = l.OpenUserNum
	l.fieldMap["old_user_num"] = l.OldUserNum
	l.fieldMap["no_open_user_num"] = l.NoOpenUserNum
	l.fieldMap["first_recharge_amount"] = l.FirstRechargeAmount
	l.fieldMap["open_user_deposit_amount"] = l.OpenUserDepositAmount
	l.fieldMap["open_user_withdraw_amount"] = l.OpenUserWithdrawAmount
	l.fieldMap["old_user_deposit_amount"] = l.OldUserDepositAmount
	l.fieldMap["old_user_withdraw_amount"] = l.OldUserWithdrawAmount
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["open_user_rate"] = l.OpenUserRate
	l.fieldMap["open_user_customer_unit_price"] = l.OpenUserCustomerUnitPrice
}

func (l liveBroadcastPushRecord) clone(db *gorm.DB) liveBroadcastPushRecord {
	l.liveBroadcastPushRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveBroadcastPushRecord) replaceDB(db *gorm.DB) liveBroadcastPushRecord {
	l.liveBroadcastPushRecordDo.ReplaceDB(db)
	return l
}

type liveBroadcastPushRecordDo struct{ gen.DO }

type ILiveBroadcastPushRecordDo interface {
	gen.SubQuery
	Debug() ILiveBroadcastPushRecordDo
	WithContext(ctx context.Context) ILiveBroadcastPushRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveBroadcastPushRecordDo
	WriteDB() ILiveBroadcastPushRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveBroadcastPushRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveBroadcastPushRecordDo
	Not(conds ...gen.Condition) ILiveBroadcastPushRecordDo
	Or(conds ...gen.Condition) ILiveBroadcastPushRecordDo
	Select(conds ...field.Expr) ILiveBroadcastPushRecordDo
	Where(conds ...gen.Condition) ILiveBroadcastPushRecordDo
	Order(conds ...field.Expr) ILiveBroadcastPushRecordDo
	Distinct(cols ...field.Expr) ILiveBroadcastPushRecordDo
	Omit(cols ...field.Expr) ILiveBroadcastPushRecordDo
	Join(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo
	Group(cols ...field.Expr) ILiveBroadcastPushRecordDo
	Having(conds ...gen.Condition) ILiveBroadcastPushRecordDo
	Limit(limit int) ILiveBroadcastPushRecordDo
	Offset(offset int) ILiveBroadcastPushRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveBroadcastPushRecordDo
	Unscoped() ILiveBroadcastPushRecordDo
	Create(values ...*model.LiveBroadcastPushRecord) error
	CreateInBatches(values []*model.LiveBroadcastPushRecord, batchSize int) error
	Save(values ...*model.LiveBroadcastPushRecord) error
	First() (*model.LiveBroadcastPushRecord, error)
	Take() (*model.LiveBroadcastPushRecord, error)
	Last() (*model.LiveBroadcastPushRecord, error)
	Find() ([]*model.LiveBroadcastPushRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveBroadcastPushRecord, err error)
	FindInBatches(result *[]*model.LiveBroadcastPushRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveBroadcastPushRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveBroadcastPushRecordDo
	Assign(attrs ...field.AssignExpr) ILiveBroadcastPushRecordDo
	Joins(fields ...field.RelationField) ILiveBroadcastPushRecordDo
	Preload(fields ...field.RelationField) ILiveBroadcastPushRecordDo
	FirstOrInit() (*model.LiveBroadcastPushRecord, error)
	FirstOrCreate() (*model.LiveBroadcastPushRecord, error)
	FindByPage(offset int, limit int) (result []*model.LiveBroadcastPushRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveBroadcastPushRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveBroadcastPushRecordDo) Debug() ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l liveBroadcastPushRecordDo) WithContext(ctx context.Context) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveBroadcastPushRecordDo) ReadDB() ILiveBroadcastPushRecordDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveBroadcastPushRecordDo) WriteDB() ILiveBroadcastPushRecordDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveBroadcastPushRecordDo) Session(config *gorm.Session) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveBroadcastPushRecordDo) Clauses(conds ...clause.Expression) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveBroadcastPushRecordDo) Returning(value interface{}, columns ...string) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveBroadcastPushRecordDo) Not(conds ...gen.Condition) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveBroadcastPushRecordDo) Or(conds ...gen.Condition) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveBroadcastPushRecordDo) Select(conds ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveBroadcastPushRecordDo) Where(conds ...gen.Condition) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveBroadcastPushRecordDo) Order(conds ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveBroadcastPushRecordDo) Distinct(cols ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveBroadcastPushRecordDo) Omit(cols ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveBroadcastPushRecordDo) Join(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveBroadcastPushRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveBroadcastPushRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveBroadcastPushRecordDo) Group(cols ...field.Expr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveBroadcastPushRecordDo) Having(conds ...gen.Condition) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveBroadcastPushRecordDo) Limit(limit int) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveBroadcastPushRecordDo) Offset(offset int) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveBroadcastPushRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveBroadcastPushRecordDo) Unscoped() ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveBroadcastPushRecordDo) Create(values ...*model.LiveBroadcastPushRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveBroadcastPushRecordDo) CreateInBatches(values []*model.LiveBroadcastPushRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveBroadcastPushRecordDo) Save(values ...*model.LiveBroadcastPushRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveBroadcastPushRecordDo) First() (*model.LiveBroadcastPushRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushRecord), nil
	}
}

func (l liveBroadcastPushRecordDo) Take() (*model.LiveBroadcastPushRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushRecord), nil
	}
}

func (l liveBroadcastPushRecordDo) Last() (*model.LiveBroadcastPushRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushRecord), nil
	}
}

func (l liveBroadcastPushRecordDo) Find() ([]*model.LiveBroadcastPushRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveBroadcastPushRecord), err
}

func (l liveBroadcastPushRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveBroadcastPushRecord, err error) {
	buf := make([]*model.LiveBroadcastPushRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveBroadcastPushRecordDo) FindInBatches(result *[]*model.LiveBroadcastPushRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveBroadcastPushRecordDo) Attrs(attrs ...field.AssignExpr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveBroadcastPushRecordDo) Assign(attrs ...field.AssignExpr) ILiveBroadcastPushRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveBroadcastPushRecordDo) Joins(fields ...field.RelationField) ILiveBroadcastPushRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveBroadcastPushRecordDo) Preload(fields ...field.RelationField) ILiveBroadcastPushRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveBroadcastPushRecordDo) FirstOrInit() (*model.LiveBroadcastPushRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushRecord), nil
	}
}

func (l liveBroadcastPushRecordDo) FirstOrCreate() (*model.LiveBroadcastPushRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushRecord), nil
	}
}

func (l liveBroadcastPushRecordDo) FindByPage(offset int, limit int) (result []*model.LiveBroadcastPushRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveBroadcastPushRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveBroadcastPushRecordDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveBroadcastPushRecordDo) Delete(models ...*model.LiveBroadcastPushRecord) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveBroadcastPushRecordDo) withDO(do gen.Dao) *liveBroadcastPushRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
