// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserPhoneIP(db *gorm.DB, opts ...gen.DOOption) userPhoneIP {
	_userPhoneIP := userPhoneIP{}

	_userPhoneIP.userPhoneIPDo.UseDB(db, opts...)
	_userPhoneIP.userPhoneIPDo.UseModel(&model.UserPhoneIP{})

	tableName := _userPhoneIP.userPhoneIPDo.TableName()
	_userPhoneIP.ALL = field.NewAsterisk(tableName)
	_userPhoneIP.ID = field.NewInt64(tableName, "id")
	_userPhoneIP.UserID = field.NewInt64(tableName, "user_id")
	_userPhoneIP.Username = field.NewString(tableName, "username")
	_userPhoneIP.Domain = field.NewString(tableName, "domain")
	_userPhoneIP.IP = field.NewString(tableName, "ip")
	_userPhoneIP.IPArea = field.NewString(tableName, "ip_area")
	_userPhoneIP.Phone = field.NewString(tableName, "phone")
	_userPhoneIP.PhoneArea = field.NewString(tableName, "phone_area")
	_userPhoneIP.DeletedAt = field.NewField(tableName, "deleted_at")
	_userPhoneIP.CreatedAt = field.NewField(tableName, "created_at")
	_userPhoneIP.UpdatedAt = field.NewField(tableName, "updated_at")
	_userPhoneIP.Plat = field.NewInt64(tableName, "plat")

	_userPhoneIP.fillFieldMap()

	return _userPhoneIP
}

type userPhoneIP struct {
	userPhoneIPDo userPhoneIPDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64  // 会员id
	Username  field.String // 会员名称
	Domain    field.String // 域名
	IP        field.String // ip
	IPArea    field.String // ip区域
	Phone     field.String // 手机号
	PhoneArea field.String // 手机号区域
	DeletedAt field.Field  // 是否在线,0:否；1：是
	CreatedAt field.Field
	UpdatedAt field.Field
	Plat      field.Int64 // 平台

	fieldMap map[string]field.Expr
}

func (u userPhoneIP) Table(newTableName string) *userPhoneIP {
	u.userPhoneIPDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPhoneIP) As(alias string) *userPhoneIP {
	u.userPhoneIPDo.DO = *(u.userPhoneIPDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPhoneIP) updateTableName(table string) *userPhoneIP {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.Domain = field.NewString(table, "domain")
	u.IP = field.NewString(table, "ip")
	u.IPArea = field.NewString(table, "ip_area")
	u.Phone = field.NewString(table, "phone")
	u.PhoneArea = field.NewString(table, "phone_area")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.Plat = field.NewInt64(table, "plat")

	u.fillFieldMap()

	return u
}

func (u *userPhoneIP) WithContext(ctx context.Context) IUserPhoneIPDo {
	return u.userPhoneIPDo.WithContext(ctx)
}

func (u userPhoneIP) TableName() string { return u.userPhoneIPDo.TableName() }

func (u userPhoneIP) Alias() string { return u.userPhoneIPDo.Alias() }

func (u userPhoneIP) Columns(cols ...field.Expr) gen.Columns { return u.userPhoneIPDo.Columns(cols...) }

func (u *userPhoneIP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPhoneIP) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["domain"] = u.Domain
	u.fieldMap["ip"] = u.IP
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["phone_area"] = u.PhoneArea
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["plat"] = u.Plat
}

func (u userPhoneIP) clone(db *gorm.DB) userPhoneIP {
	u.userPhoneIPDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPhoneIP) replaceDB(db *gorm.DB) userPhoneIP {
	u.userPhoneIPDo.ReplaceDB(db)
	return u
}

type userPhoneIPDo struct{ gen.DO }

type IUserPhoneIPDo interface {
	gen.SubQuery
	Debug() IUserPhoneIPDo
	WithContext(ctx context.Context) IUserPhoneIPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPhoneIPDo
	WriteDB() IUserPhoneIPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPhoneIPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPhoneIPDo
	Not(conds ...gen.Condition) IUserPhoneIPDo
	Or(conds ...gen.Condition) IUserPhoneIPDo
	Select(conds ...field.Expr) IUserPhoneIPDo
	Where(conds ...gen.Condition) IUserPhoneIPDo
	Order(conds ...field.Expr) IUserPhoneIPDo
	Distinct(cols ...field.Expr) IUserPhoneIPDo
	Omit(cols ...field.Expr) IUserPhoneIPDo
	Join(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo
	Group(cols ...field.Expr) IUserPhoneIPDo
	Having(conds ...gen.Condition) IUserPhoneIPDo
	Limit(limit int) IUserPhoneIPDo
	Offset(offset int) IUserPhoneIPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPhoneIPDo
	Unscoped() IUserPhoneIPDo
	Create(values ...*model.UserPhoneIP) error
	CreateInBatches(values []*model.UserPhoneIP, batchSize int) error
	Save(values ...*model.UserPhoneIP) error
	First() (*model.UserPhoneIP, error)
	Take() (*model.UserPhoneIP, error)
	Last() (*model.UserPhoneIP, error)
	Find() ([]*model.UserPhoneIP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPhoneIP, err error)
	FindInBatches(result *[]*model.UserPhoneIP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPhoneIP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPhoneIPDo
	Assign(attrs ...field.AssignExpr) IUserPhoneIPDo
	Joins(fields ...field.RelationField) IUserPhoneIPDo
	Preload(fields ...field.RelationField) IUserPhoneIPDo
	FirstOrInit() (*model.UserPhoneIP, error)
	FirstOrCreate() (*model.UserPhoneIP, error)
	FindByPage(offset int, limit int) (result []*model.UserPhoneIP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPhoneIPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPhoneIPDo) Debug() IUserPhoneIPDo {
	return u.withDO(u.DO.Debug())
}

func (u userPhoneIPDo) WithContext(ctx context.Context) IUserPhoneIPDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPhoneIPDo) ReadDB() IUserPhoneIPDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPhoneIPDo) WriteDB() IUserPhoneIPDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPhoneIPDo) Session(config *gorm.Session) IUserPhoneIPDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPhoneIPDo) Clauses(conds ...clause.Expression) IUserPhoneIPDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPhoneIPDo) Returning(value interface{}, columns ...string) IUserPhoneIPDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPhoneIPDo) Not(conds ...gen.Condition) IUserPhoneIPDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPhoneIPDo) Or(conds ...gen.Condition) IUserPhoneIPDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPhoneIPDo) Select(conds ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPhoneIPDo) Where(conds ...gen.Condition) IUserPhoneIPDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPhoneIPDo) Order(conds ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPhoneIPDo) Distinct(cols ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPhoneIPDo) Omit(cols ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPhoneIPDo) Join(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPhoneIPDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPhoneIPDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPhoneIPDo) Group(cols ...field.Expr) IUserPhoneIPDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPhoneIPDo) Having(conds ...gen.Condition) IUserPhoneIPDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPhoneIPDo) Limit(limit int) IUserPhoneIPDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPhoneIPDo) Offset(offset int) IUserPhoneIPDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPhoneIPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPhoneIPDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPhoneIPDo) Unscoped() IUserPhoneIPDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPhoneIPDo) Create(values ...*model.UserPhoneIP) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPhoneIPDo) CreateInBatches(values []*model.UserPhoneIP, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPhoneIPDo) Save(values ...*model.UserPhoneIP) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPhoneIPDo) First() (*model.UserPhoneIP, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPhoneIP), nil
	}
}

func (u userPhoneIPDo) Take() (*model.UserPhoneIP, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPhoneIP), nil
	}
}

func (u userPhoneIPDo) Last() (*model.UserPhoneIP, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPhoneIP), nil
	}
}

func (u userPhoneIPDo) Find() ([]*model.UserPhoneIP, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPhoneIP), err
}

func (u userPhoneIPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPhoneIP, err error) {
	buf := make([]*model.UserPhoneIP, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPhoneIPDo) FindInBatches(result *[]*model.UserPhoneIP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPhoneIPDo) Attrs(attrs ...field.AssignExpr) IUserPhoneIPDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPhoneIPDo) Assign(attrs ...field.AssignExpr) IUserPhoneIPDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPhoneIPDo) Joins(fields ...field.RelationField) IUserPhoneIPDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPhoneIPDo) Preload(fields ...field.RelationField) IUserPhoneIPDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPhoneIPDo) FirstOrInit() (*model.UserPhoneIP, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPhoneIP), nil
	}
}

func (u userPhoneIPDo) FirstOrCreate() (*model.UserPhoneIP, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPhoneIP), nil
	}
}

func (u userPhoneIPDo) FindByPage(offset int, limit int) (result []*model.UserPhoneIP, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPhoneIPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPhoneIPDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPhoneIPDo) Delete(models ...*model.UserPhoneIP) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPhoneIPDo) withDO(do gen.Dao) *userPhoneIPDo {
	u.DO = *do.(*gen.DO)
	return u
}
