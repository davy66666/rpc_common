// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newWithdrawalDeviceConfig(db *gorm.DB, opts ...gen.DOOption) withdrawalDeviceConfig {
	_withdrawalDeviceConfig := withdrawalDeviceConfig{}

	_withdrawalDeviceConfig.withdrawalDeviceConfigDo.UseDB(db, opts...)
	_withdrawalDeviceConfig.withdrawalDeviceConfigDo.UseModel(&model.WithdrawalDeviceConfig{})

	tableName := _withdrawalDeviceConfig.withdrawalDeviceConfigDo.TableName()
	_withdrawalDeviceConfig.ALL = field.NewAsterisk(tableName)
	_withdrawalDeviceConfig.ID = field.NewInt64(tableName, "id")
	_withdrawalDeviceConfig.Plat = field.NewInt64(tableName, "plat")
	_withdrawalDeviceConfig.Rules = field.NewString(tableName, "rules")
	_withdrawalDeviceConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_withdrawalDeviceConfig.ExceptionMsg = field.NewString(tableName, "exception_msg")
	_withdrawalDeviceConfig.ExceptionShowMobileBtn = field.NewInt64(tableName, "exception_show_mobile_btn")
	_withdrawalDeviceConfig.ExceptionShowCustomerServiceBtn = field.NewInt64(tableName, "exception_show_customer_service_btn")
	_withdrawalDeviceConfig.VerifyFailedMsg = field.NewString(tableName, "verify_failed_msg")
	_withdrawalDeviceConfig.VerifyFailedShowMobileBtn = field.NewInt64(tableName, "verify_failed_show_mobile_btn")
	_withdrawalDeviceConfig.VerifyFailedShowCustomerServiceBtn = field.NewInt64(tableName, "verify_failed_show_customer_service_btn")
	_withdrawalDeviceConfig.AdminName = field.NewString(tableName, "admin_name")
	_withdrawalDeviceConfig.CreatedAt = field.NewField(tableName, "created_at")
	_withdrawalDeviceConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_withdrawalDeviceConfig.fillFieldMap()

	return _withdrawalDeviceConfig
}

// withdrawalDeviceConfig 取款校验设备配置表
type withdrawalDeviceConfig struct {
	withdrawalDeviceConfigDo withdrawalDeviceConfigDo

	ALL                                field.Asterisk
	ID                                 field.Int64
	Plat                               field.Int64  // 唯一客户端
	Rules                              field.String // 规则（安全场景选择,使用逗号分隔存放数值）
	IsOpen                             field.Int64  // 是否启用 1:是,0否
	ExceptionMsg                       field.String // 设备ID异常提示消息
	ExceptionShowMobileBtn             field.Int64  // 异常显示手机验证按钮 1:是,0否
	ExceptionShowCustomerServiceBtn    field.Int64  // 异常显示联系客服按钮 1:是,0否
	VerifyFailedMsg                    field.String // 验证不通过提示消息
	VerifyFailedShowMobileBtn          field.Int64  // 验证不通过显示更换手机按钮 1:是,0否
	VerifyFailedShowCustomerServiceBtn field.Int64  // 验证不通过显示联系客服按钮 1:是,0否
	AdminName                          field.String // 最后操作管理员
	CreatedAt                          field.Field
	UpdatedAt                          field.Field

	fieldMap map[string]field.Expr
}

func (w withdrawalDeviceConfig) Table(newTableName string) *withdrawalDeviceConfig {
	w.withdrawalDeviceConfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w withdrawalDeviceConfig) As(alias string) *withdrawalDeviceConfig {
	w.withdrawalDeviceConfigDo.DO = *(w.withdrawalDeviceConfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *withdrawalDeviceConfig) updateTableName(table string) *withdrawalDeviceConfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Plat = field.NewInt64(table, "plat")
	w.Rules = field.NewString(table, "rules")
	w.IsOpen = field.NewInt64(table, "is_open")
	w.ExceptionMsg = field.NewString(table, "exception_msg")
	w.ExceptionShowMobileBtn = field.NewInt64(table, "exception_show_mobile_btn")
	w.ExceptionShowCustomerServiceBtn = field.NewInt64(table, "exception_show_customer_service_btn")
	w.VerifyFailedMsg = field.NewString(table, "verify_failed_msg")
	w.VerifyFailedShowMobileBtn = field.NewInt64(table, "verify_failed_show_mobile_btn")
	w.VerifyFailedShowCustomerServiceBtn = field.NewInt64(table, "verify_failed_show_customer_service_btn")
	w.AdminName = field.NewString(table, "admin_name")
	w.CreatedAt = field.NewField(table, "created_at")
	w.UpdatedAt = field.NewField(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *withdrawalDeviceConfig) WithContext(ctx context.Context) IWithdrawalDeviceConfigDo {
	return w.withdrawalDeviceConfigDo.WithContext(ctx)
}

func (w withdrawalDeviceConfig) TableName() string { return w.withdrawalDeviceConfigDo.TableName() }

func (w withdrawalDeviceConfig) Alias() string { return w.withdrawalDeviceConfigDo.Alias() }

func (w withdrawalDeviceConfig) Columns(cols ...field.Expr) gen.Columns {
	return w.withdrawalDeviceConfigDo.Columns(cols...)
}

func (w *withdrawalDeviceConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *withdrawalDeviceConfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 13)
	w.fieldMap["id"] = w.ID
	w.fieldMap["plat"] = w.Plat
	w.fieldMap["rules"] = w.Rules
	w.fieldMap["is_open"] = w.IsOpen
	w.fieldMap["exception_msg"] = w.ExceptionMsg
	w.fieldMap["exception_show_mobile_btn"] = w.ExceptionShowMobileBtn
	w.fieldMap["exception_show_customer_service_btn"] = w.ExceptionShowCustomerServiceBtn
	w.fieldMap["verify_failed_msg"] = w.VerifyFailedMsg
	w.fieldMap["verify_failed_show_mobile_btn"] = w.VerifyFailedShowMobileBtn
	w.fieldMap["verify_failed_show_customer_service_btn"] = w.VerifyFailedShowCustomerServiceBtn
	w.fieldMap["admin_name"] = w.AdminName
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w withdrawalDeviceConfig) clone(db *gorm.DB) withdrawalDeviceConfig {
	w.withdrawalDeviceConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w withdrawalDeviceConfig) replaceDB(db *gorm.DB) withdrawalDeviceConfig {
	w.withdrawalDeviceConfigDo.ReplaceDB(db)
	return w
}

type withdrawalDeviceConfigDo struct{ gen.DO }

type IWithdrawalDeviceConfigDo interface {
	gen.SubQuery
	Debug() IWithdrawalDeviceConfigDo
	WithContext(ctx context.Context) IWithdrawalDeviceConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWithdrawalDeviceConfigDo
	WriteDB() IWithdrawalDeviceConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWithdrawalDeviceConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWithdrawalDeviceConfigDo
	Not(conds ...gen.Condition) IWithdrawalDeviceConfigDo
	Or(conds ...gen.Condition) IWithdrawalDeviceConfigDo
	Select(conds ...field.Expr) IWithdrawalDeviceConfigDo
	Where(conds ...gen.Condition) IWithdrawalDeviceConfigDo
	Order(conds ...field.Expr) IWithdrawalDeviceConfigDo
	Distinct(cols ...field.Expr) IWithdrawalDeviceConfigDo
	Omit(cols ...field.Expr) IWithdrawalDeviceConfigDo
	Join(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo
	Group(cols ...field.Expr) IWithdrawalDeviceConfigDo
	Having(conds ...gen.Condition) IWithdrawalDeviceConfigDo
	Limit(limit int) IWithdrawalDeviceConfigDo
	Offset(offset int) IWithdrawalDeviceConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalDeviceConfigDo
	Unscoped() IWithdrawalDeviceConfigDo
	Create(values ...*model.WithdrawalDeviceConfig) error
	CreateInBatches(values []*model.WithdrawalDeviceConfig, batchSize int) error
	Save(values ...*model.WithdrawalDeviceConfig) error
	First() (*model.WithdrawalDeviceConfig, error)
	Take() (*model.WithdrawalDeviceConfig, error)
	Last() (*model.WithdrawalDeviceConfig, error)
	Find() ([]*model.WithdrawalDeviceConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalDeviceConfig, err error)
	FindInBatches(result *[]*model.WithdrawalDeviceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WithdrawalDeviceConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWithdrawalDeviceConfigDo
	Assign(attrs ...field.AssignExpr) IWithdrawalDeviceConfigDo
	Joins(fields ...field.RelationField) IWithdrawalDeviceConfigDo
	Preload(fields ...field.RelationField) IWithdrawalDeviceConfigDo
	FirstOrInit() (*model.WithdrawalDeviceConfig, error)
	FirstOrCreate() (*model.WithdrawalDeviceConfig, error)
	FindByPage(offset int, limit int) (result []*model.WithdrawalDeviceConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWithdrawalDeviceConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w withdrawalDeviceConfigDo) Debug() IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Debug())
}

func (w withdrawalDeviceConfigDo) WithContext(ctx context.Context) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w withdrawalDeviceConfigDo) ReadDB() IWithdrawalDeviceConfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w withdrawalDeviceConfigDo) WriteDB() IWithdrawalDeviceConfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w withdrawalDeviceConfigDo) Session(config *gorm.Session) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Session(config))
}

func (w withdrawalDeviceConfigDo) Clauses(conds ...clause.Expression) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w withdrawalDeviceConfigDo) Returning(value interface{}, columns ...string) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w withdrawalDeviceConfigDo) Not(conds ...gen.Condition) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w withdrawalDeviceConfigDo) Or(conds ...gen.Condition) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w withdrawalDeviceConfigDo) Select(conds ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w withdrawalDeviceConfigDo) Where(conds ...gen.Condition) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w withdrawalDeviceConfigDo) Order(conds ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w withdrawalDeviceConfigDo) Distinct(cols ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w withdrawalDeviceConfigDo) Omit(cols ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w withdrawalDeviceConfigDo) Join(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w withdrawalDeviceConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w withdrawalDeviceConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w withdrawalDeviceConfigDo) Group(cols ...field.Expr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w withdrawalDeviceConfigDo) Having(conds ...gen.Condition) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w withdrawalDeviceConfigDo) Limit(limit int) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w withdrawalDeviceConfigDo) Offset(offset int) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w withdrawalDeviceConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w withdrawalDeviceConfigDo) Unscoped() IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w withdrawalDeviceConfigDo) Create(values ...*model.WithdrawalDeviceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w withdrawalDeviceConfigDo) CreateInBatches(values []*model.WithdrawalDeviceConfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w withdrawalDeviceConfigDo) Save(values ...*model.WithdrawalDeviceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w withdrawalDeviceConfigDo) First() (*model.WithdrawalDeviceConfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalDeviceConfig), nil
	}
}

func (w withdrawalDeviceConfigDo) Take() (*model.WithdrawalDeviceConfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalDeviceConfig), nil
	}
}

func (w withdrawalDeviceConfigDo) Last() (*model.WithdrawalDeviceConfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalDeviceConfig), nil
	}
}

func (w withdrawalDeviceConfigDo) Find() ([]*model.WithdrawalDeviceConfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WithdrawalDeviceConfig), err
}

func (w withdrawalDeviceConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalDeviceConfig, err error) {
	buf := make([]*model.WithdrawalDeviceConfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w withdrawalDeviceConfigDo) FindInBatches(result *[]*model.WithdrawalDeviceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w withdrawalDeviceConfigDo) Attrs(attrs ...field.AssignExpr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w withdrawalDeviceConfigDo) Assign(attrs ...field.AssignExpr) IWithdrawalDeviceConfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w withdrawalDeviceConfigDo) Joins(fields ...field.RelationField) IWithdrawalDeviceConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w withdrawalDeviceConfigDo) Preload(fields ...field.RelationField) IWithdrawalDeviceConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w withdrawalDeviceConfigDo) FirstOrInit() (*model.WithdrawalDeviceConfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalDeviceConfig), nil
	}
}

func (w withdrawalDeviceConfigDo) FirstOrCreate() (*model.WithdrawalDeviceConfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalDeviceConfig), nil
	}
}

func (w withdrawalDeviceConfigDo) FindByPage(offset int, limit int) (result []*model.WithdrawalDeviceConfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w withdrawalDeviceConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w withdrawalDeviceConfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w withdrawalDeviceConfigDo) Delete(models ...*model.WithdrawalDeviceConfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *withdrawalDeviceConfigDo) withDO(do gen.Dao) *withdrawalDeviceConfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
