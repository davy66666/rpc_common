// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMatchEvent(db *gorm.DB, opts ...gen.DOOption) matchEvent {
	_matchEvent := matchEvent{}

	_matchEvent.matchEventDo.UseDB(db, opts...)
	_matchEvent.matchEventDo.UseModel(&model.MatchEvent{})

	tableName := _matchEvent.matchEventDo.TableName()
	_matchEvent.ALL = field.NewAsterisk(tableName)
	_matchEvent.ID = field.NewInt64(tableName, "id")
	_matchEvent.ParentID = field.NewInt64(tableName, "parent_id")
	_matchEvent.EventName = field.NewString(tableName, "event_name")
	_matchEvent.TotalRound = field.NewInt64(tableName, "total_round")
	_matchEvent.Remark = field.NewString(tableName, "remark")
	_matchEvent.StartAt = field.NewField(tableName, "start_at")
	_matchEvent.EndAt = field.NewField(tableName, "end_at")
	_matchEvent.CreatedAt = field.NewField(tableName, "created_at")
	_matchEvent.UpdatedAt = field.NewField(tableName, "updated_at")

	_matchEvent.fillFieldMap()

	return _matchEvent
}

// matchEvent 赛程组信息
type matchEvent struct {
	matchEventDo matchEventDo

	ALL        field.Asterisk
	ID         field.Int64
	ParentID   field.Int64  // 上级ID
	EventName  field.String // 赛程名称
	TotalRound field.Int64  // 总场次
	Remark     field.String // 说明
	StartAt    field.Field  // 开始时间
	EndAt      field.Field  // 结束时间
	CreatedAt  field.Field  // 创建时间
	UpdatedAt  field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (m matchEvent) Table(newTableName string) *matchEvent {
	m.matchEventDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchEvent) As(alias string) *matchEvent {
	m.matchEventDo.DO = *(m.matchEventDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchEvent) updateTableName(table string) *matchEvent {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ParentID = field.NewInt64(table, "parent_id")
	m.EventName = field.NewString(table, "event_name")
	m.TotalRound = field.NewInt64(table, "total_round")
	m.Remark = field.NewString(table, "remark")
	m.StartAt = field.NewField(table, "start_at")
	m.EndAt = field.NewField(table, "end_at")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *matchEvent) WithContext(ctx context.Context) IMatchEventDo {
	return m.matchEventDo.WithContext(ctx)
}

func (m matchEvent) TableName() string { return m.matchEventDo.TableName() }

func (m matchEvent) Alias() string { return m.matchEventDo.Alias() }

func (m matchEvent) Columns(cols ...field.Expr) gen.Columns { return m.matchEventDo.Columns(cols...) }

func (m *matchEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchEvent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["parent_id"] = m.ParentID
	m.fieldMap["event_name"] = m.EventName
	m.fieldMap["total_round"] = m.TotalRound
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["start_at"] = m.StartAt
	m.fieldMap["end_at"] = m.EndAt
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m matchEvent) clone(db *gorm.DB) matchEvent {
	m.matchEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchEvent) replaceDB(db *gorm.DB) matchEvent {
	m.matchEventDo.ReplaceDB(db)
	return m
}

type matchEventDo struct{ gen.DO }

type IMatchEventDo interface {
	gen.SubQuery
	Debug() IMatchEventDo
	WithContext(ctx context.Context) IMatchEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchEventDo
	WriteDB() IMatchEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchEventDo
	Not(conds ...gen.Condition) IMatchEventDo
	Or(conds ...gen.Condition) IMatchEventDo
	Select(conds ...field.Expr) IMatchEventDo
	Where(conds ...gen.Condition) IMatchEventDo
	Order(conds ...field.Expr) IMatchEventDo
	Distinct(cols ...field.Expr) IMatchEventDo
	Omit(cols ...field.Expr) IMatchEventDo
	Join(table schema.Tabler, on ...field.Expr) IMatchEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchEventDo
	Group(cols ...field.Expr) IMatchEventDo
	Having(conds ...gen.Condition) IMatchEventDo
	Limit(limit int) IMatchEventDo
	Offset(offset int) IMatchEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchEventDo
	Unscoped() IMatchEventDo
	Create(values ...*model.MatchEvent) error
	CreateInBatches(values []*model.MatchEvent, batchSize int) error
	Save(values ...*model.MatchEvent) error
	First() (*model.MatchEvent, error)
	Take() (*model.MatchEvent, error)
	Last() (*model.MatchEvent, error)
	Find() ([]*model.MatchEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MatchEvent, err error)
	FindInBatches(result *[]*model.MatchEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MatchEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchEventDo
	Assign(attrs ...field.AssignExpr) IMatchEventDo
	Joins(fields ...field.RelationField) IMatchEventDo
	Preload(fields ...field.RelationField) IMatchEventDo
	FirstOrInit() (*model.MatchEvent, error)
	FirstOrCreate() (*model.MatchEvent, error)
	FindByPage(offset int, limit int) (result []*model.MatchEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchEventDo) Debug() IMatchEventDo {
	return m.withDO(m.DO.Debug())
}

func (m matchEventDo) WithContext(ctx context.Context) IMatchEventDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchEventDo) ReadDB() IMatchEventDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchEventDo) WriteDB() IMatchEventDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchEventDo) Session(config *gorm.Session) IMatchEventDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchEventDo) Clauses(conds ...clause.Expression) IMatchEventDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchEventDo) Returning(value interface{}, columns ...string) IMatchEventDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchEventDo) Not(conds ...gen.Condition) IMatchEventDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchEventDo) Or(conds ...gen.Condition) IMatchEventDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchEventDo) Select(conds ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchEventDo) Where(conds ...gen.Condition) IMatchEventDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchEventDo) Order(conds ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchEventDo) Distinct(cols ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchEventDo) Omit(cols ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchEventDo) Join(table schema.Tabler, on ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchEventDo) Group(cols ...field.Expr) IMatchEventDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchEventDo) Having(conds ...gen.Condition) IMatchEventDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchEventDo) Limit(limit int) IMatchEventDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchEventDo) Offset(offset int) IMatchEventDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchEventDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchEventDo) Unscoped() IMatchEventDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchEventDo) Create(values ...*model.MatchEvent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchEventDo) CreateInBatches(values []*model.MatchEvent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchEventDo) Save(values ...*model.MatchEvent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchEventDo) First() (*model.MatchEvent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchEvent), nil
	}
}

func (m matchEventDo) Take() (*model.MatchEvent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchEvent), nil
	}
}

func (m matchEventDo) Last() (*model.MatchEvent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchEvent), nil
	}
}

func (m matchEventDo) Find() ([]*model.MatchEvent, error) {
	result, err := m.DO.Find()
	return result.([]*model.MatchEvent), err
}

func (m matchEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MatchEvent, err error) {
	buf := make([]*model.MatchEvent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchEventDo) FindInBatches(result *[]*model.MatchEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchEventDo) Attrs(attrs ...field.AssignExpr) IMatchEventDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchEventDo) Assign(attrs ...field.AssignExpr) IMatchEventDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchEventDo) Joins(fields ...field.RelationField) IMatchEventDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchEventDo) Preload(fields ...field.RelationField) IMatchEventDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchEventDo) FirstOrInit() (*model.MatchEvent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchEvent), nil
	}
}

func (m matchEventDo) FirstOrCreate() (*model.MatchEvent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MatchEvent), nil
	}
}

func (m matchEventDo) FindByPage(offset int, limit int) (result []*model.MatchEvent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchEventDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchEventDo) Delete(models ...*model.MatchEvent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchEventDo) withDO(do gen.Dao) *matchEventDo {
	m.DO = *do.(*gen.DO)
	return m
}
