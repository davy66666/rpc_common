// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGuessRecordCopy1(db *gorm.DB, opts ...gen.DOOption) guessRecordCopy1 {
	_guessRecordCopy1 := guessRecordCopy1{}

	_guessRecordCopy1.guessRecordCopy1Do.UseDB(db, opts...)
	_guessRecordCopy1.guessRecordCopy1Do.UseModel(&model.GuessRecordCopy1{})

	tableName := _guessRecordCopy1.guessRecordCopy1Do.TableName()
	_guessRecordCopy1.ALL = field.NewAsterisk(tableName)
	_guessRecordCopy1.ID = field.NewInt64(tableName, "id")
	_guessRecordCopy1.UserID = field.NewInt64(tableName, "user_id")
	_guessRecordCopy1.CaptainID = field.NewInt64(tableName, "captain_id")
	_guessRecordCopy1.CaptainName = field.NewString(tableName, "captain_name")
	_guessRecordCopy1.MatchEventID = field.NewInt64(tableName, "match_event_id")
	_guessRecordCopy1.MatchCoefficientID = field.NewInt64(tableName, "match_coefficient_id")
	_guessRecordCopy1.MatchID = field.NewInt64(tableName, "match_id")
	_guessRecordCopy1.MatchTeamsID = field.NewInt64(tableName, "match_teams_id")
	_guessRecordCopy1.Username = field.NewString(tableName, "username")
	_guessRecordCopy1.Coefficient = field.NewFloat64(tableName, "coefficient")
	_guessRecordCopy1.Status = field.NewInt64(tableName, "status")
	_guessRecordCopy1.GuessStatus = field.NewInt64(tableName, "guess_status")
	_guessRecordCopy1.GuessAt = field.NewField(tableName, "guess_at")
	_guessRecordCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_guessRecordCopy1.UpdatedAt = field.NewField(tableName, "updated_at")

	_guessRecordCopy1.fillFieldMap()

	return _guessRecordCopy1
}

// guessRecordCopy1 竞猜记录
type guessRecordCopy1 struct {
	guessRecordCopy1Do guessRecordCopy1Do

	ALL                field.Asterisk
	ID                 field.Int64
	UserID             field.Int64   // 用户ID
	CaptainID          field.Int64   // 队长id
	CaptainName        field.String  // 队长名字
	MatchEventID       field.Int64   // 赛程ID
	MatchCoefficientID field.Int64   // 系数表id
	MatchID            field.Int64   // 赛事id
	MatchTeamsID       field.Int64   // 队伍ID
	Username           field.String  // 用户名
	Coefficient        field.Float64 // 系数
	Status             field.Int64   // 状态 0待结算 1赢 2输
	GuessStatus        field.Int64   // 竞猜状态 1:赢，2:和，3:输
	GuessAt            field.Field   // 竞猜时间
	CreatedAt          field.Field   // 创建时间
	UpdatedAt          field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (g guessRecordCopy1) Table(newTableName string) *guessRecordCopy1 {
	g.guessRecordCopy1Do.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g guessRecordCopy1) As(alias string) *guessRecordCopy1 {
	g.guessRecordCopy1Do.DO = *(g.guessRecordCopy1Do.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *guessRecordCopy1) updateTableName(table string) *guessRecordCopy1 {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.UserID = field.NewInt64(table, "user_id")
	g.CaptainID = field.NewInt64(table, "captain_id")
	g.CaptainName = field.NewString(table, "captain_name")
	g.MatchEventID = field.NewInt64(table, "match_event_id")
	g.MatchCoefficientID = field.NewInt64(table, "match_coefficient_id")
	g.MatchID = field.NewInt64(table, "match_id")
	g.MatchTeamsID = field.NewInt64(table, "match_teams_id")
	g.Username = field.NewString(table, "username")
	g.Coefficient = field.NewFloat64(table, "coefficient")
	g.Status = field.NewInt64(table, "status")
	g.GuessStatus = field.NewInt64(table, "guess_status")
	g.GuessAt = field.NewField(table, "guess_at")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *guessRecordCopy1) WithContext(ctx context.Context) IGuessRecordCopy1Do {
	return g.guessRecordCopy1Do.WithContext(ctx)
}

func (g guessRecordCopy1) TableName() string { return g.guessRecordCopy1Do.TableName() }

func (g guessRecordCopy1) Alias() string { return g.guessRecordCopy1Do.Alias() }

func (g guessRecordCopy1) Columns(cols ...field.Expr) gen.Columns {
	return g.guessRecordCopy1Do.Columns(cols...)
}

func (g *guessRecordCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *guessRecordCopy1) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["captain_id"] = g.CaptainID
	g.fieldMap["captain_name"] = g.CaptainName
	g.fieldMap["match_event_id"] = g.MatchEventID
	g.fieldMap["match_coefficient_id"] = g.MatchCoefficientID
	g.fieldMap["match_id"] = g.MatchID
	g.fieldMap["match_teams_id"] = g.MatchTeamsID
	g.fieldMap["username"] = g.Username
	g.fieldMap["coefficient"] = g.Coefficient
	g.fieldMap["status"] = g.Status
	g.fieldMap["guess_status"] = g.GuessStatus
	g.fieldMap["guess_at"] = g.GuessAt
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g guessRecordCopy1) clone(db *gorm.DB) guessRecordCopy1 {
	g.guessRecordCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g guessRecordCopy1) replaceDB(db *gorm.DB) guessRecordCopy1 {
	g.guessRecordCopy1Do.ReplaceDB(db)
	return g
}

type guessRecordCopy1Do struct{ gen.DO }

type IGuessRecordCopy1Do interface {
	gen.SubQuery
	Debug() IGuessRecordCopy1Do
	WithContext(ctx context.Context) IGuessRecordCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGuessRecordCopy1Do
	WriteDB() IGuessRecordCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGuessRecordCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGuessRecordCopy1Do
	Not(conds ...gen.Condition) IGuessRecordCopy1Do
	Or(conds ...gen.Condition) IGuessRecordCopy1Do
	Select(conds ...field.Expr) IGuessRecordCopy1Do
	Where(conds ...gen.Condition) IGuessRecordCopy1Do
	Order(conds ...field.Expr) IGuessRecordCopy1Do
	Distinct(cols ...field.Expr) IGuessRecordCopy1Do
	Omit(cols ...field.Expr) IGuessRecordCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do
	Group(cols ...field.Expr) IGuessRecordCopy1Do
	Having(conds ...gen.Condition) IGuessRecordCopy1Do
	Limit(limit int) IGuessRecordCopy1Do
	Offset(offset int) IGuessRecordCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGuessRecordCopy1Do
	Unscoped() IGuessRecordCopy1Do
	Create(values ...*model.GuessRecordCopy1) error
	CreateInBatches(values []*model.GuessRecordCopy1, batchSize int) error
	Save(values ...*model.GuessRecordCopy1) error
	First() (*model.GuessRecordCopy1, error)
	Take() (*model.GuessRecordCopy1, error)
	Last() (*model.GuessRecordCopy1, error)
	Find() ([]*model.GuessRecordCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuessRecordCopy1, err error)
	FindInBatches(result *[]*model.GuessRecordCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GuessRecordCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGuessRecordCopy1Do
	Assign(attrs ...field.AssignExpr) IGuessRecordCopy1Do
	Joins(fields ...field.RelationField) IGuessRecordCopy1Do
	Preload(fields ...field.RelationField) IGuessRecordCopy1Do
	FirstOrInit() (*model.GuessRecordCopy1, error)
	FirstOrCreate() (*model.GuessRecordCopy1, error)
	FindByPage(offset int, limit int) (result []*model.GuessRecordCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGuessRecordCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g guessRecordCopy1Do) Debug() IGuessRecordCopy1Do {
	return g.withDO(g.DO.Debug())
}

func (g guessRecordCopy1Do) WithContext(ctx context.Context) IGuessRecordCopy1Do {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g guessRecordCopy1Do) ReadDB() IGuessRecordCopy1Do {
	return g.Clauses(dbresolver.Read)
}

func (g guessRecordCopy1Do) WriteDB() IGuessRecordCopy1Do {
	return g.Clauses(dbresolver.Write)
}

func (g guessRecordCopy1Do) Session(config *gorm.Session) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Session(config))
}

func (g guessRecordCopy1Do) Clauses(conds ...clause.Expression) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g guessRecordCopy1Do) Returning(value interface{}, columns ...string) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g guessRecordCopy1Do) Not(conds ...gen.Condition) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Not(conds...))
}

func (g guessRecordCopy1Do) Or(conds ...gen.Condition) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Or(conds...))
}

func (g guessRecordCopy1Do) Select(conds ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Select(conds...))
}

func (g guessRecordCopy1Do) Where(conds ...gen.Condition) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Where(conds...))
}

func (g guessRecordCopy1Do) Order(conds ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Order(conds...))
}

func (g guessRecordCopy1Do) Distinct(cols ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g guessRecordCopy1Do) Omit(cols ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Omit(cols...))
}

func (g guessRecordCopy1Do) Join(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Join(table, on...))
}

func (g guessRecordCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g guessRecordCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g guessRecordCopy1Do) Group(cols ...field.Expr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Group(cols...))
}

func (g guessRecordCopy1Do) Having(conds ...gen.Condition) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Having(conds...))
}

func (g guessRecordCopy1Do) Limit(limit int) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Limit(limit))
}

func (g guessRecordCopy1Do) Offset(offset int) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Offset(offset))
}

func (g guessRecordCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g guessRecordCopy1Do) Unscoped() IGuessRecordCopy1Do {
	return g.withDO(g.DO.Unscoped())
}

func (g guessRecordCopy1Do) Create(values ...*model.GuessRecordCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g guessRecordCopy1Do) CreateInBatches(values []*model.GuessRecordCopy1, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g guessRecordCopy1Do) Save(values ...*model.GuessRecordCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g guessRecordCopy1Do) First() (*model.GuessRecordCopy1, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecordCopy1), nil
	}
}

func (g guessRecordCopy1Do) Take() (*model.GuessRecordCopy1, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecordCopy1), nil
	}
}

func (g guessRecordCopy1Do) Last() (*model.GuessRecordCopy1, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecordCopy1), nil
	}
}

func (g guessRecordCopy1Do) Find() ([]*model.GuessRecordCopy1, error) {
	result, err := g.DO.Find()
	return result.([]*model.GuessRecordCopy1), err
}

func (g guessRecordCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuessRecordCopy1, err error) {
	buf := make([]*model.GuessRecordCopy1, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g guessRecordCopy1Do) FindInBatches(result *[]*model.GuessRecordCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g guessRecordCopy1Do) Attrs(attrs ...field.AssignExpr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g guessRecordCopy1Do) Assign(attrs ...field.AssignExpr) IGuessRecordCopy1Do {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g guessRecordCopy1Do) Joins(fields ...field.RelationField) IGuessRecordCopy1Do {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g guessRecordCopy1Do) Preload(fields ...field.RelationField) IGuessRecordCopy1Do {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g guessRecordCopy1Do) FirstOrInit() (*model.GuessRecordCopy1, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecordCopy1), nil
	}
}

func (g guessRecordCopy1Do) FirstOrCreate() (*model.GuessRecordCopy1, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuessRecordCopy1), nil
	}
}

func (g guessRecordCopy1Do) FindByPage(offset int, limit int) (result []*model.GuessRecordCopy1, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g guessRecordCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g guessRecordCopy1Do) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g guessRecordCopy1Do) Delete(models ...*model.GuessRecordCopy1) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *guessRecordCopy1Do) withDO(do gen.Dao) *guessRecordCopy1Do {
	g.DO = *do.(*gen.DO)
	return g
}
