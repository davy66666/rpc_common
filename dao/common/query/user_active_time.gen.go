// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserActiveTime(db *gorm.DB, opts ...gen.DOOption) userActiveTime {
	_userActiveTime := userActiveTime{}

	_userActiveTime.userActiveTimeDo.UseDB(db, opts...)
	_userActiveTime.userActiveTimeDo.UseModel(&model.UserActiveTime{})

	tableName := _userActiveTime.userActiveTimeDo.TableName()
	_userActiveTime.ALL = field.NewAsterisk(tableName)
	_userActiveTime.ID = field.NewInt64(tableName, "id")
	_userActiveTime.DateAt = field.NewTime(tableName, "date_at")
	_userActiveTime.UserID = field.NewInt64(tableName, "user_id")
	_userActiveTime.FirstActiveIP = field.NewString(tableName, "first_active_ip")
	_userActiveTime.FirstActiveTime = field.NewField(tableName, "first_active_time")
	_userActiveTime.LastActiveTime = field.NewField(tableName, "last_active_time")
	_userActiveTime.CreatedAt = field.NewField(tableName, "created_at")
	_userActiveTime.UpdatedAt = field.NewField(tableName, "updated_at")
	_userActiveTime.IPArea = field.NewString(tableName, "ip_area")
	_userActiveTime.OnlineDuration = field.NewInt64(tableName, "online_duration")
	_userActiveTime.PlatDuration = field.NewString(tableName, "plat_duration")
	_userActiveTime.BetDuration = field.NewInt64(tableName, "bet_duration")
	_userActiveTime.NextLoginTime = field.NewField(tableName, "next_login_time")

	_userActiveTime.fillFieldMap()

	return _userActiveTime
}

// userActiveTime 用户活跃时间记录表
type userActiveTime struct {
	userActiveTimeDo userActiveTimeDo

	ALL             field.Asterisk
	ID              field.Int64  // 自增id
	DateAt          field.Time   // 时间date
	UserID          field.Int64  // 用户id
	FirstActiveIP   field.String // 第一次活跃的ip地址
	FirstActiveTime field.Field  // 第一次活跃时间
	LastActiveTime  field.Field  // 最后一次活跃时间
	CreatedAt       field.Field  // 记录创建时间
	UpdatedAt       field.Field  // 记录更新时间
	IPArea          field.String // ip区域
	OnlineDuration  field.Int64  // 用户当天在线时长，重新登录间隔超过五分钟重新计算
	PlatDuration    field.String // 应用端累计在线时长
	BetDuration     field.Int64  // 注单时长
	NextLoginTime   field.Field  // 当天过后的下一次登录时间

	fieldMap map[string]field.Expr
}

func (u userActiveTime) Table(newTableName string) *userActiveTime {
	u.userActiveTimeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userActiveTime) As(alias string) *userActiveTime {
	u.userActiveTimeDo.DO = *(u.userActiveTimeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userActiveTime) updateTableName(table string) *userActiveTime {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewTime(table, "date_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.FirstActiveIP = field.NewString(table, "first_active_ip")
	u.FirstActiveTime = field.NewField(table, "first_active_time")
	u.LastActiveTime = field.NewField(table, "last_active_time")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.IPArea = field.NewString(table, "ip_area")
	u.OnlineDuration = field.NewInt64(table, "online_duration")
	u.PlatDuration = field.NewString(table, "plat_duration")
	u.BetDuration = field.NewInt64(table, "bet_duration")
	u.NextLoginTime = field.NewField(table, "next_login_time")

	u.fillFieldMap()

	return u
}

func (u *userActiveTime) WithContext(ctx context.Context) IUserActiveTimeDo {
	return u.userActiveTimeDo.WithContext(ctx)
}

func (u userActiveTime) TableName() string { return u.userActiveTimeDo.TableName() }

func (u userActiveTime) Alias() string { return u.userActiveTimeDo.Alias() }

func (u userActiveTime) Columns(cols ...field.Expr) gen.Columns {
	return u.userActiveTimeDo.Columns(cols...)
}

func (u *userActiveTime) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userActiveTime) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["first_active_ip"] = u.FirstActiveIP
	u.fieldMap["first_active_time"] = u.FirstActiveTime
	u.fieldMap["last_active_time"] = u.LastActiveTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["online_duration"] = u.OnlineDuration
	u.fieldMap["plat_duration"] = u.PlatDuration
	u.fieldMap["bet_duration"] = u.BetDuration
	u.fieldMap["next_login_time"] = u.NextLoginTime
}

func (u userActiveTime) clone(db *gorm.DB) userActiveTime {
	u.userActiveTimeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userActiveTime) replaceDB(db *gorm.DB) userActiveTime {
	u.userActiveTimeDo.ReplaceDB(db)
	return u
}

type userActiveTimeDo struct{ gen.DO }

type IUserActiveTimeDo interface {
	gen.SubQuery
	Debug() IUserActiveTimeDo
	WithContext(ctx context.Context) IUserActiveTimeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserActiveTimeDo
	WriteDB() IUserActiveTimeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserActiveTimeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserActiveTimeDo
	Not(conds ...gen.Condition) IUserActiveTimeDo
	Or(conds ...gen.Condition) IUserActiveTimeDo
	Select(conds ...field.Expr) IUserActiveTimeDo
	Where(conds ...gen.Condition) IUserActiveTimeDo
	Order(conds ...field.Expr) IUserActiveTimeDo
	Distinct(cols ...field.Expr) IUserActiveTimeDo
	Omit(cols ...field.Expr) IUserActiveTimeDo
	Join(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo
	Group(cols ...field.Expr) IUserActiveTimeDo
	Having(conds ...gen.Condition) IUserActiveTimeDo
	Limit(limit int) IUserActiveTimeDo
	Offset(offset int) IUserActiveTimeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActiveTimeDo
	Unscoped() IUserActiveTimeDo
	Create(values ...*model.UserActiveTime) error
	CreateInBatches(values []*model.UserActiveTime, batchSize int) error
	Save(values ...*model.UserActiveTime) error
	First() (*model.UserActiveTime, error)
	Take() (*model.UserActiveTime, error)
	Last() (*model.UserActiveTime, error)
	Find() ([]*model.UserActiveTime, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActiveTime, err error)
	FindInBatches(result *[]*model.UserActiveTime, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserActiveTime) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserActiveTimeDo
	Assign(attrs ...field.AssignExpr) IUserActiveTimeDo
	Joins(fields ...field.RelationField) IUserActiveTimeDo
	Preload(fields ...field.RelationField) IUserActiveTimeDo
	FirstOrInit() (*model.UserActiveTime, error)
	FirstOrCreate() (*model.UserActiveTime, error)
	FindByPage(offset int, limit int) (result []*model.UserActiveTime, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserActiveTimeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userActiveTimeDo) Debug() IUserActiveTimeDo {
	return u.withDO(u.DO.Debug())
}

func (u userActiveTimeDo) WithContext(ctx context.Context) IUserActiveTimeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userActiveTimeDo) ReadDB() IUserActiveTimeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userActiveTimeDo) WriteDB() IUserActiveTimeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userActiveTimeDo) Session(config *gorm.Session) IUserActiveTimeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userActiveTimeDo) Clauses(conds ...clause.Expression) IUserActiveTimeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userActiveTimeDo) Returning(value interface{}, columns ...string) IUserActiveTimeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userActiveTimeDo) Not(conds ...gen.Condition) IUserActiveTimeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userActiveTimeDo) Or(conds ...gen.Condition) IUserActiveTimeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userActiveTimeDo) Select(conds ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userActiveTimeDo) Where(conds ...gen.Condition) IUserActiveTimeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userActiveTimeDo) Order(conds ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userActiveTimeDo) Distinct(cols ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userActiveTimeDo) Omit(cols ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userActiveTimeDo) Join(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userActiveTimeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userActiveTimeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userActiveTimeDo) Group(cols ...field.Expr) IUserActiveTimeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userActiveTimeDo) Having(conds ...gen.Condition) IUserActiveTimeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userActiveTimeDo) Limit(limit int) IUserActiveTimeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userActiveTimeDo) Offset(offset int) IUserActiveTimeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userActiveTimeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActiveTimeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userActiveTimeDo) Unscoped() IUserActiveTimeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userActiveTimeDo) Create(values ...*model.UserActiveTime) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userActiveTimeDo) CreateInBatches(values []*model.UserActiveTime, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userActiveTimeDo) Save(values ...*model.UserActiveTime) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userActiveTimeDo) First() (*model.UserActiveTime, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime), nil
	}
}

func (u userActiveTimeDo) Take() (*model.UserActiveTime, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime), nil
	}
}

func (u userActiveTimeDo) Last() (*model.UserActiveTime, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime), nil
	}
}

func (u userActiveTimeDo) Find() ([]*model.UserActiveTime, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserActiveTime), err
}

func (u userActiveTimeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActiveTime, err error) {
	buf := make([]*model.UserActiveTime, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userActiveTimeDo) FindInBatches(result *[]*model.UserActiveTime, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userActiveTimeDo) Attrs(attrs ...field.AssignExpr) IUserActiveTimeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userActiveTimeDo) Assign(attrs ...field.AssignExpr) IUserActiveTimeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userActiveTimeDo) Joins(fields ...field.RelationField) IUserActiveTimeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userActiveTimeDo) Preload(fields ...field.RelationField) IUserActiveTimeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userActiveTimeDo) FirstOrInit() (*model.UserActiveTime, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime), nil
	}
}

func (u userActiveTimeDo) FirstOrCreate() (*model.UserActiveTime, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActiveTime), nil
	}
}

func (u userActiveTimeDo) FindByPage(offset int, limit int) (result []*model.UserActiveTime, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userActiveTimeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userActiveTimeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userActiveTimeDo) Delete(models ...*model.UserActiveTime) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userActiveTimeDo) withDO(do gen.Dao) *userActiveTimeDo {
	u.DO = *do.(*gen.DO)
	return u
}
