// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newWithdrawalSort(db *gorm.DB, opts ...gen.DOOption) withdrawalSort {
	_withdrawalSort := withdrawalSort{}

	_withdrawalSort.withdrawalSortDo.UseDB(db, opts...)
	_withdrawalSort.withdrawalSortDo.UseModel(&model.WithdrawalSort{})

	tableName := _withdrawalSort.withdrawalSortDo.TableName()
	_withdrawalSort.ALL = field.NewAsterisk(tableName)
	_withdrawalSort.ID = field.NewInt64(tableName, "id")
	_withdrawalSort.WithdrawalType = field.NewString(tableName, "withdrawal_type")
	_withdrawalSort.Sort = field.NewInt64(tableName, "sort")
	_withdrawalSort.CreatedAt = field.NewField(tableName, "created_at")
	_withdrawalSort.UpdatedAt = field.NewField(tableName, "updated_at")

	_withdrawalSort.fillFieldMap()

	return _withdrawalSort
}

// withdrawalSort 取款通道排序表
type withdrawalSort struct {
	withdrawalSortDo withdrawalSortDo

	ALL            field.Asterisk
	ID             field.Int64  // id
	WithdrawalType field.String // 取款通道类型：[virtual_money:虚拟币取款, quick:网银提款, normal:人民币取款]
	Sort           field.Int64  // 排序,从小到大排序
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (w withdrawalSort) Table(newTableName string) *withdrawalSort {
	w.withdrawalSortDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w withdrawalSort) As(alias string) *withdrawalSort {
	w.withdrawalSortDo.DO = *(w.withdrawalSortDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *withdrawalSort) updateTableName(table string) *withdrawalSort {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.WithdrawalType = field.NewString(table, "withdrawal_type")
	w.Sort = field.NewInt64(table, "sort")
	w.CreatedAt = field.NewField(table, "created_at")
	w.UpdatedAt = field.NewField(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *withdrawalSort) WithContext(ctx context.Context) IWithdrawalSortDo {
	return w.withdrawalSortDo.WithContext(ctx)
}

func (w withdrawalSort) TableName() string { return w.withdrawalSortDo.TableName() }

func (w withdrawalSort) Alias() string { return w.withdrawalSortDo.Alias() }

func (w withdrawalSort) Columns(cols ...field.Expr) gen.Columns {
	return w.withdrawalSortDo.Columns(cols...)
}

func (w *withdrawalSort) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *withdrawalSort) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["withdrawal_type"] = w.WithdrawalType
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w withdrawalSort) clone(db *gorm.DB) withdrawalSort {
	w.withdrawalSortDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w withdrawalSort) replaceDB(db *gorm.DB) withdrawalSort {
	w.withdrawalSortDo.ReplaceDB(db)
	return w
}

type withdrawalSortDo struct{ gen.DO }

type IWithdrawalSortDo interface {
	gen.SubQuery
	Debug() IWithdrawalSortDo
	WithContext(ctx context.Context) IWithdrawalSortDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWithdrawalSortDo
	WriteDB() IWithdrawalSortDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWithdrawalSortDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWithdrawalSortDo
	Not(conds ...gen.Condition) IWithdrawalSortDo
	Or(conds ...gen.Condition) IWithdrawalSortDo
	Select(conds ...field.Expr) IWithdrawalSortDo
	Where(conds ...gen.Condition) IWithdrawalSortDo
	Order(conds ...field.Expr) IWithdrawalSortDo
	Distinct(cols ...field.Expr) IWithdrawalSortDo
	Omit(cols ...field.Expr) IWithdrawalSortDo
	Join(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo
	Group(cols ...field.Expr) IWithdrawalSortDo
	Having(conds ...gen.Condition) IWithdrawalSortDo
	Limit(limit int) IWithdrawalSortDo
	Offset(offset int) IWithdrawalSortDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalSortDo
	Unscoped() IWithdrawalSortDo
	Create(values ...*model.WithdrawalSort) error
	CreateInBatches(values []*model.WithdrawalSort, batchSize int) error
	Save(values ...*model.WithdrawalSort) error
	First() (*model.WithdrawalSort, error)
	Take() (*model.WithdrawalSort, error)
	Last() (*model.WithdrawalSort, error)
	Find() ([]*model.WithdrawalSort, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalSort, err error)
	FindInBatches(result *[]*model.WithdrawalSort, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WithdrawalSort) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWithdrawalSortDo
	Assign(attrs ...field.AssignExpr) IWithdrawalSortDo
	Joins(fields ...field.RelationField) IWithdrawalSortDo
	Preload(fields ...field.RelationField) IWithdrawalSortDo
	FirstOrInit() (*model.WithdrawalSort, error)
	FirstOrCreate() (*model.WithdrawalSort, error)
	FindByPage(offset int, limit int) (result []*model.WithdrawalSort, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWithdrawalSortDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w withdrawalSortDo) Debug() IWithdrawalSortDo {
	return w.withDO(w.DO.Debug())
}

func (w withdrawalSortDo) WithContext(ctx context.Context) IWithdrawalSortDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w withdrawalSortDo) ReadDB() IWithdrawalSortDo {
	return w.Clauses(dbresolver.Read)
}

func (w withdrawalSortDo) WriteDB() IWithdrawalSortDo {
	return w.Clauses(dbresolver.Write)
}

func (w withdrawalSortDo) Session(config *gorm.Session) IWithdrawalSortDo {
	return w.withDO(w.DO.Session(config))
}

func (w withdrawalSortDo) Clauses(conds ...clause.Expression) IWithdrawalSortDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w withdrawalSortDo) Returning(value interface{}, columns ...string) IWithdrawalSortDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w withdrawalSortDo) Not(conds ...gen.Condition) IWithdrawalSortDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w withdrawalSortDo) Or(conds ...gen.Condition) IWithdrawalSortDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w withdrawalSortDo) Select(conds ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w withdrawalSortDo) Where(conds ...gen.Condition) IWithdrawalSortDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w withdrawalSortDo) Order(conds ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w withdrawalSortDo) Distinct(cols ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w withdrawalSortDo) Omit(cols ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w withdrawalSortDo) Join(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w withdrawalSortDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w withdrawalSortDo) RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w withdrawalSortDo) Group(cols ...field.Expr) IWithdrawalSortDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w withdrawalSortDo) Having(conds ...gen.Condition) IWithdrawalSortDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w withdrawalSortDo) Limit(limit int) IWithdrawalSortDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w withdrawalSortDo) Offset(offset int) IWithdrawalSortDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w withdrawalSortDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalSortDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w withdrawalSortDo) Unscoped() IWithdrawalSortDo {
	return w.withDO(w.DO.Unscoped())
}

func (w withdrawalSortDo) Create(values ...*model.WithdrawalSort) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w withdrawalSortDo) CreateInBatches(values []*model.WithdrawalSort, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w withdrawalSortDo) Save(values ...*model.WithdrawalSort) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w withdrawalSortDo) First() (*model.WithdrawalSort, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalSort), nil
	}
}

func (w withdrawalSortDo) Take() (*model.WithdrawalSort, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalSort), nil
	}
}

func (w withdrawalSortDo) Last() (*model.WithdrawalSort, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalSort), nil
	}
}

func (w withdrawalSortDo) Find() ([]*model.WithdrawalSort, error) {
	result, err := w.DO.Find()
	return result.([]*model.WithdrawalSort), err
}

func (w withdrawalSortDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalSort, err error) {
	buf := make([]*model.WithdrawalSort, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w withdrawalSortDo) FindInBatches(result *[]*model.WithdrawalSort, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w withdrawalSortDo) Attrs(attrs ...field.AssignExpr) IWithdrawalSortDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w withdrawalSortDo) Assign(attrs ...field.AssignExpr) IWithdrawalSortDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w withdrawalSortDo) Joins(fields ...field.RelationField) IWithdrawalSortDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w withdrawalSortDo) Preload(fields ...field.RelationField) IWithdrawalSortDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w withdrawalSortDo) FirstOrInit() (*model.WithdrawalSort, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalSort), nil
	}
}

func (w withdrawalSortDo) FirstOrCreate() (*model.WithdrawalSort, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalSort), nil
	}
}

func (w withdrawalSortDo) FindByPage(offset int, limit int) (result []*model.WithdrawalSort, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w withdrawalSortDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w withdrawalSortDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w withdrawalSortDo) Delete(models ...*model.WithdrawalSort) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *withdrawalSortDo) withDO(do gen.Dao) *withdrawalSortDo {
	w.DO = *do.(*gen.DO)
	return w
}
