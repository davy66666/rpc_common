// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentGiveChildGiftDetail(db *gorm.DB, opts ...gen.DOOption) agentGiveChildGiftDetail {
	_agentGiveChildGiftDetail := agentGiveChildGiftDetail{}

	_agentGiveChildGiftDetail.agentGiveChildGiftDetailDo.UseDB(db, opts...)
	_agentGiveChildGiftDetail.agentGiveChildGiftDetailDo.UseModel(&model.AgentGiveChildGiftDetail{})

	tableName := _agentGiveChildGiftDetail.agentGiveChildGiftDetailDo.TableName()
	_agentGiveChildGiftDetail.ALL = field.NewAsterisk(tableName)
	_agentGiveChildGiftDetail.ID = field.NewInt64(tableName, "id")
	_agentGiveChildGiftDetail.AgentUserID = field.NewInt64(tableName, "agent_user_id")
	_agentGiveChildGiftDetail.AgentName = field.NewString(tableName, "agent_name")
	_agentGiveChildGiftDetail.UserID = field.NewInt64(tableName, "user_id")
	_agentGiveChildGiftDetail.Username = field.NewString(tableName, "username")
	_agentGiveChildGiftDetail.Amount = field.NewFloat64(tableName, "amount")
	_agentGiveChildGiftDetail.BetAmountRate = field.NewInt64(tableName, "bet_amount_rate")
	_agentGiveChildGiftDetail.Remark = field.NewString(tableName, "remark")
	_agentGiveChildGiftDetail.CreatedAt = field.NewField(tableName, "created_at")
	_agentGiveChildGiftDetail.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentGiveChildGiftDetail.fillFieldMap()

	return _agentGiveChildGiftDetail
}

type agentGiveChildGiftDetail struct {
	agentGiveChildGiftDetailDo agentGiveChildGiftDetailDo

	ALL           field.Asterisk
	ID            field.Int64
	AgentUserID   field.Int64
	AgentName     field.String
	UserID        field.Int64
	Username      field.String
	Amount        field.Float64 // 金额
	BetAmountRate field.Int64   // 流水倍数
	Remark        field.String  // 备注
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a agentGiveChildGiftDetail) Table(newTableName string) *agentGiveChildGiftDetail {
	a.agentGiveChildGiftDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentGiveChildGiftDetail) As(alias string) *agentGiveChildGiftDetail {
	a.agentGiveChildGiftDetailDo.DO = *(a.agentGiveChildGiftDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentGiveChildGiftDetail) updateTableName(table string) *agentGiveChildGiftDetail {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentUserID = field.NewInt64(table, "agent_user_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.Amount = field.NewFloat64(table, "amount")
	a.BetAmountRate = field.NewInt64(table, "bet_amount_rate")
	a.Remark = field.NewString(table, "remark")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentGiveChildGiftDetail) WithContext(ctx context.Context) IAgentGiveChildGiftDetailDo {
	return a.agentGiveChildGiftDetailDo.WithContext(ctx)
}

func (a agentGiveChildGiftDetail) TableName() string { return a.agentGiveChildGiftDetailDo.TableName() }

func (a agentGiveChildGiftDetail) Alias() string { return a.agentGiveChildGiftDetailDo.Alias() }

func (a agentGiveChildGiftDetail) Columns(cols ...field.Expr) gen.Columns {
	return a.agentGiveChildGiftDetailDo.Columns(cols...)
}

func (a *agentGiveChildGiftDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentGiveChildGiftDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_user_id"] = a.AgentUserID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["bet_amount_rate"] = a.BetAmountRate
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentGiveChildGiftDetail) clone(db *gorm.DB) agentGiveChildGiftDetail {
	a.agentGiveChildGiftDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentGiveChildGiftDetail) replaceDB(db *gorm.DB) agentGiveChildGiftDetail {
	a.agentGiveChildGiftDetailDo.ReplaceDB(db)
	return a
}

type agentGiveChildGiftDetailDo struct{ gen.DO }

type IAgentGiveChildGiftDetailDo interface {
	gen.SubQuery
	Debug() IAgentGiveChildGiftDetailDo
	WithContext(ctx context.Context) IAgentGiveChildGiftDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentGiveChildGiftDetailDo
	WriteDB() IAgentGiveChildGiftDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentGiveChildGiftDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentGiveChildGiftDetailDo
	Not(conds ...gen.Condition) IAgentGiveChildGiftDetailDo
	Or(conds ...gen.Condition) IAgentGiveChildGiftDetailDo
	Select(conds ...field.Expr) IAgentGiveChildGiftDetailDo
	Where(conds ...gen.Condition) IAgentGiveChildGiftDetailDo
	Order(conds ...field.Expr) IAgentGiveChildGiftDetailDo
	Distinct(cols ...field.Expr) IAgentGiveChildGiftDetailDo
	Omit(cols ...field.Expr) IAgentGiveChildGiftDetailDo
	Join(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo
	Group(cols ...field.Expr) IAgentGiveChildGiftDetailDo
	Having(conds ...gen.Condition) IAgentGiveChildGiftDetailDo
	Limit(limit int) IAgentGiveChildGiftDetailDo
	Offset(offset int) IAgentGiveChildGiftDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentGiveChildGiftDetailDo
	Unscoped() IAgentGiveChildGiftDetailDo
	Create(values ...*model.AgentGiveChildGiftDetail) error
	CreateInBatches(values []*model.AgentGiveChildGiftDetail, batchSize int) error
	Save(values ...*model.AgentGiveChildGiftDetail) error
	First() (*model.AgentGiveChildGiftDetail, error)
	Take() (*model.AgentGiveChildGiftDetail, error)
	Last() (*model.AgentGiveChildGiftDetail, error)
	Find() ([]*model.AgentGiveChildGiftDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentGiveChildGiftDetail, err error)
	FindInBatches(result *[]*model.AgentGiveChildGiftDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentGiveChildGiftDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentGiveChildGiftDetailDo
	Assign(attrs ...field.AssignExpr) IAgentGiveChildGiftDetailDo
	Joins(fields ...field.RelationField) IAgentGiveChildGiftDetailDo
	Preload(fields ...field.RelationField) IAgentGiveChildGiftDetailDo
	FirstOrInit() (*model.AgentGiveChildGiftDetail, error)
	FirstOrCreate() (*model.AgentGiveChildGiftDetail, error)
	FindByPage(offset int, limit int) (result []*model.AgentGiveChildGiftDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentGiveChildGiftDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentGiveChildGiftDetailDo) Debug() IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a agentGiveChildGiftDetailDo) WithContext(ctx context.Context) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentGiveChildGiftDetailDo) ReadDB() IAgentGiveChildGiftDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentGiveChildGiftDetailDo) WriteDB() IAgentGiveChildGiftDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentGiveChildGiftDetailDo) Session(config *gorm.Session) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentGiveChildGiftDetailDo) Clauses(conds ...clause.Expression) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentGiveChildGiftDetailDo) Returning(value interface{}, columns ...string) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentGiveChildGiftDetailDo) Not(conds ...gen.Condition) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentGiveChildGiftDetailDo) Or(conds ...gen.Condition) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentGiveChildGiftDetailDo) Select(conds ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentGiveChildGiftDetailDo) Where(conds ...gen.Condition) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentGiveChildGiftDetailDo) Order(conds ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentGiveChildGiftDetailDo) Distinct(cols ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentGiveChildGiftDetailDo) Omit(cols ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentGiveChildGiftDetailDo) Join(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentGiveChildGiftDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentGiveChildGiftDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentGiveChildGiftDetailDo) Group(cols ...field.Expr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentGiveChildGiftDetailDo) Having(conds ...gen.Condition) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentGiveChildGiftDetailDo) Limit(limit int) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentGiveChildGiftDetailDo) Offset(offset int) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentGiveChildGiftDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentGiveChildGiftDetailDo) Unscoped() IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentGiveChildGiftDetailDo) Create(values ...*model.AgentGiveChildGiftDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentGiveChildGiftDetailDo) CreateInBatches(values []*model.AgentGiveChildGiftDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentGiveChildGiftDetailDo) Save(values ...*model.AgentGiveChildGiftDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentGiveChildGiftDetailDo) First() (*model.AgentGiveChildGiftDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentGiveChildGiftDetail), nil
	}
}

func (a agentGiveChildGiftDetailDo) Take() (*model.AgentGiveChildGiftDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentGiveChildGiftDetail), nil
	}
}

func (a agentGiveChildGiftDetailDo) Last() (*model.AgentGiveChildGiftDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentGiveChildGiftDetail), nil
	}
}

func (a agentGiveChildGiftDetailDo) Find() ([]*model.AgentGiveChildGiftDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentGiveChildGiftDetail), err
}

func (a agentGiveChildGiftDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentGiveChildGiftDetail, err error) {
	buf := make([]*model.AgentGiveChildGiftDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentGiveChildGiftDetailDo) FindInBatches(result *[]*model.AgentGiveChildGiftDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentGiveChildGiftDetailDo) Attrs(attrs ...field.AssignExpr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentGiveChildGiftDetailDo) Assign(attrs ...field.AssignExpr) IAgentGiveChildGiftDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentGiveChildGiftDetailDo) Joins(fields ...field.RelationField) IAgentGiveChildGiftDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentGiveChildGiftDetailDo) Preload(fields ...field.RelationField) IAgentGiveChildGiftDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentGiveChildGiftDetailDo) FirstOrInit() (*model.AgentGiveChildGiftDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentGiveChildGiftDetail), nil
	}
}

func (a agentGiveChildGiftDetailDo) FirstOrCreate() (*model.AgentGiveChildGiftDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentGiveChildGiftDetail), nil
	}
}

func (a agentGiveChildGiftDetailDo) FindByPage(offset int, limit int) (result []*model.AgentGiveChildGiftDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentGiveChildGiftDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentGiveChildGiftDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentGiveChildGiftDetailDo) Delete(models ...*model.AgentGiveChildGiftDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentGiveChildGiftDetailDo) withDO(do gen.Dao) *agentGiveChildGiftDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
