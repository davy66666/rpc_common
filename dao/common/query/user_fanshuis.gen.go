// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserFanshui(db *gorm.DB, opts ...gen.DOOption) userFanshui {
	_userFanshui := userFanshui{}

	_userFanshui.userFanshuiDo.UseDB(db, opts...)
	_userFanshui.userFanshuiDo.UseModel(&model.UserFanshui{})

	tableName := _userFanshui.userFanshuiDo.TableName()
	_userFanshui.ALL = field.NewAsterisk(tableName)
	_userFanshui.ID = field.NewInt64(tableName, "id")
	_userFanshui.DateAt = field.NewString(tableName, "date_at")
	_userFanshui.UserID = field.NewInt64(tableName, "user_id")
	_userFanshui.Username = field.NewString(tableName, "username")
	_userFanshui.ParentID = field.NewInt64(tableName, "parent_id")
	_userFanshui.ParentName = field.NewString(tableName, "parent_name")
	_userFanshui.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userFanshui.FanshuiRate = field.NewString(tableName, "fanshui_rate")
	_userFanshui.TotalFanshui = field.NewFloat64(tableName, "total_fanshui")
	_userFanshui.IsFanshui = field.NewInt64(tableName, "is_fanshui")
	_userFanshui.GameBetNums = field.NewString(tableName, "game_bet_nums")
	_userFanshui.GameBetMoney = field.NewString(tableName, "game_bet_money")
	_userFanshui.BetNums = field.NewInt64(tableName, "bet_nums")
	_userFanshui.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_userFanshui.NetAmount = field.NewFloat64(tableName, "net_amount")
	_userFanshui.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userFanshui.LastFanshuiAt = field.NewField(tableName, "last_fanshui_at")
	_userFanshui.FanshuiAt = field.NewField(tableName, "fanshui_at")
	_userFanshui.IsManual = field.NewInt64(tableName, "is_manual")
	_userFanshui.AgentFanyong = field.NewInt64(tableName, "agent_fanyong")
	_userFanshui.FanshuiType = field.NewInt64(tableName, "fanshui_type")
	_userFanshui.CreatedAt = field.NewField(tableName, "created_at")
	_userFanshui.UpdatedAt = field.NewField(tableName, "updated_at")

	_userFanshui.fillFieldMap()

	return _userFanshui
}

type userFanshui struct {
	userFanshuiDo userFanshuiDo

	ALL            field.Asterisk
	ID             field.Int64
	DateAt         field.String  // 日期
	UserID         field.Int64   // 用户id
	Username       field.String  // 用户名
	ParentID       field.Int64   // 用户父级id
	ParentName     field.String  // 代理商
	ForefatherIds  field.String  // 上级树,多个以逗号隔开
	FanshuiRate    field.String  // 游戏下的具体分类{game_code:返水百分比%，多个以逗号分隔} 后面是不通的类型 返水不一样
	TotalFanshui   field.Float64 // 返水金额
	IsFanshui      field.Int64   // 0:未返水;1:返水进行中;2:已返水;
	GameBetNums    field.String  // 投注人数{game_code:投注次数，多个以逗号分隔}
	GameBetMoney   field.String  // 游戏下的具体分类{game_code:投注金额，多个以逗号分隔}
	BetNums        field.Int64   // 注单量
	BetAmount      field.Float64 // 投注额
	NetAmount      field.Float64 // 玩家的所赢金额
	ValidBetAmount field.Float64 // 有效投注金额
	LastFanshuiAt  field.Field   // 上次返水时间
	FanshuiAt      field.Field   // 返水时间
	IsManual       field.Int64   // 是否手动返水0:否;1:是手动
	AgentFanyong   field.Int64   // 是否统计了下级返水 0否 1执行中 2已完成
	FanshuiType    field.Int64   // 返水类型：1：自己返水，2推荐用户返水，默认位1
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userFanshui) Table(newTableName string) *userFanshui {
	u.userFanshuiDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFanshui) As(alias string) *userFanshui {
	u.userFanshuiDo.DO = *(u.userFanshuiDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFanshui) updateTableName(table string) *userFanshui {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewString(table, "date_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ParentName = field.NewString(table, "parent_name")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.FanshuiRate = field.NewString(table, "fanshui_rate")
	u.TotalFanshui = field.NewFloat64(table, "total_fanshui")
	u.IsFanshui = field.NewInt64(table, "is_fanshui")
	u.GameBetNums = field.NewString(table, "game_bet_nums")
	u.GameBetMoney = field.NewString(table, "game_bet_money")
	u.BetNums = field.NewInt64(table, "bet_nums")
	u.BetAmount = field.NewFloat64(table, "bet_amount")
	u.NetAmount = field.NewFloat64(table, "net_amount")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.LastFanshuiAt = field.NewField(table, "last_fanshui_at")
	u.FanshuiAt = field.NewField(table, "fanshui_at")
	u.IsManual = field.NewInt64(table, "is_manual")
	u.AgentFanyong = field.NewInt64(table, "agent_fanyong")
	u.FanshuiType = field.NewInt64(table, "fanshui_type")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userFanshui) WithContext(ctx context.Context) IUserFanshuiDo {
	return u.userFanshuiDo.WithContext(ctx)
}

func (u userFanshui) TableName() string { return u.userFanshuiDo.TableName() }

func (u userFanshui) Alias() string { return u.userFanshuiDo.Alias() }

func (u userFanshui) Columns(cols ...field.Expr) gen.Columns { return u.userFanshuiDo.Columns(cols...) }

func (u *userFanshui) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFanshui) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 23)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["fanshui_rate"] = u.FanshuiRate
	u.fieldMap["total_fanshui"] = u.TotalFanshui
	u.fieldMap["is_fanshui"] = u.IsFanshui
	u.fieldMap["game_bet_nums"] = u.GameBetNums
	u.fieldMap["game_bet_money"] = u.GameBetMoney
	u.fieldMap["bet_nums"] = u.BetNums
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["net_amount"] = u.NetAmount
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["last_fanshui_at"] = u.LastFanshuiAt
	u.fieldMap["fanshui_at"] = u.FanshuiAt
	u.fieldMap["is_manual"] = u.IsManual
	u.fieldMap["agent_fanyong"] = u.AgentFanyong
	u.fieldMap["fanshui_type"] = u.FanshuiType
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userFanshui) clone(db *gorm.DB) userFanshui {
	u.userFanshuiDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFanshui) replaceDB(db *gorm.DB) userFanshui {
	u.userFanshuiDo.ReplaceDB(db)
	return u
}

type userFanshuiDo struct{ gen.DO }

type IUserFanshuiDo interface {
	gen.SubQuery
	Debug() IUserFanshuiDo
	WithContext(ctx context.Context) IUserFanshuiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFanshuiDo
	WriteDB() IUserFanshuiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFanshuiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFanshuiDo
	Not(conds ...gen.Condition) IUserFanshuiDo
	Or(conds ...gen.Condition) IUserFanshuiDo
	Select(conds ...field.Expr) IUserFanshuiDo
	Where(conds ...gen.Condition) IUserFanshuiDo
	Order(conds ...field.Expr) IUserFanshuiDo
	Distinct(cols ...field.Expr) IUserFanshuiDo
	Omit(cols ...field.Expr) IUserFanshuiDo
	Join(table schema.Tabler, on ...field.Expr) IUserFanshuiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFanshuiDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFanshuiDo
	Group(cols ...field.Expr) IUserFanshuiDo
	Having(conds ...gen.Condition) IUserFanshuiDo
	Limit(limit int) IUserFanshuiDo
	Offset(offset int) IUserFanshuiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFanshuiDo
	Unscoped() IUserFanshuiDo
	Create(values ...*model.UserFanshui) error
	CreateInBatches(values []*model.UserFanshui, batchSize int) error
	Save(values ...*model.UserFanshui) error
	First() (*model.UserFanshui, error)
	Take() (*model.UserFanshui, error)
	Last() (*model.UserFanshui, error)
	Find() ([]*model.UserFanshui, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFanshui, err error)
	FindInBatches(result *[]*model.UserFanshui, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFanshui) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFanshuiDo
	Assign(attrs ...field.AssignExpr) IUserFanshuiDo
	Joins(fields ...field.RelationField) IUserFanshuiDo
	Preload(fields ...field.RelationField) IUserFanshuiDo
	FirstOrInit() (*model.UserFanshui, error)
	FirstOrCreate() (*model.UserFanshui, error)
	FindByPage(offset int, limit int) (result []*model.UserFanshui, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFanshuiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFanshuiDo) Debug() IUserFanshuiDo {
	return u.withDO(u.DO.Debug())
}

func (u userFanshuiDo) WithContext(ctx context.Context) IUserFanshuiDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFanshuiDo) ReadDB() IUserFanshuiDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFanshuiDo) WriteDB() IUserFanshuiDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFanshuiDo) Session(config *gorm.Session) IUserFanshuiDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFanshuiDo) Clauses(conds ...clause.Expression) IUserFanshuiDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFanshuiDo) Returning(value interface{}, columns ...string) IUserFanshuiDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFanshuiDo) Not(conds ...gen.Condition) IUserFanshuiDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFanshuiDo) Or(conds ...gen.Condition) IUserFanshuiDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFanshuiDo) Select(conds ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFanshuiDo) Where(conds ...gen.Condition) IUserFanshuiDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFanshuiDo) Order(conds ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFanshuiDo) Distinct(cols ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFanshuiDo) Omit(cols ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFanshuiDo) Join(table schema.Tabler, on ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFanshuiDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFanshuiDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFanshuiDo) Group(cols ...field.Expr) IUserFanshuiDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFanshuiDo) Having(conds ...gen.Condition) IUserFanshuiDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFanshuiDo) Limit(limit int) IUserFanshuiDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFanshuiDo) Offset(offset int) IUserFanshuiDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFanshuiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFanshuiDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFanshuiDo) Unscoped() IUserFanshuiDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFanshuiDo) Create(values ...*model.UserFanshui) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFanshuiDo) CreateInBatches(values []*model.UserFanshui, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFanshuiDo) Save(values ...*model.UserFanshui) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFanshuiDo) First() (*model.UserFanshui, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFanshui), nil
	}
}

func (u userFanshuiDo) Take() (*model.UserFanshui, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFanshui), nil
	}
}

func (u userFanshuiDo) Last() (*model.UserFanshui, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFanshui), nil
	}
}

func (u userFanshuiDo) Find() ([]*model.UserFanshui, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFanshui), err
}

func (u userFanshuiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFanshui, err error) {
	buf := make([]*model.UserFanshui, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFanshuiDo) FindInBatches(result *[]*model.UserFanshui, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFanshuiDo) Attrs(attrs ...field.AssignExpr) IUserFanshuiDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFanshuiDo) Assign(attrs ...field.AssignExpr) IUserFanshuiDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFanshuiDo) Joins(fields ...field.RelationField) IUserFanshuiDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFanshuiDo) Preload(fields ...field.RelationField) IUserFanshuiDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFanshuiDo) FirstOrInit() (*model.UserFanshui, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFanshui), nil
	}
}

func (u userFanshuiDo) FirstOrCreate() (*model.UserFanshui, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFanshui), nil
	}
}

func (u userFanshuiDo) FindByPage(offset int, limit int) (result []*model.UserFanshui, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFanshuiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFanshuiDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFanshuiDo) Delete(models ...*model.UserFanshui) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFanshuiDo) withDO(do gen.Dao) *userFanshuiDo {
	u.DO = *do.(*gen.DO)
	return u
}
