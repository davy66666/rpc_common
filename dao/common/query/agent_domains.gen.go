// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentDomain(db *gorm.DB, opts ...gen.DOOption) agentDomain {
	_agentDomain := agentDomain{}

	_agentDomain.agentDomainDo.UseDB(db, opts...)
	_agentDomain.agentDomainDo.UseModel(&model.AgentDomain{})

	tableName := _agentDomain.agentDomainDo.TableName()
	_agentDomain.ALL = field.NewAsterisk(tableName)
	_agentDomain.ID = field.NewInt64(tableName, "id")
	_agentDomain.AgentID = field.NewInt64(tableName, "agent_id")
	_agentDomain.AgentName = field.NewString(tableName, "agent_name")
	_agentDomain.ParentID = field.NewInt64(tableName, "parent_id")
	_agentDomain.ParentName = field.NewString(tableName, "parent_name")
	_agentDomain.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentDomain.RegDomain = field.NewString(tableName, "reg_domain")
	_agentDomain.AdminName = field.NewString(tableName, "admin_name")
	_agentDomain.IP = field.NewString(tableName, "ip")
	_agentDomain.Remarks = field.NewString(tableName, "remarks")
	_agentDomain.IsHTTPS = field.NewInt64(tableName, "is_https")
	_agentDomain.IsUsed = field.NewInt64(tableName, "is_used")
	_agentDomain.IsOpen = field.NewInt64(tableName, "is_open")
	_agentDomain.CreatedAt = field.NewField(tableName, "created_at")
	_agentDomain.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentDomain.IsBindWap = field.NewInt64(tableName, "is_bind_wap")

	_agentDomain.fillFieldMap()

	return _agentDomain
}

// agentDomain 独立域名
type agentDomain struct {
	agentDomainDo agentDomainDo

	ALL           field.Asterisk
	ID            field.Int64
	AgentID       field.Int64  // 代理id
	AgentName     field.String // 代理账号
	ParentID      field.Int64  // 直属上级id
	ParentName    field.String // 直属上级
	ForefatherIds field.String // 上级树,多个以逗号隔开
	RegDomain     field.String // 推广链接域名
	AdminName     field.String // 操作人
	IP            field.String // 操作者ip
	Remarks       field.String // 附言
	IsHTTPS       field.Int64  // 是否是https, 0:否;1:是;
	IsUsed        field.Int64  // 是否已经被使用0:否;1:是
	IsOpen        field.Int64  // 是否启用0:否;1:是;
	CreatedAt     field.Field
	UpdatedAt     field.Field
	IsBindWap     field.Int64 // 是否绑定wap 0:否 1:是

	fieldMap map[string]field.Expr
}

func (a agentDomain) Table(newTableName string) *agentDomain {
	a.agentDomainDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentDomain) As(alias string) *agentDomain {
	a.agentDomainDo.DO = *(a.agentDomainDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentDomain) updateTableName(table string) *agentDomain {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.RegDomain = field.NewString(table, "reg_domain")
	a.AdminName = field.NewString(table, "admin_name")
	a.IP = field.NewString(table, "ip")
	a.Remarks = field.NewString(table, "remarks")
	a.IsHTTPS = field.NewInt64(table, "is_https")
	a.IsUsed = field.NewInt64(table, "is_used")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.IsBindWap = field.NewInt64(table, "is_bind_wap")

	a.fillFieldMap()

	return a
}

func (a *agentDomain) WithContext(ctx context.Context) IAgentDomainDo {
	return a.agentDomainDo.WithContext(ctx)
}

func (a agentDomain) TableName() string { return a.agentDomainDo.TableName() }

func (a agentDomain) Alias() string { return a.agentDomainDo.Alias() }

func (a agentDomain) Columns(cols ...field.Expr) gen.Columns { return a.agentDomainDo.Columns(cols...) }

func (a *agentDomain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentDomain) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["reg_domain"] = a.RegDomain
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["ip"] = a.IP
	a.fieldMap["remarks"] = a.Remarks
	a.fieldMap["is_https"] = a.IsHTTPS
	a.fieldMap["is_used"] = a.IsUsed
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["is_bind_wap"] = a.IsBindWap
}

func (a agentDomain) clone(db *gorm.DB) agentDomain {
	a.agentDomainDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentDomain) replaceDB(db *gorm.DB) agentDomain {
	a.agentDomainDo.ReplaceDB(db)
	return a
}

type agentDomainDo struct{ gen.DO }

type IAgentDomainDo interface {
	gen.SubQuery
	Debug() IAgentDomainDo
	WithContext(ctx context.Context) IAgentDomainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentDomainDo
	WriteDB() IAgentDomainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentDomainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentDomainDo
	Not(conds ...gen.Condition) IAgentDomainDo
	Or(conds ...gen.Condition) IAgentDomainDo
	Select(conds ...field.Expr) IAgentDomainDo
	Where(conds ...gen.Condition) IAgentDomainDo
	Order(conds ...field.Expr) IAgentDomainDo
	Distinct(cols ...field.Expr) IAgentDomainDo
	Omit(cols ...field.Expr) IAgentDomainDo
	Join(table schema.Tabler, on ...field.Expr) IAgentDomainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentDomainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentDomainDo
	Group(cols ...field.Expr) IAgentDomainDo
	Having(conds ...gen.Condition) IAgentDomainDo
	Limit(limit int) IAgentDomainDo
	Offset(offset int) IAgentDomainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentDomainDo
	Unscoped() IAgentDomainDo
	Create(values ...*model.AgentDomain) error
	CreateInBatches(values []*model.AgentDomain, batchSize int) error
	Save(values ...*model.AgentDomain) error
	First() (*model.AgentDomain, error)
	Take() (*model.AgentDomain, error)
	Last() (*model.AgentDomain, error)
	Find() ([]*model.AgentDomain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentDomain, err error)
	FindInBatches(result *[]*model.AgentDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentDomain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentDomainDo
	Assign(attrs ...field.AssignExpr) IAgentDomainDo
	Joins(fields ...field.RelationField) IAgentDomainDo
	Preload(fields ...field.RelationField) IAgentDomainDo
	FirstOrInit() (*model.AgentDomain, error)
	FirstOrCreate() (*model.AgentDomain, error)
	FindByPage(offset int, limit int) (result []*model.AgentDomain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentDomainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentDomainDo) Debug() IAgentDomainDo {
	return a.withDO(a.DO.Debug())
}

func (a agentDomainDo) WithContext(ctx context.Context) IAgentDomainDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentDomainDo) ReadDB() IAgentDomainDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentDomainDo) WriteDB() IAgentDomainDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentDomainDo) Session(config *gorm.Session) IAgentDomainDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentDomainDo) Clauses(conds ...clause.Expression) IAgentDomainDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentDomainDo) Returning(value interface{}, columns ...string) IAgentDomainDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentDomainDo) Not(conds ...gen.Condition) IAgentDomainDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentDomainDo) Or(conds ...gen.Condition) IAgentDomainDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentDomainDo) Select(conds ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentDomainDo) Where(conds ...gen.Condition) IAgentDomainDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentDomainDo) Order(conds ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentDomainDo) Distinct(cols ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentDomainDo) Omit(cols ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentDomainDo) Join(table schema.Tabler, on ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentDomainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentDomainDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentDomainDo) Group(cols ...field.Expr) IAgentDomainDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentDomainDo) Having(conds ...gen.Condition) IAgentDomainDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentDomainDo) Limit(limit int) IAgentDomainDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentDomainDo) Offset(offset int) IAgentDomainDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentDomainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentDomainDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentDomainDo) Unscoped() IAgentDomainDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentDomainDo) Create(values ...*model.AgentDomain) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentDomainDo) CreateInBatches(values []*model.AgentDomain, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentDomainDo) Save(values ...*model.AgentDomain) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentDomainDo) First() (*model.AgentDomain, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentDomain), nil
	}
}

func (a agentDomainDo) Take() (*model.AgentDomain, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentDomain), nil
	}
}

func (a agentDomainDo) Last() (*model.AgentDomain, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentDomain), nil
	}
}

func (a agentDomainDo) Find() ([]*model.AgentDomain, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentDomain), err
}

func (a agentDomainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentDomain, err error) {
	buf := make([]*model.AgentDomain, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentDomainDo) FindInBatches(result *[]*model.AgentDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentDomainDo) Attrs(attrs ...field.AssignExpr) IAgentDomainDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentDomainDo) Assign(attrs ...field.AssignExpr) IAgentDomainDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentDomainDo) Joins(fields ...field.RelationField) IAgentDomainDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentDomainDo) Preload(fields ...field.RelationField) IAgentDomainDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentDomainDo) FirstOrInit() (*model.AgentDomain, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentDomain), nil
	}
}

func (a agentDomainDo) FirstOrCreate() (*model.AgentDomain, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentDomain), nil
	}
}

func (a agentDomainDo) FindByPage(offset int, limit int) (result []*model.AgentDomain, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentDomainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentDomainDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentDomainDo) Delete(models ...*model.AgentDomain) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentDomainDo) withDO(do gen.Dao) *agentDomainDo {
	a.DO = *do.(*gen.DO)
	return a
}
