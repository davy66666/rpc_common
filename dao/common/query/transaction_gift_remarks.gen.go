// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransactionGiftRemark(db *gorm.DB, opts ...gen.DOOption) transactionGiftRemark {
	_transactionGiftRemark := transactionGiftRemark{}

	_transactionGiftRemark.transactionGiftRemarkDo.UseDB(db, opts...)
	_transactionGiftRemark.transactionGiftRemarkDo.UseModel(&model.TransactionGiftRemark{})

	tableName := _transactionGiftRemark.transactionGiftRemarkDo.TableName()
	_transactionGiftRemark.ALL = field.NewAsterisk(tableName)
	_transactionGiftRemark.ID = field.NewInt64(tableName, "id")
	_transactionGiftRemark.TransactionID = field.NewInt64(tableName, "transaction_id")
	_transactionGiftRemark.GiftTypeID = field.NewInt64(tableName, "gift_type_id")
	_transactionGiftRemark.GiftTypeName = field.NewString(tableName, "gift_type_name")
	_transactionGiftRemark.CreatedAt = field.NewField(tableName, "created_at")
	_transactionGiftRemark.UpdatedAt = field.NewField(tableName, "updated_at")

	_transactionGiftRemark.fillFieldMap()

	return _transactionGiftRemark
}

type transactionGiftRemark struct {
	transactionGiftRemarkDo transactionGiftRemarkDo

	ALL           field.Asterisk
	ID            field.Int64
	TransactionID field.Int64
	GiftTypeID    field.Int64  // 彩金类目id
	GiftTypeName  field.String // 彩金类目
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (t transactionGiftRemark) Table(newTableName string) *transactionGiftRemark {
	t.transactionGiftRemarkDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionGiftRemark) As(alias string) *transactionGiftRemark {
	t.transactionGiftRemarkDo.DO = *(t.transactionGiftRemarkDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionGiftRemark) updateTableName(table string) *transactionGiftRemark {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TransactionID = field.NewInt64(table, "transaction_id")
	t.GiftTypeID = field.NewInt64(table, "gift_type_id")
	t.GiftTypeName = field.NewString(table, "gift_type_name")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactionGiftRemark) WithContext(ctx context.Context) ITransactionGiftRemarkDo {
	return t.transactionGiftRemarkDo.WithContext(ctx)
}

func (t transactionGiftRemark) TableName() string { return t.transactionGiftRemarkDo.TableName() }

func (t transactionGiftRemark) Alias() string { return t.transactionGiftRemarkDo.Alias() }

func (t transactionGiftRemark) Columns(cols ...field.Expr) gen.Columns {
	return t.transactionGiftRemarkDo.Columns(cols...)
}

func (t *transactionGiftRemark) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionGiftRemark) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["transaction_id"] = t.TransactionID
	t.fieldMap["gift_type_id"] = t.GiftTypeID
	t.fieldMap["gift_type_name"] = t.GiftTypeName
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactionGiftRemark) clone(db *gorm.DB) transactionGiftRemark {
	t.transactionGiftRemarkDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionGiftRemark) replaceDB(db *gorm.DB) transactionGiftRemark {
	t.transactionGiftRemarkDo.ReplaceDB(db)
	return t
}

type transactionGiftRemarkDo struct{ gen.DO }

type ITransactionGiftRemarkDo interface {
	gen.SubQuery
	Debug() ITransactionGiftRemarkDo
	WithContext(ctx context.Context) ITransactionGiftRemarkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionGiftRemarkDo
	WriteDB() ITransactionGiftRemarkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionGiftRemarkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionGiftRemarkDo
	Not(conds ...gen.Condition) ITransactionGiftRemarkDo
	Or(conds ...gen.Condition) ITransactionGiftRemarkDo
	Select(conds ...field.Expr) ITransactionGiftRemarkDo
	Where(conds ...gen.Condition) ITransactionGiftRemarkDo
	Order(conds ...field.Expr) ITransactionGiftRemarkDo
	Distinct(cols ...field.Expr) ITransactionGiftRemarkDo
	Omit(cols ...field.Expr) ITransactionGiftRemarkDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo
	Group(cols ...field.Expr) ITransactionGiftRemarkDo
	Having(conds ...gen.Condition) ITransactionGiftRemarkDo
	Limit(limit int) ITransactionGiftRemarkDo
	Offset(offset int) ITransactionGiftRemarkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionGiftRemarkDo
	Unscoped() ITransactionGiftRemarkDo
	Create(values ...*model.TransactionGiftRemark) error
	CreateInBatches(values []*model.TransactionGiftRemark, batchSize int) error
	Save(values ...*model.TransactionGiftRemark) error
	First() (*model.TransactionGiftRemark, error)
	Take() (*model.TransactionGiftRemark, error)
	Last() (*model.TransactionGiftRemark, error)
	Find() ([]*model.TransactionGiftRemark, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionGiftRemark, err error)
	FindInBatches(result *[]*model.TransactionGiftRemark, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionGiftRemark) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionGiftRemarkDo
	Assign(attrs ...field.AssignExpr) ITransactionGiftRemarkDo
	Joins(fields ...field.RelationField) ITransactionGiftRemarkDo
	Preload(fields ...field.RelationField) ITransactionGiftRemarkDo
	FirstOrInit() (*model.TransactionGiftRemark, error)
	FirstOrCreate() (*model.TransactionGiftRemark, error)
	FindByPage(offset int, limit int) (result []*model.TransactionGiftRemark, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionGiftRemarkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionGiftRemarkDo) Debug() ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionGiftRemarkDo) WithContext(ctx context.Context) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionGiftRemarkDo) ReadDB() ITransactionGiftRemarkDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionGiftRemarkDo) WriteDB() ITransactionGiftRemarkDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionGiftRemarkDo) Session(config *gorm.Session) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionGiftRemarkDo) Clauses(conds ...clause.Expression) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionGiftRemarkDo) Returning(value interface{}, columns ...string) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionGiftRemarkDo) Not(conds ...gen.Condition) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionGiftRemarkDo) Or(conds ...gen.Condition) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionGiftRemarkDo) Select(conds ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionGiftRemarkDo) Where(conds ...gen.Condition) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionGiftRemarkDo) Order(conds ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionGiftRemarkDo) Distinct(cols ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionGiftRemarkDo) Omit(cols ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionGiftRemarkDo) Join(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionGiftRemarkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionGiftRemarkDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionGiftRemarkDo) Group(cols ...field.Expr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionGiftRemarkDo) Having(conds ...gen.Condition) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionGiftRemarkDo) Limit(limit int) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionGiftRemarkDo) Offset(offset int) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionGiftRemarkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionGiftRemarkDo) Unscoped() ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionGiftRemarkDo) Create(values ...*model.TransactionGiftRemark) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionGiftRemarkDo) CreateInBatches(values []*model.TransactionGiftRemark, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionGiftRemarkDo) Save(values ...*model.TransactionGiftRemark) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionGiftRemarkDo) First() (*model.TransactionGiftRemark, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionGiftRemark), nil
	}
}

func (t transactionGiftRemarkDo) Take() (*model.TransactionGiftRemark, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionGiftRemark), nil
	}
}

func (t transactionGiftRemarkDo) Last() (*model.TransactionGiftRemark, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionGiftRemark), nil
	}
}

func (t transactionGiftRemarkDo) Find() ([]*model.TransactionGiftRemark, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionGiftRemark), err
}

func (t transactionGiftRemarkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionGiftRemark, err error) {
	buf := make([]*model.TransactionGiftRemark, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionGiftRemarkDo) FindInBatches(result *[]*model.TransactionGiftRemark, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionGiftRemarkDo) Attrs(attrs ...field.AssignExpr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionGiftRemarkDo) Assign(attrs ...field.AssignExpr) ITransactionGiftRemarkDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionGiftRemarkDo) Joins(fields ...field.RelationField) ITransactionGiftRemarkDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionGiftRemarkDo) Preload(fields ...field.RelationField) ITransactionGiftRemarkDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionGiftRemarkDo) FirstOrInit() (*model.TransactionGiftRemark, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionGiftRemark), nil
	}
}

func (t transactionGiftRemarkDo) FirstOrCreate() (*model.TransactionGiftRemark, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionGiftRemark), nil
	}
}

func (t transactionGiftRemarkDo) FindByPage(offset int, limit int) (result []*model.TransactionGiftRemark, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionGiftRemarkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionGiftRemarkDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionGiftRemarkDo) Delete(models ...*model.TransactionGiftRemark) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionGiftRemarkDo) withDO(do gen.Dao) *transactionGiftRemarkDo {
	t.DO = *do.(*gen.DO)
	return t
}
