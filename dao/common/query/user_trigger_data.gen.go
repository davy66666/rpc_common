// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserTriggerDatum(db *gorm.DB, opts ...gen.DOOption) userTriggerDatum {
	_userTriggerDatum := userTriggerDatum{}

	_userTriggerDatum.userTriggerDatumDo.UseDB(db, opts...)
	_userTriggerDatum.userTriggerDatumDo.UseModel(&model.UserTriggerDatum{})

	tableName := _userTriggerDatum.userTriggerDatumDo.TableName()
	_userTriggerDatum.ALL = field.NewAsterisk(tableName)
	_userTriggerDatum.ID = field.NewInt64(tableName, "id")
	_userTriggerDatum.UserID = field.NewInt64(tableName, "user_id")
	_userTriggerDatum.Username = field.NewString(tableName, "username")
	_userTriggerDatum.UserPayLevel = field.NewInt64(tableName, "user_pay_level")
	_userTriggerDatum.UserPayLevelName = field.NewString(tableName, "user_pay_level_name")
	_userTriggerDatum.IPArea = field.NewString(tableName, "ip_area")
	_userTriggerDatum.TriggerNum = field.NewInt64(tableName, "trigger_num")
	_userTriggerDatum.Plat = field.NewInt64(tableName, "plat")
	_userTriggerDatum.CreatedAt = field.NewField(tableName, "created_at")
	_userTriggerDatum.UpdatedAt = field.NewField(tableName, "updated_at")

	_userTriggerDatum.fillFieldMap()

	return _userTriggerDatum
}

// userTriggerDatum 用户触记录数据表
type userTriggerDatum struct {
	userTriggerDatumDo userTriggerDatumDo

	ALL              field.Asterisk
	ID               field.Int64  // 自增id
	UserID           field.Int64  // 用户id
	Username         field.String // 用户名
	UserPayLevel     field.Int64  // 用户支付等级
	UserPayLevelName field.String // 用户支付等级名称
	IPArea           field.String // 地区
	TriggerNum       field.Int64  // 触发次数
	Plat             field.Int64  // 终端;1:h5;2安卓;3ios4:pc
	CreatedAt        field.Field  // 记录创建时间
	UpdatedAt        field.Field  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (u userTriggerDatum) Table(newTableName string) *userTriggerDatum {
	u.userTriggerDatumDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userTriggerDatum) As(alias string) *userTriggerDatum {
	u.userTriggerDatumDo.DO = *(u.userTriggerDatumDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userTriggerDatum) updateTableName(table string) *userTriggerDatum {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.UserPayLevel = field.NewInt64(table, "user_pay_level")
	u.UserPayLevelName = field.NewString(table, "user_pay_level_name")
	u.IPArea = field.NewString(table, "ip_area")
	u.TriggerNum = field.NewInt64(table, "trigger_num")
	u.Plat = field.NewInt64(table, "plat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userTriggerDatum) WithContext(ctx context.Context) IUserTriggerDatumDo {
	return u.userTriggerDatumDo.WithContext(ctx)
}

func (u userTriggerDatum) TableName() string { return u.userTriggerDatumDo.TableName() }

func (u userTriggerDatum) Alias() string { return u.userTriggerDatumDo.Alias() }

func (u userTriggerDatum) Columns(cols ...field.Expr) gen.Columns {
	return u.userTriggerDatumDo.Columns(cols...)
}

func (u *userTriggerDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userTriggerDatum) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["user_pay_level"] = u.UserPayLevel
	u.fieldMap["user_pay_level_name"] = u.UserPayLevelName
	u.fieldMap["ip_area"] = u.IPArea
	u.fieldMap["trigger_num"] = u.TriggerNum
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userTriggerDatum) clone(db *gorm.DB) userTriggerDatum {
	u.userTriggerDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userTriggerDatum) replaceDB(db *gorm.DB) userTriggerDatum {
	u.userTriggerDatumDo.ReplaceDB(db)
	return u
}

type userTriggerDatumDo struct{ gen.DO }

type IUserTriggerDatumDo interface {
	gen.SubQuery
	Debug() IUserTriggerDatumDo
	WithContext(ctx context.Context) IUserTriggerDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserTriggerDatumDo
	WriteDB() IUserTriggerDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserTriggerDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserTriggerDatumDo
	Not(conds ...gen.Condition) IUserTriggerDatumDo
	Or(conds ...gen.Condition) IUserTriggerDatumDo
	Select(conds ...field.Expr) IUserTriggerDatumDo
	Where(conds ...gen.Condition) IUserTriggerDatumDo
	Order(conds ...field.Expr) IUserTriggerDatumDo
	Distinct(cols ...field.Expr) IUserTriggerDatumDo
	Omit(cols ...field.Expr) IUserTriggerDatumDo
	Join(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo
	Group(cols ...field.Expr) IUserTriggerDatumDo
	Having(conds ...gen.Condition) IUserTriggerDatumDo
	Limit(limit int) IUserTriggerDatumDo
	Offset(offset int) IUserTriggerDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTriggerDatumDo
	Unscoped() IUserTriggerDatumDo
	Create(values ...*model.UserTriggerDatum) error
	CreateInBatches(values []*model.UserTriggerDatum, batchSize int) error
	Save(values ...*model.UserTriggerDatum) error
	First() (*model.UserTriggerDatum, error)
	Take() (*model.UserTriggerDatum, error)
	Last() (*model.UserTriggerDatum, error)
	Find() ([]*model.UserTriggerDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserTriggerDatum, err error)
	FindInBatches(result *[]*model.UserTriggerDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserTriggerDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserTriggerDatumDo
	Assign(attrs ...field.AssignExpr) IUserTriggerDatumDo
	Joins(fields ...field.RelationField) IUserTriggerDatumDo
	Preload(fields ...field.RelationField) IUserTriggerDatumDo
	FirstOrInit() (*model.UserTriggerDatum, error)
	FirstOrCreate() (*model.UserTriggerDatum, error)
	FindByPage(offset int, limit int) (result []*model.UserTriggerDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserTriggerDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userTriggerDatumDo) Debug() IUserTriggerDatumDo {
	return u.withDO(u.DO.Debug())
}

func (u userTriggerDatumDo) WithContext(ctx context.Context) IUserTriggerDatumDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userTriggerDatumDo) ReadDB() IUserTriggerDatumDo {
	return u.Clauses(dbresolver.Read)
}

func (u userTriggerDatumDo) WriteDB() IUserTriggerDatumDo {
	return u.Clauses(dbresolver.Write)
}

func (u userTriggerDatumDo) Session(config *gorm.Session) IUserTriggerDatumDo {
	return u.withDO(u.DO.Session(config))
}

func (u userTriggerDatumDo) Clauses(conds ...clause.Expression) IUserTriggerDatumDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userTriggerDatumDo) Returning(value interface{}, columns ...string) IUserTriggerDatumDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userTriggerDatumDo) Not(conds ...gen.Condition) IUserTriggerDatumDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userTriggerDatumDo) Or(conds ...gen.Condition) IUserTriggerDatumDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userTriggerDatumDo) Select(conds ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userTriggerDatumDo) Where(conds ...gen.Condition) IUserTriggerDatumDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userTriggerDatumDo) Order(conds ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userTriggerDatumDo) Distinct(cols ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userTriggerDatumDo) Omit(cols ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userTriggerDatumDo) Join(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userTriggerDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userTriggerDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userTriggerDatumDo) Group(cols ...field.Expr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userTriggerDatumDo) Having(conds ...gen.Condition) IUserTriggerDatumDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userTriggerDatumDo) Limit(limit int) IUserTriggerDatumDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userTriggerDatumDo) Offset(offset int) IUserTriggerDatumDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userTriggerDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTriggerDatumDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userTriggerDatumDo) Unscoped() IUserTriggerDatumDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userTriggerDatumDo) Create(values ...*model.UserTriggerDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userTriggerDatumDo) CreateInBatches(values []*model.UserTriggerDatum, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userTriggerDatumDo) Save(values ...*model.UserTriggerDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userTriggerDatumDo) First() (*model.UserTriggerDatum, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTriggerDatum), nil
	}
}

func (u userTriggerDatumDo) Take() (*model.UserTriggerDatum, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTriggerDatum), nil
	}
}

func (u userTriggerDatumDo) Last() (*model.UserTriggerDatum, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTriggerDatum), nil
	}
}

func (u userTriggerDatumDo) Find() ([]*model.UserTriggerDatum, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserTriggerDatum), err
}

func (u userTriggerDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserTriggerDatum, err error) {
	buf := make([]*model.UserTriggerDatum, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userTriggerDatumDo) FindInBatches(result *[]*model.UserTriggerDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userTriggerDatumDo) Attrs(attrs ...field.AssignExpr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userTriggerDatumDo) Assign(attrs ...field.AssignExpr) IUserTriggerDatumDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userTriggerDatumDo) Joins(fields ...field.RelationField) IUserTriggerDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userTriggerDatumDo) Preload(fields ...field.RelationField) IUserTriggerDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userTriggerDatumDo) FirstOrInit() (*model.UserTriggerDatum, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTriggerDatum), nil
	}
}

func (u userTriggerDatumDo) FirstOrCreate() (*model.UserTriggerDatum, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserTriggerDatum), nil
	}
}

func (u userTriggerDatumDo) FindByPage(offset int, limit int) (result []*model.UserTriggerDatum, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userTriggerDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userTriggerDatumDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userTriggerDatumDo) Delete(models ...*model.UserTriggerDatum) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userTriggerDatumDo) withDO(do gen.Dao) *userTriggerDatumDo {
	u.DO = *do.(*gen.DO)
	return u
}
