// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLineConfig(db *gorm.DB, opts ...gen.DOOption) lineConfig {
	_lineConfig := lineConfig{}

	_lineConfig.lineConfigDo.UseDB(db, opts...)
	_lineConfig.lineConfigDo.UseModel(&model.LineConfig{})

	tableName := _lineConfig.lineConfigDo.TableName()
	_lineConfig.ALL = field.NewAsterisk(tableName)
	_lineConfig.ID = field.NewInt64(tableName, "id")
	_lineConfig.Address = field.NewString(tableName, "address")
	_lineConfig.LineType = field.NewString(tableName, "line_type")
	_lineConfig.Remark = field.NewString(tableName, "remark")
	_lineConfig.LineStatus = field.NewInt64(tableName, "line_status")
	_lineConfig.Plat = field.NewInt64(tableName, "plat")

	_lineConfig.fillFieldMap()

	return _lineConfig
}

// lineConfig 线路配置表
type lineConfig struct {
	lineConfigDo lineConfigDo

	ALL        field.Asterisk
	ID         field.Int64
	Address    field.String // 线路地址
	LineType   field.String // 线路类型
	Remark     field.String // 备注
	LineStatus field.Int64  // 线路状态：1 启用  0不启用
	Plat       field.Int64  // // 终端;1:h5;2:android;3:ios;4:pc

	fieldMap map[string]field.Expr
}

func (l lineConfig) Table(newTableName string) *lineConfig {
	l.lineConfigDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lineConfig) As(alias string) *lineConfig {
	l.lineConfigDo.DO = *(l.lineConfigDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lineConfig) updateTableName(table string) *lineConfig {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Address = field.NewString(table, "address")
	l.LineType = field.NewString(table, "line_type")
	l.Remark = field.NewString(table, "remark")
	l.LineStatus = field.NewInt64(table, "line_status")
	l.Plat = field.NewInt64(table, "plat")

	l.fillFieldMap()

	return l
}

func (l *lineConfig) WithContext(ctx context.Context) ILineConfigDo {
	return l.lineConfigDo.WithContext(ctx)
}

func (l lineConfig) TableName() string { return l.lineConfigDo.TableName() }

func (l lineConfig) Alias() string { return l.lineConfigDo.Alias() }

func (l lineConfig) Columns(cols ...field.Expr) gen.Columns { return l.lineConfigDo.Columns(cols...) }

func (l *lineConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lineConfig) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["address"] = l.Address
	l.fieldMap["line_type"] = l.LineType
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["line_status"] = l.LineStatus
	l.fieldMap["plat"] = l.Plat
}

func (l lineConfig) clone(db *gorm.DB) lineConfig {
	l.lineConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lineConfig) replaceDB(db *gorm.DB) lineConfig {
	l.lineConfigDo.ReplaceDB(db)
	return l
}

type lineConfigDo struct{ gen.DO }

type ILineConfigDo interface {
	gen.SubQuery
	Debug() ILineConfigDo
	WithContext(ctx context.Context) ILineConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILineConfigDo
	WriteDB() ILineConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILineConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILineConfigDo
	Not(conds ...gen.Condition) ILineConfigDo
	Or(conds ...gen.Condition) ILineConfigDo
	Select(conds ...field.Expr) ILineConfigDo
	Where(conds ...gen.Condition) ILineConfigDo
	Order(conds ...field.Expr) ILineConfigDo
	Distinct(cols ...field.Expr) ILineConfigDo
	Omit(cols ...field.Expr) ILineConfigDo
	Join(table schema.Tabler, on ...field.Expr) ILineConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILineConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILineConfigDo
	Group(cols ...field.Expr) ILineConfigDo
	Having(conds ...gen.Condition) ILineConfigDo
	Limit(limit int) ILineConfigDo
	Offset(offset int) ILineConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILineConfigDo
	Unscoped() ILineConfigDo
	Create(values ...*model.LineConfig) error
	CreateInBatches(values []*model.LineConfig, batchSize int) error
	Save(values ...*model.LineConfig) error
	First() (*model.LineConfig, error)
	Take() (*model.LineConfig, error)
	Last() (*model.LineConfig, error)
	Find() ([]*model.LineConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LineConfig, err error)
	FindInBatches(result *[]*model.LineConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LineConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILineConfigDo
	Assign(attrs ...field.AssignExpr) ILineConfigDo
	Joins(fields ...field.RelationField) ILineConfigDo
	Preload(fields ...field.RelationField) ILineConfigDo
	FirstOrInit() (*model.LineConfig, error)
	FirstOrCreate() (*model.LineConfig, error)
	FindByPage(offset int, limit int) (result []*model.LineConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILineConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lineConfigDo) Debug() ILineConfigDo {
	return l.withDO(l.DO.Debug())
}

func (l lineConfigDo) WithContext(ctx context.Context) ILineConfigDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lineConfigDo) ReadDB() ILineConfigDo {
	return l.Clauses(dbresolver.Read)
}

func (l lineConfigDo) WriteDB() ILineConfigDo {
	return l.Clauses(dbresolver.Write)
}

func (l lineConfigDo) Session(config *gorm.Session) ILineConfigDo {
	return l.withDO(l.DO.Session(config))
}

func (l lineConfigDo) Clauses(conds ...clause.Expression) ILineConfigDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lineConfigDo) Returning(value interface{}, columns ...string) ILineConfigDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lineConfigDo) Not(conds ...gen.Condition) ILineConfigDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lineConfigDo) Or(conds ...gen.Condition) ILineConfigDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lineConfigDo) Select(conds ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lineConfigDo) Where(conds ...gen.Condition) ILineConfigDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lineConfigDo) Order(conds ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lineConfigDo) Distinct(cols ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lineConfigDo) Omit(cols ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lineConfigDo) Join(table schema.Tabler, on ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lineConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lineConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lineConfigDo) Group(cols ...field.Expr) ILineConfigDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lineConfigDo) Having(conds ...gen.Condition) ILineConfigDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lineConfigDo) Limit(limit int) ILineConfigDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lineConfigDo) Offset(offset int) ILineConfigDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lineConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILineConfigDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lineConfigDo) Unscoped() ILineConfigDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lineConfigDo) Create(values ...*model.LineConfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lineConfigDo) CreateInBatches(values []*model.LineConfig, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lineConfigDo) Save(values ...*model.LineConfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lineConfigDo) First() (*model.LineConfig, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineConfig), nil
	}
}

func (l lineConfigDo) Take() (*model.LineConfig, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineConfig), nil
	}
}

func (l lineConfigDo) Last() (*model.LineConfig, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineConfig), nil
	}
}

func (l lineConfigDo) Find() ([]*model.LineConfig, error) {
	result, err := l.DO.Find()
	return result.([]*model.LineConfig), err
}

func (l lineConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LineConfig, err error) {
	buf := make([]*model.LineConfig, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lineConfigDo) FindInBatches(result *[]*model.LineConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lineConfigDo) Attrs(attrs ...field.AssignExpr) ILineConfigDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lineConfigDo) Assign(attrs ...field.AssignExpr) ILineConfigDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lineConfigDo) Joins(fields ...field.RelationField) ILineConfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lineConfigDo) Preload(fields ...field.RelationField) ILineConfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lineConfigDo) FirstOrInit() (*model.LineConfig, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineConfig), nil
	}
}

func (l lineConfigDo) FirstOrCreate() (*model.LineConfig, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineConfig), nil
	}
}

func (l lineConfigDo) FindByPage(offset int, limit int) (result []*model.LineConfig, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lineConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lineConfigDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lineConfigDo) Delete(models ...*model.LineConfig) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lineConfigDo) withDO(do gen.Dao) *lineConfigDo {
	l.DO = *do.(*gen.DO)
	return l
}
