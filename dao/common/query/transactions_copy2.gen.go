// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransactionsCopy2(db *gorm.DB, opts ...gen.DOOption) transactionsCopy2 {
	_transactionsCopy2 := transactionsCopy2{}

	_transactionsCopy2.transactionsCopy2Do.UseDB(db, opts...)
	_transactionsCopy2.transactionsCopy2Do.UseModel(&model.TransactionsCopy2{})

	tableName := _transactionsCopy2.transactionsCopy2Do.TableName()
	_transactionsCopy2.ALL = field.NewAsterisk(tableName)
	_transactionsCopy2.ID = field.NewInt64(tableName, "id")
	_transactionsCopy2.UserID = field.NewInt64(tableName, "user_id")
	_transactionsCopy2.Username = field.NewString(tableName, "username")
	_transactionsCopy2.IsTester = field.NewInt64(tableName, "is_tester")
	_transactionsCopy2.ParentID = field.NewInt64(tableName, "parent_id")
	_transactionsCopy2.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_transactionsCopy2.Amount = field.NewFloat64(tableName, "amount")
	_transactionsCopy2.TransFatherID = field.NewInt64(tableName, "trans_father_id")
	_transactionsCopy2.TransTypesID = field.NewInt64(tableName, "trans_types_id")
	_transactionsCopy2.TransTypesCnTitle = field.NewString(tableName, "trans_types_cn_title")
	_transactionsCopy2.TransTypesEnTitle = field.NewString(tableName, "trans_types_en_title")
	_transactionsCopy2.IsIncome = field.NewInt64(tableName, "is_income")
	_transactionsCopy2.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_transactionsCopy2.Money = field.NewFloat64(tableName, "money")
	_transactionsCopy2.GameCode = field.NewString(tableName, "game_code")
	_transactionsCopy2.Issue = field.NewString(tableName, "issue")
	_transactionsCopy2.GameName = field.NewString(tableName, "game_name")
	_transactionsCopy2.BillID = field.NewString(tableName, "bill_id")
	_transactionsCopy2.AdminID = field.NewInt64(tableName, "admin_id")
	_transactionsCopy2.Adminname = field.NewString(tableName, "adminname")
	_transactionsCopy2.IP = field.NewString(tableName, "ip")
	_transactionsCopy2.Status = field.NewInt64(tableName, "status")
	_transactionsCopy2.AppPlat = field.NewInt64(tableName, "app_plat")
	_transactionsCopy2.Remark = field.NewString(tableName, "remark")
	_transactionsCopy2.PayType = field.NewString(tableName, "pay_type")
	_transactionsCopy2.CreatedAt = field.NewField(tableName, "created_at")
	_transactionsCopy2.UpdatedAt = field.NewField(tableName, "updated_at")
	_transactionsCopy2.Description = field.NewString(tableName, "description")

	_transactionsCopy2.fillFieldMap()

	return _transactionsCopy2
}

type transactionsCopy2 struct {
	transactionsCopy2Do transactionsCopy2Do

	ALL               field.Asterisk
	ID                field.Int64
	UserID            field.Int64
	Username          field.String
	IsTester          field.Int64
	ParentID          field.Int64 // 上级id
	ForefatherIds     field.String
	Amount            field.Float64 // 用户当前交易金额
	TransFatherID     field.Int64   // 账变类型父类
	TransTypesID      field.Int64
	TransTypesCnTitle field.String
	TransTypesEnTitle field.String
	IsIncome          field.Int64 // 是否入款
	BeforeMoney       field.Float64
	Money             field.Float64 // 交易后金额
	GameCode          field.String  // 游戏game
	Issue             field.String
	GameName          field.String // 具体玩法
	BillID            field.String
	AdminID           field.Int64
	Adminname         field.String
	IP                field.String
	Status            field.Int64  // 状态：0已删除,1:成功
	AppPlat           field.Int64  // 1：综合 2：体育
	Remark            field.String // 备注
	PayType           field.String // 支付类型
	CreatedAt         field.Field  // 交易时间
	UpdatedAt         field.Field
	Description       field.String // 转账说明

	fieldMap map[string]field.Expr
}

func (t transactionsCopy2) Table(newTableName string) *transactionsCopy2 {
	t.transactionsCopy2Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionsCopy2) As(alias string) *transactionsCopy2 {
	t.transactionsCopy2Do.DO = *(t.transactionsCopy2Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionsCopy2) updateTableName(table string) *transactionsCopy2 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewInt64(table, "user_id")
	t.Username = field.NewString(table, "username")
	t.IsTester = field.NewInt64(table, "is_tester")
	t.ParentID = field.NewInt64(table, "parent_id")
	t.ForefatherIds = field.NewString(table, "forefather_ids")
	t.Amount = field.NewFloat64(table, "amount")
	t.TransFatherID = field.NewInt64(table, "trans_father_id")
	t.TransTypesID = field.NewInt64(table, "trans_types_id")
	t.TransTypesCnTitle = field.NewString(table, "trans_types_cn_title")
	t.TransTypesEnTitle = field.NewString(table, "trans_types_en_title")
	t.IsIncome = field.NewInt64(table, "is_income")
	t.BeforeMoney = field.NewFloat64(table, "before_money")
	t.Money = field.NewFloat64(table, "money")
	t.GameCode = field.NewString(table, "game_code")
	t.Issue = field.NewString(table, "issue")
	t.GameName = field.NewString(table, "game_name")
	t.BillID = field.NewString(table, "bill_id")
	t.AdminID = field.NewInt64(table, "admin_id")
	t.Adminname = field.NewString(table, "adminname")
	t.IP = field.NewString(table, "ip")
	t.Status = field.NewInt64(table, "status")
	t.AppPlat = field.NewInt64(table, "app_plat")
	t.Remark = field.NewString(table, "remark")
	t.PayType = field.NewString(table, "pay_type")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")
	t.Description = field.NewString(table, "description")

	t.fillFieldMap()

	return t
}

func (t *transactionsCopy2) WithContext(ctx context.Context) ITransactionsCopy2Do {
	return t.transactionsCopy2Do.WithContext(ctx)
}

func (t transactionsCopy2) TableName() string { return t.transactionsCopy2Do.TableName() }

func (t transactionsCopy2) Alias() string { return t.transactionsCopy2Do.Alias() }

func (t transactionsCopy2) Columns(cols ...field.Expr) gen.Columns {
	return t.transactionsCopy2Do.Columns(cols...)
}

func (t *transactionsCopy2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionsCopy2) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 28)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["username"] = t.Username
	t.fieldMap["is_tester"] = t.IsTester
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["forefather_ids"] = t.ForefatherIds
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["trans_father_id"] = t.TransFatherID
	t.fieldMap["trans_types_id"] = t.TransTypesID
	t.fieldMap["trans_types_cn_title"] = t.TransTypesCnTitle
	t.fieldMap["trans_types_en_title"] = t.TransTypesEnTitle
	t.fieldMap["is_income"] = t.IsIncome
	t.fieldMap["before_money"] = t.BeforeMoney
	t.fieldMap["money"] = t.Money
	t.fieldMap["game_code"] = t.GameCode
	t.fieldMap["issue"] = t.Issue
	t.fieldMap["game_name"] = t.GameName
	t.fieldMap["bill_id"] = t.BillID
	t.fieldMap["admin_id"] = t.AdminID
	t.fieldMap["adminname"] = t.Adminname
	t.fieldMap["ip"] = t.IP
	t.fieldMap["status"] = t.Status
	t.fieldMap["app_plat"] = t.AppPlat
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["pay_type"] = t.PayType
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["description"] = t.Description
}

func (t transactionsCopy2) clone(db *gorm.DB) transactionsCopy2 {
	t.transactionsCopy2Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionsCopy2) replaceDB(db *gorm.DB) transactionsCopy2 {
	t.transactionsCopy2Do.ReplaceDB(db)
	return t
}

type transactionsCopy2Do struct{ gen.DO }

type ITransactionsCopy2Do interface {
	gen.SubQuery
	Debug() ITransactionsCopy2Do
	WithContext(ctx context.Context) ITransactionsCopy2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionsCopy2Do
	WriteDB() ITransactionsCopy2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionsCopy2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionsCopy2Do
	Not(conds ...gen.Condition) ITransactionsCopy2Do
	Or(conds ...gen.Condition) ITransactionsCopy2Do
	Select(conds ...field.Expr) ITransactionsCopy2Do
	Where(conds ...gen.Condition) ITransactionsCopy2Do
	Order(conds ...field.Expr) ITransactionsCopy2Do
	Distinct(cols ...field.Expr) ITransactionsCopy2Do
	Omit(cols ...field.Expr) ITransactionsCopy2Do
	Join(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do
	Group(cols ...field.Expr) ITransactionsCopy2Do
	Having(conds ...gen.Condition) ITransactionsCopy2Do
	Limit(limit int) ITransactionsCopy2Do
	Offset(offset int) ITransactionsCopy2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionsCopy2Do
	Unscoped() ITransactionsCopy2Do
	Create(values ...*model.TransactionsCopy2) error
	CreateInBatches(values []*model.TransactionsCopy2, batchSize int) error
	Save(values ...*model.TransactionsCopy2) error
	First() (*model.TransactionsCopy2, error)
	Take() (*model.TransactionsCopy2, error)
	Last() (*model.TransactionsCopy2, error)
	Find() ([]*model.TransactionsCopy2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionsCopy2, err error)
	FindInBatches(result *[]*model.TransactionsCopy2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionsCopy2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionsCopy2Do
	Assign(attrs ...field.AssignExpr) ITransactionsCopy2Do
	Joins(fields ...field.RelationField) ITransactionsCopy2Do
	Preload(fields ...field.RelationField) ITransactionsCopy2Do
	FirstOrInit() (*model.TransactionsCopy2, error)
	FirstOrCreate() (*model.TransactionsCopy2, error)
	FindByPage(offset int, limit int) (result []*model.TransactionsCopy2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionsCopy2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionsCopy2Do) Debug() ITransactionsCopy2Do {
	return t.withDO(t.DO.Debug())
}

func (t transactionsCopy2Do) WithContext(ctx context.Context) ITransactionsCopy2Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionsCopy2Do) ReadDB() ITransactionsCopy2Do {
	return t.Clauses(dbresolver.Read)
}

func (t transactionsCopy2Do) WriteDB() ITransactionsCopy2Do {
	return t.Clauses(dbresolver.Write)
}

func (t transactionsCopy2Do) Session(config *gorm.Session) ITransactionsCopy2Do {
	return t.withDO(t.DO.Session(config))
}

func (t transactionsCopy2Do) Clauses(conds ...clause.Expression) ITransactionsCopy2Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionsCopy2Do) Returning(value interface{}, columns ...string) ITransactionsCopy2Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionsCopy2Do) Not(conds ...gen.Condition) ITransactionsCopy2Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionsCopy2Do) Or(conds ...gen.Condition) ITransactionsCopy2Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionsCopy2Do) Select(conds ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionsCopy2Do) Where(conds ...gen.Condition) ITransactionsCopy2Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionsCopy2Do) Order(conds ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionsCopy2Do) Distinct(cols ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionsCopy2Do) Omit(cols ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionsCopy2Do) Join(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionsCopy2Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionsCopy2Do) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionsCopy2Do) Group(cols ...field.Expr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionsCopy2Do) Having(conds ...gen.Condition) ITransactionsCopy2Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionsCopy2Do) Limit(limit int) ITransactionsCopy2Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionsCopy2Do) Offset(offset int) ITransactionsCopy2Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionsCopy2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionsCopy2Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionsCopy2Do) Unscoped() ITransactionsCopy2Do {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionsCopy2Do) Create(values ...*model.TransactionsCopy2) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionsCopy2Do) CreateInBatches(values []*model.TransactionsCopy2, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionsCopy2Do) Save(values ...*model.TransactionsCopy2) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionsCopy2Do) First() (*model.TransactionsCopy2, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy2), nil
	}
}

func (t transactionsCopy2Do) Take() (*model.TransactionsCopy2, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy2), nil
	}
}

func (t transactionsCopy2Do) Last() (*model.TransactionsCopy2, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy2), nil
	}
}

func (t transactionsCopy2Do) Find() ([]*model.TransactionsCopy2, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionsCopy2), err
}

func (t transactionsCopy2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionsCopy2, err error) {
	buf := make([]*model.TransactionsCopy2, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionsCopy2Do) FindInBatches(result *[]*model.TransactionsCopy2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionsCopy2Do) Attrs(attrs ...field.AssignExpr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionsCopy2Do) Assign(attrs ...field.AssignExpr) ITransactionsCopy2Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionsCopy2Do) Joins(fields ...field.RelationField) ITransactionsCopy2Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionsCopy2Do) Preload(fields ...field.RelationField) ITransactionsCopy2Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionsCopy2Do) FirstOrInit() (*model.TransactionsCopy2, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy2), nil
	}
}

func (t transactionsCopy2Do) FirstOrCreate() (*model.TransactionsCopy2, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy2), nil
	}
}

func (t transactionsCopy2Do) FindByPage(offset int, limit int) (result []*model.TransactionsCopy2, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionsCopy2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionsCopy2Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionsCopy2Do) Delete(models ...*model.TransactionsCopy2) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionsCopy2Do) withDO(do gen.Dao) *transactionsCopy2Do {
	t.DO = *do.(*gen.DO)
	return t
}
