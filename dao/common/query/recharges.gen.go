// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRecharge(db *gorm.DB, opts ...gen.DOOption) recharge {
	_recharge := recharge{}

	_recharge.rechargeDo.UseDB(db, opts...)
	_recharge.rechargeDo.UseModel(&model.Recharge{})

	tableName := _recharge.rechargeDo.TableName()
	_recharge.ALL = field.NewAsterisk(tableName)
	_recharge.ID = field.NewInt64(tableName, "id")
	_recharge.BillNo = field.NewString(tableName, "bill_no")
	_recharge.ThirdBillNo = field.NewString(tableName, "third_bill_no")
	_recharge.UserID = field.NewInt64(tableName, "user_id")
	_recharge.Username = field.NewString(tableName, "username")
	_recharge.ParentID = field.NewInt64(tableName, "parent_id")
	_recharge.ParentName = field.NewString(tableName, "parent_name")
	_recharge.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_recharge.IsTester = field.NewInt64(tableName, "is_tester")
	_recharge.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_recharge.Amount = field.NewFloat64(tableName, "amount")
	_recharge.Money = field.NewFloat64(tableName, "money")
	_recharge.GiftMoney = field.NewFloat64(tableName, "gift_money")
	_recharge.PayID = field.NewInt64(tableName, "pay_id")
	_recharge.CardID = field.NewString(tableName, "card_id")
	_recharge.PayName = field.NewString(tableName, "pay_name")
	_recharge.PayMerchantNo = field.NewString(tableName, "pay_merchant_no")
	_recharge.PayBoRemark = field.NewString(tableName, "pay_bo_remark")
	_recharge.RealName = field.NewString(tableName, "real_name")
	_recharge.PayMode = field.NewInt64(tableName, "pay_mode")
	_recharge.UserCard = field.NewString(tableName, "user_card")
	_recharge.UserCardName = field.NewString(tableName, "user_card_name")
	_recharge.ExRate = field.NewFloat64(tableName, "ex_rate")
	_recharge.ExMoney = field.NewFloat64(tableName, "ex_money")
	_recharge.Status = field.NewInt64(tableName, "status")
	_recharge.Plat = field.NewString(tableName, "plat")
	_recharge.PayType = field.NewString(tableName, "pay_type")
	_recharge.BankType = field.NewInt64(tableName, "bank_type")
	_recharge.Description = field.NewString(tableName, "description")
	_recharge.CheckTime = field.NewField(tableName, "check_time")
	_recharge.AdminID = field.NewInt64(tableName, "admin_id")
	_recharge.AdminName = field.NewString(tableName, "admin_name")
	_recharge.IP = field.NewString(tableName, "ip")
	_recharge.PayLevel = field.NewString(tableName, "pay_level")
	_recharge.OtherFee = field.NewFloat64(tableName, "other_fee")
	_recharge.HandlingFee = field.NewFloat64(tableName, "handling_fee")
	_recharge.BetAmountRate = field.NewInt64(tableName, "bet_amount_rate")
	_recharge.Remark = field.NewString(tableName, "remark")
	_recharge.RechargeCount = field.NewInt64(tableName, "recharge_count")
	_recharge.IsManual = field.NewInt64(tableName, "is_manual")
	_recharge.FromAddress = field.NewString(tableName, "from_address")
	_recharge.CreatedAt = field.NewField(tableName, "created_at")
	_recharge.UpdatedAt = field.NewField(tableName, "updated_at")
	_recharge.FinishedTime = field.NewField(tableName, "finished_time")
	_recharge.VerifyPeriod = field.NewInt64(tableName, "verify_period")
	_recharge.IsFast = field.NewInt64(tableName, "is_fast")
	_recharge.PayerPicURL = field.NewString(tableName, "payer_pic_url")
	_recharge.PayerVideoURL = field.NewString(tableName, "payer_video_url")
	_recharge.BankStatementImgPath = field.NewString(tableName, "bank_statement_img_path")
	_recharge.PayeeName = field.NewString(tableName, "payee_name")
	_recharge.PayeeBank = field.NewString(tableName, "payee_bank")
	_recharge.PayeeBankNo = field.NewString(tableName, "payee_bank_no")
	_recharge.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_recharge.MerchantNum = field.NewString(tableName, "merchant_num")
	_recharge.ThirdTrackNum = field.NewString(tableName, "third_track_num")
	_recharge.FundsType = field.NewInt64(tableName, "funds_type")

	_recharge.fillFieldMap()

	return _recharge
}

// recharge 支付订单表
type recharge struct {
	rechargeDo rechargeDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BillNo               field.String  // 平台订单号
	ThirdBillNo          field.String  // 第三方平台订单号
	UserID               field.Int64   // 用户id
	Username             field.String  // 用户名
	ParentID             field.Int64   // 用户id
	ParentName           field.String  // 直属上级
	ForefatherIds        field.String  // 用户的所有上级以逗号分隔
	IsTester             field.Int64   // 0:非测试;1:测试账号
	BeforeMoney          field.Float64 // 交易前金额
	Amount               field.Float64 // 交易金额
	Money                field.Float64 // 交易后金额
	GiftMoney            field.Float64 // 额外赠送彩金
	PayID                field.Int64   // 如果是第三方就是online的id,否则就是线下支付offline
	CardID               field.String  // 支付卡号或者虚拟货币地址
	PayName              field.String  // 支付类型银行卡或者虚拟货币名称
	PayMerchantNo        field.String  // 支付商户编号
	PayBoRemark          field.String  // 支付通道备注(bo_remark字段)
	RealName             field.String  // 用户充值方式真实姓名
	PayMode              field.Int64   // 0线下;1:线上
	UserCard             field.String  // 用户充值卡号
	UserCardName         field.String  // 用户的存款方式
	ExRate               field.Float64 // 优惠汇率
	ExMoney              field.Float64 // 转换金额
	Status               field.Int64   // 状态：0未处理（默认）,1:审核中,2充值成功,3:失败,4:已撤销,5:已拒绝
	Plat                 field.String  // 终端;1:手机端;4:pc
	PayType              field.String  // pay_types表中的en_name
	BankType             field.Int64   // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	Description          field.String  // 附言
	CheckTime            field.Field   // 审核时间
	AdminID              field.Int64   // 操作人id
	AdminName            field.String  // 操作人
	IP                   field.String  // 支付ip
	PayLevel             field.String  // 支付类别 多个以逗号分隔
	OtherFee             field.Float64 // 充值优惠
	HandlingFee          field.Float64 // 手续费
	BetAmountRate        field.Int64   // 打码量倍数
	Remark               field.String  // 备注
	RechargeCount        field.Int64   // 本次成功次数
	IsManual             field.Int64   // 补单 是否手动入款0:否；1：是
	FromAddress          field.String  // 付款来源地址
	CreatedAt            field.Field
	UpdatedAt            field.Field
	FinishedTime         field.Field  // 订单完成时间
	VerifyPeriod         field.Int64  // 审核时间(通过时间-提单时间, 单位:秒)
	IsFast               field.Int64  // 是否极速单 0:否 1:是
	PayerPicURL          field.String // 转账截图
	PayerVideoURL        field.String // 转账视频凭证地址
	BankStatementImgPath field.String // 资金流水图
	PayeeName            field.String // 收款方姓名
	PayeeBank            field.String // 收款方银行
	PayeeBankNo          field.String // 收款方银行卡号
	ThirdMerchantName    field.String // 三方商户名称
	MerchantNum          field.String // 商户编号
	ThirdTrackNum        field.String // 三方单号
	FundsType            field.Int64  // 资金类型：1 rmb，2 usdt 3钱包

	fieldMap map[string]field.Expr
}

func (r recharge) Table(newTableName string) *recharge {
	r.rechargeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recharge) As(alias string) *recharge {
	r.rechargeDo.DO = *(r.rechargeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recharge) updateTableName(table string) *recharge {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.BillNo = field.NewString(table, "bill_no")
	r.ThirdBillNo = field.NewString(table, "third_bill_no")
	r.UserID = field.NewInt64(table, "user_id")
	r.Username = field.NewString(table, "username")
	r.ParentID = field.NewInt64(table, "parent_id")
	r.ParentName = field.NewString(table, "parent_name")
	r.ForefatherIds = field.NewString(table, "forefather_ids")
	r.IsTester = field.NewInt64(table, "is_tester")
	r.BeforeMoney = field.NewFloat64(table, "before_money")
	r.Amount = field.NewFloat64(table, "amount")
	r.Money = field.NewFloat64(table, "money")
	r.GiftMoney = field.NewFloat64(table, "gift_money")
	r.PayID = field.NewInt64(table, "pay_id")
	r.CardID = field.NewString(table, "card_id")
	r.PayName = field.NewString(table, "pay_name")
	r.PayMerchantNo = field.NewString(table, "pay_merchant_no")
	r.PayBoRemark = field.NewString(table, "pay_bo_remark")
	r.RealName = field.NewString(table, "real_name")
	r.PayMode = field.NewInt64(table, "pay_mode")
	r.UserCard = field.NewString(table, "user_card")
	r.UserCardName = field.NewString(table, "user_card_name")
	r.ExRate = field.NewFloat64(table, "ex_rate")
	r.ExMoney = field.NewFloat64(table, "ex_money")
	r.Status = field.NewInt64(table, "status")
	r.Plat = field.NewString(table, "plat")
	r.PayType = field.NewString(table, "pay_type")
	r.BankType = field.NewInt64(table, "bank_type")
	r.Description = field.NewString(table, "description")
	r.CheckTime = field.NewField(table, "check_time")
	r.AdminID = field.NewInt64(table, "admin_id")
	r.AdminName = field.NewString(table, "admin_name")
	r.IP = field.NewString(table, "ip")
	r.PayLevel = field.NewString(table, "pay_level")
	r.OtherFee = field.NewFloat64(table, "other_fee")
	r.HandlingFee = field.NewFloat64(table, "handling_fee")
	r.BetAmountRate = field.NewInt64(table, "bet_amount_rate")
	r.Remark = field.NewString(table, "remark")
	r.RechargeCount = field.NewInt64(table, "recharge_count")
	r.IsManual = field.NewInt64(table, "is_manual")
	r.FromAddress = field.NewString(table, "from_address")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.FinishedTime = field.NewField(table, "finished_time")
	r.VerifyPeriod = field.NewInt64(table, "verify_period")
	r.IsFast = field.NewInt64(table, "is_fast")
	r.PayerPicURL = field.NewString(table, "payer_pic_url")
	r.PayerVideoURL = field.NewString(table, "payer_video_url")
	r.BankStatementImgPath = field.NewString(table, "bank_statement_img_path")
	r.PayeeName = field.NewString(table, "payee_name")
	r.PayeeBank = field.NewString(table, "payee_bank")
	r.PayeeBankNo = field.NewString(table, "payee_bank_no")
	r.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	r.MerchantNum = field.NewString(table, "merchant_num")
	r.ThirdTrackNum = field.NewString(table, "third_track_num")
	r.FundsType = field.NewInt64(table, "funds_type")

	r.fillFieldMap()

	return r
}

func (r *recharge) WithContext(ctx context.Context) IRechargeDo { return r.rechargeDo.WithContext(ctx) }

func (r recharge) TableName() string { return r.rechargeDo.TableName() }

func (r recharge) Alias() string { return r.rechargeDo.Alias() }

func (r recharge) Columns(cols ...field.Expr) gen.Columns { return r.rechargeDo.Columns(cols...) }

func (r *recharge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recharge) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 56)
	r.fieldMap["id"] = r.ID
	r.fieldMap["bill_no"] = r.BillNo
	r.fieldMap["third_bill_no"] = r.ThirdBillNo
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["username"] = r.Username
	r.fieldMap["parent_id"] = r.ParentID
	r.fieldMap["parent_name"] = r.ParentName
	r.fieldMap["forefather_ids"] = r.ForefatherIds
	r.fieldMap["is_tester"] = r.IsTester
	r.fieldMap["before_money"] = r.BeforeMoney
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["money"] = r.Money
	r.fieldMap["gift_money"] = r.GiftMoney
	r.fieldMap["pay_id"] = r.PayID
	r.fieldMap["card_id"] = r.CardID
	r.fieldMap["pay_name"] = r.PayName
	r.fieldMap["pay_merchant_no"] = r.PayMerchantNo
	r.fieldMap["pay_bo_remark"] = r.PayBoRemark
	r.fieldMap["real_name"] = r.RealName
	r.fieldMap["pay_mode"] = r.PayMode
	r.fieldMap["user_card"] = r.UserCard
	r.fieldMap["user_card_name"] = r.UserCardName
	r.fieldMap["ex_rate"] = r.ExRate
	r.fieldMap["ex_money"] = r.ExMoney
	r.fieldMap["status"] = r.Status
	r.fieldMap["plat"] = r.Plat
	r.fieldMap["pay_type"] = r.PayType
	r.fieldMap["bank_type"] = r.BankType
	r.fieldMap["description"] = r.Description
	r.fieldMap["check_time"] = r.CheckTime
	r.fieldMap["admin_id"] = r.AdminID
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["ip"] = r.IP
	r.fieldMap["pay_level"] = r.PayLevel
	r.fieldMap["other_fee"] = r.OtherFee
	r.fieldMap["handling_fee"] = r.HandlingFee
	r.fieldMap["bet_amount_rate"] = r.BetAmountRate
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["recharge_count"] = r.RechargeCount
	r.fieldMap["is_manual"] = r.IsManual
	r.fieldMap["from_address"] = r.FromAddress
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["finished_time"] = r.FinishedTime
	r.fieldMap["verify_period"] = r.VerifyPeriod
	r.fieldMap["is_fast"] = r.IsFast
	r.fieldMap["payer_pic_url"] = r.PayerPicURL
	r.fieldMap["payer_video_url"] = r.PayerVideoURL
	r.fieldMap["bank_statement_img_path"] = r.BankStatementImgPath
	r.fieldMap["payee_name"] = r.PayeeName
	r.fieldMap["payee_bank"] = r.PayeeBank
	r.fieldMap["payee_bank_no"] = r.PayeeBankNo
	r.fieldMap["third_merchant_name"] = r.ThirdMerchantName
	r.fieldMap["merchant_num"] = r.MerchantNum
	r.fieldMap["third_track_num"] = r.ThirdTrackNum
	r.fieldMap["funds_type"] = r.FundsType
}

func (r recharge) clone(db *gorm.DB) recharge {
	r.rechargeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recharge) replaceDB(db *gorm.DB) recharge {
	r.rechargeDo.ReplaceDB(db)
	return r
}

type rechargeDo struct{ gen.DO }

type IRechargeDo interface {
	gen.SubQuery
	Debug() IRechargeDo
	WithContext(ctx context.Context) IRechargeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargeDo
	WriteDB() IRechargeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargeDo
	Not(conds ...gen.Condition) IRechargeDo
	Or(conds ...gen.Condition) IRechargeDo
	Select(conds ...field.Expr) IRechargeDo
	Where(conds ...gen.Condition) IRechargeDo
	Order(conds ...field.Expr) IRechargeDo
	Distinct(cols ...field.Expr) IRechargeDo
	Omit(cols ...field.Expr) IRechargeDo
	Join(table schema.Tabler, on ...field.Expr) IRechargeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargeDo
	Group(cols ...field.Expr) IRechargeDo
	Having(conds ...gen.Condition) IRechargeDo
	Limit(limit int) IRechargeDo
	Offset(offset int) IRechargeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeDo
	Unscoped() IRechargeDo
	Create(values ...*model.Recharge) error
	CreateInBatches(values []*model.Recharge, batchSize int) error
	Save(values ...*model.Recharge) error
	First() (*model.Recharge, error)
	Take() (*model.Recharge, error)
	Last() (*model.Recharge, error)
	Find() ([]*model.Recharge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Recharge, err error)
	FindInBatches(result *[]*model.Recharge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Recharge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargeDo
	Assign(attrs ...field.AssignExpr) IRechargeDo
	Joins(fields ...field.RelationField) IRechargeDo
	Preload(fields ...field.RelationField) IRechargeDo
	FirstOrInit() (*model.Recharge, error)
	FirstOrCreate() (*model.Recharge, error)
	FindByPage(offset int, limit int) (result []*model.Recharge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargeDo) Debug() IRechargeDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargeDo) WithContext(ctx context.Context) IRechargeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargeDo) ReadDB() IRechargeDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargeDo) WriteDB() IRechargeDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargeDo) Session(config *gorm.Session) IRechargeDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargeDo) Clauses(conds ...clause.Expression) IRechargeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargeDo) Returning(value interface{}, columns ...string) IRechargeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargeDo) Not(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargeDo) Or(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargeDo) Select(conds ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargeDo) Where(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargeDo) Order(conds ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargeDo) Distinct(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargeDo) Omit(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargeDo) Join(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargeDo) Group(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargeDo) Having(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargeDo) Limit(limit int) IRechargeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargeDo) Offset(offset int) IRechargeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargeDo) Unscoped() IRechargeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargeDo) Create(values ...*model.Recharge) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargeDo) CreateInBatches(values []*model.Recharge, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargeDo) Save(values ...*model.Recharge) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargeDo) First() (*model.Recharge, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Take() (*model.Recharge, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Last() (*model.Recharge, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Find() ([]*model.Recharge, error) {
	result, err := r.DO.Find()
	return result.([]*model.Recharge), err
}

func (r rechargeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Recharge, err error) {
	buf := make([]*model.Recharge, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargeDo) FindInBatches(result *[]*model.Recharge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargeDo) Attrs(attrs ...field.AssignExpr) IRechargeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargeDo) Assign(attrs ...field.AssignExpr) IRechargeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargeDo) Joins(fields ...field.RelationField) IRechargeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargeDo) Preload(fields ...field.RelationField) IRechargeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargeDo) FirstOrInit() (*model.Recharge, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) FirstOrCreate() (*model.Recharge, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) FindByPage(offset int, limit int) (result []*model.Recharge, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargeDo) Delete(models ...*model.Recharge) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargeDo) withDO(do gen.Dao) *rechargeDo {
	r.DO = *do.(*gen.DO)
	return r
}
