// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAllowanceAssistanceConfig(db *gorm.DB, opts ...gen.DOOption) allowanceAssistanceConfig {
	_allowanceAssistanceConfig := allowanceAssistanceConfig{}

	_allowanceAssistanceConfig.allowanceAssistanceConfigDo.UseDB(db, opts...)
	_allowanceAssistanceConfig.allowanceAssistanceConfigDo.UseModel(&model.AllowanceAssistanceConfig{})

	tableName := _allowanceAssistanceConfig.allowanceAssistanceConfigDo.TableName()
	_allowanceAssistanceConfig.ALL = field.NewAsterisk(tableName)
	_allowanceAssistanceConfig.ID = field.NewInt64(tableName, "id")
	_allowanceAssistanceConfig.Type = field.NewInt64(tableName, "type")
	_allowanceAssistanceConfig.AllowanceValueVip = field.NewString(tableName, "allowance_value_vip")
	_allowanceAssistanceConfig.AllowanceValuePay = field.NewString(tableName, "allowance_value_pay")
	_allowanceAssistanceConfig.AllowanceCircle = field.NewInt64(tableName, "allowance_circle")
	_allowanceAssistanceConfig.AssistanceCircle = field.NewInt64(tableName, "assistance_circle")
	_allowanceAssistanceConfig.Rule = field.NewString(tableName, "rule")
	_allowanceAssistanceConfig.InviteLinkPc = field.NewString(tableName, "invite_link_pc")
	_allowanceAssistanceConfig.InviteLinkMobile = field.NewString(tableName, "invite_link_mobile")
	_allowanceAssistanceConfig.AllowanceCoverPc = field.NewString(tableName, "allowance_cover_pc")
	_allowanceAssistanceConfig.AllowanceCoverMobile = field.NewString(tableName, "allowance_cover_mobile")
	_allowanceAssistanceConfig.AllowancePosterPc = field.NewString(tableName, "allowance_poster_pc")
	_allowanceAssistanceConfig.AllowancePosterMobile = field.NewString(tableName, "allowance_poster_mobile")
	_allowanceAssistanceConfig.AllowanceAssistancePosterPc = field.NewString(tableName, "allowance_assistance_poster_pc")
	_allowanceAssistanceConfig.AllowanceAssistancePosterMobile = field.NewString(tableName, "allowance_assistance_poster_mobile")
	_allowanceAssistanceConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_allowanceAssistanceConfig.CreatedAt = field.NewField(tableName, "created_at")
	_allowanceAssistanceConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_allowanceAssistanceConfig.fillFieldMap()

	return _allowanceAssistanceConfig
}

// allowanceAssistanceConfig 助力津贴配置表
type allowanceAssistanceConfig struct {
	allowanceAssistanceConfigDo allowanceAssistanceConfigDo

	ALL                             field.Asterisk
	ID                              field.Int64 // 自增id
	Type                            field.Int64 // 0:支付层级, 1:vip层级
	AllowanceValueVip               field.String
	AllowanceValuePay               field.String // 具体津贴值[{'id':10, 'name':'新会员', 'amount':155}, {'id':15, 'name':'老会员', 'amount':200}]
	AllowanceCircle                 field.Int64  // 津贴重置周期(单位:分钟)
	AssistanceCircle                field.Int64  // 助力限制周期(单位:天)
	Rule                            field.String // 津贴活动规则
	InviteLinkPc                    field.String // 电脑端邀请链接
	InviteLinkMobile                field.String // 移动端邀请链接
	AllowanceCoverPc                field.String // 电脑端津贴封面图
	AllowanceCoverMobile            field.String // 移动端津贴封面图
	AllowancePosterPc               field.String // 电脑端津贴海报图
	AllowancePosterMobile           field.String // 移动端津贴海报图
	AllowanceAssistancePosterPc     field.String // 电脑端津贴助力海报图
	AllowanceAssistancePosterMobile field.String // 移动端津贴助力海报图
	IsOpen                          field.Int64  // 0:关闭, 1:开启
	CreatedAt                       field.Field  // 创建时间
	UpdatedAt                       field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (a allowanceAssistanceConfig) Table(newTableName string) *allowanceAssistanceConfig {
	a.allowanceAssistanceConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allowanceAssistanceConfig) As(alias string) *allowanceAssistanceConfig {
	a.allowanceAssistanceConfigDo.DO = *(a.allowanceAssistanceConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allowanceAssistanceConfig) updateTableName(table string) *allowanceAssistanceConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewInt64(table, "type")
	a.AllowanceValueVip = field.NewString(table, "allowance_value_vip")
	a.AllowanceValuePay = field.NewString(table, "allowance_value_pay")
	a.AllowanceCircle = field.NewInt64(table, "allowance_circle")
	a.AssistanceCircle = field.NewInt64(table, "assistance_circle")
	a.Rule = field.NewString(table, "rule")
	a.InviteLinkPc = field.NewString(table, "invite_link_pc")
	a.InviteLinkMobile = field.NewString(table, "invite_link_mobile")
	a.AllowanceCoverPc = field.NewString(table, "allowance_cover_pc")
	a.AllowanceCoverMobile = field.NewString(table, "allowance_cover_mobile")
	a.AllowancePosterPc = field.NewString(table, "allowance_poster_pc")
	a.AllowancePosterMobile = field.NewString(table, "allowance_poster_mobile")
	a.AllowanceAssistancePosterPc = field.NewString(table, "allowance_assistance_poster_pc")
	a.AllowanceAssistancePosterMobile = field.NewString(table, "allowance_assistance_poster_mobile")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *allowanceAssistanceConfig) WithContext(ctx context.Context) IAllowanceAssistanceConfigDo {
	return a.allowanceAssistanceConfigDo.WithContext(ctx)
}

func (a allowanceAssistanceConfig) TableName() string {
	return a.allowanceAssistanceConfigDo.TableName()
}

func (a allowanceAssistanceConfig) Alias() string { return a.allowanceAssistanceConfigDo.Alias() }

func (a allowanceAssistanceConfig) Columns(cols ...field.Expr) gen.Columns {
	return a.allowanceAssistanceConfigDo.Columns(cols...)
}

func (a *allowanceAssistanceConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allowanceAssistanceConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["allowance_value_vip"] = a.AllowanceValueVip
	a.fieldMap["allowance_value_pay"] = a.AllowanceValuePay
	a.fieldMap["allowance_circle"] = a.AllowanceCircle
	a.fieldMap["assistance_circle"] = a.AssistanceCircle
	a.fieldMap["rule"] = a.Rule
	a.fieldMap["invite_link_pc"] = a.InviteLinkPc
	a.fieldMap["invite_link_mobile"] = a.InviteLinkMobile
	a.fieldMap["allowance_cover_pc"] = a.AllowanceCoverPc
	a.fieldMap["allowance_cover_mobile"] = a.AllowanceCoverMobile
	a.fieldMap["allowance_poster_pc"] = a.AllowancePosterPc
	a.fieldMap["allowance_poster_mobile"] = a.AllowancePosterMobile
	a.fieldMap["allowance_assistance_poster_pc"] = a.AllowanceAssistancePosterPc
	a.fieldMap["allowance_assistance_poster_mobile"] = a.AllowanceAssistancePosterMobile
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a allowanceAssistanceConfig) clone(db *gorm.DB) allowanceAssistanceConfig {
	a.allowanceAssistanceConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allowanceAssistanceConfig) replaceDB(db *gorm.DB) allowanceAssistanceConfig {
	a.allowanceAssistanceConfigDo.ReplaceDB(db)
	return a
}

type allowanceAssistanceConfigDo struct{ gen.DO }

type IAllowanceAssistanceConfigDo interface {
	gen.SubQuery
	Debug() IAllowanceAssistanceConfigDo
	WithContext(ctx context.Context) IAllowanceAssistanceConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllowanceAssistanceConfigDo
	WriteDB() IAllowanceAssistanceConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllowanceAssistanceConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllowanceAssistanceConfigDo
	Not(conds ...gen.Condition) IAllowanceAssistanceConfigDo
	Or(conds ...gen.Condition) IAllowanceAssistanceConfigDo
	Select(conds ...field.Expr) IAllowanceAssistanceConfigDo
	Where(conds ...gen.Condition) IAllowanceAssistanceConfigDo
	Order(conds ...field.Expr) IAllowanceAssistanceConfigDo
	Distinct(cols ...field.Expr) IAllowanceAssistanceConfigDo
	Omit(cols ...field.Expr) IAllowanceAssistanceConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo
	Group(cols ...field.Expr) IAllowanceAssistanceConfigDo
	Having(conds ...gen.Condition) IAllowanceAssistanceConfigDo
	Limit(limit int) IAllowanceAssistanceConfigDo
	Offset(offset int) IAllowanceAssistanceConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceConfigDo
	Unscoped() IAllowanceAssistanceConfigDo
	Create(values ...*model.AllowanceAssistanceConfig) error
	CreateInBatches(values []*model.AllowanceAssistanceConfig, batchSize int) error
	Save(values ...*model.AllowanceAssistanceConfig) error
	First() (*model.AllowanceAssistanceConfig, error)
	Take() (*model.AllowanceAssistanceConfig, error)
	Last() (*model.AllowanceAssistanceConfig, error)
	Find() ([]*model.AllowanceAssistanceConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceConfig, err error)
	FindInBatches(result *[]*model.AllowanceAssistanceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllowanceAssistanceConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceConfigDo
	Assign(attrs ...field.AssignExpr) IAllowanceAssistanceConfigDo
	Joins(fields ...field.RelationField) IAllowanceAssistanceConfigDo
	Preload(fields ...field.RelationField) IAllowanceAssistanceConfigDo
	FirstOrInit() (*model.AllowanceAssistanceConfig, error)
	FirstOrCreate() (*model.AllowanceAssistanceConfig, error)
	FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllowanceAssistanceConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allowanceAssistanceConfigDo) Debug() IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a allowanceAssistanceConfigDo) WithContext(ctx context.Context) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allowanceAssistanceConfigDo) ReadDB() IAllowanceAssistanceConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a allowanceAssistanceConfigDo) WriteDB() IAllowanceAssistanceConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a allowanceAssistanceConfigDo) Session(config *gorm.Session) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a allowanceAssistanceConfigDo) Clauses(conds ...clause.Expression) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allowanceAssistanceConfigDo) Returning(value interface{}, columns ...string) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allowanceAssistanceConfigDo) Not(conds ...gen.Condition) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allowanceAssistanceConfigDo) Or(conds ...gen.Condition) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allowanceAssistanceConfigDo) Select(conds ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allowanceAssistanceConfigDo) Where(conds ...gen.Condition) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allowanceAssistanceConfigDo) Order(conds ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allowanceAssistanceConfigDo) Distinct(cols ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allowanceAssistanceConfigDo) Omit(cols ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allowanceAssistanceConfigDo) Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allowanceAssistanceConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allowanceAssistanceConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allowanceAssistanceConfigDo) Group(cols ...field.Expr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allowanceAssistanceConfigDo) Having(conds ...gen.Condition) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allowanceAssistanceConfigDo) Limit(limit int) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allowanceAssistanceConfigDo) Offset(offset int) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allowanceAssistanceConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allowanceAssistanceConfigDo) Unscoped() IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allowanceAssistanceConfigDo) Create(values ...*model.AllowanceAssistanceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allowanceAssistanceConfigDo) CreateInBatches(values []*model.AllowanceAssistanceConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allowanceAssistanceConfigDo) Save(values ...*model.AllowanceAssistanceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allowanceAssistanceConfigDo) First() (*model.AllowanceAssistanceConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceConfig), nil
	}
}

func (a allowanceAssistanceConfigDo) Take() (*model.AllowanceAssistanceConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceConfig), nil
	}
}

func (a allowanceAssistanceConfigDo) Last() (*model.AllowanceAssistanceConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceConfig), nil
	}
}

func (a allowanceAssistanceConfigDo) Find() ([]*model.AllowanceAssistanceConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllowanceAssistanceConfig), err
}

func (a allowanceAssistanceConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceConfig, err error) {
	buf := make([]*model.AllowanceAssistanceConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allowanceAssistanceConfigDo) FindInBatches(result *[]*model.AllowanceAssistanceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allowanceAssistanceConfigDo) Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allowanceAssistanceConfigDo) Assign(attrs ...field.AssignExpr) IAllowanceAssistanceConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allowanceAssistanceConfigDo) Joins(fields ...field.RelationField) IAllowanceAssistanceConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allowanceAssistanceConfigDo) Preload(fields ...field.RelationField) IAllowanceAssistanceConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allowanceAssistanceConfigDo) FirstOrInit() (*model.AllowanceAssistanceConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceConfig), nil
	}
}

func (a allowanceAssistanceConfigDo) FirstOrCreate() (*model.AllowanceAssistanceConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceConfig), nil
	}
}

func (a allowanceAssistanceConfigDo) FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allowanceAssistanceConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allowanceAssistanceConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allowanceAssistanceConfigDo) Delete(models ...*model.AllowanceAssistanceConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allowanceAssistanceConfigDo) withDO(do gen.Dao) *allowanceAssistanceConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
