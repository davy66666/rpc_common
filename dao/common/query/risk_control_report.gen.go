// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskControlReport(db *gorm.DB, opts ...gen.DOOption) riskControlReport {
	_riskControlReport := riskControlReport{}

	_riskControlReport.riskControlReportDo.UseDB(db, opts...)
	_riskControlReport.riskControlReportDo.UseModel(&model.RiskControlReport{})

	tableName := _riskControlReport.riskControlReportDo.TableName()
	_riskControlReport.ALL = field.NewAsterisk(tableName)
	_riskControlReport.ID = field.NewInt64(tableName, "id")
	_riskControlReport.UserID = field.NewInt64(tableName, "user_id")
	_riskControlReport.Username = field.NewString(tableName, "username")
	_riskControlReport.RelatedType = field.NewInt64(tableName, "related_type")
	_riskControlReport.RelatedID = field.NewInt64(tableName, "related_id")
	_riskControlReport.SetID = field.NewInt64(tableName, "set_id")
	_riskControlReport.RuleID = field.NewInt64(tableName, "rule_id")
	_riskControlReport.RuleParams = field.NewString(tableName, "rule_params")
	_riskControlReport.RuleResult = field.NewString(tableName, "rule_result")
	_riskControlReport.PayLevelID = field.NewInt64(tableName, "pay_level_id")
	_riskControlReport.SetName = field.NewString(tableName, "set_name")
	_riskControlReport.RuleName = field.NewString(tableName, "rule_name")
	_riskControlReport.Result = field.NewInt64(tableName, "result")
	_riskControlReport.CreatedAt = field.NewField(tableName, "created_at")
	_riskControlReport.UpdatedAt = field.NewField(tableName, "updated_at")
	_riskControlReport.TypeID = field.NewInt64(tableName, "type_id")
	_riskControlReport.ChildTypeID = field.NewInt64(tableName, "child_type_id")

	_riskControlReport.fillFieldMap()

	return _riskControlReport
}

// riskControlReport 风控报告
type riskControlReport struct {
	riskControlReportDo riskControlReportDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	UserID      field.Int64  // 会员id
	Username    field.String // 会员账号
	RelatedType field.Int64  // 关联类型 1.优惠 2.备用
	RelatedID   field.Int64  // 关联id
	SetID       field.Int64  // 风控集id
	RuleID      field.Int64  // 规则id
	RuleParams  field.String // 规则设定参数
	RuleResult  field.String // 风控结果数据
	PayLevelID  field.Int64  // 支付层级id
	SetName     field.String // 风控集名称
	RuleName    field.String // 规则名称
	Result      field.Int64  // 风控结果 1 命中 0 未命中
	CreatedAt   field.Field  // 创建时间
	UpdatedAt   field.Field  // 更新时间
	TypeID      field.Int64  // 类型id
	ChildTypeID field.Int64  // 子类型id

	fieldMap map[string]field.Expr
}

func (r riskControlReport) Table(newTableName string) *riskControlReport {
	r.riskControlReportDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskControlReport) As(alias string) *riskControlReport {
	r.riskControlReportDo.DO = *(r.riskControlReportDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskControlReport) updateTableName(table string) *riskControlReport {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Username = field.NewString(table, "username")
	r.RelatedType = field.NewInt64(table, "related_type")
	r.RelatedID = field.NewInt64(table, "related_id")
	r.SetID = field.NewInt64(table, "set_id")
	r.RuleID = field.NewInt64(table, "rule_id")
	r.RuleParams = field.NewString(table, "rule_params")
	r.RuleResult = field.NewString(table, "rule_result")
	r.PayLevelID = field.NewInt64(table, "pay_level_id")
	r.SetName = field.NewString(table, "set_name")
	r.RuleName = field.NewString(table, "rule_name")
	r.Result = field.NewInt64(table, "result")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.TypeID = field.NewInt64(table, "type_id")
	r.ChildTypeID = field.NewInt64(table, "child_type_id")

	r.fillFieldMap()

	return r
}

func (r *riskControlReport) WithContext(ctx context.Context) IRiskControlReportDo {
	return r.riskControlReportDo.WithContext(ctx)
}

func (r riskControlReport) TableName() string { return r.riskControlReportDo.TableName() }

func (r riskControlReport) Alias() string { return r.riskControlReportDo.Alias() }

func (r riskControlReport) Columns(cols ...field.Expr) gen.Columns {
	return r.riskControlReportDo.Columns(cols...)
}

func (r *riskControlReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskControlReport) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 17)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["username"] = r.Username
	r.fieldMap["related_type"] = r.RelatedType
	r.fieldMap["related_id"] = r.RelatedID
	r.fieldMap["set_id"] = r.SetID
	r.fieldMap["rule_id"] = r.RuleID
	r.fieldMap["rule_params"] = r.RuleParams
	r.fieldMap["rule_result"] = r.RuleResult
	r.fieldMap["pay_level_id"] = r.PayLevelID
	r.fieldMap["set_name"] = r.SetName
	r.fieldMap["rule_name"] = r.RuleName
	r.fieldMap["result"] = r.Result
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["type_id"] = r.TypeID
	r.fieldMap["child_type_id"] = r.ChildTypeID
}

func (r riskControlReport) clone(db *gorm.DB) riskControlReport {
	r.riskControlReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskControlReport) replaceDB(db *gorm.DB) riskControlReport {
	r.riskControlReportDo.ReplaceDB(db)
	return r
}

type riskControlReportDo struct{ gen.DO }

type IRiskControlReportDo interface {
	gen.SubQuery
	Debug() IRiskControlReportDo
	WithContext(ctx context.Context) IRiskControlReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskControlReportDo
	WriteDB() IRiskControlReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskControlReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskControlReportDo
	Not(conds ...gen.Condition) IRiskControlReportDo
	Or(conds ...gen.Condition) IRiskControlReportDo
	Select(conds ...field.Expr) IRiskControlReportDo
	Where(conds ...gen.Condition) IRiskControlReportDo
	Order(conds ...field.Expr) IRiskControlReportDo
	Distinct(cols ...field.Expr) IRiskControlReportDo
	Omit(cols ...field.Expr) IRiskControlReportDo
	Join(table schema.Tabler, on ...field.Expr) IRiskControlReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskControlReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskControlReportDo
	Group(cols ...field.Expr) IRiskControlReportDo
	Having(conds ...gen.Condition) IRiskControlReportDo
	Limit(limit int) IRiskControlReportDo
	Offset(offset int) IRiskControlReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskControlReportDo
	Unscoped() IRiskControlReportDo
	Create(values ...*model.RiskControlReport) error
	CreateInBatches(values []*model.RiskControlReport, batchSize int) error
	Save(values ...*model.RiskControlReport) error
	First() (*model.RiskControlReport, error)
	Take() (*model.RiskControlReport, error)
	Last() (*model.RiskControlReport, error)
	Find() ([]*model.RiskControlReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskControlReport, err error)
	FindInBatches(result *[]*model.RiskControlReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskControlReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskControlReportDo
	Assign(attrs ...field.AssignExpr) IRiskControlReportDo
	Joins(fields ...field.RelationField) IRiskControlReportDo
	Preload(fields ...field.RelationField) IRiskControlReportDo
	FirstOrInit() (*model.RiskControlReport, error)
	FirstOrCreate() (*model.RiskControlReport, error)
	FindByPage(offset int, limit int) (result []*model.RiskControlReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskControlReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskControlReportDo) Debug() IRiskControlReportDo {
	return r.withDO(r.DO.Debug())
}

func (r riskControlReportDo) WithContext(ctx context.Context) IRiskControlReportDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskControlReportDo) ReadDB() IRiskControlReportDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskControlReportDo) WriteDB() IRiskControlReportDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskControlReportDo) Session(config *gorm.Session) IRiskControlReportDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskControlReportDo) Clauses(conds ...clause.Expression) IRiskControlReportDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskControlReportDo) Returning(value interface{}, columns ...string) IRiskControlReportDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskControlReportDo) Not(conds ...gen.Condition) IRiskControlReportDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskControlReportDo) Or(conds ...gen.Condition) IRiskControlReportDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskControlReportDo) Select(conds ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskControlReportDo) Where(conds ...gen.Condition) IRiskControlReportDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskControlReportDo) Order(conds ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskControlReportDo) Distinct(cols ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskControlReportDo) Omit(cols ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskControlReportDo) Join(table schema.Tabler, on ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskControlReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskControlReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskControlReportDo) Group(cols ...field.Expr) IRiskControlReportDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskControlReportDo) Having(conds ...gen.Condition) IRiskControlReportDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskControlReportDo) Limit(limit int) IRiskControlReportDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskControlReportDo) Offset(offset int) IRiskControlReportDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskControlReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskControlReportDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskControlReportDo) Unscoped() IRiskControlReportDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskControlReportDo) Create(values ...*model.RiskControlReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskControlReportDo) CreateInBatches(values []*model.RiskControlReport, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskControlReportDo) Save(values ...*model.RiskControlReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskControlReportDo) First() (*model.RiskControlReport, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlReport), nil
	}
}

func (r riskControlReportDo) Take() (*model.RiskControlReport, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlReport), nil
	}
}

func (r riskControlReportDo) Last() (*model.RiskControlReport, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlReport), nil
	}
}

func (r riskControlReportDo) Find() ([]*model.RiskControlReport, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskControlReport), err
}

func (r riskControlReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskControlReport, err error) {
	buf := make([]*model.RiskControlReport, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskControlReportDo) FindInBatches(result *[]*model.RiskControlReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskControlReportDo) Attrs(attrs ...field.AssignExpr) IRiskControlReportDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskControlReportDo) Assign(attrs ...field.AssignExpr) IRiskControlReportDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskControlReportDo) Joins(fields ...field.RelationField) IRiskControlReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskControlReportDo) Preload(fields ...field.RelationField) IRiskControlReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskControlReportDo) FirstOrInit() (*model.RiskControlReport, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlReport), nil
	}
}

func (r riskControlReportDo) FirstOrCreate() (*model.RiskControlReport, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlReport), nil
	}
}

func (r riskControlReportDo) FindByPage(offset int, limit int) (result []*model.RiskControlReport, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskControlReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskControlReportDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskControlReportDo) Delete(models ...*model.RiskControlReport) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskControlReportDo) withDO(do gen.Dao) *riskControlReportDo {
	r.DO = *do.(*gen.DO)
	return r
}
