// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRealNameLog(db *gorm.DB, opts ...gen.DOOption) userRealNameLog {
	_userRealNameLog := userRealNameLog{}

	_userRealNameLog.userRealNameLogDo.UseDB(db, opts...)
	_userRealNameLog.userRealNameLogDo.UseModel(&model.UserRealNameLog{})

	tableName := _userRealNameLog.userRealNameLogDo.TableName()
	_userRealNameLog.ALL = field.NewAsterisk(tableName)
	_userRealNameLog.ID = field.NewInt64(tableName, "id")
	_userRealNameLog.UserID = field.NewInt64(tableName, "user_id")
	_userRealNameLog.Username = field.NewString(tableName, "username")
	_userRealNameLog.ParentID = field.NewInt64(tableName, "parent_id")
	_userRealNameLog.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userRealNameLog.ParentName = field.NewString(tableName, "parent_name")
	_userRealNameLog.UserLevel = field.NewString(tableName, "user_level")
	_userRealNameLog.PayLevel = field.NewString(tableName, "pay_level")
	_userRealNameLog.RegisterTime = field.NewField(tableName, "register_time")
	_userRealNameLog.Plat = field.NewInt64(tableName, "plat")
	_userRealNameLog.FromPage = field.NewInt64(tableName, "from_page")
	_userRealNameLog.IP = field.NewString(tableName, "ip")
	_userRealNameLog.CreatedAt = field.NewField(tableName, "created_at")
	_userRealNameLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRealNameLog.fillFieldMap()

	return _userRealNameLog
}

// userRealNameLog 用户实名记录表
type userRealNameLog struct {
	userRealNameLogDo userRealNameLogDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64  // 会员id
	Username      field.String // 会员名称
	ParentID      field.Int64
	ForefatherIds field.String // 父亲树
	ParentName    field.String
	UserLevel     field.String // 用户层级
	PayLevel      field.String // 支付层级 对应pay_level表
	RegisterTime  field.Field  // 注册时间
	Plat          field.Int64  // 实名平台
	FromPage      field.Int64  // 实名页面位置 1:取款,2:绑定手机
	IP            field.String // ip
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (u userRealNameLog) Table(newTableName string) *userRealNameLog {
	u.userRealNameLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRealNameLog) As(alias string) *userRealNameLog {
	u.userRealNameLogDo.DO = *(u.userRealNameLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRealNameLog) updateTableName(table string) *userRealNameLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.ParentName = field.NewString(table, "parent_name")
	u.UserLevel = field.NewString(table, "user_level")
	u.PayLevel = field.NewString(table, "pay_level")
	u.RegisterTime = field.NewField(table, "register_time")
	u.Plat = field.NewInt64(table, "plat")
	u.FromPage = field.NewInt64(table, "from_page")
	u.IP = field.NewString(table, "ip")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRealNameLog) WithContext(ctx context.Context) IUserRealNameLogDo {
	return u.userRealNameLogDo.WithContext(ctx)
}

func (u userRealNameLog) TableName() string { return u.userRealNameLogDo.TableName() }

func (u userRealNameLog) Alias() string { return u.userRealNameLogDo.Alias() }

func (u userRealNameLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userRealNameLogDo.Columns(cols...)
}

func (u *userRealNameLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRealNameLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["user_level"] = u.UserLevel
	u.fieldMap["pay_level"] = u.PayLevel
	u.fieldMap["register_time"] = u.RegisterTime
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["from_page"] = u.FromPage
	u.fieldMap["ip"] = u.IP
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRealNameLog) clone(db *gorm.DB) userRealNameLog {
	u.userRealNameLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRealNameLog) replaceDB(db *gorm.DB) userRealNameLog {
	u.userRealNameLogDo.ReplaceDB(db)
	return u
}

type userRealNameLogDo struct{ gen.DO }

type IUserRealNameLogDo interface {
	gen.SubQuery
	Debug() IUserRealNameLogDo
	WithContext(ctx context.Context) IUserRealNameLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRealNameLogDo
	WriteDB() IUserRealNameLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRealNameLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRealNameLogDo
	Not(conds ...gen.Condition) IUserRealNameLogDo
	Or(conds ...gen.Condition) IUserRealNameLogDo
	Select(conds ...field.Expr) IUserRealNameLogDo
	Where(conds ...gen.Condition) IUserRealNameLogDo
	Order(conds ...field.Expr) IUserRealNameLogDo
	Distinct(cols ...field.Expr) IUserRealNameLogDo
	Omit(cols ...field.Expr) IUserRealNameLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo
	Group(cols ...field.Expr) IUserRealNameLogDo
	Having(conds ...gen.Condition) IUserRealNameLogDo
	Limit(limit int) IUserRealNameLogDo
	Offset(offset int) IUserRealNameLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRealNameLogDo
	Unscoped() IUserRealNameLogDo
	Create(values ...*model.UserRealNameLog) error
	CreateInBatches(values []*model.UserRealNameLog, batchSize int) error
	Save(values ...*model.UserRealNameLog) error
	First() (*model.UserRealNameLog, error)
	Take() (*model.UserRealNameLog, error)
	Last() (*model.UserRealNameLog, error)
	Find() ([]*model.UserRealNameLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRealNameLog, err error)
	FindInBatches(result *[]*model.UserRealNameLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRealNameLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRealNameLogDo
	Assign(attrs ...field.AssignExpr) IUserRealNameLogDo
	Joins(fields ...field.RelationField) IUserRealNameLogDo
	Preload(fields ...field.RelationField) IUserRealNameLogDo
	FirstOrInit() (*model.UserRealNameLog, error)
	FirstOrCreate() (*model.UserRealNameLog, error)
	FindByPage(offset int, limit int) (result []*model.UserRealNameLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRealNameLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRealNameLogDo) Debug() IUserRealNameLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userRealNameLogDo) WithContext(ctx context.Context) IUserRealNameLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRealNameLogDo) ReadDB() IUserRealNameLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRealNameLogDo) WriteDB() IUserRealNameLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRealNameLogDo) Session(config *gorm.Session) IUserRealNameLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRealNameLogDo) Clauses(conds ...clause.Expression) IUserRealNameLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRealNameLogDo) Returning(value interface{}, columns ...string) IUserRealNameLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRealNameLogDo) Not(conds ...gen.Condition) IUserRealNameLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRealNameLogDo) Or(conds ...gen.Condition) IUserRealNameLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRealNameLogDo) Select(conds ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRealNameLogDo) Where(conds ...gen.Condition) IUserRealNameLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRealNameLogDo) Order(conds ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRealNameLogDo) Distinct(cols ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRealNameLogDo) Omit(cols ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRealNameLogDo) Join(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRealNameLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRealNameLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRealNameLogDo) Group(cols ...field.Expr) IUserRealNameLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRealNameLogDo) Having(conds ...gen.Condition) IUserRealNameLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRealNameLogDo) Limit(limit int) IUserRealNameLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRealNameLogDo) Offset(offset int) IUserRealNameLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRealNameLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRealNameLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRealNameLogDo) Unscoped() IUserRealNameLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRealNameLogDo) Create(values ...*model.UserRealNameLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRealNameLogDo) CreateInBatches(values []*model.UserRealNameLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRealNameLogDo) Save(values ...*model.UserRealNameLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRealNameLogDo) First() (*model.UserRealNameLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRealNameLog), nil
	}
}

func (u userRealNameLogDo) Take() (*model.UserRealNameLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRealNameLog), nil
	}
}

func (u userRealNameLogDo) Last() (*model.UserRealNameLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRealNameLog), nil
	}
}

func (u userRealNameLogDo) Find() ([]*model.UserRealNameLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRealNameLog), err
}

func (u userRealNameLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRealNameLog, err error) {
	buf := make([]*model.UserRealNameLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRealNameLogDo) FindInBatches(result *[]*model.UserRealNameLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRealNameLogDo) Attrs(attrs ...field.AssignExpr) IUserRealNameLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRealNameLogDo) Assign(attrs ...field.AssignExpr) IUserRealNameLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRealNameLogDo) Joins(fields ...field.RelationField) IUserRealNameLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRealNameLogDo) Preload(fields ...field.RelationField) IUserRealNameLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRealNameLogDo) FirstOrInit() (*model.UserRealNameLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRealNameLog), nil
	}
}

func (u userRealNameLogDo) FirstOrCreate() (*model.UserRealNameLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRealNameLog), nil
	}
}

func (u userRealNameLogDo) FindByPage(offset int, limit int) (result []*model.UserRealNameLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRealNameLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRealNameLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRealNameLogDo) Delete(models ...*model.UserRealNameLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRealNameLogDo) withDO(do gen.Dao) *userRealNameLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
