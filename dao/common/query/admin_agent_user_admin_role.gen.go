// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminAgentUserAdminRole(db *gorm.DB, opts ...gen.DOOption) adminAgentUserAdminRole {
	_adminAgentUserAdminRole := adminAgentUserAdminRole{}

	_adminAgentUserAdminRole.adminAgentUserAdminRoleDo.UseDB(db, opts...)
	_adminAgentUserAdminRole.adminAgentUserAdminRoleDo.UseModel(&model.AdminAgentUserAdminRole{})

	tableName := _adminAgentUserAdminRole.adminAgentUserAdminRoleDo.TableName()
	_adminAgentUserAdminRole.ALL = field.NewAsterisk(tableName)
	_adminAgentUserAdminRole.ID = field.NewInt64(tableName, "id")
	_adminAgentUserAdminRole.AdminAgentUserID = field.NewInt64(tableName, "admin_agent_user_id")
	_adminAgentUserAdminRole.AdminAgentRoleID = field.NewInt64(tableName, "admin_agent_role_id")
	_adminAgentUserAdminRole.CreatedAt = field.NewField(tableName, "created_at")
	_adminAgentUserAdminRole.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminAgentUserAdminRole.fillFieldMap()

	return _adminAgentUserAdminRole
}

type adminAgentUserAdminRole struct {
	adminAgentUserAdminRoleDo adminAgentUserAdminRoleDo

	ALL              field.Asterisk
	ID               field.Int64
	AdminAgentUserID field.Int64
	AdminAgentRoleID field.Int64
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (a adminAgentUserAdminRole) Table(newTableName string) *adminAgentUserAdminRole {
	a.adminAgentUserAdminRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminAgentUserAdminRole) As(alias string) *adminAgentUserAdminRole {
	a.adminAgentUserAdminRoleDo.DO = *(a.adminAgentUserAdminRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminAgentUserAdminRole) updateTableName(table string) *adminAgentUserAdminRole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminAgentUserID = field.NewInt64(table, "admin_agent_user_id")
	a.AdminAgentRoleID = field.NewInt64(table, "admin_agent_role_id")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminAgentUserAdminRole) WithContext(ctx context.Context) IAdminAgentUserAdminRoleDo {
	return a.adminAgentUserAdminRoleDo.WithContext(ctx)
}

func (a adminAgentUserAdminRole) TableName() string { return a.adminAgentUserAdminRoleDo.TableName() }

func (a adminAgentUserAdminRole) Alias() string { return a.adminAgentUserAdminRoleDo.Alias() }

func (a adminAgentUserAdminRole) Columns(cols ...field.Expr) gen.Columns {
	return a.adminAgentUserAdminRoleDo.Columns(cols...)
}

func (a *adminAgentUserAdminRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminAgentUserAdminRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_agent_user_id"] = a.AdminAgentUserID
	a.fieldMap["admin_agent_role_id"] = a.AdminAgentRoleID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminAgentUserAdminRole) clone(db *gorm.DB) adminAgentUserAdminRole {
	a.adminAgentUserAdminRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminAgentUserAdminRole) replaceDB(db *gorm.DB) adminAgentUserAdminRole {
	a.adminAgentUserAdminRoleDo.ReplaceDB(db)
	return a
}

type adminAgentUserAdminRoleDo struct{ gen.DO }

type IAdminAgentUserAdminRoleDo interface {
	gen.SubQuery
	Debug() IAdminAgentUserAdminRoleDo
	WithContext(ctx context.Context) IAdminAgentUserAdminRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminAgentUserAdminRoleDo
	WriteDB() IAdminAgentUserAdminRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminAgentUserAdminRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminAgentUserAdminRoleDo
	Not(conds ...gen.Condition) IAdminAgentUserAdminRoleDo
	Or(conds ...gen.Condition) IAdminAgentUserAdminRoleDo
	Select(conds ...field.Expr) IAdminAgentUserAdminRoleDo
	Where(conds ...gen.Condition) IAdminAgentUserAdminRoleDo
	Order(conds ...field.Expr) IAdminAgentUserAdminRoleDo
	Distinct(cols ...field.Expr) IAdminAgentUserAdminRoleDo
	Omit(cols ...field.Expr) IAdminAgentUserAdminRoleDo
	Join(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo
	Group(cols ...field.Expr) IAdminAgentUserAdminRoleDo
	Having(conds ...gen.Condition) IAdminAgentUserAdminRoleDo
	Limit(limit int) IAdminAgentUserAdminRoleDo
	Offset(offset int) IAdminAgentUserAdminRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentUserAdminRoleDo
	Unscoped() IAdminAgentUserAdminRoleDo
	Create(values ...*model.AdminAgentUserAdminRole) error
	CreateInBatches(values []*model.AdminAgentUserAdminRole, batchSize int) error
	Save(values ...*model.AdminAgentUserAdminRole) error
	First() (*model.AdminAgentUserAdminRole, error)
	Take() (*model.AdminAgentUserAdminRole, error)
	Last() (*model.AdminAgentUserAdminRole, error)
	Find() ([]*model.AdminAgentUserAdminRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentUserAdminRole, err error)
	FindInBatches(result *[]*model.AdminAgentUserAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminAgentUserAdminRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminAgentUserAdminRoleDo
	Assign(attrs ...field.AssignExpr) IAdminAgentUserAdminRoleDo
	Joins(fields ...field.RelationField) IAdminAgentUserAdminRoleDo
	Preload(fields ...field.RelationField) IAdminAgentUserAdminRoleDo
	FirstOrInit() (*model.AdminAgentUserAdminRole, error)
	FirstOrCreate() (*model.AdminAgentUserAdminRole, error)
	FindByPage(offset int, limit int) (result []*model.AdminAgentUserAdminRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminAgentUserAdminRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminAgentUserAdminRoleDo) Debug() IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a adminAgentUserAdminRoleDo) WithContext(ctx context.Context) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminAgentUserAdminRoleDo) ReadDB() IAdminAgentUserAdminRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminAgentUserAdminRoleDo) WriteDB() IAdminAgentUserAdminRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminAgentUserAdminRoleDo) Session(config *gorm.Session) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminAgentUserAdminRoleDo) Clauses(conds ...clause.Expression) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminAgentUserAdminRoleDo) Returning(value interface{}, columns ...string) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminAgentUserAdminRoleDo) Not(conds ...gen.Condition) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminAgentUserAdminRoleDo) Or(conds ...gen.Condition) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminAgentUserAdminRoleDo) Select(conds ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminAgentUserAdminRoleDo) Where(conds ...gen.Condition) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminAgentUserAdminRoleDo) Order(conds ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminAgentUserAdminRoleDo) Distinct(cols ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminAgentUserAdminRoleDo) Omit(cols ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminAgentUserAdminRoleDo) Join(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminAgentUserAdminRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminAgentUserAdminRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminAgentUserAdminRoleDo) Group(cols ...field.Expr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminAgentUserAdminRoleDo) Having(conds ...gen.Condition) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminAgentUserAdminRoleDo) Limit(limit int) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminAgentUserAdminRoleDo) Offset(offset int) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminAgentUserAdminRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminAgentUserAdminRoleDo) Unscoped() IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminAgentUserAdminRoleDo) Create(values ...*model.AdminAgentUserAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminAgentUserAdminRoleDo) CreateInBatches(values []*model.AdminAgentUserAdminRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminAgentUserAdminRoleDo) Save(values ...*model.AdminAgentUserAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminAgentUserAdminRoleDo) First() (*model.AdminAgentUserAdminRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentUserAdminRole), nil
	}
}

func (a adminAgentUserAdminRoleDo) Take() (*model.AdminAgentUserAdminRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentUserAdminRole), nil
	}
}

func (a adminAgentUserAdminRoleDo) Last() (*model.AdminAgentUserAdminRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentUserAdminRole), nil
	}
}

func (a adminAgentUserAdminRoleDo) Find() ([]*model.AdminAgentUserAdminRole, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminAgentUserAdminRole), err
}

func (a adminAgentUserAdminRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentUserAdminRole, err error) {
	buf := make([]*model.AdminAgentUserAdminRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminAgentUserAdminRoleDo) FindInBatches(result *[]*model.AdminAgentUserAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminAgentUserAdminRoleDo) Attrs(attrs ...field.AssignExpr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminAgentUserAdminRoleDo) Assign(attrs ...field.AssignExpr) IAdminAgentUserAdminRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminAgentUserAdminRoleDo) Joins(fields ...field.RelationField) IAdminAgentUserAdminRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminAgentUserAdminRoleDo) Preload(fields ...field.RelationField) IAdminAgentUserAdminRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminAgentUserAdminRoleDo) FirstOrInit() (*model.AdminAgentUserAdminRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentUserAdminRole), nil
	}
}

func (a adminAgentUserAdminRoleDo) FirstOrCreate() (*model.AdminAgentUserAdminRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentUserAdminRole), nil
	}
}

func (a adminAgentUserAdminRoleDo) FindByPage(offset int, limit int) (result []*model.AdminAgentUserAdminRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminAgentUserAdminRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminAgentUserAdminRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminAgentUserAdminRoleDo) Delete(models ...*model.AdminAgentUserAdminRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminAgentUserAdminRoleDo) withDO(do gen.Dao) *adminAgentUserAdminRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
