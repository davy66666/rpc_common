// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityRedpacket(db *gorm.DB, opts ...gen.DOOption) activityRedpacket {
	_activityRedpacket := activityRedpacket{}

	_activityRedpacket.activityRedpacketDo.UseDB(db, opts...)
	_activityRedpacket.activityRedpacketDo.UseModel(&model.ActivityRedpacket{})

	tableName := _activityRedpacket.activityRedpacketDo.TableName()
	_activityRedpacket.ALL = field.NewAsterisk(tableName)
	_activityRedpacket.ID = field.NewInt64(tableName, "id")
	_activityRedpacket.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityRedpacket.Title = field.NewString(tableName, "title")
	_activityRedpacket.MinMoney = field.NewFloat64(tableName, "min_money")
	_activityRedpacket.MaxMoney = field.NewFloat64(tableName, "max_money")
	_activityRedpacket.OddsWinning = field.NewFloat64(tableName, "odds_winning")
	_activityRedpacket.Weight = field.NewInt64(tableName, "weight")
	_activityRedpacket.Status = field.NewInt64(tableName, "status")
	_activityRedpacket.CreatedAt = field.NewField(tableName, "created_at")
	_activityRedpacket.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityRedpacket.fillFieldMap()

	return _activityRedpacket
}

type activityRedpacket struct {
	activityRedpacketDo activityRedpacketDo

	ALL         field.Asterisk
	ID          field.Int64
	ActivityID  field.Int64   // 活动ID
	Title       field.String  // 奖金名称
	MinMoney    field.Float64 // 奖金最小值
	MaxMoney    field.Float64 // 奖金最大值
	OddsWinning field.Float64 // 中奖概率 比如0.1%
	Weight      field.Int64   // 权重值
	Status      field.Int64   // 是否启用：[0: 否 1: 是 ]
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a activityRedpacket) Table(newTableName string) *activityRedpacket {
	a.activityRedpacketDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityRedpacket) As(alias string) *activityRedpacket {
	a.activityRedpacketDo.DO = *(a.activityRedpacketDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityRedpacket) updateTableName(table string) *activityRedpacket {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.Title = field.NewString(table, "title")
	a.MinMoney = field.NewFloat64(table, "min_money")
	a.MaxMoney = field.NewFloat64(table, "max_money")
	a.OddsWinning = field.NewFloat64(table, "odds_winning")
	a.Weight = field.NewInt64(table, "weight")
	a.Status = field.NewInt64(table, "status")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityRedpacket) WithContext(ctx context.Context) IActivityRedpacketDo {
	return a.activityRedpacketDo.WithContext(ctx)
}

func (a activityRedpacket) TableName() string { return a.activityRedpacketDo.TableName() }

func (a activityRedpacket) Alias() string { return a.activityRedpacketDo.Alias() }

func (a activityRedpacket) Columns(cols ...field.Expr) gen.Columns {
	return a.activityRedpacketDo.Columns(cols...)
}

func (a *activityRedpacket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityRedpacket) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["title"] = a.Title
	a.fieldMap["min_money"] = a.MinMoney
	a.fieldMap["max_money"] = a.MaxMoney
	a.fieldMap["odds_winning"] = a.OddsWinning
	a.fieldMap["weight"] = a.Weight
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityRedpacket) clone(db *gorm.DB) activityRedpacket {
	a.activityRedpacketDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityRedpacket) replaceDB(db *gorm.DB) activityRedpacket {
	a.activityRedpacketDo.ReplaceDB(db)
	return a
}

type activityRedpacketDo struct{ gen.DO }

type IActivityRedpacketDo interface {
	gen.SubQuery
	Debug() IActivityRedpacketDo
	WithContext(ctx context.Context) IActivityRedpacketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityRedpacketDo
	WriteDB() IActivityRedpacketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityRedpacketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityRedpacketDo
	Not(conds ...gen.Condition) IActivityRedpacketDo
	Or(conds ...gen.Condition) IActivityRedpacketDo
	Select(conds ...field.Expr) IActivityRedpacketDo
	Where(conds ...gen.Condition) IActivityRedpacketDo
	Order(conds ...field.Expr) IActivityRedpacketDo
	Distinct(cols ...field.Expr) IActivityRedpacketDo
	Omit(cols ...field.Expr) IActivityRedpacketDo
	Join(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo
	Group(cols ...field.Expr) IActivityRedpacketDo
	Having(conds ...gen.Condition) IActivityRedpacketDo
	Limit(limit int) IActivityRedpacketDo
	Offset(offset int) IActivityRedpacketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRedpacketDo
	Unscoped() IActivityRedpacketDo
	Create(values ...*model.ActivityRedpacket) error
	CreateInBatches(values []*model.ActivityRedpacket, batchSize int) error
	Save(values ...*model.ActivityRedpacket) error
	First() (*model.ActivityRedpacket, error)
	Take() (*model.ActivityRedpacket, error)
	Last() (*model.ActivityRedpacket, error)
	Find() ([]*model.ActivityRedpacket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRedpacket, err error)
	FindInBatches(result *[]*model.ActivityRedpacket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityRedpacket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityRedpacketDo
	Assign(attrs ...field.AssignExpr) IActivityRedpacketDo
	Joins(fields ...field.RelationField) IActivityRedpacketDo
	Preload(fields ...field.RelationField) IActivityRedpacketDo
	FirstOrInit() (*model.ActivityRedpacket, error)
	FirstOrCreate() (*model.ActivityRedpacket, error)
	FindByPage(offset int, limit int) (result []*model.ActivityRedpacket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityRedpacketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityRedpacketDo) Debug() IActivityRedpacketDo {
	return a.withDO(a.DO.Debug())
}

func (a activityRedpacketDo) WithContext(ctx context.Context) IActivityRedpacketDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityRedpacketDo) ReadDB() IActivityRedpacketDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityRedpacketDo) WriteDB() IActivityRedpacketDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityRedpacketDo) Session(config *gorm.Session) IActivityRedpacketDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityRedpacketDo) Clauses(conds ...clause.Expression) IActivityRedpacketDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityRedpacketDo) Returning(value interface{}, columns ...string) IActivityRedpacketDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityRedpacketDo) Not(conds ...gen.Condition) IActivityRedpacketDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityRedpacketDo) Or(conds ...gen.Condition) IActivityRedpacketDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityRedpacketDo) Select(conds ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityRedpacketDo) Where(conds ...gen.Condition) IActivityRedpacketDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityRedpacketDo) Order(conds ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityRedpacketDo) Distinct(cols ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityRedpacketDo) Omit(cols ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityRedpacketDo) Join(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityRedpacketDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityRedpacketDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityRedpacketDo) Group(cols ...field.Expr) IActivityRedpacketDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityRedpacketDo) Having(conds ...gen.Condition) IActivityRedpacketDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityRedpacketDo) Limit(limit int) IActivityRedpacketDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityRedpacketDo) Offset(offset int) IActivityRedpacketDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityRedpacketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRedpacketDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityRedpacketDo) Unscoped() IActivityRedpacketDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityRedpacketDo) Create(values ...*model.ActivityRedpacket) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityRedpacketDo) CreateInBatches(values []*model.ActivityRedpacket, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityRedpacketDo) Save(values ...*model.ActivityRedpacket) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityRedpacketDo) First() (*model.ActivityRedpacket, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRedpacket), nil
	}
}

func (a activityRedpacketDo) Take() (*model.ActivityRedpacket, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRedpacket), nil
	}
}

func (a activityRedpacketDo) Last() (*model.ActivityRedpacket, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRedpacket), nil
	}
}

func (a activityRedpacketDo) Find() ([]*model.ActivityRedpacket, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityRedpacket), err
}

func (a activityRedpacketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRedpacket, err error) {
	buf := make([]*model.ActivityRedpacket, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityRedpacketDo) FindInBatches(result *[]*model.ActivityRedpacket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityRedpacketDo) Attrs(attrs ...field.AssignExpr) IActivityRedpacketDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityRedpacketDo) Assign(attrs ...field.AssignExpr) IActivityRedpacketDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityRedpacketDo) Joins(fields ...field.RelationField) IActivityRedpacketDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityRedpacketDo) Preload(fields ...field.RelationField) IActivityRedpacketDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityRedpacketDo) FirstOrInit() (*model.ActivityRedpacket, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRedpacket), nil
	}
}

func (a activityRedpacketDo) FirstOrCreate() (*model.ActivityRedpacket, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRedpacket), nil
	}
}

func (a activityRedpacketDo) FindByPage(offset int, limit int) (result []*model.ActivityRedpacket, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityRedpacketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityRedpacketDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityRedpacketDo) Delete(models ...*model.ActivityRedpacket) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityRedpacketDo) withDO(do gen.Dao) *activityRedpacketDo {
	a.DO = *do.(*gen.DO)
	return a
}
