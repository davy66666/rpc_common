// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserVipsReward(db *gorm.DB, opts ...gen.DOOption) userVipsReward {
	_userVipsReward := userVipsReward{}

	_userVipsReward.userVipsRewardDo.UseDB(db, opts...)
	_userVipsReward.userVipsRewardDo.UseModel(&model.UserVipsReward{})

	tableName := _userVipsReward.userVipsRewardDo.TableName()
	_userVipsReward.ALL = field.NewAsterisk(tableName)
	_userVipsReward.ID = field.NewInt64(tableName, "id")
	_userVipsReward.Title = field.NewString(tableName, "title")
	_userVipsReward.IconURL = field.NewString(tableName, "icon_url")
	_userVipsReward.Remark = field.NewString(tableName, "remark")
	_userVipsReward.IsOpen = field.NewInt64(tableName, "is_open")
	_userVipsReward.CreatedAt = field.NewField(tableName, "created_at")
	_userVipsReward.UpdatedAt = field.NewField(tableName, "updated_at")

	_userVipsReward.fillFieldMap()

	return _userVipsReward
}

// userVipsReward vip 晋级奖励
type userVipsReward struct {
	userVipsRewardDo userVipsRewardDo

	ALL       field.Asterisk
	ID        field.Int64
	Title     field.String // 奖品名称
	IconURL   field.String // 图标
	Remark    field.String // 描述
	IsOpen    field.Int64  // 是否开启0:否;1:是
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userVipsReward) Table(newTableName string) *userVipsReward {
	u.userVipsRewardDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userVipsReward) As(alias string) *userVipsReward {
	u.userVipsRewardDo.DO = *(u.userVipsRewardDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userVipsReward) updateTableName(table string) *userVipsReward {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Title = field.NewString(table, "title")
	u.IconURL = field.NewString(table, "icon_url")
	u.Remark = field.NewString(table, "remark")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userVipsReward) WithContext(ctx context.Context) IUserVipsRewardDo {
	return u.userVipsRewardDo.WithContext(ctx)
}

func (u userVipsReward) TableName() string { return u.userVipsRewardDo.TableName() }

func (u userVipsReward) Alias() string { return u.userVipsRewardDo.Alias() }

func (u userVipsReward) Columns(cols ...field.Expr) gen.Columns {
	return u.userVipsRewardDo.Columns(cols...)
}

func (u *userVipsReward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userVipsReward) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["title"] = u.Title
	u.fieldMap["icon_url"] = u.IconURL
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userVipsReward) clone(db *gorm.DB) userVipsReward {
	u.userVipsRewardDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userVipsReward) replaceDB(db *gorm.DB) userVipsReward {
	u.userVipsRewardDo.ReplaceDB(db)
	return u
}

type userVipsRewardDo struct{ gen.DO }

type IUserVipsRewardDo interface {
	gen.SubQuery
	Debug() IUserVipsRewardDo
	WithContext(ctx context.Context) IUserVipsRewardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserVipsRewardDo
	WriteDB() IUserVipsRewardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserVipsRewardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserVipsRewardDo
	Not(conds ...gen.Condition) IUserVipsRewardDo
	Or(conds ...gen.Condition) IUserVipsRewardDo
	Select(conds ...field.Expr) IUserVipsRewardDo
	Where(conds ...gen.Condition) IUserVipsRewardDo
	Order(conds ...field.Expr) IUserVipsRewardDo
	Distinct(cols ...field.Expr) IUserVipsRewardDo
	Omit(cols ...field.Expr) IUserVipsRewardDo
	Join(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo
	Group(cols ...field.Expr) IUserVipsRewardDo
	Having(conds ...gen.Condition) IUserVipsRewardDo
	Limit(limit int) IUserVipsRewardDo
	Offset(offset int) IUserVipsRewardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVipsRewardDo
	Unscoped() IUserVipsRewardDo
	Create(values ...*model.UserVipsReward) error
	CreateInBatches(values []*model.UserVipsReward, batchSize int) error
	Save(values ...*model.UserVipsReward) error
	First() (*model.UserVipsReward, error)
	Take() (*model.UserVipsReward, error)
	Last() (*model.UserVipsReward, error)
	Find() ([]*model.UserVipsReward, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVipsReward, err error)
	FindInBatches(result *[]*model.UserVipsReward, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserVipsReward) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserVipsRewardDo
	Assign(attrs ...field.AssignExpr) IUserVipsRewardDo
	Joins(fields ...field.RelationField) IUserVipsRewardDo
	Preload(fields ...field.RelationField) IUserVipsRewardDo
	FirstOrInit() (*model.UserVipsReward, error)
	FirstOrCreate() (*model.UserVipsReward, error)
	FindByPage(offset int, limit int) (result []*model.UserVipsReward, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserVipsRewardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userVipsRewardDo) Debug() IUserVipsRewardDo {
	return u.withDO(u.DO.Debug())
}

func (u userVipsRewardDo) WithContext(ctx context.Context) IUserVipsRewardDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userVipsRewardDo) ReadDB() IUserVipsRewardDo {
	return u.Clauses(dbresolver.Read)
}

func (u userVipsRewardDo) WriteDB() IUserVipsRewardDo {
	return u.Clauses(dbresolver.Write)
}

func (u userVipsRewardDo) Session(config *gorm.Session) IUserVipsRewardDo {
	return u.withDO(u.DO.Session(config))
}

func (u userVipsRewardDo) Clauses(conds ...clause.Expression) IUserVipsRewardDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userVipsRewardDo) Returning(value interface{}, columns ...string) IUserVipsRewardDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userVipsRewardDo) Not(conds ...gen.Condition) IUserVipsRewardDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userVipsRewardDo) Or(conds ...gen.Condition) IUserVipsRewardDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userVipsRewardDo) Select(conds ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userVipsRewardDo) Where(conds ...gen.Condition) IUserVipsRewardDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userVipsRewardDo) Order(conds ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userVipsRewardDo) Distinct(cols ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userVipsRewardDo) Omit(cols ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userVipsRewardDo) Join(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userVipsRewardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userVipsRewardDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userVipsRewardDo) Group(cols ...field.Expr) IUserVipsRewardDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userVipsRewardDo) Having(conds ...gen.Condition) IUserVipsRewardDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userVipsRewardDo) Limit(limit int) IUserVipsRewardDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userVipsRewardDo) Offset(offset int) IUserVipsRewardDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userVipsRewardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVipsRewardDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userVipsRewardDo) Unscoped() IUserVipsRewardDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userVipsRewardDo) Create(values ...*model.UserVipsReward) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userVipsRewardDo) CreateInBatches(values []*model.UserVipsReward, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userVipsRewardDo) Save(values ...*model.UserVipsReward) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userVipsRewardDo) First() (*model.UserVipsReward, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVipsReward), nil
	}
}

func (u userVipsRewardDo) Take() (*model.UserVipsReward, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVipsReward), nil
	}
}

func (u userVipsRewardDo) Last() (*model.UserVipsReward, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVipsReward), nil
	}
}

func (u userVipsRewardDo) Find() ([]*model.UserVipsReward, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserVipsReward), err
}

func (u userVipsRewardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVipsReward, err error) {
	buf := make([]*model.UserVipsReward, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userVipsRewardDo) FindInBatches(result *[]*model.UserVipsReward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userVipsRewardDo) Attrs(attrs ...field.AssignExpr) IUserVipsRewardDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userVipsRewardDo) Assign(attrs ...field.AssignExpr) IUserVipsRewardDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userVipsRewardDo) Joins(fields ...field.RelationField) IUserVipsRewardDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userVipsRewardDo) Preload(fields ...field.RelationField) IUserVipsRewardDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userVipsRewardDo) FirstOrInit() (*model.UserVipsReward, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVipsReward), nil
	}
}

func (u userVipsRewardDo) FirstOrCreate() (*model.UserVipsReward, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVipsReward), nil
	}
}

func (u userVipsRewardDo) FindByPage(offset int, limit int) (result []*model.UserVipsReward, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userVipsRewardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userVipsRewardDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userVipsRewardDo) Delete(models ...*model.UserVipsReward) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userVipsRewardDo) withDO(do gen.Dao) *userVipsRewardDo {
	u.DO = *do.(*gen.DO)
	return u
}
