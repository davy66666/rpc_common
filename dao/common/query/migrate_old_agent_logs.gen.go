// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMigrateOldAgentLog(db *gorm.DB, opts ...gen.DOOption) migrateOldAgentLog {
	_migrateOldAgentLog := migrateOldAgentLog{}

	_migrateOldAgentLog.migrateOldAgentLogDo.UseDB(db, opts...)
	_migrateOldAgentLog.migrateOldAgentLogDo.UseModel(&model.MigrateOldAgentLog{})

	tableName := _migrateOldAgentLog.migrateOldAgentLogDo.TableName()
	_migrateOldAgentLog.ALL = field.NewAsterisk(tableName)
	_migrateOldAgentLog.ID = field.NewInt64(tableName, "id")
	_migrateOldAgentLog.OldID = field.NewInt64(tableName, "old_id")
	_migrateOldAgentLog.OldUsername = field.NewString(tableName, "old_username")
	_migrateOldAgentLog.NewID = field.NewInt64(tableName, "new_id")
	_migrateOldAgentLog.NewUsername = field.NewString(tableName, "new_username")
	_migrateOldAgentLog.CreatedAt = field.NewField(tableName, "created_at")
	_migrateOldAgentLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_migrateOldAgentLog.fillFieldMap()

	return _migrateOldAgentLog
}

type migrateOldAgentLog struct {
	migrateOldAgentLogDo migrateOldAgentLogDo

	ALL         field.Asterisk
	ID          field.Int64
	OldID       field.Int64  // 旧平台代理id
	OldUsername field.String // 旧平台代理名称
	NewID       field.Int64  // 新平台id
	NewUsername field.String // 新平台代理名称
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (m migrateOldAgentLog) Table(newTableName string) *migrateOldAgentLog {
	m.migrateOldAgentLogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m migrateOldAgentLog) As(alias string) *migrateOldAgentLog {
	m.migrateOldAgentLogDo.DO = *(m.migrateOldAgentLogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *migrateOldAgentLog) updateTableName(table string) *migrateOldAgentLog {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.OldID = field.NewInt64(table, "old_id")
	m.OldUsername = field.NewString(table, "old_username")
	m.NewID = field.NewInt64(table, "new_id")
	m.NewUsername = field.NewString(table, "new_username")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *migrateOldAgentLog) WithContext(ctx context.Context) IMigrateOldAgentLogDo {
	return m.migrateOldAgentLogDo.WithContext(ctx)
}

func (m migrateOldAgentLog) TableName() string { return m.migrateOldAgentLogDo.TableName() }

func (m migrateOldAgentLog) Alias() string { return m.migrateOldAgentLogDo.Alias() }

func (m migrateOldAgentLog) Columns(cols ...field.Expr) gen.Columns {
	return m.migrateOldAgentLogDo.Columns(cols...)
}

func (m *migrateOldAgentLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *migrateOldAgentLog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["old_id"] = m.OldID
	m.fieldMap["old_username"] = m.OldUsername
	m.fieldMap["new_id"] = m.NewID
	m.fieldMap["new_username"] = m.NewUsername
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m migrateOldAgentLog) clone(db *gorm.DB) migrateOldAgentLog {
	m.migrateOldAgentLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m migrateOldAgentLog) replaceDB(db *gorm.DB) migrateOldAgentLog {
	m.migrateOldAgentLogDo.ReplaceDB(db)
	return m
}

type migrateOldAgentLogDo struct{ gen.DO }

type IMigrateOldAgentLogDo interface {
	gen.SubQuery
	Debug() IMigrateOldAgentLogDo
	WithContext(ctx context.Context) IMigrateOldAgentLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMigrateOldAgentLogDo
	WriteDB() IMigrateOldAgentLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMigrateOldAgentLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMigrateOldAgentLogDo
	Not(conds ...gen.Condition) IMigrateOldAgentLogDo
	Or(conds ...gen.Condition) IMigrateOldAgentLogDo
	Select(conds ...field.Expr) IMigrateOldAgentLogDo
	Where(conds ...gen.Condition) IMigrateOldAgentLogDo
	Order(conds ...field.Expr) IMigrateOldAgentLogDo
	Distinct(cols ...field.Expr) IMigrateOldAgentLogDo
	Omit(cols ...field.Expr) IMigrateOldAgentLogDo
	Join(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo
	Group(cols ...field.Expr) IMigrateOldAgentLogDo
	Having(conds ...gen.Condition) IMigrateOldAgentLogDo
	Limit(limit int) IMigrateOldAgentLogDo
	Offset(offset int) IMigrateOldAgentLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMigrateOldAgentLogDo
	Unscoped() IMigrateOldAgentLogDo
	Create(values ...*model.MigrateOldAgentLog) error
	CreateInBatches(values []*model.MigrateOldAgentLog, batchSize int) error
	Save(values ...*model.MigrateOldAgentLog) error
	First() (*model.MigrateOldAgentLog, error)
	Take() (*model.MigrateOldAgentLog, error)
	Last() (*model.MigrateOldAgentLog, error)
	Find() ([]*model.MigrateOldAgentLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MigrateOldAgentLog, err error)
	FindInBatches(result *[]*model.MigrateOldAgentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MigrateOldAgentLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMigrateOldAgentLogDo
	Assign(attrs ...field.AssignExpr) IMigrateOldAgentLogDo
	Joins(fields ...field.RelationField) IMigrateOldAgentLogDo
	Preload(fields ...field.RelationField) IMigrateOldAgentLogDo
	FirstOrInit() (*model.MigrateOldAgentLog, error)
	FirstOrCreate() (*model.MigrateOldAgentLog, error)
	FindByPage(offset int, limit int) (result []*model.MigrateOldAgentLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMigrateOldAgentLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m migrateOldAgentLogDo) Debug() IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Debug())
}

func (m migrateOldAgentLogDo) WithContext(ctx context.Context) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m migrateOldAgentLogDo) ReadDB() IMigrateOldAgentLogDo {
	return m.Clauses(dbresolver.Read)
}

func (m migrateOldAgentLogDo) WriteDB() IMigrateOldAgentLogDo {
	return m.Clauses(dbresolver.Write)
}

func (m migrateOldAgentLogDo) Session(config *gorm.Session) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Session(config))
}

func (m migrateOldAgentLogDo) Clauses(conds ...clause.Expression) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m migrateOldAgentLogDo) Returning(value interface{}, columns ...string) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m migrateOldAgentLogDo) Not(conds ...gen.Condition) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m migrateOldAgentLogDo) Or(conds ...gen.Condition) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m migrateOldAgentLogDo) Select(conds ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m migrateOldAgentLogDo) Where(conds ...gen.Condition) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m migrateOldAgentLogDo) Order(conds ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m migrateOldAgentLogDo) Distinct(cols ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m migrateOldAgentLogDo) Omit(cols ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m migrateOldAgentLogDo) Join(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m migrateOldAgentLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m migrateOldAgentLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m migrateOldAgentLogDo) Group(cols ...field.Expr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m migrateOldAgentLogDo) Having(conds ...gen.Condition) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m migrateOldAgentLogDo) Limit(limit int) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m migrateOldAgentLogDo) Offset(offset int) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m migrateOldAgentLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m migrateOldAgentLogDo) Unscoped() IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m migrateOldAgentLogDo) Create(values ...*model.MigrateOldAgentLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m migrateOldAgentLogDo) CreateInBatches(values []*model.MigrateOldAgentLog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m migrateOldAgentLogDo) Save(values ...*model.MigrateOldAgentLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m migrateOldAgentLogDo) First() (*model.MigrateOldAgentLog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MigrateOldAgentLog), nil
	}
}

func (m migrateOldAgentLogDo) Take() (*model.MigrateOldAgentLog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MigrateOldAgentLog), nil
	}
}

func (m migrateOldAgentLogDo) Last() (*model.MigrateOldAgentLog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MigrateOldAgentLog), nil
	}
}

func (m migrateOldAgentLogDo) Find() ([]*model.MigrateOldAgentLog, error) {
	result, err := m.DO.Find()
	return result.([]*model.MigrateOldAgentLog), err
}

func (m migrateOldAgentLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MigrateOldAgentLog, err error) {
	buf := make([]*model.MigrateOldAgentLog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m migrateOldAgentLogDo) FindInBatches(result *[]*model.MigrateOldAgentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m migrateOldAgentLogDo) Attrs(attrs ...field.AssignExpr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m migrateOldAgentLogDo) Assign(attrs ...field.AssignExpr) IMigrateOldAgentLogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m migrateOldAgentLogDo) Joins(fields ...field.RelationField) IMigrateOldAgentLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m migrateOldAgentLogDo) Preload(fields ...field.RelationField) IMigrateOldAgentLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m migrateOldAgentLogDo) FirstOrInit() (*model.MigrateOldAgentLog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MigrateOldAgentLog), nil
	}
}

func (m migrateOldAgentLogDo) FirstOrCreate() (*model.MigrateOldAgentLog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MigrateOldAgentLog), nil
	}
}

func (m migrateOldAgentLogDo) FindByPage(offset int, limit int) (result []*model.MigrateOldAgentLog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m migrateOldAgentLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m migrateOldAgentLogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m migrateOldAgentLogDo) Delete(models ...*model.MigrateOldAgentLog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *migrateOldAgentLogDo) withDO(do gen.Dao) *migrateOldAgentLogDo {
	m.DO = *do.(*gen.DO)
	return m
}
