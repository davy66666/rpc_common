// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskRuleChildType(db *gorm.DB, opts ...gen.DOOption) riskRuleChildType {
	_riskRuleChildType := riskRuleChildType{}

	_riskRuleChildType.riskRuleChildTypeDo.UseDB(db, opts...)
	_riskRuleChildType.riskRuleChildTypeDo.UseModel(&model.RiskRuleChildType{})

	tableName := _riskRuleChildType.riskRuleChildTypeDo.TableName()
	_riskRuleChildType.ALL = field.NewAsterisk(tableName)
	_riskRuleChildType.ID = field.NewInt64(tableName, "id")
	_riskRuleChildType.ParentID = field.NewInt64(tableName, "parent_id")
	_riskRuleChildType.Name = field.NewString(tableName, "name")
	_riskRuleChildType.AdminName = field.NewString(tableName, "admin_name")
	_riskRuleChildType.CreatedAt = field.NewField(tableName, "created_at")
	_riskRuleChildType.UpdatedAt = field.NewField(tableName, "updated_at")

	_riskRuleChildType.fillFieldMap()

	return _riskRuleChildType
}

// riskRuleChildType 规则子类型
type riskRuleChildType struct {
	riskRuleChildTypeDo riskRuleChildTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	ParentID  field.Int64  // 父类型id
	Name      field.String // 子类型名称
	AdminName field.String // 操作人
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (r riskRuleChildType) Table(newTableName string) *riskRuleChildType {
	r.riskRuleChildTypeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskRuleChildType) As(alias string) *riskRuleChildType {
	r.riskRuleChildTypeDo.DO = *(r.riskRuleChildTypeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskRuleChildType) updateTableName(table string) *riskRuleChildType {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.ParentID = field.NewInt64(table, "parent_id")
	r.Name = field.NewString(table, "name")
	r.AdminName = field.NewString(table, "admin_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *riskRuleChildType) WithContext(ctx context.Context) IRiskRuleChildTypeDo {
	return r.riskRuleChildTypeDo.WithContext(ctx)
}

func (r riskRuleChildType) TableName() string { return r.riskRuleChildTypeDo.TableName() }

func (r riskRuleChildType) Alias() string { return r.riskRuleChildTypeDo.Alias() }

func (r riskRuleChildType) Columns(cols ...field.Expr) gen.Columns {
	return r.riskRuleChildTypeDo.Columns(cols...)
}

func (r *riskRuleChildType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskRuleChildType) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["parent_id"] = r.ParentID
	r.fieldMap["name"] = r.Name
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r riskRuleChildType) clone(db *gorm.DB) riskRuleChildType {
	r.riskRuleChildTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskRuleChildType) replaceDB(db *gorm.DB) riskRuleChildType {
	r.riskRuleChildTypeDo.ReplaceDB(db)
	return r
}

type riskRuleChildTypeDo struct{ gen.DO }

type IRiskRuleChildTypeDo interface {
	gen.SubQuery
	Debug() IRiskRuleChildTypeDo
	WithContext(ctx context.Context) IRiskRuleChildTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskRuleChildTypeDo
	WriteDB() IRiskRuleChildTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskRuleChildTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskRuleChildTypeDo
	Not(conds ...gen.Condition) IRiskRuleChildTypeDo
	Or(conds ...gen.Condition) IRiskRuleChildTypeDo
	Select(conds ...field.Expr) IRiskRuleChildTypeDo
	Where(conds ...gen.Condition) IRiskRuleChildTypeDo
	Order(conds ...field.Expr) IRiskRuleChildTypeDo
	Distinct(cols ...field.Expr) IRiskRuleChildTypeDo
	Omit(cols ...field.Expr) IRiskRuleChildTypeDo
	Join(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo
	Group(cols ...field.Expr) IRiskRuleChildTypeDo
	Having(conds ...gen.Condition) IRiskRuleChildTypeDo
	Limit(limit int) IRiskRuleChildTypeDo
	Offset(offset int) IRiskRuleChildTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleChildTypeDo
	Unscoped() IRiskRuleChildTypeDo
	Create(values ...*model.RiskRuleChildType) error
	CreateInBatches(values []*model.RiskRuleChildType, batchSize int) error
	Save(values ...*model.RiskRuleChildType) error
	First() (*model.RiskRuleChildType, error)
	Take() (*model.RiskRuleChildType, error)
	Last() (*model.RiskRuleChildType, error)
	Find() ([]*model.RiskRuleChildType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleChildType, err error)
	FindInBatches(result *[]*model.RiskRuleChildType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskRuleChildType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskRuleChildTypeDo
	Assign(attrs ...field.AssignExpr) IRiskRuleChildTypeDo
	Joins(fields ...field.RelationField) IRiskRuleChildTypeDo
	Preload(fields ...field.RelationField) IRiskRuleChildTypeDo
	FirstOrInit() (*model.RiskRuleChildType, error)
	FirstOrCreate() (*model.RiskRuleChildType, error)
	FindByPage(offset int, limit int) (result []*model.RiskRuleChildType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskRuleChildTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskRuleChildTypeDo) Debug() IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Debug())
}

func (r riskRuleChildTypeDo) WithContext(ctx context.Context) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskRuleChildTypeDo) ReadDB() IRiskRuleChildTypeDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskRuleChildTypeDo) WriteDB() IRiskRuleChildTypeDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskRuleChildTypeDo) Session(config *gorm.Session) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskRuleChildTypeDo) Clauses(conds ...clause.Expression) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskRuleChildTypeDo) Returning(value interface{}, columns ...string) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskRuleChildTypeDo) Not(conds ...gen.Condition) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskRuleChildTypeDo) Or(conds ...gen.Condition) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskRuleChildTypeDo) Select(conds ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskRuleChildTypeDo) Where(conds ...gen.Condition) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskRuleChildTypeDo) Order(conds ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskRuleChildTypeDo) Distinct(cols ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskRuleChildTypeDo) Omit(cols ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskRuleChildTypeDo) Join(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskRuleChildTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskRuleChildTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskRuleChildTypeDo) Group(cols ...field.Expr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskRuleChildTypeDo) Having(conds ...gen.Condition) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskRuleChildTypeDo) Limit(limit int) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskRuleChildTypeDo) Offset(offset int) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskRuleChildTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskRuleChildTypeDo) Unscoped() IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskRuleChildTypeDo) Create(values ...*model.RiskRuleChildType) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskRuleChildTypeDo) CreateInBatches(values []*model.RiskRuleChildType, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskRuleChildTypeDo) Save(values ...*model.RiskRuleChildType) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskRuleChildTypeDo) First() (*model.RiskRuleChildType, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleChildType), nil
	}
}

func (r riskRuleChildTypeDo) Take() (*model.RiskRuleChildType, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleChildType), nil
	}
}

func (r riskRuleChildTypeDo) Last() (*model.RiskRuleChildType, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleChildType), nil
	}
}

func (r riskRuleChildTypeDo) Find() ([]*model.RiskRuleChildType, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskRuleChildType), err
}

func (r riskRuleChildTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleChildType, err error) {
	buf := make([]*model.RiskRuleChildType, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskRuleChildTypeDo) FindInBatches(result *[]*model.RiskRuleChildType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskRuleChildTypeDo) Attrs(attrs ...field.AssignExpr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskRuleChildTypeDo) Assign(attrs ...field.AssignExpr) IRiskRuleChildTypeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskRuleChildTypeDo) Joins(fields ...field.RelationField) IRiskRuleChildTypeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskRuleChildTypeDo) Preload(fields ...field.RelationField) IRiskRuleChildTypeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskRuleChildTypeDo) FirstOrInit() (*model.RiskRuleChildType, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleChildType), nil
	}
}

func (r riskRuleChildTypeDo) FirstOrCreate() (*model.RiskRuleChildType, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleChildType), nil
	}
}

func (r riskRuleChildTypeDo) FindByPage(offset int, limit int) (result []*model.RiskRuleChildType, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskRuleChildTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskRuleChildTypeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskRuleChildTypeDo) Delete(models ...*model.RiskRuleChildType) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskRuleChildTypeDo) withDO(do gen.Dao) *riskRuleChildTypeDo {
	r.DO = *do.(*gen.DO)
	return r
}
