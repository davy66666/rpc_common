// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserGiftReceiveRecord(db *gorm.DB, opts ...gen.DOOption) userGiftReceiveRecord {
	_userGiftReceiveRecord := userGiftReceiveRecord{}

	_userGiftReceiveRecord.userGiftReceiveRecordDo.UseDB(db, opts...)
	_userGiftReceiveRecord.userGiftReceiveRecordDo.UseModel(&model.UserGiftReceiveRecord{})

	tableName := _userGiftReceiveRecord.userGiftReceiveRecordDo.TableName()
	_userGiftReceiveRecord.ALL = field.NewAsterisk(tableName)
	_userGiftReceiveRecord.ID = field.NewInt64(tableName, "id")
	_userGiftReceiveRecord.UID = field.NewInt64(tableName, "uid")
	_userGiftReceiveRecord.Phone = field.NewString(tableName, "phone")
	_userGiftReceiveRecord.RuleID = field.NewInt64(tableName, "rule_id")
	_userGiftReceiveRecord.Type = field.NewInt64(tableName, "type")
	_userGiftReceiveRecord.GiftAmount = field.NewFloat64(tableName, "gift_amount")
	_userGiftReceiveRecord.Plat = field.NewInt64(tableName, "plat")
	_userGiftReceiveRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userGiftReceiveRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userGiftReceiveRecord.fillFieldMap()

	return _userGiftReceiveRecord
}

// userGiftReceiveRecord 用户礼金领取记录
type userGiftReceiveRecord struct {
	userGiftReceiveRecordDo userGiftReceiveRecordDo

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64   // 用户ID
	Phone      field.String  // 领取手机号
	RuleID     field.Int64   // 规则ID
	Type       field.Int64   // 礼金类型, 1:注册完善信息类礼金;2:新注册时间内存款类,3:存款类,4:投注类
	GiftAmount field.Float64 // 礼金金额
	Plat       field.Int64   // 平台
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (u userGiftReceiveRecord) Table(newTableName string) *userGiftReceiveRecord {
	u.userGiftReceiveRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGiftReceiveRecord) As(alias string) *userGiftReceiveRecord {
	u.userGiftReceiveRecordDo.DO = *(u.userGiftReceiveRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGiftReceiveRecord) updateTableName(table string) *userGiftReceiveRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Phone = field.NewString(table, "phone")
	u.RuleID = field.NewInt64(table, "rule_id")
	u.Type = field.NewInt64(table, "type")
	u.GiftAmount = field.NewFloat64(table, "gift_amount")
	u.Plat = field.NewInt64(table, "plat")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGiftReceiveRecord) WithContext(ctx context.Context) IUserGiftReceiveRecordDo {
	return u.userGiftReceiveRecordDo.WithContext(ctx)
}

func (u userGiftReceiveRecord) TableName() string { return u.userGiftReceiveRecordDo.TableName() }

func (u userGiftReceiveRecord) Alias() string { return u.userGiftReceiveRecordDo.Alias() }

func (u userGiftReceiveRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userGiftReceiveRecordDo.Columns(cols...)
}

func (u *userGiftReceiveRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGiftReceiveRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["rule_id"] = u.RuleID
	u.fieldMap["type"] = u.Type
	u.fieldMap["gift_amount"] = u.GiftAmount
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGiftReceiveRecord) clone(db *gorm.DB) userGiftReceiveRecord {
	u.userGiftReceiveRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGiftReceiveRecord) replaceDB(db *gorm.DB) userGiftReceiveRecord {
	u.userGiftReceiveRecordDo.ReplaceDB(db)
	return u
}

type userGiftReceiveRecordDo struct{ gen.DO }

type IUserGiftReceiveRecordDo interface {
	gen.SubQuery
	Debug() IUserGiftReceiveRecordDo
	WithContext(ctx context.Context) IUserGiftReceiveRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGiftReceiveRecordDo
	WriteDB() IUserGiftReceiveRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGiftReceiveRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGiftReceiveRecordDo
	Not(conds ...gen.Condition) IUserGiftReceiveRecordDo
	Or(conds ...gen.Condition) IUserGiftReceiveRecordDo
	Select(conds ...field.Expr) IUserGiftReceiveRecordDo
	Where(conds ...gen.Condition) IUserGiftReceiveRecordDo
	Order(conds ...field.Expr) IUserGiftReceiveRecordDo
	Distinct(cols ...field.Expr) IUserGiftReceiveRecordDo
	Omit(cols ...field.Expr) IUserGiftReceiveRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo
	Group(cols ...field.Expr) IUserGiftReceiveRecordDo
	Having(conds ...gen.Condition) IUserGiftReceiveRecordDo
	Limit(limit int) IUserGiftReceiveRecordDo
	Offset(offset int) IUserGiftReceiveRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGiftReceiveRecordDo
	Unscoped() IUserGiftReceiveRecordDo
	Create(values ...*model.UserGiftReceiveRecord) error
	CreateInBatches(values []*model.UserGiftReceiveRecord, batchSize int) error
	Save(values ...*model.UserGiftReceiveRecord) error
	First() (*model.UserGiftReceiveRecord, error)
	Take() (*model.UserGiftReceiveRecord, error)
	Last() (*model.UserGiftReceiveRecord, error)
	Find() ([]*model.UserGiftReceiveRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGiftReceiveRecord, err error)
	FindInBatches(result *[]*model.UserGiftReceiveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGiftReceiveRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGiftReceiveRecordDo
	Assign(attrs ...field.AssignExpr) IUserGiftReceiveRecordDo
	Joins(fields ...field.RelationField) IUserGiftReceiveRecordDo
	Preload(fields ...field.RelationField) IUserGiftReceiveRecordDo
	FirstOrInit() (*model.UserGiftReceiveRecord, error)
	FirstOrCreate() (*model.UserGiftReceiveRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserGiftReceiveRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGiftReceiveRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGiftReceiveRecordDo) Debug() IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userGiftReceiveRecordDo) WithContext(ctx context.Context) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGiftReceiveRecordDo) ReadDB() IUserGiftReceiveRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGiftReceiveRecordDo) WriteDB() IUserGiftReceiveRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGiftReceiveRecordDo) Session(config *gorm.Session) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGiftReceiveRecordDo) Clauses(conds ...clause.Expression) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGiftReceiveRecordDo) Returning(value interface{}, columns ...string) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGiftReceiveRecordDo) Not(conds ...gen.Condition) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGiftReceiveRecordDo) Or(conds ...gen.Condition) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGiftReceiveRecordDo) Select(conds ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGiftReceiveRecordDo) Where(conds ...gen.Condition) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGiftReceiveRecordDo) Order(conds ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGiftReceiveRecordDo) Distinct(cols ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGiftReceiveRecordDo) Omit(cols ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGiftReceiveRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGiftReceiveRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGiftReceiveRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGiftReceiveRecordDo) Group(cols ...field.Expr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGiftReceiveRecordDo) Having(conds ...gen.Condition) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGiftReceiveRecordDo) Limit(limit int) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGiftReceiveRecordDo) Offset(offset int) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGiftReceiveRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGiftReceiveRecordDo) Unscoped() IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGiftReceiveRecordDo) Create(values ...*model.UserGiftReceiveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGiftReceiveRecordDo) CreateInBatches(values []*model.UserGiftReceiveRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGiftReceiveRecordDo) Save(values ...*model.UserGiftReceiveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGiftReceiveRecordDo) First() (*model.UserGiftReceiveRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftReceiveRecord), nil
	}
}

func (u userGiftReceiveRecordDo) Take() (*model.UserGiftReceiveRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftReceiveRecord), nil
	}
}

func (u userGiftReceiveRecordDo) Last() (*model.UserGiftReceiveRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftReceiveRecord), nil
	}
}

func (u userGiftReceiveRecordDo) Find() ([]*model.UserGiftReceiveRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGiftReceiveRecord), err
}

func (u userGiftReceiveRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGiftReceiveRecord, err error) {
	buf := make([]*model.UserGiftReceiveRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGiftReceiveRecordDo) FindInBatches(result *[]*model.UserGiftReceiveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGiftReceiveRecordDo) Attrs(attrs ...field.AssignExpr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGiftReceiveRecordDo) Assign(attrs ...field.AssignExpr) IUserGiftReceiveRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGiftReceiveRecordDo) Joins(fields ...field.RelationField) IUserGiftReceiveRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGiftReceiveRecordDo) Preload(fields ...field.RelationField) IUserGiftReceiveRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGiftReceiveRecordDo) FirstOrInit() (*model.UserGiftReceiveRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftReceiveRecord), nil
	}
}

func (u userGiftReceiveRecordDo) FirstOrCreate() (*model.UserGiftReceiveRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGiftReceiveRecord), nil
	}
}

func (u userGiftReceiveRecordDo) FindByPage(offset int, limit int) (result []*model.UserGiftReceiveRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGiftReceiveRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGiftReceiveRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGiftReceiveRecordDo) Delete(models ...*model.UserGiftReceiveRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGiftReceiveRecordDo) withDO(do gen.Dao) *userGiftReceiveRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
