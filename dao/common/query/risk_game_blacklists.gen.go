// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskGameBlacklist(db *gorm.DB, opts ...gen.DOOption) riskGameBlacklist {
	_riskGameBlacklist := riskGameBlacklist{}

	_riskGameBlacklist.riskGameBlacklistDo.UseDB(db, opts...)
	_riskGameBlacklist.riskGameBlacklistDo.UseModel(&model.RiskGameBlacklist{})

	tableName := _riskGameBlacklist.riskGameBlacklistDo.TableName()
	_riskGameBlacklist.ALL = field.NewAsterisk(tableName)
	_riskGameBlacklist.ID = field.NewInt64(tableName, "id")
	_riskGameBlacklist.SeriesID = field.NewInt64(tableName, "series_id")
	_riskGameBlacklist.SeriesName = field.NewString(tableName, "series_name")
	_riskGameBlacklist.GameCode = field.NewString(tableName, "game_code")
	_riskGameBlacklist.SeriesGameName = field.NewString(tableName, "series_game_name")
	_riskGameBlacklist.GameID = field.NewString(tableName, "game_id")
	_riskGameBlacklist.GameGame = field.NewString(tableName, "game_game")
	_riskGameBlacklist.Remark = field.NewString(tableName, "remark")
	_riskGameBlacklist.AdminID = field.NewInt64(tableName, "admin_id")
	_riskGameBlacklist.AdminName = field.NewString(tableName, "admin_name")
	_riskGameBlacklist.CreatedAt = field.NewField(tableName, "created_at")
	_riskGameBlacklist.UpdatedAt = field.NewField(tableName, "updated_at")

	_riskGameBlacklist.fillFieldMap()

	return _riskGameBlacklist
}

// riskGameBlacklist 游戏黑名单表
type riskGameBlacklist struct {
	riskGameBlacklistDo riskGameBlacklistDo

	ALL            field.Asterisk
	ID             field.Int64
	SeriesID       field.Int64  // 系列id
	SeriesName     field.String // 系列名称
	GameCode       field.String // 游戏code
	SeriesGameName field.String // 场馆名称
	GameID         field.String // 游戏id
	GameGame       field.String // 游戏名称
	Remark         field.String // 备注
	AdminID        field.Int64  // 管理员id
	AdminName      field.String // 管理员名称
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (r riskGameBlacklist) Table(newTableName string) *riskGameBlacklist {
	r.riskGameBlacklistDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskGameBlacklist) As(alias string) *riskGameBlacklist {
	r.riskGameBlacklistDo.DO = *(r.riskGameBlacklistDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskGameBlacklist) updateTableName(table string) *riskGameBlacklist {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.SeriesID = field.NewInt64(table, "series_id")
	r.SeriesName = field.NewString(table, "series_name")
	r.GameCode = field.NewString(table, "game_code")
	r.SeriesGameName = field.NewString(table, "series_game_name")
	r.GameID = field.NewString(table, "game_id")
	r.GameGame = field.NewString(table, "game_game")
	r.Remark = field.NewString(table, "remark")
	r.AdminID = field.NewInt64(table, "admin_id")
	r.AdminName = field.NewString(table, "admin_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *riskGameBlacklist) WithContext(ctx context.Context) IRiskGameBlacklistDo {
	return r.riskGameBlacklistDo.WithContext(ctx)
}

func (r riskGameBlacklist) TableName() string { return r.riskGameBlacklistDo.TableName() }

func (r riskGameBlacklist) Alias() string { return r.riskGameBlacklistDo.Alias() }

func (r riskGameBlacklist) Columns(cols ...field.Expr) gen.Columns {
	return r.riskGameBlacklistDo.Columns(cols...)
}

func (r *riskGameBlacklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskGameBlacklist) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["id"] = r.ID
	r.fieldMap["series_id"] = r.SeriesID
	r.fieldMap["series_name"] = r.SeriesName
	r.fieldMap["game_code"] = r.GameCode
	r.fieldMap["series_game_name"] = r.SeriesGameName
	r.fieldMap["game_id"] = r.GameID
	r.fieldMap["game_game"] = r.GameGame
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["admin_id"] = r.AdminID
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r riskGameBlacklist) clone(db *gorm.DB) riskGameBlacklist {
	r.riskGameBlacklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskGameBlacklist) replaceDB(db *gorm.DB) riskGameBlacklist {
	r.riskGameBlacklistDo.ReplaceDB(db)
	return r
}

type riskGameBlacklistDo struct{ gen.DO }

type IRiskGameBlacklistDo interface {
	gen.SubQuery
	Debug() IRiskGameBlacklistDo
	WithContext(ctx context.Context) IRiskGameBlacklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskGameBlacklistDo
	WriteDB() IRiskGameBlacklistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskGameBlacklistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskGameBlacklistDo
	Not(conds ...gen.Condition) IRiskGameBlacklistDo
	Or(conds ...gen.Condition) IRiskGameBlacklistDo
	Select(conds ...field.Expr) IRiskGameBlacklistDo
	Where(conds ...gen.Condition) IRiskGameBlacklistDo
	Order(conds ...field.Expr) IRiskGameBlacklistDo
	Distinct(cols ...field.Expr) IRiskGameBlacklistDo
	Omit(cols ...field.Expr) IRiskGameBlacklistDo
	Join(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo
	Group(cols ...field.Expr) IRiskGameBlacklistDo
	Having(conds ...gen.Condition) IRiskGameBlacklistDo
	Limit(limit int) IRiskGameBlacklistDo
	Offset(offset int) IRiskGameBlacklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskGameBlacklistDo
	Unscoped() IRiskGameBlacklistDo
	Create(values ...*model.RiskGameBlacklist) error
	CreateInBatches(values []*model.RiskGameBlacklist, batchSize int) error
	Save(values ...*model.RiskGameBlacklist) error
	First() (*model.RiskGameBlacklist, error)
	Take() (*model.RiskGameBlacklist, error)
	Last() (*model.RiskGameBlacklist, error)
	Find() ([]*model.RiskGameBlacklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskGameBlacklist, err error)
	FindInBatches(result *[]*model.RiskGameBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskGameBlacklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskGameBlacklistDo
	Assign(attrs ...field.AssignExpr) IRiskGameBlacklistDo
	Joins(fields ...field.RelationField) IRiskGameBlacklistDo
	Preload(fields ...field.RelationField) IRiskGameBlacklistDo
	FirstOrInit() (*model.RiskGameBlacklist, error)
	FirstOrCreate() (*model.RiskGameBlacklist, error)
	FindByPage(offset int, limit int) (result []*model.RiskGameBlacklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskGameBlacklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskGameBlacklistDo) Debug() IRiskGameBlacklistDo {
	return r.withDO(r.DO.Debug())
}

func (r riskGameBlacklistDo) WithContext(ctx context.Context) IRiskGameBlacklistDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskGameBlacklistDo) ReadDB() IRiskGameBlacklistDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskGameBlacklistDo) WriteDB() IRiskGameBlacklistDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskGameBlacklistDo) Session(config *gorm.Session) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskGameBlacklistDo) Clauses(conds ...clause.Expression) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskGameBlacklistDo) Returning(value interface{}, columns ...string) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskGameBlacklistDo) Not(conds ...gen.Condition) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskGameBlacklistDo) Or(conds ...gen.Condition) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskGameBlacklistDo) Select(conds ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskGameBlacklistDo) Where(conds ...gen.Condition) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskGameBlacklistDo) Order(conds ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskGameBlacklistDo) Distinct(cols ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskGameBlacklistDo) Omit(cols ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskGameBlacklistDo) Join(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskGameBlacklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskGameBlacklistDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskGameBlacklistDo) Group(cols ...field.Expr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskGameBlacklistDo) Having(conds ...gen.Condition) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskGameBlacklistDo) Limit(limit int) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskGameBlacklistDo) Offset(offset int) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskGameBlacklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskGameBlacklistDo) Unscoped() IRiskGameBlacklistDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskGameBlacklistDo) Create(values ...*model.RiskGameBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskGameBlacklistDo) CreateInBatches(values []*model.RiskGameBlacklist, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskGameBlacklistDo) Save(values ...*model.RiskGameBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskGameBlacklistDo) First() (*model.RiskGameBlacklist, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskGameBlacklist), nil
	}
}

func (r riskGameBlacklistDo) Take() (*model.RiskGameBlacklist, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskGameBlacklist), nil
	}
}

func (r riskGameBlacklistDo) Last() (*model.RiskGameBlacklist, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskGameBlacklist), nil
	}
}

func (r riskGameBlacklistDo) Find() ([]*model.RiskGameBlacklist, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskGameBlacklist), err
}

func (r riskGameBlacklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskGameBlacklist, err error) {
	buf := make([]*model.RiskGameBlacklist, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskGameBlacklistDo) FindInBatches(result *[]*model.RiskGameBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskGameBlacklistDo) Attrs(attrs ...field.AssignExpr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskGameBlacklistDo) Assign(attrs ...field.AssignExpr) IRiskGameBlacklistDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskGameBlacklistDo) Joins(fields ...field.RelationField) IRiskGameBlacklistDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskGameBlacklistDo) Preload(fields ...field.RelationField) IRiskGameBlacklistDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskGameBlacklistDo) FirstOrInit() (*model.RiskGameBlacklist, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskGameBlacklist), nil
	}
}

func (r riskGameBlacklistDo) FirstOrCreate() (*model.RiskGameBlacklist, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskGameBlacklist), nil
	}
}

func (r riskGameBlacklistDo) FindByPage(offset int, limit int) (result []*model.RiskGameBlacklist, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskGameBlacklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskGameBlacklistDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskGameBlacklistDo) Delete(models ...*model.RiskGameBlacklist) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskGameBlacklistDo) withDO(do gen.Dao) *riskGameBlacklistDo {
	r.DO = *do.(*gen.DO)
	return r
}
