// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newBindPaySort(db *gorm.DB, opts ...gen.DOOption) bindPaySort {
	_bindPaySort := bindPaySort{}

	_bindPaySort.bindPaySortDo.UseDB(db, opts...)
	_bindPaySort.bindPaySortDo.UseModel(&model.BindPaySort{})

	tableName := _bindPaySort.bindPaySortDo.TableName()
	_bindPaySort.ALL = field.NewAsterisk(tableName)
	_bindPaySort.ID = field.NewInt64(tableName, "id")
	_bindPaySort.PayLevel = field.NewString(tableName, "pay_level")
	_bindPaySort.BindField = field.NewString(tableName, "bind_field")
	_bindPaySort.PayType = field.NewString(tableName, "pay_type")
	_bindPaySort.PayID = field.NewInt64(tableName, "pay_id")
	_bindPaySort.Sort = field.NewInt64(tableName, "sort")
	_bindPaySort.CreatedAt = field.NewField(tableName, "created_at")
	_bindPaySort.UpdatedAt = field.NewField(tableName, "updated_at")

	_bindPaySort.fillFieldMap()

	return _bindPaySort
}

type bindPaySort struct {
	bindPaySortDo bindPaySortDo

	ALL       field.Asterisk
	ID        field.Int64
	PayLevel  field.String // pay_level的en_name
	BindField field.String // 关联pay_levels的pc_bind_pay和bind_pay
	PayType   field.String // pay_type的en_name
	PayID     field.Int64  // pay_id
	Sort      field.Int64  // 排序
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (b bindPaySort) Table(newTableName string) *bindPaySort {
	b.bindPaySortDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bindPaySort) As(alias string) *bindPaySort {
	b.bindPaySortDo.DO = *(b.bindPaySortDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bindPaySort) updateTableName(table string) *bindPaySort {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.PayLevel = field.NewString(table, "pay_level")
	b.BindField = field.NewString(table, "bind_field")
	b.PayType = field.NewString(table, "pay_type")
	b.PayID = field.NewInt64(table, "pay_id")
	b.Sort = field.NewInt64(table, "sort")
	b.CreatedAt = field.NewField(table, "created_at")
	b.UpdatedAt = field.NewField(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *bindPaySort) WithContext(ctx context.Context) IBindPaySortDo {
	return b.bindPaySortDo.WithContext(ctx)
}

func (b bindPaySort) TableName() string { return b.bindPaySortDo.TableName() }

func (b bindPaySort) Alias() string { return b.bindPaySortDo.Alias() }

func (b bindPaySort) Columns(cols ...field.Expr) gen.Columns { return b.bindPaySortDo.Columns(cols...) }

func (b *bindPaySort) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bindPaySort) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["pay_level"] = b.PayLevel
	b.fieldMap["bind_field"] = b.BindField
	b.fieldMap["pay_type"] = b.PayType
	b.fieldMap["pay_id"] = b.PayID
	b.fieldMap["sort"] = b.Sort
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b bindPaySort) clone(db *gorm.DB) bindPaySort {
	b.bindPaySortDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bindPaySort) replaceDB(db *gorm.DB) bindPaySort {
	b.bindPaySortDo.ReplaceDB(db)
	return b
}

type bindPaySortDo struct{ gen.DO }

type IBindPaySortDo interface {
	gen.SubQuery
	Debug() IBindPaySortDo
	WithContext(ctx context.Context) IBindPaySortDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBindPaySortDo
	WriteDB() IBindPaySortDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBindPaySortDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBindPaySortDo
	Not(conds ...gen.Condition) IBindPaySortDo
	Or(conds ...gen.Condition) IBindPaySortDo
	Select(conds ...field.Expr) IBindPaySortDo
	Where(conds ...gen.Condition) IBindPaySortDo
	Order(conds ...field.Expr) IBindPaySortDo
	Distinct(cols ...field.Expr) IBindPaySortDo
	Omit(cols ...field.Expr) IBindPaySortDo
	Join(table schema.Tabler, on ...field.Expr) IBindPaySortDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBindPaySortDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBindPaySortDo
	Group(cols ...field.Expr) IBindPaySortDo
	Having(conds ...gen.Condition) IBindPaySortDo
	Limit(limit int) IBindPaySortDo
	Offset(offset int) IBindPaySortDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBindPaySortDo
	Unscoped() IBindPaySortDo
	Create(values ...*model.BindPaySort) error
	CreateInBatches(values []*model.BindPaySort, batchSize int) error
	Save(values ...*model.BindPaySort) error
	First() (*model.BindPaySort, error)
	Take() (*model.BindPaySort, error)
	Last() (*model.BindPaySort, error)
	Find() ([]*model.BindPaySort, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BindPaySort, err error)
	FindInBatches(result *[]*model.BindPaySort, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BindPaySort) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBindPaySortDo
	Assign(attrs ...field.AssignExpr) IBindPaySortDo
	Joins(fields ...field.RelationField) IBindPaySortDo
	Preload(fields ...field.RelationField) IBindPaySortDo
	FirstOrInit() (*model.BindPaySort, error)
	FirstOrCreate() (*model.BindPaySort, error)
	FindByPage(offset int, limit int) (result []*model.BindPaySort, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBindPaySortDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bindPaySortDo) Debug() IBindPaySortDo {
	return b.withDO(b.DO.Debug())
}

func (b bindPaySortDo) WithContext(ctx context.Context) IBindPaySortDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bindPaySortDo) ReadDB() IBindPaySortDo {
	return b.Clauses(dbresolver.Read)
}

func (b bindPaySortDo) WriteDB() IBindPaySortDo {
	return b.Clauses(dbresolver.Write)
}

func (b bindPaySortDo) Session(config *gorm.Session) IBindPaySortDo {
	return b.withDO(b.DO.Session(config))
}

func (b bindPaySortDo) Clauses(conds ...clause.Expression) IBindPaySortDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bindPaySortDo) Returning(value interface{}, columns ...string) IBindPaySortDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bindPaySortDo) Not(conds ...gen.Condition) IBindPaySortDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bindPaySortDo) Or(conds ...gen.Condition) IBindPaySortDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bindPaySortDo) Select(conds ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bindPaySortDo) Where(conds ...gen.Condition) IBindPaySortDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bindPaySortDo) Order(conds ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bindPaySortDo) Distinct(cols ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bindPaySortDo) Omit(cols ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bindPaySortDo) Join(table schema.Tabler, on ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bindPaySortDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bindPaySortDo) RightJoin(table schema.Tabler, on ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bindPaySortDo) Group(cols ...field.Expr) IBindPaySortDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bindPaySortDo) Having(conds ...gen.Condition) IBindPaySortDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bindPaySortDo) Limit(limit int) IBindPaySortDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bindPaySortDo) Offset(offset int) IBindPaySortDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bindPaySortDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBindPaySortDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bindPaySortDo) Unscoped() IBindPaySortDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bindPaySortDo) Create(values ...*model.BindPaySort) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bindPaySortDo) CreateInBatches(values []*model.BindPaySort, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bindPaySortDo) Save(values ...*model.BindPaySort) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bindPaySortDo) First() (*model.BindPaySort, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BindPaySort), nil
	}
}

func (b bindPaySortDo) Take() (*model.BindPaySort, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BindPaySort), nil
	}
}

func (b bindPaySortDo) Last() (*model.BindPaySort, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BindPaySort), nil
	}
}

func (b bindPaySortDo) Find() ([]*model.BindPaySort, error) {
	result, err := b.DO.Find()
	return result.([]*model.BindPaySort), err
}

func (b bindPaySortDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BindPaySort, err error) {
	buf := make([]*model.BindPaySort, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bindPaySortDo) FindInBatches(result *[]*model.BindPaySort, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bindPaySortDo) Attrs(attrs ...field.AssignExpr) IBindPaySortDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bindPaySortDo) Assign(attrs ...field.AssignExpr) IBindPaySortDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bindPaySortDo) Joins(fields ...field.RelationField) IBindPaySortDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bindPaySortDo) Preload(fields ...field.RelationField) IBindPaySortDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bindPaySortDo) FirstOrInit() (*model.BindPaySort, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BindPaySort), nil
	}
}

func (b bindPaySortDo) FirstOrCreate() (*model.BindPaySort, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BindPaySort), nil
	}
}

func (b bindPaySortDo) FindByPage(offset int, limit int) (result []*model.BindPaySort, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bindPaySortDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bindPaySortDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bindPaySortDo) Delete(models ...*model.BindPaySort) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bindPaySortDo) withDO(do gen.Dao) *bindPaySortDo {
	b.DO = *do.(*gen.DO)
	return b
}
