// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSeriesGame(db *gorm.DB, opts ...gen.DOOption) seriesGame {
	_seriesGame := seriesGame{}

	_seriesGame.seriesGameDo.UseDB(db, opts...)
	_seriesGame.seriesGameDo.UseModel(&model.SeriesGame{})

	tableName := _seriesGame.seriesGameDo.TableName()
	_seriesGame.ALL = field.NewAsterisk(tableName)
	_seriesGame.ID = field.NewInt64(tableName, "id")
	_seriesGame.SeriesID = field.NewInt64(tableName, "series_id")
	_seriesGame.CnName = field.NewString(tableName, "cn_name")
	_seriesGame.GameCode = field.NewString(tableName, "game_code")
	_seriesGame.IsTest = field.NewInt64(tableName, "is_test")
	_seriesGame.IsOpen = field.NewInt64(tableName, "is_open")
	_seriesGame.PicURL = field.NewString(tableName, "pic_url")
	_seriesGame.HotPicURL = field.NewString(tableName, "hot_pic_url")
	_seriesGame.Sort = field.NewInt64(tableName, "sort")
	_seriesGame.HotSort = field.NewInt64(tableName, "hot_sort")
	_seriesGame.StartAt = field.NewField(tableName, "start_at")
	_seriesGame.EndAt = field.NewField(tableName, "end_at")
	_seriesGame.MinMoney = field.NewFloat64(tableName, "min_money")
	_seriesGame.MaxMoney = field.NewFloat64(tableName, "max_money")
	_seriesGame.IsHot = field.NewInt64(tableName, "is_hot")
	_seriesGame.IsShow = field.NewInt64(tableName, "is_show")
	_seriesGame.Fanshui = field.NewFloat64(tableName, "fanshui")
	_seriesGame.Remark = field.NewString(tableName, "remark")
	_seriesGame.GameInfo = field.NewString(tableName, "game_info")
	_seriesGame.CreatedAt = field.NewField(tableName, "created_at")
	_seriesGame.UpdatedAt = field.NewField(tableName, "updated_at")
	_seriesGame.GameRecordURL = field.NewString(tableName, "game_record_url")
	_seriesGame.WorldURL = field.NewString(tableName, "world_url")
	_seriesGame.AdminID = field.NewInt64(tableName, "admin_id")
	_seriesGame.AdminName = field.NewString(tableName, "admin_name")

	_seriesGame.fillFieldMap()

	return _seriesGame
}

type seriesGame struct {
	seriesGameDo seriesGameDo

	ALL           field.Asterisk
	ID            field.Int64
	SeriesID      field.Int64
	CnName        field.String
	GameCode      field.String
	IsTest        field.Int64   // 是否在测试:0:正式；1:只有测试人员能玩
	IsOpen        field.Int64   // 是否开放
	PicURL        field.String  // 图标地址
	HotPicURL     field.String  // 热门图片地址
	Sort          field.Int64   // 排序
	HotSort       field.Int64   // 热门排序
	StartAt       field.Field   // 休市开始日期
	EndAt         field.Field   // 休市结束日期,结束日期即为开始日期
	MinMoney      field.Float64 // 最小金额
	MaxMoney      field.Float64 // 投注时最大金额
	IsHot         field.Int64   // 是否热门0:否；1:是
	IsShow        field.Int64   // 是否有二级页面0:否；1:是
	Fanshui       field.Float64 // 返水百分比%
	Remark        field.String  // 手机端备注
	GameInfo      field.String  // pc端游戏说明
	CreatedAt     field.Field
	UpdatedAt     field.Field
	GameRecordURL field.String // 游戏记录地址
	WorldURL      field.String // 世界杯图片
	AdminID       field.Int64
	AdminName     field.String

	fieldMap map[string]field.Expr
}

func (s seriesGame) Table(newTableName string) *seriesGame {
	s.seriesGameDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seriesGame) As(alias string) *seriesGame {
	s.seriesGameDo.DO = *(s.seriesGameDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seriesGame) updateTableName(table string) *seriesGame {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SeriesID = field.NewInt64(table, "series_id")
	s.CnName = field.NewString(table, "cn_name")
	s.GameCode = field.NewString(table, "game_code")
	s.IsTest = field.NewInt64(table, "is_test")
	s.IsOpen = field.NewInt64(table, "is_open")
	s.PicURL = field.NewString(table, "pic_url")
	s.HotPicURL = field.NewString(table, "hot_pic_url")
	s.Sort = field.NewInt64(table, "sort")
	s.HotSort = field.NewInt64(table, "hot_sort")
	s.StartAt = field.NewField(table, "start_at")
	s.EndAt = field.NewField(table, "end_at")
	s.MinMoney = field.NewFloat64(table, "min_money")
	s.MaxMoney = field.NewFloat64(table, "max_money")
	s.IsHot = field.NewInt64(table, "is_hot")
	s.IsShow = field.NewInt64(table, "is_show")
	s.Fanshui = field.NewFloat64(table, "fanshui")
	s.Remark = field.NewString(table, "remark")
	s.GameInfo = field.NewString(table, "game_info")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.GameRecordURL = field.NewString(table, "game_record_url")
	s.WorldURL = field.NewString(table, "world_url")
	s.AdminID = field.NewInt64(table, "admin_id")
	s.AdminName = field.NewString(table, "admin_name")

	s.fillFieldMap()

	return s
}

func (s *seriesGame) WithContext(ctx context.Context) ISeriesGameDo {
	return s.seriesGameDo.WithContext(ctx)
}

func (s seriesGame) TableName() string { return s.seriesGameDo.TableName() }

func (s seriesGame) Alias() string { return s.seriesGameDo.Alias() }

func (s seriesGame) Columns(cols ...field.Expr) gen.Columns { return s.seriesGameDo.Columns(cols...) }

func (s *seriesGame) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seriesGame) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 25)
	s.fieldMap["id"] = s.ID
	s.fieldMap["series_id"] = s.SeriesID
	s.fieldMap["cn_name"] = s.CnName
	s.fieldMap["game_code"] = s.GameCode
	s.fieldMap["is_test"] = s.IsTest
	s.fieldMap["is_open"] = s.IsOpen
	s.fieldMap["pic_url"] = s.PicURL
	s.fieldMap["hot_pic_url"] = s.HotPicURL
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["hot_sort"] = s.HotSort
	s.fieldMap["start_at"] = s.StartAt
	s.fieldMap["end_at"] = s.EndAt
	s.fieldMap["min_money"] = s.MinMoney
	s.fieldMap["max_money"] = s.MaxMoney
	s.fieldMap["is_hot"] = s.IsHot
	s.fieldMap["is_show"] = s.IsShow
	s.fieldMap["fanshui"] = s.Fanshui
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["game_info"] = s.GameInfo
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["game_record_url"] = s.GameRecordURL
	s.fieldMap["world_url"] = s.WorldURL
	s.fieldMap["admin_id"] = s.AdminID
	s.fieldMap["admin_name"] = s.AdminName
}

func (s seriesGame) clone(db *gorm.DB) seriesGame {
	s.seriesGameDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seriesGame) replaceDB(db *gorm.DB) seriesGame {
	s.seriesGameDo.ReplaceDB(db)
	return s
}

type seriesGameDo struct{ gen.DO }

type ISeriesGameDo interface {
	gen.SubQuery
	Debug() ISeriesGameDo
	WithContext(ctx context.Context) ISeriesGameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeriesGameDo
	WriteDB() ISeriesGameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeriesGameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeriesGameDo
	Not(conds ...gen.Condition) ISeriesGameDo
	Or(conds ...gen.Condition) ISeriesGameDo
	Select(conds ...field.Expr) ISeriesGameDo
	Where(conds ...gen.Condition) ISeriesGameDo
	Order(conds ...field.Expr) ISeriesGameDo
	Distinct(cols ...field.Expr) ISeriesGameDo
	Omit(cols ...field.Expr) ISeriesGameDo
	Join(table schema.Tabler, on ...field.Expr) ISeriesGameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesGameDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeriesGameDo
	Group(cols ...field.Expr) ISeriesGameDo
	Having(conds ...gen.Condition) ISeriesGameDo
	Limit(limit int) ISeriesGameDo
	Offset(offset int) ISeriesGameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesGameDo
	Unscoped() ISeriesGameDo
	Create(values ...*model.SeriesGame) error
	CreateInBatches(values []*model.SeriesGame, batchSize int) error
	Save(values ...*model.SeriesGame) error
	First() (*model.SeriesGame, error)
	Take() (*model.SeriesGame, error)
	Last() (*model.SeriesGame, error)
	Find() ([]*model.SeriesGame, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeriesGame, err error)
	FindInBatches(result *[]*model.SeriesGame, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeriesGame) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeriesGameDo
	Assign(attrs ...field.AssignExpr) ISeriesGameDo
	Joins(fields ...field.RelationField) ISeriesGameDo
	Preload(fields ...field.RelationField) ISeriesGameDo
	FirstOrInit() (*model.SeriesGame, error)
	FirstOrCreate() (*model.SeriesGame, error)
	FindByPage(offset int, limit int) (result []*model.SeriesGame, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeriesGameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seriesGameDo) Debug() ISeriesGameDo {
	return s.withDO(s.DO.Debug())
}

func (s seriesGameDo) WithContext(ctx context.Context) ISeriesGameDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seriesGameDo) ReadDB() ISeriesGameDo {
	return s.Clauses(dbresolver.Read)
}

func (s seriesGameDo) WriteDB() ISeriesGameDo {
	return s.Clauses(dbresolver.Write)
}

func (s seriesGameDo) Session(config *gorm.Session) ISeriesGameDo {
	return s.withDO(s.DO.Session(config))
}

func (s seriesGameDo) Clauses(conds ...clause.Expression) ISeriesGameDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seriesGameDo) Returning(value interface{}, columns ...string) ISeriesGameDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seriesGameDo) Not(conds ...gen.Condition) ISeriesGameDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seriesGameDo) Or(conds ...gen.Condition) ISeriesGameDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seriesGameDo) Select(conds ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seriesGameDo) Where(conds ...gen.Condition) ISeriesGameDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seriesGameDo) Order(conds ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seriesGameDo) Distinct(cols ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seriesGameDo) Omit(cols ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seriesGameDo) Join(table schema.Tabler, on ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seriesGameDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seriesGameDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seriesGameDo) Group(cols ...field.Expr) ISeriesGameDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seriesGameDo) Having(conds ...gen.Condition) ISeriesGameDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seriesGameDo) Limit(limit int) ISeriesGameDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seriesGameDo) Offset(offset int) ISeriesGameDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seriesGameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesGameDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seriesGameDo) Unscoped() ISeriesGameDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seriesGameDo) Create(values ...*model.SeriesGame) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seriesGameDo) CreateInBatches(values []*model.SeriesGame, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seriesGameDo) Save(values ...*model.SeriesGame) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seriesGameDo) First() (*model.SeriesGame, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGame), nil
	}
}

func (s seriesGameDo) Take() (*model.SeriesGame, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGame), nil
	}
}

func (s seriesGameDo) Last() (*model.SeriesGame, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGame), nil
	}
}

func (s seriesGameDo) Find() ([]*model.SeriesGame, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeriesGame), err
}

func (s seriesGameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeriesGame, err error) {
	buf := make([]*model.SeriesGame, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seriesGameDo) FindInBatches(result *[]*model.SeriesGame, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seriesGameDo) Attrs(attrs ...field.AssignExpr) ISeriesGameDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seriesGameDo) Assign(attrs ...field.AssignExpr) ISeriesGameDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seriesGameDo) Joins(fields ...field.RelationField) ISeriesGameDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seriesGameDo) Preload(fields ...field.RelationField) ISeriesGameDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seriesGameDo) FirstOrInit() (*model.SeriesGame, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGame), nil
	}
}

func (s seriesGameDo) FirstOrCreate() (*model.SeriesGame, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGame), nil
	}
}

func (s seriesGameDo) FindByPage(offset int, limit int) (result []*model.SeriesGame, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seriesGameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seriesGameDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seriesGameDo) Delete(models ...*model.SeriesGame) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seriesGameDo) withDO(do gen.Dao) *seriesGameDo {
	s.DO = *do.(*gen.DO)
	return s
}
