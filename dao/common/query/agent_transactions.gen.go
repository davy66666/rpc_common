// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentTransaction(db *gorm.DB, opts ...gen.DOOption) agentTransaction {
	_agentTransaction := agentTransaction{}

	_agentTransaction.agentTransactionDo.UseDB(db, opts...)
	_agentTransaction.agentTransactionDo.UseModel(&model.AgentTransaction{})

	tableName := _agentTransaction.agentTransactionDo.TableName()
	_agentTransaction.ALL = field.NewAsterisk(tableName)
	_agentTransaction.ID = field.NewInt64(tableName, "id")
	_agentTransaction.AgentID = field.NewInt64(tableName, "agent_id")
	_agentTransaction.AgentName = field.NewString(tableName, "agent_name")
	_agentTransaction.ParentID = field.NewInt64(tableName, "parent_id")
	_agentTransaction.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentTransaction.Amount = field.NewFloat64(tableName, "amount")
	_agentTransaction.TransFatherID = field.NewInt64(tableName, "trans_father_id")
	_agentTransaction.TransTypesID = field.NewInt64(tableName, "trans_types_id")
	_agentTransaction.TransTypesCnTitle = field.NewString(tableName, "trans_types_cn_title")
	_agentTransaction.TransTypesEnTitle = field.NewString(tableName, "trans_types_en_title")
	_agentTransaction.IsIncome = field.NewInt64(tableName, "is_income")
	_agentTransaction.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_agentTransaction.Money = field.NewFloat64(tableName, "money")
	_agentTransaction.BillID = field.NewString(tableName, "bill_id")
	_agentTransaction.AdminID = field.NewInt64(tableName, "admin_id")
	_agentTransaction.Adminname = field.NewString(tableName, "adminname")
	_agentTransaction.IP = field.NewString(tableName, "ip")
	_agentTransaction.Status = field.NewInt64(tableName, "status")
	_agentTransaction.Remark = field.NewString(tableName, "remark")
	_agentTransaction.PayType = field.NewString(tableName, "pay_type")
	_agentTransaction.CreatedAt = field.NewField(tableName, "created_at")
	_agentTransaction.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentTransaction.Description = field.NewString(tableName, "description")
	_agentTransaction.IsFreeze = field.NewInt64(tableName, "is_freeze")

	_agentTransaction.fillFieldMap()

	return _agentTransaction
}

type agentTransaction struct {
	agentTransactionDo agentTransactionDo

	ALL               field.Asterisk
	ID                field.Int64
	AgentID           field.Int64
	AgentName         field.String
	ParentID          field.Int64 // 上级id
	ForefatherIds     field.String
	Amount            field.Float64 // 用户当前交易金额
	TransFatherID     field.Int64   // 账变类型父类
	TransTypesID      field.Int64
	TransTypesCnTitle field.String
	TransTypesEnTitle field.String
	IsIncome          field.Int64 // 是否入款
	BeforeMoney       field.Float64
	Money             field.Float64 // 交易后金额
	BillID            field.String
	AdminID           field.Int64
	Adminname         field.String
	IP                field.String
	Status            field.Int64  // 状态：0已删除,1:成功
	Remark            field.String // 备注
	PayType           field.String // 支付类型
	CreatedAt         field.Field  // 交易时间
	UpdatedAt         field.Field
	Description       field.String // 转账说明
	IsFreeze          field.Int64  // 是否冻结 1:是 0:否

	fieldMap map[string]field.Expr
}

func (a agentTransaction) Table(newTableName string) *agentTransaction {
	a.agentTransactionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentTransaction) As(alias string) *agentTransaction {
	a.agentTransactionDo.DO = *(a.agentTransactionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentTransaction) updateTableName(table string) *agentTransaction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.Amount = field.NewFloat64(table, "amount")
	a.TransFatherID = field.NewInt64(table, "trans_father_id")
	a.TransTypesID = field.NewInt64(table, "trans_types_id")
	a.TransTypesCnTitle = field.NewString(table, "trans_types_cn_title")
	a.TransTypesEnTitle = field.NewString(table, "trans_types_en_title")
	a.IsIncome = field.NewInt64(table, "is_income")
	a.BeforeMoney = field.NewFloat64(table, "before_money")
	a.Money = field.NewFloat64(table, "money")
	a.BillID = field.NewString(table, "bill_id")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.Adminname = field.NewString(table, "adminname")
	a.IP = field.NewString(table, "ip")
	a.Status = field.NewInt64(table, "status")
	a.Remark = field.NewString(table, "remark")
	a.PayType = field.NewString(table, "pay_type")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.Description = field.NewString(table, "description")
	a.IsFreeze = field.NewInt64(table, "is_freeze")

	a.fillFieldMap()

	return a
}

func (a *agentTransaction) WithContext(ctx context.Context) IAgentTransactionDo {
	return a.agentTransactionDo.WithContext(ctx)
}

func (a agentTransaction) TableName() string { return a.agentTransactionDo.TableName() }

func (a agentTransaction) Alias() string { return a.agentTransactionDo.Alias() }

func (a agentTransaction) Columns(cols ...field.Expr) gen.Columns {
	return a.agentTransactionDo.Columns(cols...)
}

func (a *agentTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentTransaction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 24)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["trans_father_id"] = a.TransFatherID
	a.fieldMap["trans_types_id"] = a.TransTypesID
	a.fieldMap["trans_types_cn_title"] = a.TransTypesCnTitle
	a.fieldMap["trans_types_en_title"] = a.TransTypesEnTitle
	a.fieldMap["is_income"] = a.IsIncome
	a.fieldMap["before_money"] = a.BeforeMoney
	a.fieldMap["money"] = a.Money
	a.fieldMap["bill_id"] = a.BillID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["adminname"] = a.Adminname
	a.fieldMap["ip"] = a.IP
	a.fieldMap["status"] = a.Status
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["pay_type"] = a.PayType
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["description"] = a.Description
	a.fieldMap["is_freeze"] = a.IsFreeze
}

func (a agentTransaction) clone(db *gorm.DB) agentTransaction {
	a.agentTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentTransaction) replaceDB(db *gorm.DB) agentTransaction {
	a.agentTransactionDo.ReplaceDB(db)
	return a
}

type agentTransactionDo struct{ gen.DO }

type IAgentTransactionDo interface {
	gen.SubQuery
	Debug() IAgentTransactionDo
	WithContext(ctx context.Context) IAgentTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentTransactionDo
	WriteDB() IAgentTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentTransactionDo
	Not(conds ...gen.Condition) IAgentTransactionDo
	Or(conds ...gen.Condition) IAgentTransactionDo
	Select(conds ...field.Expr) IAgentTransactionDo
	Where(conds ...gen.Condition) IAgentTransactionDo
	Order(conds ...field.Expr) IAgentTransactionDo
	Distinct(cols ...field.Expr) IAgentTransactionDo
	Omit(cols ...field.Expr) IAgentTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IAgentTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionDo
	Group(cols ...field.Expr) IAgentTransactionDo
	Having(conds ...gen.Condition) IAgentTransactionDo
	Limit(limit int) IAgentTransactionDo
	Offset(offset int) IAgentTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransactionDo
	Unscoped() IAgentTransactionDo
	Create(values ...*model.AgentTransaction) error
	CreateInBatches(values []*model.AgentTransaction, batchSize int) error
	Save(values ...*model.AgentTransaction) error
	First() (*model.AgentTransaction, error)
	Take() (*model.AgentTransaction, error)
	Last() (*model.AgentTransaction, error)
	Find() ([]*model.AgentTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransaction, err error)
	FindInBatches(result *[]*model.AgentTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentTransactionDo
	Assign(attrs ...field.AssignExpr) IAgentTransactionDo
	Joins(fields ...field.RelationField) IAgentTransactionDo
	Preload(fields ...field.RelationField) IAgentTransactionDo
	FirstOrInit() (*model.AgentTransaction, error)
	FirstOrCreate() (*model.AgentTransaction, error)
	FindByPage(offset int, limit int) (result []*model.AgentTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentTransactionDo) Debug() IAgentTransactionDo {
	return a.withDO(a.DO.Debug())
}

func (a agentTransactionDo) WithContext(ctx context.Context) IAgentTransactionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentTransactionDo) ReadDB() IAgentTransactionDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentTransactionDo) WriteDB() IAgentTransactionDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentTransactionDo) Session(config *gorm.Session) IAgentTransactionDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentTransactionDo) Clauses(conds ...clause.Expression) IAgentTransactionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentTransactionDo) Returning(value interface{}, columns ...string) IAgentTransactionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentTransactionDo) Not(conds ...gen.Condition) IAgentTransactionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentTransactionDo) Or(conds ...gen.Condition) IAgentTransactionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentTransactionDo) Select(conds ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentTransactionDo) Where(conds ...gen.Condition) IAgentTransactionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentTransactionDo) Order(conds ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentTransactionDo) Distinct(cols ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentTransactionDo) Omit(cols ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentTransactionDo) Join(table schema.Tabler, on ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentTransactionDo) Group(cols ...field.Expr) IAgentTransactionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentTransactionDo) Having(conds ...gen.Condition) IAgentTransactionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentTransactionDo) Limit(limit int) IAgentTransactionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentTransactionDo) Offset(offset int) IAgentTransactionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransactionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentTransactionDo) Unscoped() IAgentTransactionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentTransactionDo) Create(values ...*model.AgentTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentTransactionDo) CreateInBatches(values []*model.AgentTransaction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentTransactionDo) Save(values ...*model.AgentTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentTransactionDo) First() (*model.AgentTransaction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransaction), nil
	}
}

func (a agentTransactionDo) Take() (*model.AgentTransaction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransaction), nil
	}
}

func (a agentTransactionDo) Last() (*model.AgentTransaction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransaction), nil
	}
}

func (a agentTransactionDo) Find() ([]*model.AgentTransaction, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentTransaction), err
}

func (a agentTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransaction, err error) {
	buf := make([]*model.AgentTransaction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentTransactionDo) FindInBatches(result *[]*model.AgentTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentTransactionDo) Attrs(attrs ...field.AssignExpr) IAgentTransactionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentTransactionDo) Assign(attrs ...field.AssignExpr) IAgentTransactionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentTransactionDo) Joins(fields ...field.RelationField) IAgentTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentTransactionDo) Preload(fields ...field.RelationField) IAgentTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentTransactionDo) FirstOrInit() (*model.AgentTransaction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransaction), nil
	}
}

func (a agentTransactionDo) FirstOrCreate() (*model.AgentTransaction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransaction), nil
	}
}

func (a agentTransactionDo) FindByPage(offset int, limit int) (result []*model.AgentTransaction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentTransactionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentTransactionDo) Delete(models ...*model.AgentTransaction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentTransactionDo) withDO(do gen.Dao) *agentTransactionDo {
	a.DO = *do.(*gen.DO)
	return a
}
