// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivitySportJackpotConfig(db *gorm.DB, opts ...gen.DOOption) activitySportJackpotConfig {
	_activitySportJackpotConfig := activitySportJackpotConfig{}

	_activitySportJackpotConfig.activitySportJackpotConfigDo.UseDB(db, opts...)
	_activitySportJackpotConfig.activitySportJackpotConfigDo.UseModel(&model.ActivitySportJackpotConfig{})

	tableName := _activitySportJackpotConfig.activitySportJackpotConfigDo.TableName()
	_activitySportJackpotConfig.ALL = field.NewAsterisk(tableName)
	_activitySportJackpotConfig.ID = field.NewInt64(tableName, "id")
	_activitySportJackpotConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_activitySportJackpotConfig.StartRange = field.NewInt64(tableName, "start_range")
	_activitySportJackpotConfig.EndRange = field.NewInt64(tableName, "end_range")
	_activitySportJackpotConfig.Time = field.NewInt64(tableName, "time")
	_activitySportJackpotConfig.Amount = field.NewFloat64(tableName, "amount")
	_activitySportJackpotConfig.AdminName = field.NewString(tableName, "admin_name")
	_activitySportJackpotConfig.CreatedAt = field.NewField(tableName, "created_at")
	_activitySportJackpotConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_activitySportJackpotConfig.fillFieldMap()

	return _activitySportJackpotConfig
}

// activitySportJackpotConfig 奖池配置
type activitySportJackpotConfig struct {
	activitySportJackpotConfigDo activitySportJackpotConfigDo

	ALL        field.Asterisk
	ID         field.Int64
	IsOpen     field.Int64   // 开关
	StartRange field.Int64   // 自动增长开始基数
	EndRange   field.Int64   // 自动增长结束基数
	Time       field.Int64   // 自动增长频率（秒）
	Amount     field.Float64 // 余额
	AdminName  field.String  // 操作员
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (a activitySportJackpotConfig) Table(newTableName string) *activitySportJackpotConfig {
	a.activitySportJackpotConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activitySportJackpotConfig) As(alias string) *activitySportJackpotConfig {
	a.activitySportJackpotConfigDo.DO = *(a.activitySportJackpotConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activitySportJackpotConfig) updateTableName(table string) *activitySportJackpotConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.StartRange = field.NewInt64(table, "start_range")
	a.EndRange = field.NewInt64(table, "end_range")
	a.Time = field.NewInt64(table, "time")
	a.Amount = field.NewFloat64(table, "amount")
	a.AdminName = field.NewString(table, "admin_name")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activitySportJackpotConfig) WithContext(ctx context.Context) IActivitySportJackpotConfigDo {
	return a.activitySportJackpotConfigDo.WithContext(ctx)
}

func (a activitySportJackpotConfig) TableName() string {
	return a.activitySportJackpotConfigDo.TableName()
}

func (a activitySportJackpotConfig) Alias() string { return a.activitySportJackpotConfigDo.Alias() }

func (a activitySportJackpotConfig) Columns(cols ...field.Expr) gen.Columns {
	return a.activitySportJackpotConfigDo.Columns(cols...)
}

func (a *activitySportJackpotConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activitySportJackpotConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["start_range"] = a.StartRange
	a.fieldMap["end_range"] = a.EndRange
	a.fieldMap["time"] = a.Time
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activitySportJackpotConfig) clone(db *gorm.DB) activitySportJackpotConfig {
	a.activitySportJackpotConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activitySportJackpotConfig) replaceDB(db *gorm.DB) activitySportJackpotConfig {
	a.activitySportJackpotConfigDo.ReplaceDB(db)
	return a
}

type activitySportJackpotConfigDo struct{ gen.DO }

type IActivitySportJackpotConfigDo interface {
	gen.SubQuery
	Debug() IActivitySportJackpotConfigDo
	WithContext(ctx context.Context) IActivitySportJackpotConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivitySportJackpotConfigDo
	WriteDB() IActivitySportJackpotConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivitySportJackpotConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivitySportJackpotConfigDo
	Not(conds ...gen.Condition) IActivitySportJackpotConfigDo
	Or(conds ...gen.Condition) IActivitySportJackpotConfigDo
	Select(conds ...field.Expr) IActivitySportJackpotConfigDo
	Where(conds ...gen.Condition) IActivitySportJackpotConfigDo
	Order(conds ...field.Expr) IActivitySportJackpotConfigDo
	Distinct(cols ...field.Expr) IActivitySportJackpotConfigDo
	Omit(cols ...field.Expr) IActivitySportJackpotConfigDo
	Join(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo
	Group(cols ...field.Expr) IActivitySportJackpotConfigDo
	Having(conds ...gen.Condition) IActivitySportJackpotConfigDo
	Limit(limit int) IActivitySportJackpotConfigDo
	Offset(offset int) IActivitySportJackpotConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportJackpotConfigDo
	Unscoped() IActivitySportJackpotConfigDo
	Create(values ...*model.ActivitySportJackpotConfig) error
	CreateInBatches(values []*model.ActivitySportJackpotConfig, batchSize int) error
	Save(values ...*model.ActivitySportJackpotConfig) error
	First() (*model.ActivitySportJackpotConfig, error)
	Take() (*model.ActivitySportJackpotConfig, error)
	Last() (*model.ActivitySportJackpotConfig, error)
	Find() ([]*model.ActivitySportJackpotConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportJackpotConfig, err error)
	FindInBatches(result *[]*model.ActivitySportJackpotConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivitySportJackpotConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivitySportJackpotConfigDo
	Assign(attrs ...field.AssignExpr) IActivitySportJackpotConfigDo
	Joins(fields ...field.RelationField) IActivitySportJackpotConfigDo
	Preload(fields ...field.RelationField) IActivitySportJackpotConfigDo
	FirstOrInit() (*model.ActivitySportJackpotConfig, error)
	FirstOrCreate() (*model.ActivitySportJackpotConfig, error)
	FindByPage(offset int, limit int) (result []*model.ActivitySportJackpotConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivitySportJackpotConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activitySportJackpotConfigDo) Debug() IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a activitySportJackpotConfigDo) WithContext(ctx context.Context) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activitySportJackpotConfigDo) ReadDB() IActivitySportJackpotConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a activitySportJackpotConfigDo) WriteDB() IActivitySportJackpotConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a activitySportJackpotConfigDo) Session(config *gorm.Session) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a activitySportJackpotConfigDo) Clauses(conds ...clause.Expression) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activitySportJackpotConfigDo) Returning(value interface{}, columns ...string) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activitySportJackpotConfigDo) Not(conds ...gen.Condition) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activitySportJackpotConfigDo) Or(conds ...gen.Condition) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activitySportJackpotConfigDo) Select(conds ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activitySportJackpotConfigDo) Where(conds ...gen.Condition) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activitySportJackpotConfigDo) Order(conds ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activitySportJackpotConfigDo) Distinct(cols ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activitySportJackpotConfigDo) Omit(cols ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activitySportJackpotConfigDo) Join(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activitySportJackpotConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activitySportJackpotConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activitySportJackpotConfigDo) Group(cols ...field.Expr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activitySportJackpotConfigDo) Having(conds ...gen.Condition) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activitySportJackpotConfigDo) Limit(limit int) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activitySportJackpotConfigDo) Offset(offset int) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activitySportJackpotConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activitySportJackpotConfigDo) Unscoped() IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activitySportJackpotConfigDo) Create(values ...*model.ActivitySportJackpotConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activitySportJackpotConfigDo) CreateInBatches(values []*model.ActivitySportJackpotConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activitySportJackpotConfigDo) Save(values ...*model.ActivitySportJackpotConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activitySportJackpotConfigDo) First() (*model.ActivitySportJackpotConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotConfig), nil
	}
}

func (a activitySportJackpotConfigDo) Take() (*model.ActivitySportJackpotConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotConfig), nil
	}
}

func (a activitySportJackpotConfigDo) Last() (*model.ActivitySportJackpotConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotConfig), nil
	}
}

func (a activitySportJackpotConfigDo) Find() ([]*model.ActivitySportJackpotConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivitySportJackpotConfig), err
}

func (a activitySportJackpotConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportJackpotConfig, err error) {
	buf := make([]*model.ActivitySportJackpotConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activitySportJackpotConfigDo) FindInBatches(result *[]*model.ActivitySportJackpotConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activitySportJackpotConfigDo) Attrs(attrs ...field.AssignExpr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activitySportJackpotConfigDo) Assign(attrs ...field.AssignExpr) IActivitySportJackpotConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activitySportJackpotConfigDo) Joins(fields ...field.RelationField) IActivitySportJackpotConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activitySportJackpotConfigDo) Preload(fields ...field.RelationField) IActivitySportJackpotConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activitySportJackpotConfigDo) FirstOrInit() (*model.ActivitySportJackpotConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotConfig), nil
	}
}

func (a activitySportJackpotConfigDo) FirstOrCreate() (*model.ActivitySportJackpotConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotConfig), nil
	}
}

func (a activitySportJackpotConfigDo) FindByPage(offset int, limit int) (result []*model.ActivitySportJackpotConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activitySportJackpotConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activitySportJackpotConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activitySportJackpotConfigDo) Delete(models ...*model.ActivitySportJackpotConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activitySportJackpotConfigDo) withDO(do gen.Dao) *activitySportJackpotConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
