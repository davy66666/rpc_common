// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserEditPhoneLog(db *gorm.DB, opts ...gen.DOOption) userEditPhoneLog {
	_userEditPhoneLog := userEditPhoneLog{}

	_userEditPhoneLog.userEditPhoneLogDo.UseDB(db, opts...)
	_userEditPhoneLog.userEditPhoneLogDo.UseModel(&model.UserEditPhoneLog{})

	tableName := _userEditPhoneLog.userEditPhoneLogDo.TableName()
	_userEditPhoneLog.ALL = field.NewAsterisk(tableName)
	_userEditPhoneLog.ID = field.NewInt64(tableName, "id")
	_userEditPhoneLog.UserID = field.NewInt64(tableName, "user_id")
	_userEditPhoneLog.Username = field.NewString(tableName, "username")
	_userEditPhoneLog.CreatedAt = field.NewField(tableName, "created_at")
	_userEditPhoneLog.OldPhone = field.NewString(tableName, "old_phone")
	_userEditPhoneLog.Phone = field.NewString(tableName, "phone")
	_userEditPhoneLog.Type = field.NewInt64(tableName, "type")
	_userEditPhoneLog.IP = field.NewString(tableName, "ip")
	_userEditPhoneLog.AdminID = field.NewInt64(tableName, "admin_id")
	_userEditPhoneLog.AdminName = field.NewString(tableName, "admin_name")

	_userEditPhoneLog.fillFieldMap()

	return _userEditPhoneLog
}

// userEditPhoneLog 用户修改手机记录表
type userEditPhoneLog struct {
	userEditPhoneLogDo userEditPhoneLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64
	Username  field.String // 用户名
	CreatedAt field.Field
	OldPhone  field.String // 旧的手机号
	Phone     field.String // 客戶修改的手机号
	Type      field.Int64  // 1:前端用户自己修改, 2:管理后台管理人员修改
	IP        field.String
	AdminID   field.Int64  // 管理员id
	AdminName field.String // 管理员名称

	fieldMap map[string]field.Expr
}

func (u userEditPhoneLog) Table(newTableName string) *userEditPhoneLog {
	u.userEditPhoneLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEditPhoneLog) As(alias string) *userEditPhoneLog {
	u.userEditPhoneLogDo.DO = *(u.userEditPhoneLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEditPhoneLog) updateTableName(table string) *userEditPhoneLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.CreatedAt = field.NewField(table, "created_at")
	u.OldPhone = field.NewString(table, "old_phone")
	u.Phone = field.NewString(table, "phone")
	u.Type = field.NewInt64(table, "type")
	u.IP = field.NewString(table, "ip")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.AdminName = field.NewString(table, "admin_name")

	u.fillFieldMap()

	return u
}

func (u *userEditPhoneLog) WithContext(ctx context.Context) IUserEditPhoneLogDo {
	return u.userEditPhoneLogDo.WithContext(ctx)
}

func (u userEditPhoneLog) TableName() string { return u.userEditPhoneLogDo.TableName() }

func (u userEditPhoneLog) Alias() string { return u.userEditPhoneLogDo.Alias() }

func (u userEditPhoneLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userEditPhoneLogDo.Columns(cols...)
}

func (u *userEditPhoneLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEditPhoneLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["old_phone"] = u.OldPhone
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["type"] = u.Type
	u.fieldMap["ip"] = u.IP
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["admin_name"] = u.AdminName
}

func (u userEditPhoneLog) clone(db *gorm.DB) userEditPhoneLog {
	u.userEditPhoneLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEditPhoneLog) replaceDB(db *gorm.DB) userEditPhoneLog {
	u.userEditPhoneLogDo.ReplaceDB(db)
	return u
}

type userEditPhoneLogDo struct{ gen.DO }

type IUserEditPhoneLogDo interface {
	gen.SubQuery
	Debug() IUserEditPhoneLogDo
	WithContext(ctx context.Context) IUserEditPhoneLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEditPhoneLogDo
	WriteDB() IUserEditPhoneLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEditPhoneLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEditPhoneLogDo
	Not(conds ...gen.Condition) IUserEditPhoneLogDo
	Or(conds ...gen.Condition) IUserEditPhoneLogDo
	Select(conds ...field.Expr) IUserEditPhoneLogDo
	Where(conds ...gen.Condition) IUserEditPhoneLogDo
	Order(conds ...field.Expr) IUserEditPhoneLogDo
	Distinct(cols ...field.Expr) IUserEditPhoneLogDo
	Omit(cols ...field.Expr) IUserEditPhoneLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo
	Group(cols ...field.Expr) IUserEditPhoneLogDo
	Having(conds ...gen.Condition) IUserEditPhoneLogDo
	Limit(limit int) IUserEditPhoneLogDo
	Offset(offset int) IUserEditPhoneLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEditPhoneLogDo
	Unscoped() IUserEditPhoneLogDo
	Create(values ...*model.UserEditPhoneLog) error
	CreateInBatches(values []*model.UserEditPhoneLog, batchSize int) error
	Save(values ...*model.UserEditPhoneLog) error
	First() (*model.UserEditPhoneLog, error)
	Take() (*model.UserEditPhoneLog, error)
	Last() (*model.UserEditPhoneLog, error)
	Find() ([]*model.UserEditPhoneLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEditPhoneLog, err error)
	FindInBatches(result *[]*model.UserEditPhoneLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEditPhoneLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEditPhoneLogDo
	Assign(attrs ...field.AssignExpr) IUserEditPhoneLogDo
	Joins(fields ...field.RelationField) IUserEditPhoneLogDo
	Preload(fields ...field.RelationField) IUserEditPhoneLogDo
	FirstOrInit() (*model.UserEditPhoneLog, error)
	FirstOrCreate() (*model.UserEditPhoneLog, error)
	FindByPage(offset int, limit int) (result []*model.UserEditPhoneLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEditPhoneLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEditPhoneLogDo) Debug() IUserEditPhoneLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userEditPhoneLogDo) WithContext(ctx context.Context) IUserEditPhoneLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEditPhoneLogDo) ReadDB() IUserEditPhoneLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEditPhoneLogDo) WriteDB() IUserEditPhoneLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEditPhoneLogDo) Session(config *gorm.Session) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEditPhoneLogDo) Clauses(conds ...clause.Expression) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEditPhoneLogDo) Returning(value interface{}, columns ...string) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEditPhoneLogDo) Not(conds ...gen.Condition) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEditPhoneLogDo) Or(conds ...gen.Condition) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEditPhoneLogDo) Select(conds ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEditPhoneLogDo) Where(conds ...gen.Condition) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEditPhoneLogDo) Order(conds ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEditPhoneLogDo) Distinct(cols ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEditPhoneLogDo) Omit(cols ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEditPhoneLogDo) Join(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEditPhoneLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEditPhoneLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEditPhoneLogDo) Group(cols ...field.Expr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEditPhoneLogDo) Having(conds ...gen.Condition) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEditPhoneLogDo) Limit(limit int) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEditPhoneLogDo) Offset(offset int) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEditPhoneLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEditPhoneLogDo) Unscoped() IUserEditPhoneLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEditPhoneLogDo) Create(values ...*model.UserEditPhoneLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEditPhoneLogDo) CreateInBatches(values []*model.UserEditPhoneLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEditPhoneLogDo) Save(values ...*model.UserEditPhoneLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEditPhoneLogDo) First() (*model.UserEditPhoneLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEditPhoneLog), nil
	}
}

func (u userEditPhoneLogDo) Take() (*model.UserEditPhoneLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEditPhoneLog), nil
	}
}

func (u userEditPhoneLogDo) Last() (*model.UserEditPhoneLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEditPhoneLog), nil
	}
}

func (u userEditPhoneLogDo) Find() ([]*model.UserEditPhoneLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEditPhoneLog), err
}

func (u userEditPhoneLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEditPhoneLog, err error) {
	buf := make([]*model.UserEditPhoneLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEditPhoneLogDo) FindInBatches(result *[]*model.UserEditPhoneLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEditPhoneLogDo) Attrs(attrs ...field.AssignExpr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEditPhoneLogDo) Assign(attrs ...field.AssignExpr) IUserEditPhoneLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEditPhoneLogDo) Joins(fields ...field.RelationField) IUserEditPhoneLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEditPhoneLogDo) Preload(fields ...field.RelationField) IUserEditPhoneLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEditPhoneLogDo) FirstOrInit() (*model.UserEditPhoneLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEditPhoneLog), nil
	}
}

func (u userEditPhoneLogDo) FirstOrCreate() (*model.UserEditPhoneLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEditPhoneLog), nil
	}
}

func (u userEditPhoneLogDo) FindByPage(offset int, limit int) (result []*model.UserEditPhoneLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEditPhoneLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEditPhoneLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEditPhoneLogDo) Delete(models ...*model.UserEditPhoneLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEditPhoneLogDo) withDO(do gen.Dao) *userEditPhoneLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
