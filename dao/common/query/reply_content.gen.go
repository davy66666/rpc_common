// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newReplyContent(db *gorm.DB, opts ...gen.DOOption) replyContent {
	_replyContent := replyContent{}

	_replyContent.replyContentDo.UseDB(db, opts...)
	_replyContent.replyContentDo.UseModel(&model.ReplyContent{})

	tableName := _replyContent.replyContentDo.TableName()
	_replyContent.ALL = field.NewAsterisk(tableName)
	_replyContent.ID = field.NewInt64(tableName, "id")
	_replyContent.ObjectID = field.NewInt64(tableName, "object_id")
	_replyContent.Type = field.NewInt64(tableName, "type")
	_replyContent.Content = field.NewString(tableName, "content")
	_replyContent.FromUID = field.NewInt64(tableName, "from_uid")
	_replyContent.ToUID = field.NewInt64(tableName, "to_uid")
	_replyContent.Status = field.NewInt64(tableName, "status")
	_replyContent.CreatedAt = field.NewField(tableName, "created_at")
	_replyContent.UpdatedAt = field.NewField(tableName, "updated_at")
	_replyContent.MsgType = field.NewInt64(tableName, "msg_type")
	_replyContent.Path = field.NewString(tableName, "path")

	_replyContent.fillFieldMap()

	return _replyContent
}

// replyContent 回复内容表
type replyContent struct {
	replyContentDo replyContentDo

	ALL       field.Asterisk
	ID        field.Int64
	ObjectID  field.Int64  // 对象id
	Type      field.Int64  // 1:消息的回复
	Content   field.String // 回复内容
	FromUID   field.Int64  // 评论用户id
	ToUID     field.Int64  // 评论目标用户id(对某用户的评论)
	Status    field.Int64  // 0:未启用, 1:启用
	CreatedAt field.Field
	UpdatedAt field.Field  // 更新时间
	MsgType   field.Int64  // 消息主体类型 0文本 1图片 2视频
	Path      field.String // 图片、视频地址

	fieldMap map[string]field.Expr
}

func (r replyContent) Table(newTableName string) *replyContent {
	r.replyContentDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r replyContent) As(alias string) *replyContent {
	r.replyContentDo.DO = *(r.replyContentDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *replyContent) updateTableName(table string) *replyContent {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.ObjectID = field.NewInt64(table, "object_id")
	r.Type = field.NewInt64(table, "type")
	r.Content = field.NewString(table, "content")
	r.FromUID = field.NewInt64(table, "from_uid")
	r.ToUID = field.NewInt64(table, "to_uid")
	r.Status = field.NewInt64(table, "status")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.MsgType = field.NewInt64(table, "msg_type")
	r.Path = field.NewString(table, "path")

	r.fillFieldMap()

	return r
}

func (r *replyContent) WithContext(ctx context.Context) IReplyContentDo {
	return r.replyContentDo.WithContext(ctx)
}

func (r replyContent) TableName() string { return r.replyContentDo.TableName() }

func (r replyContent) Alias() string { return r.replyContentDo.Alias() }

func (r replyContent) Columns(cols ...field.Expr) gen.Columns {
	return r.replyContentDo.Columns(cols...)
}

func (r *replyContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *replyContent) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["object_id"] = r.ObjectID
	r.fieldMap["type"] = r.Type
	r.fieldMap["content"] = r.Content
	r.fieldMap["from_uid"] = r.FromUID
	r.fieldMap["to_uid"] = r.ToUID
	r.fieldMap["status"] = r.Status
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["msg_type"] = r.MsgType
	r.fieldMap["path"] = r.Path
}

func (r replyContent) clone(db *gorm.DB) replyContent {
	r.replyContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r replyContent) replaceDB(db *gorm.DB) replyContent {
	r.replyContentDo.ReplaceDB(db)
	return r
}

type replyContentDo struct{ gen.DO }

type IReplyContentDo interface {
	gen.SubQuery
	Debug() IReplyContentDo
	WithContext(ctx context.Context) IReplyContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReplyContentDo
	WriteDB() IReplyContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReplyContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReplyContentDo
	Not(conds ...gen.Condition) IReplyContentDo
	Or(conds ...gen.Condition) IReplyContentDo
	Select(conds ...field.Expr) IReplyContentDo
	Where(conds ...gen.Condition) IReplyContentDo
	Order(conds ...field.Expr) IReplyContentDo
	Distinct(cols ...field.Expr) IReplyContentDo
	Omit(cols ...field.Expr) IReplyContentDo
	Join(table schema.Tabler, on ...field.Expr) IReplyContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReplyContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReplyContentDo
	Group(cols ...field.Expr) IReplyContentDo
	Having(conds ...gen.Condition) IReplyContentDo
	Limit(limit int) IReplyContentDo
	Offset(offset int) IReplyContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReplyContentDo
	Unscoped() IReplyContentDo
	Create(values ...*model.ReplyContent) error
	CreateInBatches(values []*model.ReplyContent, batchSize int) error
	Save(values ...*model.ReplyContent) error
	First() (*model.ReplyContent, error)
	Take() (*model.ReplyContent, error)
	Last() (*model.ReplyContent, error)
	Find() ([]*model.ReplyContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplyContent, err error)
	FindInBatches(result *[]*model.ReplyContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReplyContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReplyContentDo
	Assign(attrs ...field.AssignExpr) IReplyContentDo
	Joins(fields ...field.RelationField) IReplyContentDo
	Preload(fields ...field.RelationField) IReplyContentDo
	FirstOrInit() (*model.ReplyContent, error)
	FirstOrCreate() (*model.ReplyContent, error)
	FindByPage(offset int, limit int) (result []*model.ReplyContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReplyContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r replyContentDo) Debug() IReplyContentDo {
	return r.withDO(r.DO.Debug())
}

func (r replyContentDo) WithContext(ctx context.Context) IReplyContentDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r replyContentDo) ReadDB() IReplyContentDo {
	return r.Clauses(dbresolver.Read)
}

func (r replyContentDo) WriteDB() IReplyContentDo {
	return r.Clauses(dbresolver.Write)
}

func (r replyContentDo) Session(config *gorm.Session) IReplyContentDo {
	return r.withDO(r.DO.Session(config))
}

func (r replyContentDo) Clauses(conds ...clause.Expression) IReplyContentDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r replyContentDo) Returning(value interface{}, columns ...string) IReplyContentDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r replyContentDo) Not(conds ...gen.Condition) IReplyContentDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r replyContentDo) Or(conds ...gen.Condition) IReplyContentDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r replyContentDo) Select(conds ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r replyContentDo) Where(conds ...gen.Condition) IReplyContentDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r replyContentDo) Order(conds ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r replyContentDo) Distinct(cols ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r replyContentDo) Omit(cols ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r replyContentDo) Join(table schema.Tabler, on ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r replyContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r replyContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r replyContentDo) Group(cols ...field.Expr) IReplyContentDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r replyContentDo) Having(conds ...gen.Condition) IReplyContentDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r replyContentDo) Limit(limit int) IReplyContentDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r replyContentDo) Offset(offset int) IReplyContentDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r replyContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReplyContentDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r replyContentDo) Unscoped() IReplyContentDo {
	return r.withDO(r.DO.Unscoped())
}

func (r replyContentDo) Create(values ...*model.ReplyContent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r replyContentDo) CreateInBatches(values []*model.ReplyContent, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r replyContentDo) Save(values ...*model.ReplyContent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r replyContentDo) First() (*model.ReplyContent, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyContent), nil
	}
}

func (r replyContentDo) Take() (*model.ReplyContent, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyContent), nil
	}
}

func (r replyContentDo) Last() (*model.ReplyContent, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyContent), nil
	}
}

func (r replyContentDo) Find() ([]*model.ReplyContent, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReplyContent), err
}

func (r replyContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplyContent, err error) {
	buf := make([]*model.ReplyContent, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r replyContentDo) FindInBatches(result *[]*model.ReplyContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r replyContentDo) Attrs(attrs ...field.AssignExpr) IReplyContentDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r replyContentDo) Assign(attrs ...field.AssignExpr) IReplyContentDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r replyContentDo) Joins(fields ...field.RelationField) IReplyContentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r replyContentDo) Preload(fields ...field.RelationField) IReplyContentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r replyContentDo) FirstOrInit() (*model.ReplyContent, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyContent), nil
	}
}

func (r replyContentDo) FirstOrCreate() (*model.ReplyContent, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyContent), nil
	}
}

func (r replyContentDo) FindByPage(offset int, limit int) (result []*model.ReplyContent, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r replyContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r replyContentDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r replyContentDo) Delete(models ...*model.ReplyContent) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *replyContentDo) withDO(do gen.Dao) *replyContentDo {
	r.DO = *do.(*gen.DO)
	return r
}
