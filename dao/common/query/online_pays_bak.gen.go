// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newOnlinePaysBak(db *gorm.DB, opts ...gen.DOOption) onlinePaysBak {
	_onlinePaysBak := onlinePaysBak{}

	_onlinePaysBak.onlinePaysBakDo.UseDB(db, opts...)
	_onlinePaysBak.onlinePaysBakDo.UseModel(&model.OnlinePaysBak{})

	tableName := _onlinePaysBak.onlinePaysBakDo.TableName()
	_onlinePaysBak.ALL = field.NewAsterisk(tableName)
	_onlinePaysBak.ID = field.NewInt64(tableName, "id")
	_onlinePaysBak.PayCode = field.NewString(tableName, "pay_code")
	_onlinePaysBak.PayName = field.NewString(tableName, "pay_name")
	_onlinePaysBak.PayType = field.NewString(tableName, "pay_type")
	_onlinePaysBak.Account = field.NewString(tableName, "account")
	_onlinePaysBak.MerchantKey = field.NewString(tableName, "merchant_key")
	_onlinePaysBak.Gateway = field.NewString(tableName, "gateway")
	_onlinePaysBak.PayURL = field.NewString(tableName, "pay_url")
	_onlinePaysBak.MinMoney = field.NewFloat64(tableName, "min_money")
	_onlinePaysBak.MaxMoney = field.NewFloat64(tableName, "max_money")
	_onlinePaysBak.PayLevel = field.NewString(tableName, "pay_level")
	_onlinePaysBak.IP = field.NewString(tableName, "ip")
	_onlinePaysBak.Sort = field.NewInt64(tableName, "sort")
	_onlinePaysBak.Platform = field.NewString(tableName, "platform")
	_onlinePaysBak.IsSaoma = field.NewInt64(tableName, "is_saoma")
	_onlinePaysBak.IsDaifu = field.NewInt64(tableName, "is_daifu")
	_onlinePaysBak.IsRange = field.NewInt64(tableName, "is_range")
	_onlinePaysBak.BankType = field.NewInt64(tableName, "bank_type")
	_onlinePaysBak.ExRate = field.NewFloat64(tableName, "ex_rate")
	_onlinePaysBak.QuickAmount = field.NewString(tableName, "quick_amount")
	_onlinePaysBak.Remark = field.NewString(tableName, "remark")
	_onlinePaysBak.Extra = field.NewString(tableName, "extra")
	_onlinePaysBak.AdminUser = field.NewString(tableName, "admin_user")
	_onlinePaysBak.BetAmountRate = field.NewInt64(tableName, "bet_amount_rate")
	_onlinePaysBak.IsOpen = field.NewInt64(tableName, "is_open")
	_onlinePaysBak.IsThird = field.NewInt64(tableName, "is_third")
	_onlinePaysBak.CreatedAt = field.NewField(tableName, "created_at")
	_onlinePaysBak.UpdatedAt = field.NewField(tableName, "updated_at")
	_onlinePaysBak.DailyMaxMoney = field.NewFloat64(tableName, "daily_max_money")
	_onlinePaysBak.GiftMoneyRate = field.NewInt64(tableName, "gift_money_rate")
	_onlinePaysBak.BoRemark = field.NewString(tableName, "bo_remark")
	_onlinePaysBak.QuickAmountIsOpen = field.NewInt64(tableName, "quick_amount_is_open")
	_onlinePaysBak.ManualQuickAmountIsOpen = field.NewInt64(tableName, "manual_quick_amount_is_open")
	_onlinePaysBak.ManualQuickAmount = field.NewString(tableName, "manual_quick_amount")

	_onlinePaysBak.fillFieldMap()

	return _onlinePaysBak
}

type onlinePaysBak struct {
	onlinePaysBakDo onlinePaysBakDo

	ALL                     field.Asterisk
	ID                      field.Int64
	PayCode                 field.String  // 支付英文名
	PayName                 field.String  // 支付英中文名
	PayType                 field.String  // pay_types表中的en_name
	Account                 field.String  // 商户号
	MerchantKey             field.String  // 商户密匙
	Gateway                 field.String  // 支付网关地址
	PayURL                  field.String  // 支付接口回调地址
	MinMoney                field.Float64 // 支付最小金额
	MaxMoney                field.Float64 // 支付最大金额
	PayLevel                field.String  // 支付类别 多个以逗号分隔
	IP                      field.String  // 第三方ip
	Sort                    field.Int64   // 排序
	Platform                field.String  // 支付开放的支付平台,1:手机端;2:pc端
	IsSaoma                 field.Int64   // 0:否 1:扫码
	IsDaifu                 field.Int64   // 是否是代付0:否；1：是
	IsRange                 field.Int64   // 是否是范围0:否；1：是
	BankType                field.Int64   // 1:银行卡, 2:数字钱包
	ExRate                  field.Float64 // 汇率
	QuickAmount             field.String  // 存款金额:多个值,则用逗号隔开
	Remark                  field.String  // 前台的支付提示
	Extra                   field.String  // 备用字段
	AdminUser               field.String  // 编辑者
	BetAmountRate           field.Int64   // 打码量倍数
	IsOpen                  field.Int64   // 是否开启0:否;1:是
	IsThird                 field.Int64   // 是否是第三方支付0:否；1：是
	CreatedAt               field.Field
	UpdatedAt               field.Field
	DailyMaxMoney           field.Float64 // 单日最大额度
	GiftMoneyRate           field.Int64   // 彩金倍率
	BoRemark                field.String  // 备注
	QuickAmountIsOpen       field.Int64   // 电脑预设金额是否开启
	ManualQuickAmountIsOpen field.Int64   // 手动预设金额是否开启
	ManualQuickAmount       field.String  // 手动预设金额

	fieldMap map[string]field.Expr
}

func (o onlinePaysBak) Table(newTableName string) *onlinePaysBak {
	o.onlinePaysBakDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o onlinePaysBak) As(alias string) *onlinePaysBak {
	o.onlinePaysBakDo.DO = *(o.onlinePaysBakDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *onlinePaysBak) updateTableName(table string) *onlinePaysBak {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.PayCode = field.NewString(table, "pay_code")
	o.PayName = field.NewString(table, "pay_name")
	o.PayType = field.NewString(table, "pay_type")
	o.Account = field.NewString(table, "account")
	o.MerchantKey = field.NewString(table, "merchant_key")
	o.Gateway = field.NewString(table, "gateway")
	o.PayURL = field.NewString(table, "pay_url")
	o.MinMoney = field.NewFloat64(table, "min_money")
	o.MaxMoney = field.NewFloat64(table, "max_money")
	o.PayLevel = field.NewString(table, "pay_level")
	o.IP = field.NewString(table, "ip")
	o.Sort = field.NewInt64(table, "sort")
	o.Platform = field.NewString(table, "platform")
	o.IsSaoma = field.NewInt64(table, "is_saoma")
	o.IsDaifu = field.NewInt64(table, "is_daifu")
	o.IsRange = field.NewInt64(table, "is_range")
	o.BankType = field.NewInt64(table, "bank_type")
	o.ExRate = field.NewFloat64(table, "ex_rate")
	o.QuickAmount = field.NewString(table, "quick_amount")
	o.Remark = field.NewString(table, "remark")
	o.Extra = field.NewString(table, "extra")
	o.AdminUser = field.NewString(table, "admin_user")
	o.BetAmountRate = field.NewInt64(table, "bet_amount_rate")
	o.IsOpen = field.NewInt64(table, "is_open")
	o.IsThird = field.NewInt64(table, "is_third")
	o.CreatedAt = field.NewField(table, "created_at")
	o.UpdatedAt = field.NewField(table, "updated_at")
	o.DailyMaxMoney = field.NewFloat64(table, "daily_max_money")
	o.GiftMoneyRate = field.NewInt64(table, "gift_money_rate")
	o.BoRemark = field.NewString(table, "bo_remark")
	o.QuickAmountIsOpen = field.NewInt64(table, "quick_amount_is_open")
	o.ManualQuickAmountIsOpen = field.NewInt64(table, "manual_quick_amount_is_open")
	o.ManualQuickAmount = field.NewString(table, "manual_quick_amount")

	o.fillFieldMap()

	return o
}

func (o *onlinePaysBak) WithContext(ctx context.Context) IOnlinePaysBakDo {
	return o.onlinePaysBakDo.WithContext(ctx)
}

func (o onlinePaysBak) TableName() string { return o.onlinePaysBakDo.TableName() }

func (o onlinePaysBak) Alias() string { return o.onlinePaysBakDo.Alias() }

func (o onlinePaysBak) Columns(cols ...field.Expr) gen.Columns {
	return o.onlinePaysBakDo.Columns(cols...)
}

func (o *onlinePaysBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *onlinePaysBak) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 34)
	o.fieldMap["id"] = o.ID
	o.fieldMap["pay_code"] = o.PayCode
	o.fieldMap["pay_name"] = o.PayName
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["account"] = o.Account
	o.fieldMap["merchant_key"] = o.MerchantKey
	o.fieldMap["gateway"] = o.Gateway
	o.fieldMap["pay_url"] = o.PayURL
	o.fieldMap["min_money"] = o.MinMoney
	o.fieldMap["max_money"] = o.MaxMoney
	o.fieldMap["pay_level"] = o.PayLevel
	o.fieldMap["ip"] = o.IP
	o.fieldMap["sort"] = o.Sort
	o.fieldMap["platform"] = o.Platform
	o.fieldMap["is_saoma"] = o.IsSaoma
	o.fieldMap["is_daifu"] = o.IsDaifu
	o.fieldMap["is_range"] = o.IsRange
	o.fieldMap["bank_type"] = o.BankType
	o.fieldMap["ex_rate"] = o.ExRate
	o.fieldMap["quick_amount"] = o.QuickAmount
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["extra"] = o.Extra
	o.fieldMap["admin_user"] = o.AdminUser
	o.fieldMap["bet_amount_rate"] = o.BetAmountRate
	o.fieldMap["is_open"] = o.IsOpen
	o.fieldMap["is_third"] = o.IsThird
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["daily_max_money"] = o.DailyMaxMoney
	o.fieldMap["gift_money_rate"] = o.GiftMoneyRate
	o.fieldMap["bo_remark"] = o.BoRemark
	o.fieldMap["quick_amount_is_open"] = o.QuickAmountIsOpen
	o.fieldMap["manual_quick_amount_is_open"] = o.ManualQuickAmountIsOpen
	o.fieldMap["manual_quick_amount"] = o.ManualQuickAmount
}

func (o onlinePaysBak) clone(db *gorm.DB) onlinePaysBak {
	o.onlinePaysBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o onlinePaysBak) replaceDB(db *gorm.DB) onlinePaysBak {
	o.onlinePaysBakDo.ReplaceDB(db)
	return o
}

type onlinePaysBakDo struct{ gen.DO }

type IOnlinePaysBakDo interface {
	gen.SubQuery
	Debug() IOnlinePaysBakDo
	WithContext(ctx context.Context) IOnlinePaysBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOnlinePaysBakDo
	WriteDB() IOnlinePaysBakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOnlinePaysBakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOnlinePaysBakDo
	Not(conds ...gen.Condition) IOnlinePaysBakDo
	Or(conds ...gen.Condition) IOnlinePaysBakDo
	Select(conds ...field.Expr) IOnlinePaysBakDo
	Where(conds ...gen.Condition) IOnlinePaysBakDo
	Order(conds ...field.Expr) IOnlinePaysBakDo
	Distinct(cols ...field.Expr) IOnlinePaysBakDo
	Omit(cols ...field.Expr) IOnlinePaysBakDo
	Join(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo
	Group(cols ...field.Expr) IOnlinePaysBakDo
	Having(conds ...gen.Condition) IOnlinePaysBakDo
	Limit(limit int) IOnlinePaysBakDo
	Offset(offset int) IOnlinePaysBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOnlinePaysBakDo
	Unscoped() IOnlinePaysBakDo
	Create(values ...*model.OnlinePaysBak) error
	CreateInBatches(values []*model.OnlinePaysBak, batchSize int) error
	Save(values ...*model.OnlinePaysBak) error
	First() (*model.OnlinePaysBak, error)
	Take() (*model.OnlinePaysBak, error)
	Last() (*model.OnlinePaysBak, error)
	Find() ([]*model.OnlinePaysBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OnlinePaysBak, err error)
	FindInBatches(result *[]*model.OnlinePaysBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OnlinePaysBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOnlinePaysBakDo
	Assign(attrs ...field.AssignExpr) IOnlinePaysBakDo
	Joins(fields ...field.RelationField) IOnlinePaysBakDo
	Preload(fields ...field.RelationField) IOnlinePaysBakDo
	FirstOrInit() (*model.OnlinePaysBak, error)
	FirstOrCreate() (*model.OnlinePaysBak, error)
	FindByPage(offset int, limit int) (result []*model.OnlinePaysBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOnlinePaysBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o onlinePaysBakDo) Debug() IOnlinePaysBakDo {
	return o.withDO(o.DO.Debug())
}

func (o onlinePaysBakDo) WithContext(ctx context.Context) IOnlinePaysBakDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o onlinePaysBakDo) ReadDB() IOnlinePaysBakDo {
	return o.Clauses(dbresolver.Read)
}

func (o onlinePaysBakDo) WriteDB() IOnlinePaysBakDo {
	return o.Clauses(dbresolver.Write)
}

func (o onlinePaysBakDo) Session(config *gorm.Session) IOnlinePaysBakDo {
	return o.withDO(o.DO.Session(config))
}

func (o onlinePaysBakDo) Clauses(conds ...clause.Expression) IOnlinePaysBakDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o onlinePaysBakDo) Returning(value interface{}, columns ...string) IOnlinePaysBakDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o onlinePaysBakDo) Not(conds ...gen.Condition) IOnlinePaysBakDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o onlinePaysBakDo) Or(conds ...gen.Condition) IOnlinePaysBakDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o onlinePaysBakDo) Select(conds ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o onlinePaysBakDo) Where(conds ...gen.Condition) IOnlinePaysBakDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o onlinePaysBakDo) Order(conds ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o onlinePaysBakDo) Distinct(cols ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o onlinePaysBakDo) Omit(cols ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o onlinePaysBakDo) Join(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o onlinePaysBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o onlinePaysBakDo) RightJoin(table schema.Tabler, on ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o onlinePaysBakDo) Group(cols ...field.Expr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o onlinePaysBakDo) Having(conds ...gen.Condition) IOnlinePaysBakDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o onlinePaysBakDo) Limit(limit int) IOnlinePaysBakDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o onlinePaysBakDo) Offset(offset int) IOnlinePaysBakDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o onlinePaysBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOnlinePaysBakDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o onlinePaysBakDo) Unscoped() IOnlinePaysBakDo {
	return o.withDO(o.DO.Unscoped())
}

func (o onlinePaysBakDo) Create(values ...*model.OnlinePaysBak) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o onlinePaysBakDo) CreateInBatches(values []*model.OnlinePaysBak, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o onlinePaysBakDo) Save(values ...*model.OnlinePaysBak) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o onlinePaysBakDo) First() (*model.OnlinePaysBak, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlinePaysBak), nil
	}
}

func (o onlinePaysBakDo) Take() (*model.OnlinePaysBak, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlinePaysBak), nil
	}
}

func (o onlinePaysBakDo) Last() (*model.OnlinePaysBak, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlinePaysBak), nil
	}
}

func (o onlinePaysBakDo) Find() ([]*model.OnlinePaysBak, error) {
	result, err := o.DO.Find()
	return result.([]*model.OnlinePaysBak), err
}

func (o onlinePaysBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OnlinePaysBak, err error) {
	buf := make([]*model.OnlinePaysBak, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o onlinePaysBakDo) FindInBatches(result *[]*model.OnlinePaysBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o onlinePaysBakDo) Attrs(attrs ...field.AssignExpr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o onlinePaysBakDo) Assign(attrs ...field.AssignExpr) IOnlinePaysBakDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o onlinePaysBakDo) Joins(fields ...field.RelationField) IOnlinePaysBakDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o onlinePaysBakDo) Preload(fields ...field.RelationField) IOnlinePaysBakDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o onlinePaysBakDo) FirstOrInit() (*model.OnlinePaysBak, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlinePaysBak), nil
	}
}

func (o onlinePaysBakDo) FirstOrCreate() (*model.OnlinePaysBak, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OnlinePaysBak), nil
	}
}

func (o onlinePaysBakDo) FindByPage(offset int, limit int) (result []*model.OnlinePaysBak, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o onlinePaysBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o onlinePaysBakDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o onlinePaysBakDo) Delete(models ...*model.OnlinePaysBak) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *onlinePaysBakDo) withDO(do gen.Dao) *onlinePaysBakDo {
	o.DO = *do.(*gen.DO)
	return o
}
