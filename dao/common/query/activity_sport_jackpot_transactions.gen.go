// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivitySportJackpotTransaction(db *gorm.DB, opts ...gen.DOOption) activitySportJackpotTransaction {
	_activitySportJackpotTransaction := activitySportJackpotTransaction{}

	_activitySportJackpotTransaction.activitySportJackpotTransactionDo.UseDB(db, opts...)
	_activitySportJackpotTransaction.activitySportJackpotTransactionDo.UseModel(&model.ActivitySportJackpotTransaction{})

	tableName := _activitySportJackpotTransaction.activitySportJackpotTransactionDo.TableName()
	_activitySportJackpotTransaction.ALL = field.NewAsterisk(tableName)
	_activitySportJackpotTransaction.ID = field.NewInt64(tableName, "id")
	_activitySportJackpotTransaction.IsIncome = field.NewInt64(tableName, "is_income")
	_activitySportJackpotTransaction.Amount = field.NewFloat64(tableName, "amount")
	_activitySportJackpotTransaction.AfterAmount = field.NewFloat64(tableName, "after_amount")
	_activitySportJackpotTransaction.Remark = field.NewString(tableName, "remark")
	_activitySportJackpotTransaction.AdminName = field.NewString(tableName, "admin_name")
	_activitySportJackpotTransaction.CreatedAt = field.NewField(tableName, "created_at")
	_activitySportJackpotTransaction.UpdatedAt = field.NewField(tableName, "updated_at")

	_activitySportJackpotTransaction.fillFieldMap()

	return _activitySportJackpotTransaction
}

// activitySportJackpotTransaction 奖池帐变记录
type activitySportJackpotTransaction struct {
	activitySportJackpotTransactionDo activitySportJackpotTransactionDo

	ALL         field.Asterisk
	ID          field.Int64
	IsIncome    field.Int64   // 类型 0：人工扣减 1：人工增加
	Amount      field.Float64 // 变动金额
	AfterAmount field.Float64 // 变动后金额
	Remark      field.String  // 备注
	AdminName   field.String  // 操作员
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a activitySportJackpotTransaction) Table(newTableName string) *activitySportJackpotTransaction {
	a.activitySportJackpotTransactionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activitySportJackpotTransaction) As(alias string) *activitySportJackpotTransaction {
	a.activitySportJackpotTransactionDo.DO = *(a.activitySportJackpotTransactionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activitySportJackpotTransaction) updateTableName(table string) *activitySportJackpotTransaction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.IsIncome = field.NewInt64(table, "is_income")
	a.Amount = field.NewFloat64(table, "amount")
	a.AfterAmount = field.NewFloat64(table, "after_amount")
	a.Remark = field.NewString(table, "remark")
	a.AdminName = field.NewString(table, "admin_name")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activitySportJackpotTransaction) WithContext(ctx context.Context) IActivitySportJackpotTransactionDo {
	return a.activitySportJackpotTransactionDo.WithContext(ctx)
}

func (a activitySportJackpotTransaction) TableName() string {
	return a.activitySportJackpotTransactionDo.TableName()
}

func (a activitySportJackpotTransaction) Alias() string {
	return a.activitySportJackpotTransactionDo.Alias()
}

func (a activitySportJackpotTransaction) Columns(cols ...field.Expr) gen.Columns {
	return a.activitySportJackpotTransactionDo.Columns(cols...)
}

func (a *activitySportJackpotTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activitySportJackpotTransaction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["is_income"] = a.IsIncome
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["after_amount"] = a.AfterAmount
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activitySportJackpotTransaction) clone(db *gorm.DB) activitySportJackpotTransaction {
	a.activitySportJackpotTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activitySportJackpotTransaction) replaceDB(db *gorm.DB) activitySportJackpotTransaction {
	a.activitySportJackpotTransactionDo.ReplaceDB(db)
	return a
}

type activitySportJackpotTransactionDo struct{ gen.DO }

type IActivitySportJackpotTransactionDo interface {
	gen.SubQuery
	Debug() IActivitySportJackpotTransactionDo
	WithContext(ctx context.Context) IActivitySportJackpotTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivitySportJackpotTransactionDo
	WriteDB() IActivitySportJackpotTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivitySportJackpotTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivitySportJackpotTransactionDo
	Not(conds ...gen.Condition) IActivitySportJackpotTransactionDo
	Or(conds ...gen.Condition) IActivitySportJackpotTransactionDo
	Select(conds ...field.Expr) IActivitySportJackpotTransactionDo
	Where(conds ...gen.Condition) IActivitySportJackpotTransactionDo
	Order(conds ...field.Expr) IActivitySportJackpotTransactionDo
	Distinct(cols ...field.Expr) IActivitySportJackpotTransactionDo
	Omit(cols ...field.Expr) IActivitySportJackpotTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo
	Group(cols ...field.Expr) IActivitySportJackpotTransactionDo
	Having(conds ...gen.Condition) IActivitySportJackpotTransactionDo
	Limit(limit int) IActivitySportJackpotTransactionDo
	Offset(offset int) IActivitySportJackpotTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportJackpotTransactionDo
	Unscoped() IActivitySportJackpotTransactionDo
	Create(values ...*model.ActivitySportJackpotTransaction) error
	CreateInBatches(values []*model.ActivitySportJackpotTransaction, batchSize int) error
	Save(values ...*model.ActivitySportJackpotTransaction) error
	First() (*model.ActivitySportJackpotTransaction, error)
	Take() (*model.ActivitySportJackpotTransaction, error)
	Last() (*model.ActivitySportJackpotTransaction, error)
	Find() ([]*model.ActivitySportJackpotTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportJackpotTransaction, err error)
	FindInBatches(result *[]*model.ActivitySportJackpotTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivitySportJackpotTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivitySportJackpotTransactionDo
	Assign(attrs ...field.AssignExpr) IActivitySportJackpotTransactionDo
	Joins(fields ...field.RelationField) IActivitySportJackpotTransactionDo
	Preload(fields ...field.RelationField) IActivitySportJackpotTransactionDo
	FirstOrInit() (*model.ActivitySportJackpotTransaction, error)
	FirstOrCreate() (*model.ActivitySportJackpotTransaction, error)
	FindByPage(offset int, limit int) (result []*model.ActivitySportJackpotTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivitySportJackpotTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activitySportJackpotTransactionDo) Debug() IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Debug())
}

func (a activitySportJackpotTransactionDo) WithContext(ctx context.Context) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activitySportJackpotTransactionDo) ReadDB() IActivitySportJackpotTransactionDo {
	return a.Clauses(dbresolver.Read)
}

func (a activitySportJackpotTransactionDo) WriteDB() IActivitySportJackpotTransactionDo {
	return a.Clauses(dbresolver.Write)
}

func (a activitySportJackpotTransactionDo) Session(config *gorm.Session) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Session(config))
}

func (a activitySportJackpotTransactionDo) Clauses(conds ...clause.Expression) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activitySportJackpotTransactionDo) Returning(value interface{}, columns ...string) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activitySportJackpotTransactionDo) Not(conds ...gen.Condition) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activitySportJackpotTransactionDo) Or(conds ...gen.Condition) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activitySportJackpotTransactionDo) Select(conds ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activitySportJackpotTransactionDo) Where(conds ...gen.Condition) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activitySportJackpotTransactionDo) Order(conds ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activitySportJackpotTransactionDo) Distinct(cols ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activitySportJackpotTransactionDo) Omit(cols ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activitySportJackpotTransactionDo) Join(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activitySportJackpotTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activitySportJackpotTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activitySportJackpotTransactionDo) Group(cols ...field.Expr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activitySportJackpotTransactionDo) Having(conds ...gen.Condition) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activitySportJackpotTransactionDo) Limit(limit int) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activitySportJackpotTransactionDo) Offset(offset int) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activitySportJackpotTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activitySportJackpotTransactionDo) Unscoped() IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activitySportJackpotTransactionDo) Create(values ...*model.ActivitySportJackpotTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activitySportJackpotTransactionDo) CreateInBatches(values []*model.ActivitySportJackpotTransaction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activitySportJackpotTransactionDo) Save(values ...*model.ActivitySportJackpotTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activitySportJackpotTransactionDo) First() (*model.ActivitySportJackpotTransaction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotTransaction), nil
	}
}

func (a activitySportJackpotTransactionDo) Take() (*model.ActivitySportJackpotTransaction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotTransaction), nil
	}
}

func (a activitySportJackpotTransactionDo) Last() (*model.ActivitySportJackpotTransaction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotTransaction), nil
	}
}

func (a activitySportJackpotTransactionDo) Find() ([]*model.ActivitySportJackpotTransaction, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivitySportJackpotTransaction), err
}

func (a activitySportJackpotTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportJackpotTransaction, err error) {
	buf := make([]*model.ActivitySportJackpotTransaction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activitySportJackpotTransactionDo) FindInBatches(result *[]*model.ActivitySportJackpotTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activitySportJackpotTransactionDo) Attrs(attrs ...field.AssignExpr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activitySportJackpotTransactionDo) Assign(attrs ...field.AssignExpr) IActivitySportJackpotTransactionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activitySportJackpotTransactionDo) Joins(fields ...field.RelationField) IActivitySportJackpotTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activitySportJackpotTransactionDo) Preload(fields ...field.RelationField) IActivitySportJackpotTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activitySportJackpotTransactionDo) FirstOrInit() (*model.ActivitySportJackpotTransaction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotTransaction), nil
	}
}

func (a activitySportJackpotTransactionDo) FirstOrCreate() (*model.ActivitySportJackpotTransaction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportJackpotTransaction), nil
	}
}

func (a activitySportJackpotTransactionDo) FindByPage(offset int, limit int) (result []*model.ActivitySportJackpotTransaction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activitySportJackpotTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activitySportJackpotTransactionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activitySportJackpotTransactionDo) Delete(models ...*model.ActivitySportJackpotTransaction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activitySportJackpotTransactionDo) withDO(do gen.Dao) *activitySportJackpotTransactionDo {
	a.DO = *do.(*gen.DO)
	return a
}
