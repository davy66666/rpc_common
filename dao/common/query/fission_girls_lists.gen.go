// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFissionGirlsList(db *gorm.DB, opts ...gen.DOOption) fissionGirlsList {
	_fissionGirlsList := fissionGirlsList{}

	_fissionGirlsList.fissionGirlsListDo.UseDB(db, opts...)
	_fissionGirlsList.fissionGirlsListDo.UseModel(&model.FissionGirlsList{})

	tableName := _fissionGirlsList.fissionGirlsListDo.TableName()
	_fissionGirlsList.ALL = field.NewAsterisk(tableName)
	_fissionGirlsList.ID = field.NewInt64(tableName, "id")
	_fissionGirlsList.Name = field.NewString(tableName, "name")
	_fissionGirlsList.CoverImg = field.NewString(tableName, "cover_img")
	_fissionGirlsList.DetailImg = field.NewString(tableName, "detail_img")
	_fissionGirlsList.Age = field.NewInt64(tableName, "age")
	_fissionGirlsList.Nationality = field.NewString(tableName, "nationality")
	_fissionGirlsList.Sex = field.NewInt64(tableName, "sex")
	_fissionGirlsList.IsOpen = field.NewInt64(tableName, "is_open")
	_fissionGirlsList.Height = field.NewString(tableName, "height")
	_fissionGirlsList.Weight = field.NewString(tableName, "weight")
	_fissionGirlsList.Bust = field.NewString(tableName, "bust")
	_fissionGirlsList.Sort = field.NewInt64(tableName, "sort")
	_fissionGirlsList.Remark = field.NewString(tableName, "remark")
	_fissionGirlsList.OpAdminUser = field.NewString(tableName, "op_admin_user")
	_fissionGirlsList.CreatedAt = field.NewField(tableName, "created_at")
	_fissionGirlsList.UpdatedAt = field.NewField(tableName, "updated_at")

	_fissionGirlsList.fillFieldMap()

	return _fissionGirlsList
}

// fissionGirlsList 陪玩
type fissionGirlsList struct {
	fissionGirlsListDo fissionGirlsListDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String // 姓名
	CoverImg    field.String // 封面图
	DetailImg   field.String // 详情图
	Age         field.Int64  // 年龄
	Nationality field.String // 国籍
	Sex         field.Int64  // 性别
	IsOpen      field.Int64
	Height      field.String // 身高
	Weight      field.String // 体重
	Bust        field.String // 胸围
	Sort        field.Int64  // 排序
	Remark      field.String // 备注
	OpAdminUser field.String // 操作人
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (f fissionGirlsList) Table(newTableName string) *fissionGirlsList {
	f.fissionGirlsListDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fissionGirlsList) As(alias string) *fissionGirlsList {
	f.fissionGirlsListDo.DO = *(f.fissionGirlsListDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fissionGirlsList) updateTableName(table string) *fissionGirlsList {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.CoverImg = field.NewString(table, "cover_img")
	f.DetailImg = field.NewString(table, "detail_img")
	f.Age = field.NewInt64(table, "age")
	f.Nationality = field.NewString(table, "nationality")
	f.Sex = field.NewInt64(table, "sex")
	f.IsOpen = field.NewInt64(table, "is_open")
	f.Height = field.NewString(table, "height")
	f.Weight = field.NewString(table, "weight")
	f.Bust = field.NewString(table, "bust")
	f.Sort = field.NewInt64(table, "sort")
	f.Remark = field.NewString(table, "remark")
	f.OpAdminUser = field.NewString(table, "op_admin_user")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fissionGirlsList) WithContext(ctx context.Context) IFissionGirlsListDo {
	return f.fissionGirlsListDo.WithContext(ctx)
}

func (f fissionGirlsList) TableName() string { return f.fissionGirlsListDo.TableName() }

func (f fissionGirlsList) Alias() string { return f.fissionGirlsListDo.Alias() }

func (f fissionGirlsList) Columns(cols ...field.Expr) gen.Columns {
	return f.fissionGirlsListDo.Columns(cols...)
}

func (f *fissionGirlsList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fissionGirlsList) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["cover_img"] = f.CoverImg
	f.fieldMap["detail_img"] = f.DetailImg
	f.fieldMap["age"] = f.Age
	f.fieldMap["nationality"] = f.Nationality
	f.fieldMap["sex"] = f.Sex
	f.fieldMap["is_open"] = f.IsOpen
	f.fieldMap["height"] = f.Height
	f.fieldMap["weight"] = f.Weight
	f.fieldMap["bust"] = f.Bust
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["op_admin_user"] = f.OpAdminUser
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fissionGirlsList) clone(db *gorm.DB) fissionGirlsList {
	f.fissionGirlsListDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fissionGirlsList) replaceDB(db *gorm.DB) fissionGirlsList {
	f.fissionGirlsListDo.ReplaceDB(db)
	return f
}

type fissionGirlsListDo struct{ gen.DO }

type IFissionGirlsListDo interface {
	gen.SubQuery
	Debug() IFissionGirlsListDo
	WithContext(ctx context.Context) IFissionGirlsListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFissionGirlsListDo
	WriteDB() IFissionGirlsListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFissionGirlsListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFissionGirlsListDo
	Not(conds ...gen.Condition) IFissionGirlsListDo
	Or(conds ...gen.Condition) IFissionGirlsListDo
	Select(conds ...field.Expr) IFissionGirlsListDo
	Where(conds ...gen.Condition) IFissionGirlsListDo
	Order(conds ...field.Expr) IFissionGirlsListDo
	Distinct(cols ...field.Expr) IFissionGirlsListDo
	Omit(cols ...field.Expr) IFissionGirlsListDo
	Join(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo
	Group(cols ...field.Expr) IFissionGirlsListDo
	Having(conds ...gen.Condition) IFissionGirlsListDo
	Limit(limit int) IFissionGirlsListDo
	Offset(offset int) IFissionGirlsListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionGirlsListDo
	Unscoped() IFissionGirlsListDo
	Create(values ...*model.FissionGirlsList) error
	CreateInBatches(values []*model.FissionGirlsList, batchSize int) error
	Save(values ...*model.FissionGirlsList) error
	First() (*model.FissionGirlsList, error)
	Take() (*model.FissionGirlsList, error)
	Last() (*model.FissionGirlsList, error)
	Find() ([]*model.FissionGirlsList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionGirlsList, err error)
	FindInBatches(result *[]*model.FissionGirlsList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FissionGirlsList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFissionGirlsListDo
	Assign(attrs ...field.AssignExpr) IFissionGirlsListDo
	Joins(fields ...field.RelationField) IFissionGirlsListDo
	Preload(fields ...field.RelationField) IFissionGirlsListDo
	FirstOrInit() (*model.FissionGirlsList, error)
	FirstOrCreate() (*model.FissionGirlsList, error)
	FindByPage(offset int, limit int) (result []*model.FissionGirlsList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFissionGirlsListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fissionGirlsListDo) Debug() IFissionGirlsListDo {
	return f.withDO(f.DO.Debug())
}

func (f fissionGirlsListDo) WithContext(ctx context.Context) IFissionGirlsListDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fissionGirlsListDo) ReadDB() IFissionGirlsListDo {
	return f.Clauses(dbresolver.Read)
}

func (f fissionGirlsListDo) WriteDB() IFissionGirlsListDo {
	return f.Clauses(dbresolver.Write)
}

func (f fissionGirlsListDo) Session(config *gorm.Session) IFissionGirlsListDo {
	return f.withDO(f.DO.Session(config))
}

func (f fissionGirlsListDo) Clauses(conds ...clause.Expression) IFissionGirlsListDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fissionGirlsListDo) Returning(value interface{}, columns ...string) IFissionGirlsListDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fissionGirlsListDo) Not(conds ...gen.Condition) IFissionGirlsListDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fissionGirlsListDo) Or(conds ...gen.Condition) IFissionGirlsListDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fissionGirlsListDo) Select(conds ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fissionGirlsListDo) Where(conds ...gen.Condition) IFissionGirlsListDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fissionGirlsListDo) Order(conds ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fissionGirlsListDo) Distinct(cols ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fissionGirlsListDo) Omit(cols ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fissionGirlsListDo) Join(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fissionGirlsListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fissionGirlsListDo) RightJoin(table schema.Tabler, on ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fissionGirlsListDo) Group(cols ...field.Expr) IFissionGirlsListDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fissionGirlsListDo) Having(conds ...gen.Condition) IFissionGirlsListDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fissionGirlsListDo) Limit(limit int) IFissionGirlsListDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fissionGirlsListDo) Offset(offset int) IFissionGirlsListDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fissionGirlsListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionGirlsListDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fissionGirlsListDo) Unscoped() IFissionGirlsListDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fissionGirlsListDo) Create(values ...*model.FissionGirlsList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fissionGirlsListDo) CreateInBatches(values []*model.FissionGirlsList, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fissionGirlsListDo) Save(values ...*model.FissionGirlsList) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fissionGirlsListDo) First() (*model.FissionGirlsList, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionGirlsList), nil
	}
}

func (f fissionGirlsListDo) Take() (*model.FissionGirlsList, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionGirlsList), nil
	}
}

func (f fissionGirlsListDo) Last() (*model.FissionGirlsList, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionGirlsList), nil
	}
}

func (f fissionGirlsListDo) Find() ([]*model.FissionGirlsList, error) {
	result, err := f.DO.Find()
	return result.([]*model.FissionGirlsList), err
}

func (f fissionGirlsListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionGirlsList, err error) {
	buf := make([]*model.FissionGirlsList, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fissionGirlsListDo) FindInBatches(result *[]*model.FissionGirlsList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fissionGirlsListDo) Attrs(attrs ...field.AssignExpr) IFissionGirlsListDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fissionGirlsListDo) Assign(attrs ...field.AssignExpr) IFissionGirlsListDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fissionGirlsListDo) Joins(fields ...field.RelationField) IFissionGirlsListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fissionGirlsListDo) Preload(fields ...field.RelationField) IFissionGirlsListDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fissionGirlsListDo) FirstOrInit() (*model.FissionGirlsList, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionGirlsList), nil
	}
}

func (f fissionGirlsListDo) FirstOrCreate() (*model.FissionGirlsList, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionGirlsList), nil
	}
}

func (f fissionGirlsListDo) FindByPage(offset int, limit int) (result []*model.FissionGirlsList, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fissionGirlsListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fissionGirlsListDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fissionGirlsListDo) Delete(models ...*model.FissionGirlsList) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fissionGirlsListDo) withDO(do gen.Dao) *fissionGirlsListDo {
	f.DO = *do.(*gen.DO)
	return f
}
