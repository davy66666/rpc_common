// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayFastRecord(db *gorm.DB, opts ...gen.DOOption) payFastRecord {
	_payFastRecord := payFastRecord{}

	_payFastRecord.payFastRecordDo.UseDB(db, opts...)
	_payFastRecord.payFastRecordDo.UseModel(&model.PayFastRecord{})

	tableName := _payFastRecord.payFastRecordDo.TableName()
	_payFastRecord.ALL = field.NewAsterisk(tableName)
	_payFastRecord.ID = field.NewInt64(tableName, "id")
	_payFastRecord.BillNo = field.NewString(tableName, "bill_no")
	_payFastRecord.UserID = field.NewInt64(tableName, "user_id")
	_payFastRecord.Username = field.NewString(tableName, "username")
	_payFastRecord.ParentID = field.NewInt64(tableName, "parent_id")
	_payFastRecord.ParentName = field.NewString(tableName, "parent_name")
	_payFastRecord.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_payFastRecord.PayerUserID = field.NewInt64(tableName, "payer_user_id")
	_payFastRecord.PayerUsername = field.NewString(tableName, "payer_username")
	_payFastRecord.PayerParentID = field.NewInt64(tableName, "payer_parent_id")
	_payFastRecord.PayerParentName = field.NewString(tableName, "payer_parent_name")
	_payFastRecord.PayerUserLevel = field.NewString(tableName, "payer_user_level")
	_payFastRecord.PayerPayLevel = field.NewString(tableName, "payer_pay_level")
	_payFastRecord.PayerPicURL = field.NewString(tableName, "payer_pic_url")
	_payFastRecord.PayerVideoURL = field.NewString(tableName, "payer_video_url")
	_payFastRecord.PayerStatus = field.NewInt64(tableName, "payer_status")
	_payFastRecord.PayerFinalStatus = field.NewInt64(tableName, "payer_final_status")
	_payFastRecord.PayerCardID = field.NewString(tableName, "payer_card_id")
	_payFastRecord.PayerCardName = field.NewString(tableName, "payer_card_name")
	_payFastRecord.PayerRealName = field.NewString(tableName, "payer_real_name")
	_payFastRecord.PayerBeforeMoney = field.NewFloat64(tableName, "payer_before_money")
	_payFastRecord.PayerMoney = field.NewFloat64(tableName, "payer_money")
	_payFastRecord.PayerRemark = field.NewString(tableName, "payer_remark")
	_payFastRecord.PayerIsTimeout = field.NewInt64(tableName, "payer_is_timeout")
	_payFastRecord.PayerIP = field.NewString(tableName, "payer_ip")
	_payFastRecord.PayerStartTime = field.NewField(tableName, "payer_start_time")
	_payFastRecord.PayerTime = field.NewField(tableName, "payer_time")
	_payFastRecord.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_payFastRecord.Amount = field.NewFloat64(tableName, "amount")
	_payFastRecord.Money = field.NewFloat64(tableName, "money")
	_payFastRecord.CardID = field.NewString(tableName, "card_id")
	_payFastRecord.PaymentCode = field.NewString(tableName, "payment_code")
	_payFastRecord.CardAddress = field.NewString(tableName, "card_address")
	_payFastRecord.BankShortName = field.NewString(tableName, "bank_short_name")
	_payFastRecord.PayName = field.NewString(tableName, "pay_name")
	_payFastRecord.RealName = field.NewString(tableName, "real_name")
	_payFastRecord.HandlingFee = field.NewFloat64(tableName, "handling_fee")
	_payFastRecord.IP = field.NewString(tableName, "ip")
	_payFastRecord.UserLevel = field.NewString(tableName, "user_level")
	_payFastRecord.PayLevel = field.NewString(tableName, "pay_level")
	_payFastRecord.OtherFee = field.NewFloat64(tableName, "other_fee")
	_payFastRecord.PayType = field.NewString(tableName, "pay_type")
	_payFastRecord.FastPayID = field.NewInt64(tableName, "fast_pay_id")
	_payFastRecord.BankType = field.NewInt64(tableName, "bank_type")
	_payFastRecord.BankRemark = field.NewString(tableName, "bank_remark")
	_payFastRecord.UserRemark = field.NewString(tableName, "user_remark")
	_payFastRecord.LockMoneyBefore = field.NewFloat64(tableName, "lock_money_before")
	_payFastRecord.LockMoneyAfter = field.NewFloat64(tableName, "lock_money_after")
	_payFastRecord.CreatedAt = field.NewField(tableName, "created_at")
	_payFastRecord.UpdatedAt = field.NewField(tableName, "updated_at")
	_payFastRecord.TotalCount = field.NewInt64(tableName, "total_count")
	_payFastRecord.DailyCount = field.NewInt64(tableName, "daily_count")
	_payFastRecord.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_payFastRecord.NeedBetAmount = field.NewFloat64(tableName, "need_bet_amount")
	_payFastRecord.ManualOutAdminName = field.NewString(tableName, "manual_out_admin_name")
	_payFastRecord.ManualOutAdminID = field.NewInt64(tableName, "manual_out_admin_id")
	_payFastRecord.ManualOutCheckTime = field.NewField(tableName, "manual_out_check_time")
	_payFastRecord.ManualOutRemark = field.NewString(tableName, "manual_out_remark")
	_payFastRecord.RiskStatus = field.NewInt64(tableName, "risk_status")
	_payFastRecord.RiskRemark = field.NewString(tableName, "risk_remark")
	_payFastRecord.RiskAdminID = field.NewInt64(tableName, "risk_admin_id")
	_payFastRecord.RiskAdminName = field.NewString(tableName, "risk_admin_name")
	_payFastRecord.RiskCheckTime = field.NewField(tableName, "risk_check_time")
	_payFastRecord.ReleaseAdminID = field.NewInt64(tableName, "release_admin_id")
	_payFastRecord.ReleaseAdminName = field.NewString(tableName, "release_admin_name")
	_payFastRecord.ReleaseTime = field.NewField(tableName, "release_time")
	_payFastRecord.CheckStatus = field.NewInt64(tableName, "check_status")
	_payFastRecord.AdminID = field.NewInt64(tableName, "admin_id")
	_payFastRecord.AdminName = field.NewString(tableName, "admin_name")
	_payFastRecord.CheckTime = field.NewField(tableName, "check_time")
	_payFastRecord.VerifyRemark = field.NewString(tableName, "verify_remark")
	_payFastRecord.LockAdminName = field.NewString(tableName, "lock_admin_name")
	_payFastRecord.ManualCardID = field.NewString(tableName, "manual_card_id")
	_payFastRecord.ManualPayName = field.NewString(tableName, "manual_pay_name")
	_payFastRecord.ManualPayImgPath = field.NewString(tableName, "manual_pay_img_path")
	_payFastRecord.LastAdminName = field.NewString(tableName, "last_admin_name")
	_payFastRecord.TransactionID = field.NewInt64(tableName, "transaction_id")
	_payFastRecord.ManualPayVideoPath = field.NewString(tableName, "manual_pay_video_path")
	_payFastRecord.IsSplit = field.NewInt64(tableName, "is_split")
	_payFastRecord.SplitCount = field.NewInt64(tableName, "split_count")
	_payFastRecord.CompletedCount = field.NewInt64(tableName, "completed_count")
	_payFastRecord.SuccessAmount = field.NewFloat64(tableName, "success_amount")
	_payFastRecord.WithdrawParentID = field.NewInt64(tableName, "withdraw_parent_id")
	_payFastRecord.FailAmount = field.NewFloat64(tableName, "fail_amount")
	_payFastRecord.WithdrawStatus = field.NewInt64(tableName, "withdraw_status")
	_payFastRecord.APIWithdrawStatus = field.NewInt64(tableName, "api_withdraw_status")
	_payFastRecord.Remark = field.NewString(tableName, "remark")
	_payFastRecord.PayID = field.NewInt64(tableName, "pay_id")
	_payFastRecord.BankStatementImgPath = field.NewString(tableName, "bank_statement_img_path")
	_payFastRecord.WriteSource = field.NewInt64(tableName, "write_source")
	_payFastRecord.WithdrawStatusTime = field.NewField(tableName, "withdraw_status_time")
	_payFastRecord.MatchedTimes = field.NewInt64(tableName, "matched_times")
	_payFastRecord.InnerRemark = field.NewString(tableName, "inner_remark")
	_payFastRecord.InnerRemarkAdminName = field.NewString(tableName, "inner_remark_admin_name")
	_payFastRecord.FirstVerifyAdminName = field.NewString(tableName, "first_verify_admin_name")
	_payFastRecord.WithdrawSource = field.NewInt64(tableName, "withdraw_source")
	_payFastRecord.APIBillNo = field.NewString(tableName, "api_bill_no")
	_payFastRecord.APIUsername = field.NewString(tableName, "api_username")
	_payFastRecord.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_payFastRecord.MerchantNum = field.NewString(tableName, "merchant_num")
	_payFastRecord.ThirdTrackNum = field.NewString(tableName, "third_track_num")
	_payFastRecord.ReserveWithdrawSeconds = field.NewInt64(tableName, "reserve_withdraw_seconds")
	_payFastRecord.ReserveCopywriting = field.NewString(tableName, "reserve_copywriting")
	_payFastRecord.TransferManualTime = field.NewField(tableName, "transfer_manual_time")
	_payFastRecord.IsManualReject = field.NewInt64(tableName, "is_manual_reject")
	_payFastRecord.FundsType = field.NewInt64(tableName, "funds_type")
	_payFastRecord.AutoRiskStatus = field.NewInt64(tableName, "auto_risk_status")
	_payFastRecord.AutoRiskAt = field.NewField(tableName, "auto_risk_at")
	_payFastRecord.AutoRiskIsPass = field.NewInt64(tableName, "auto_risk_is_pass")
	_payFastRecord.AutoRiskRemark = field.NewString(tableName, "auto_risk_remark")
	_payFastRecord.PayMode = field.NewInt64(tableName, "pay_mode")
	_payFastRecord.AutoWithdrawalID = field.NewInt64(tableName, "auto_withdrawal_id")
	_payFastRecord.ThreeOutTime = field.NewField(tableName, "three_out_time")
	_payFastRecord.RiskAuditType = field.NewInt64(tableName, "risk_audit_type")

	_payFastRecord.fillFieldMap()

	return _payFastRecord
}

// payFastRecord 极速支付记录
type payFastRecord struct {
	payFastRecordDo payFastRecordDo

	ALL                    field.Asterisk
	ID                     field.Int64
	BillNo                 field.String  // 平台订单号
	UserID                 field.Int64   // 取款用户id
	Username               field.String  // 取款用户名
	ParentID               field.Int64   // 取款用户上级
	ParentName             field.String  // 取款用户直属上级
	ForefatherIds          field.String  // 取款用户的所有上级以逗号分隔
	PayerUserID            field.Int64   // 充值用户id
	PayerUsername          field.String  // 充值用户名
	PayerParentID          field.Int64   // 充值用户id
	PayerParentName        field.String  // 充值用户代理商
	PayerUserLevel         field.String  // 充值用户层级
	PayerPayLevel          field.String  // 充值用户支付类别
	PayerPicURL            field.String  // 转账截图
	PayerVideoURL          field.String  // 转账视频凭证地址
	PayerStatus            field.Int64   // 状态：0待审核（默认）,1:待匹配,2:打款中,3:已打款,4:人工,5:已拒绝
	PayerFinalStatus       field.Int64   // 状态：0处理中（默认）0处理中,1:成功,2:失败
	PayerCardID            field.String  // 支付者卡号
	PayerCardName          field.String  // 支付者类型银行卡或者虚拟货币名称
	PayerRealName          field.String  // 持卡姓名
	PayerBeforeMoney       field.Float64 // 充值用户交易前金额
	PayerMoney             field.Float64 // 充值用户交易后金额
	PayerRemark            field.String  // 充值备注
	PayerIsTimeout         field.Int64   // 是否支付超时
	PayerIP                field.String  // 充值人ip
	PayerStartTime         field.Field   // 充值开始时间
	PayerTime              field.Field   // 充值时间
	BeforeMoney            field.Float64 // 取款用户交易前金额
	Amount                 field.Float64 // 取款用户交易金额
	Money                  field.Float64 // 取款用户交易后金额
	CardID                 field.String  // 取款用户卡号或者虚拟货币地址
	PaymentCode            field.String  // 收款码
	CardAddress            field.String  // 取款用户开户行地址
	BankShortName          field.String  // 银行英文简称
	PayName                field.String  // 取款用户类型银行卡或者虚拟货币名称
	RealName               field.String  // 取款用户持卡姓名
	HandlingFee            field.Float64 // 手续费
	IP                     field.String  // 取款人ip
	UserLevel              field.String  // 取款用户层级
	PayLevel               field.String  // 取款用户支付类别
	OtherFee               field.Float64 // 行政费
	PayType                field.String  // pay_types表中的en_name
	FastPayID              field.Int64   // 关联fast_pays表的id
	BankType               field.Int64   // 1:银行卡, 2:数字钱包
	BankRemark             field.String  // 银行卡备注
	UserRemark             field.String  // 提现会员备注
	LockMoneyBefore        field.Float64 // 交易前冻结金额
	LockMoneyAfter         field.Float64 // 交易后冻结金额
	CreatedAt              field.Field   // 取款时间
	UpdatedAt              field.Field   // 取款修改
	TotalCount             field.Int64   // 总计统计次数
	DailyCount             field.Int64   // 每日统计次数
	BetAmount              field.Float64 // 已经打码量
	NeedBetAmount          field.Float64 // 取款要求打码量
	ManualOutAdminName     field.String  // 人工打款审核人
	ManualOutAdminID       field.Int64   // 人工打款审核人id
	ManualOutCheckTime     field.Field   // 人工打款审核时间
	ManualOutRemark        field.String  // 人工打款备注
	RiskStatus             field.Int64   // 风控审核状态：0待审核（默认）,1:急速,2:人工
	RiskRemark             field.String  // 风控审核备注
	RiskAdminID            field.Int64   // 风控审核人id
	RiskAdminName          field.String  // 风控审核人
	RiskCheckTime          field.Field   // 风控审核时间
	ReleaseAdminID         field.Int64   // 释放操作人id
	ReleaseAdminName       field.String  // 释放操作人
	ReleaseTime            field.Field   // 释放时间
	CheckStatus            field.Int64   // 审核结果：0未处理（默认）,1:通过,2:失败
	AdminID                field.Int64   // 审核人id
	AdminName              field.String  // 审核人
	CheckTime              field.Field   // 审核时间
	VerifyRemark           field.String  // 审核备注
	LockAdminName          field.String  // 锁定管理员名称
	ManualCardID           field.String  // 人工付款卡号
	ManualPayName          field.String  // 人工付款卡银行
	ManualPayImgPath       field.String  // 人工付款回单
	LastAdminName          field.String  // 最后操作管理员
	TransactionID          field.Int64   // 手动帐变id
	ManualPayVideoPath     field.String  // 人工付款回单-视频
	IsSplit                field.Int64   // 是否拆单 0：未拆 1：已拆
	SplitCount             field.Int64   // 拆单数量
	CompletedCount         field.Int64   // 已完成子单
	SuccessAmount          field.Float64 // 已成功金额
	WithdrawParentID       field.Int64   // 提现父级id
	FailAmount             field.Float64 // 已失败金额
	WithdrawStatus         field.Int64   // 出款方确认状态 0:默认 1:待确认 2:未收款 3:已收款
	APIWithdrawStatus      field.Int64   // 状态: 0(默认), 1:处理中, 2:成功, 3:失败
	Remark                 field.String  // 内部备注
	PayID                  field.Int64   // 提款账号id
	BankStatementImgPath   field.String  // 资金流水图
	WriteSource            field.Int64   // 0正常极速写入,1三方写入,2系统卡商
	WithdrawStatusTime     field.Field   // 出款方状态确认时间
	MatchedTimes           field.Int64   // 已匹配次数
	InnerRemark            field.String  // 内部备注
	InnerRemarkAdminName   field.String  // 内部备注管理员
	FirstVerifyAdminName   field.String  // 首次审核管理员
	WithdrawSource         field.Int64   // 极速提款来源：[0:系统用户提款，1：澳门API提款,2：系统卡商]
	APIBillNo              field.String  // API来源订单号
	APIUsername            field.String  // API来源用户名
	ThirdMerchantName      field.String  // 三方商户名称
	MerchantNum            field.String  // 商户编号
	ThirdTrackNum          field.String  // 三方单号
	ReserveWithdrawSeconds field.Int64   // 预约取款秒数
	ReserveCopywriting     field.String  // 预约按鈕文案
	TransferManualTime     field.Field   // 转人工时间
	IsManualReject         field.Int64   // 是否是手动拒绝
	FundsType              field.Int64   // 资金类型：1 rmb，2 usdt 3钱包
	AutoRiskStatus         field.Int64   // 风控状态 1：未进行 2：进行中 3：成功 4：失败
	AutoRiskAt             field.Field   // 风控时间
	AutoRiskIsPass         field.Int64   // 风控是否通过 0：不通过 1：通过
	AutoRiskRemark         field.String  // 风控备注
	PayMode                field.Int64   // 是否自动出款 0:人工 1:api
	AutoWithdrawalID       field.Int64   // 自动出款id
	ThreeOutTime           field.Field   // 三方成功出款时间
	RiskAuditType          field.Int64   // 风控审核方式 1：人工审核 2：自动审核

	fieldMap map[string]field.Expr
}

func (p payFastRecord) Table(newTableName string) *payFastRecord {
	p.payFastRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payFastRecord) As(alias string) *payFastRecord {
	p.payFastRecordDo.DO = *(p.payFastRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payFastRecord) updateTableName(table string) *payFastRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.BillNo = field.NewString(table, "bill_no")
	p.UserID = field.NewInt64(table, "user_id")
	p.Username = field.NewString(table, "username")
	p.ParentID = field.NewInt64(table, "parent_id")
	p.ParentName = field.NewString(table, "parent_name")
	p.ForefatherIds = field.NewString(table, "forefather_ids")
	p.PayerUserID = field.NewInt64(table, "payer_user_id")
	p.PayerUsername = field.NewString(table, "payer_username")
	p.PayerParentID = field.NewInt64(table, "payer_parent_id")
	p.PayerParentName = field.NewString(table, "payer_parent_name")
	p.PayerUserLevel = field.NewString(table, "payer_user_level")
	p.PayerPayLevel = field.NewString(table, "payer_pay_level")
	p.PayerPicURL = field.NewString(table, "payer_pic_url")
	p.PayerVideoURL = field.NewString(table, "payer_video_url")
	p.PayerStatus = field.NewInt64(table, "payer_status")
	p.PayerFinalStatus = field.NewInt64(table, "payer_final_status")
	p.PayerCardID = field.NewString(table, "payer_card_id")
	p.PayerCardName = field.NewString(table, "payer_card_name")
	p.PayerRealName = field.NewString(table, "payer_real_name")
	p.PayerBeforeMoney = field.NewFloat64(table, "payer_before_money")
	p.PayerMoney = field.NewFloat64(table, "payer_money")
	p.PayerRemark = field.NewString(table, "payer_remark")
	p.PayerIsTimeout = field.NewInt64(table, "payer_is_timeout")
	p.PayerIP = field.NewString(table, "payer_ip")
	p.PayerStartTime = field.NewField(table, "payer_start_time")
	p.PayerTime = field.NewField(table, "payer_time")
	p.BeforeMoney = field.NewFloat64(table, "before_money")
	p.Amount = field.NewFloat64(table, "amount")
	p.Money = field.NewFloat64(table, "money")
	p.CardID = field.NewString(table, "card_id")
	p.PaymentCode = field.NewString(table, "payment_code")
	p.CardAddress = field.NewString(table, "card_address")
	p.BankShortName = field.NewString(table, "bank_short_name")
	p.PayName = field.NewString(table, "pay_name")
	p.RealName = field.NewString(table, "real_name")
	p.HandlingFee = field.NewFloat64(table, "handling_fee")
	p.IP = field.NewString(table, "ip")
	p.UserLevel = field.NewString(table, "user_level")
	p.PayLevel = field.NewString(table, "pay_level")
	p.OtherFee = field.NewFloat64(table, "other_fee")
	p.PayType = field.NewString(table, "pay_type")
	p.FastPayID = field.NewInt64(table, "fast_pay_id")
	p.BankType = field.NewInt64(table, "bank_type")
	p.BankRemark = field.NewString(table, "bank_remark")
	p.UserRemark = field.NewString(table, "user_remark")
	p.LockMoneyBefore = field.NewFloat64(table, "lock_money_before")
	p.LockMoneyAfter = field.NewFloat64(table, "lock_money_after")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.TotalCount = field.NewInt64(table, "total_count")
	p.DailyCount = field.NewInt64(table, "daily_count")
	p.BetAmount = field.NewFloat64(table, "bet_amount")
	p.NeedBetAmount = field.NewFloat64(table, "need_bet_amount")
	p.ManualOutAdminName = field.NewString(table, "manual_out_admin_name")
	p.ManualOutAdminID = field.NewInt64(table, "manual_out_admin_id")
	p.ManualOutCheckTime = field.NewField(table, "manual_out_check_time")
	p.ManualOutRemark = field.NewString(table, "manual_out_remark")
	p.RiskStatus = field.NewInt64(table, "risk_status")
	p.RiskRemark = field.NewString(table, "risk_remark")
	p.RiskAdminID = field.NewInt64(table, "risk_admin_id")
	p.RiskAdminName = field.NewString(table, "risk_admin_name")
	p.RiskCheckTime = field.NewField(table, "risk_check_time")
	p.ReleaseAdminID = field.NewInt64(table, "release_admin_id")
	p.ReleaseAdminName = field.NewString(table, "release_admin_name")
	p.ReleaseTime = field.NewField(table, "release_time")
	p.CheckStatus = field.NewInt64(table, "check_status")
	p.AdminID = field.NewInt64(table, "admin_id")
	p.AdminName = field.NewString(table, "admin_name")
	p.CheckTime = field.NewField(table, "check_time")
	p.VerifyRemark = field.NewString(table, "verify_remark")
	p.LockAdminName = field.NewString(table, "lock_admin_name")
	p.ManualCardID = field.NewString(table, "manual_card_id")
	p.ManualPayName = field.NewString(table, "manual_pay_name")
	p.ManualPayImgPath = field.NewString(table, "manual_pay_img_path")
	p.LastAdminName = field.NewString(table, "last_admin_name")
	p.TransactionID = field.NewInt64(table, "transaction_id")
	p.ManualPayVideoPath = field.NewString(table, "manual_pay_video_path")
	p.IsSplit = field.NewInt64(table, "is_split")
	p.SplitCount = field.NewInt64(table, "split_count")
	p.CompletedCount = field.NewInt64(table, "completed_count")
	p.SuccessAmount = field.NewFloat64(table, "success_amount")
	p.WithdrawParentID = field.NewInt64(table, "withdraw_parent_id")
	p.FailAmount = field.NewFloat64(table, "fail_amount")
	p.WithdrawStatus = field.NewInt64(table, "withdraw_status")
	p.APIWithdrawStatus = field.NewInt64(table, "api_withdraw_status")
	p.Remark = field.NewString(table, "remark")
	p.PayID = field.NewInt64(table, "pay_id")
	p.BankStatementImgPath = field.NewString(table, "bank_statement_img_path")
	p.WriteSource = field.NewInt64(table, "write_source")
	p.WithdrawStatusTime = field.NewField(table, "withdraw_status_time")
	p.MatchedTimes = field.NewInt64(table, "matched_times")
	p.InnerRemark = field.NewString(table, "inner_remark")
	p.InnerRemarkAdminName = field.NewString(table, "inner_remark_admin_name")
	p.FirstVerifyAdminName = field.NewString(table, "first_verify_admin_name")
	p.WithdrawSource = field.NewInt64(table, "withdraw_source")
	p.APIBillNo = field.NewString(table, "api_bill_no")
	p.APIUsername = field.NewString(table, "api_username")
	p.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	p.MerchantNum = field.NewString(table, "merchant_num")
	p.ThirdTrackNum = field.NewString(table, "third_track_num")
	p.ReserveWithdrawSeconds = field.NewInt64(table, "reserve_withdraw_seconds")
	p.ReserveCopywriting = field.NewString(table, "reserve_copywriting")
	p.TransferManualTime = field.NewField(table, "transfer_manual_time")
	p.IsManualReject = field.NewInt64(table, "is_manual_reject")
	p.FundsType = field.NewInt64(table, "funds_type")
	p.AutoRiskStatus = field.NewInt64(table, "auto_risk_status")
	p.AutoRiskAt = field.NewField(table, "auto_risk_at")
	p.AutoRiskIsPass = field.NewInt64(table, "auto_risk_is_pass")
	p.AutoRiskRemark = field.NewString(table, "auto_risk_remark")
	p.PayMode = field.NewInt64(table, "pay_mode")
	p.AutoWithdrawalID = field.NewInt64(table, "auto_withdrawal_id")
	p.ThreeOutTime = field.NewField(table, "three_out_time")
	p.RiskAuditType = field.NewInt64(table, "risk_audit_type")

	p.fillFieldMap()

	return p
}

func (p *payFastRecord) WithContext(ctx context.Context) IPayFastRecordDo {
	return p.payFastRecordDo.WithContext(ctx)
}

func (p payFastRecord) TableName() string { return p.payFastRecordDo.TableName() }

func (p payFastRecord) Alias() string { return p.payFastRecordDo.Alias() }

func (p payFastRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.payFastRecordDo.Columns(cols...)
}

func (p *payFastRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payFastRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 114)
	p.fieldMap["id"] = p.ID
	p.fieldMap["bill_no"] = p.BillNo
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["username"] = p.Username
	p.fieldMap["parent_id"] = p.ParentID
	p.fieldMap["parent_name"] = p.ParentName
	p.fieldMap["forefather_ids"] = p.ForefatherIds
	p.fieldMap["payer_user_id"] = p.PayerUserID
	p.fieldMap["payer_username"] = p.PayerUsername
	p.fieldMap["payer_parent_id"] = p.PayerParentID
	p.fieldMap["payer_parent_name"] = p.PayerParentName
	p.fieldMap["payer_user_level"] = p.PayerUserLevel
	p.fieldMap["payer_pay_level"] = p.PayerPayLevel
	p.fieldMap["payer_pic_url"] = p.PayerPicURL
	p.fieldMap["payer_video_url"] = p.PayerVideoURL
	p.fieldMap["payer_status"] = p.PayerStatus
	p.fieldMap["payer_final_status"] = p.PayerFinalStatus
	p.fieldMap["payer_card_id"] = p.PayerCardID
	p.fieldMap["payer_card_name"] = p.PayerCardName
	p.fieldMap["payer_real_name"] = p.PayerRealName
	p.fieldMap["payer_before_money"] = p.PayerBeforeMoney
	p.fieldMap["payer_money"] = p.PayerMoney
	p.fieldMap["payer_remark"] = p.PayerRemark
	p.fieldMap["payer_is_timeout"] = p.PayerIsTimeout
	p.fieldMap["payer_ip"] = p.PayerIP
	p.fieldMap["payer_start_time"] = p.PayerStartTime
	p.fieldMap["payer_time"] = p.PayerTime
	p.fieldMap["before_money"] = p.BeforeMoney
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["money"] = p.Money
	p.fieldMap["card_id"] = p.CardID
	p.fieldMap["payment_code"] = p.PaymentCode
	p.fieldMap["card_address"] = p.CardAddress
	p.fieldMap["bank_short_name"] = p.BankShortName
	p.fieldMap["pay_name"] = p.PayName
	p.fieldMap["real_name"] = p.RealName
	p.fieldMap["handling_fee"] = p.HandlingFee
	p.fieldMap["ip"] = p.IP
	p.fieldMap["user_level"] = p.UserLevel
	p.fieldMap["pay_level"] = p.PayLevel
	p.fieldMap["other_fee"] = p.OtherFee
	p.fieldMap["pay_type"] = p.PayType
	p.fieldMap["fast_pay_id"] = p.FastPayID
	p.fieldMap["bank_type"] = p.BankType
	p.fieldMap["bank_remark"] = p.BankRemark
	p.fieldMap["user_remark"] = p.UserRemark
	p.fieldMap["lock_money_before"] = p.LockMoneyBefore
	p.fieldMap["lock_money_after"] = p.LockMoneyAfter
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["total_count"] = p.TotalCount
	p.fieldMap["daily_count"] = p.DailyCount
	p.fieldMap["bet_amount"] = p.BetAmount
	p.fieldMap["need_bet_amount"] = p.NeedBetAmount
	p.fieldMap["manual_out_admin_name"] = p.ManualOutAdminName
	p.fieldMap["manual_out_admin_id"] = p.ManualOutAdminID
	p.fieldMap["manual_out_check_time"] = p.ManualOutCheckTime
	p.fieldMap["manual_out_remark"] = p.ManualOutRemark
	p.fieldMap["risk_status"] = p.RiskStatus
	p.fieldMap["risk_remark"] = p.RiskRemark
	p.fieldMap["risk_admin_id"] = p.RiskAdminID
	p.fieldMap["risk_admin_name"] = p.RiskAdminName
	p.fieldMap["risk_check_time"] = p.RiskCheckTime
	p.fieldMap["release_admin_id"] = p.ReleaseAdminID
	p.fieldMap["release_admin_name"] = p.ReleaseAdminName
	p.fieldMap["release_time"] = p.ReleaseTime
	p.fieldMap["check_status"] = p.CheckStatus
	p.fieldMap["admin_id"] = p.AdminID
	p.fieldMap["admin_name"] = p.AdminName
	p.fieldMap["check_time"] = p.CheckTime
	p.fieldMap["verify_remark"] = p.VerifyRemark
	p.fieldMap["lock_admin_name"] = p.LockAdminName
	p.fieldMap["manual_card_id"] = p.ManualCardID
	p.fieldMap["manual_pay_name"] = p.ManualPayName
	p.fieldMap["manual_pay_img_path"] = p.ManualPayImgPath
	p.fieldMap["last_admin_name"] = p.LastAdminName
	p.fieldMap["transaction_id"] = p.TransactionID
	p.fieldMap["manual_pay_video_path"] = p.ManualPayVideoPath
	p.fieldMap["is_split"] = p.IsSplit
	p.fieldMap["split_count"] = p.SplitCount
	p.fieldMap["completed_count"] = p.CompletedCount
	p.fieldMap["success_amount"] = p.SuccessAmount
	p.fieldMap["withdraw_parent_id"] = p.WithdrawParentID
	p.fieldMap["fail_amount"] = p.FailAmount
	p.fieldMap["withdraw_status"] = p.WithdrawStatus
	p.fieldMap["api_withdraw_status"] = p.APIWithdrawStatus
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["pay_id"] = p.PayID
	p.fieldMap["bank_statement_img_path"] = p.BankStatementImgPath
	p.fieldMap["write_source"] = p.WriteSource
	p.fieldMap["withdraw_status_time"] = p.WithdrawStatusTime
	p.fieldMap["matched_times"] = p.MatchedTimes
	p.fieldMap["inner_remark"] = p.InnerRemark
	p.fieldMap["inner_remark_admin_name"] = p.InnerRemarkAdminName
	p.fieldMap["first_verify_admin_name"] = p.FirstVerifyAdminName
	p.fieldMap["withdraw_source"] = p.WithdrawSource
	p.fieldMap["api_bill_no"] = p.APIBillNo
	p.fieldMap["api_username"] = p.APIUsername
	p.fieldMap["third_merchant_name"] = p.ThirdMerchantName
	p.fieldMap["merchant_num"] = p.MerchantNum
	p.fieldMap["third_track_num"] = p.ThirdTrackNum
	p.fieldMap["reserve_withdraw_seconds"] = p.ReserveWithdrawSeconds
	p.fieldMap["reserve_copywriting"] = p.ReserveCopywriting
	p.fieldMap["transfer_manual_time"] = p.TransferManualTime
	p.fieldMap["is_manual_reject"] = p.IsManualReject
	p.fieldMap["funds_type"] = p.FundsType
	p.fieldMap["auto_risk_status"] = p.AutoRiskStatus
	p.fieldMap["auto_risk_at"] = p.AutoRiskAt
	p.fieldMap["auto_risk_is_pass"] = p.AutoRiskIsPass
	p.fieldMap["auto_risk_remark"] = p.AutoRiskRemark
	p.fieldMap["pay_mode"] = p.PayMode
	p.fieldMap["auto_withdrawal_id"] = p.AutoWithdrawalID
	p.fieldMap["three_out_time"] = p.ThreeOutTime
	p.fieldMap["risk_audit_type"] = p.RiskAuditType
}

func (p payFastRecord) clone(db *gorm.DB) payFastRecord {
	p.payFastRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payFastRecord) replaceDB(db *gorm.DB) payFastRecord {
	p.payFastRecordDo.ReplaceDB(db)
	return p
}

type payFastRecordDo struct{ gen.DO }

type IPayFastRecordDo interface {
	gen.SubQuery
	Debug() IPayFastRecordDo
	WithContext(ctx context.Context) IPayFastRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayFastRecordDo
	WriteDB() IPayFastRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayFastRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayFastRecordDo
	Not(conds ...gen.Condition) IPayFastRecordDo
	Or(conds ...gen.Condition) IPayFastRecordDo
	Select(conds ...field.Expr) IPayFastRecordDo
	Where(conds ...gen.Condition) IPayFastRecordDo
	Order(conds ...field.Expr) IPayFastRecordDo
	Distinct(cols ...field.Expr) IPayFastRecordDo
	Omit(cols ...field.Expr) IPayFastRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPayFastRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordDo
	Group(cols ...field.Expr) IPayFastRecordDo
	Having(conds ...gen.Condition) IPayFastRecordDo
	Limit(limit int) IPayFastRecordDo
	Offset(offset int) IPayFastRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastRecordDo
	Unscoped() IPayFastRecordDo
	Create(values ...*model.PayFastRecord) error
	CreateInBatches(values []*model.PayFastRecord, batchSize int) error
	Save(values ...*model.PayFastRecord) error
	First() (*model.PayFastRecord, error)
	Take() (*model.PayFastRecord, error)
	Last() (*model.PayFastRecord, error)
	Find() ([]*model.PayFastRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastRecord, err error)
	FindInBatches(result *[]*model.PayFastRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayFastRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayFastRecordDo
	Assign(attrs ...field.AssignExpr) IPayFastRecordDo
	Joins(fields ...field.RelationField) IPayFastRecordDo
	Preload(fields ...field.RelationField) IPayFastRecordDo
	FirstOrInit() (*model.PayFastRecord, error)
	FirstOrCreate() (*model.PayFastRecord, error)
	FindByPage(offset int, limit int) (result []*model.PayFastRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayFastRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payFastRecordDo) Debug() IPayFastRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p payFastRecordDo) WithContext(ctx context.Context) IPayFastRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payFastRecordDo) ReadDB() IPayFastRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p payFastRecordDo) WriteDB() IPayFastRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p payFastRecordDo) Session(config *gorm.Session) IPayFastRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p payFastRecordDo) Clauses(conds ...clause.Expression) IPayFastRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payFastRecordDo) Returning(value interface{}, columns ...string) IPayFastRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payFastRecordDo) Not(conds ...gen.Condition) IPayFastRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payFastRecordDo) Or(conds ...gen.Condition) IPayFastRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payFastRecordDo) Select(conds ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payFastRecordDo) Where(conds ...gen.Condition) IPayFastRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payFastRecordDo) Order(conds ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payFastRecordDo) Distinct(cols ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payFastRecordDo) Omit(cols ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payFastRecordDo) Join(table schema.Tabler, on ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payFastRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payFastRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payFastRecordDo) Group(cols ...field.Expr) IPayFastRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payFastRecordDo) Having(conds ...gen.Condition) IPayFastRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payFastRecordDo) Limit(limit int) IPayFastRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payFastRecordDo) Offset(offset int) IPayFastRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payFastRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payFastRecordDo) Unscoped() IPayFastRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payFastRecordDo) Create(values ...*model.PayFastRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payFastRecordDo) CreateInBatches(values []*model.PayFastRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payFastRecordDo) Save(values ...*model.PayFastRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payFastRecordDo) First() (*model.PayFastRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecord), nil
	}
}

func (p payFastRecordDo) Take() (*model.PayFastRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecord), nil
	}
}

func (p payFastRecordDo) Last() (*model.PayFastRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecord), nil
	}
}

func (p payFastRecordDo) Find() ([]*model.PayFastRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayFastRecord), err
}

func (p payFastRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastRecord, err error) {
	buf := make([]*model.PayFastRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payFastRecordDo) FindInBatches(result *[]*model.PayFastRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payFastRecordDo) Attrs(attrs ...field.AssignExpr) IPayFastRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payFastRecordDo) Assign(attrs ...field.AssignExpr) IPayFastRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payFastRecordDo) Joins(fields ...field.RelationField) IPayFastRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payFastRecordDo) Preload(fields ...field.RelationField) IPayFastRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payFastRecordDo) FirstOrInit() (*model.PayFastRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecord), nil
	}
}

func (p payFastRecordDo) FirstOrCreate() (*model.PayFastRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastRecord), nil
	}
}

func (p payFastRecordDo) FindByPage(offset int, limit int) (result []*model.PayFastRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payFastRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payFastRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payFastRecordDo) Delete(models ...*model.PayFastRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payFastRecordDo) withDO(do gen.Dao) *payFastRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
