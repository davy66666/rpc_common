// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newVirtualCurrencyNetwork(db *gorm.DB, opts ...gen.DOOption) virtualCurrencyNetwork {
	_virtualCurrencyNetwork := virtualCurrencyNetwork{}

	_virtualCurrencyNetwork.virtualCurrencyNetworkDo.UseDB(db, opts...)
	_virtualCurrencyNetwork.virtualCurrencyNetworkDo.UseModel(&model.VirtualCurrencyNetwork{})

	tableName := _virtualCurrencyNetwork.virtualCurrencyNetworkDo.TableName()
	_virtualCurrencyNetwork.ALL = field.NewAsterisk(tableName)
	_virtualCurrencyNetwork.ID = field.NewInt64(tableName, "id")
	_virtualCurrencyNetwork.VirtualCurrencyName = field.NewString(tableName, "virtual_currency_name")
	_virtualCurrencyNetwork.Network = field.NewString(tableName, "network")
	_virtualCurrencyNetwork.IsOpen = field.NewInt64(tableName, "is_open")
	_virtualCurrencyNetwork.CreatedAt = field.NewField(tableName, "created_at")
	_virtualCurrencyNetwork.UpdatedAt = field.NewField(tableName, "updated_at")

	_virtualCurrencyNetwork.fillFieldMap()

	return _virtualCurrencyNetwork
}

type virtualCurrencyNetwork struct {
	virtualCurrencyNetworkDo virtualCurrencyNetworkDo

	ALL                 field.Asterisk
	ID                  field.Int64
	VirtualCurrencyName field.String // 虚拟货币名字,存大写, 例如USDT
	Network             field.String // 虚拟货币网络类型, 例如trc20
	IsOpen              field.Int64  // 是否开启0:否;1:是
	CreatedAt           field.Field
	UpdatedAt           field.Field

	fieldMap map[string]field.Expr
}

func (v virtualCurrencyNetwork) Table(newTableName string) *virtualCurrencyNetwork {
	v.virtualCurrencyNetworkDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v virtualCurrencyNetwork) As(alias string) *virtualCurrencyNetwork {
	v.virtualCurrencyNetworkDo.DO = *(v.virtualCurrencyNetworkDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *virtualCurrencyNetwork) updateTableName(table string) *virtualCurrencyNetwork {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VirtualCurrencyName = field.NewString(table, "virtual_currency_name")
	v.Network = field.NewString(table, "network")
	v.IsOpen = field.NewInt64(table, "is_open")
	v.CreatedAt = field.NewField(table, "created_at")
	v.UpdatedAt = field.NewField(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *virtualCurrencyNetwork) WithContext(ctx context.Context) IVirtualCurrencyNetworkDo {
	return v.virtualCurrencyNetworkDo.WithContext(ctx)
}

func (v virtualCurrencyNetwork) TableName() string { return v.virtualCurrencyNetworkDo.TableName() }

func (v virtualCurrencyNetwork) Alias() string { return v.virtualCurrencyNetworkDo.Alias() }

func (v virtualCurrencyNetwork) Columns(cols ...field.Expr) gen.Columns {
	return v.virtualCurrencyNetworkDo.Columns(cols...)
}

func (v *virtualCurrencyNetwork) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *virtualCurrencyNetwork) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["virtual_currency_name"] = v.VirtualCurrencyName
	v.fieldMap["network"] = v.Network
	v.fieldMap["is_open"] = v.IsOpen
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v virtualCurrencyNetwork) clone(db *gorm.DB) virtualCurrencyNetwork {
	v.virtualCurrencyNetworkDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v virtualCurrencyNetwork) replaceDB(db *gorm.DB) virtualCurrencyNetwork {
	v.virtualCurrencyNetworkDo.ReplaceDB(db)
	return v
}

type virtualCurrencyNetworkDo struct{ gen.DO }

type IVirtualCurrencyNetworkDo interface {
	gen.SubQuery
	Debug() IVirtualCurrencyNetworkDo
	WithContext(ctx context.Context) IVirtualCurrencyNetworkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVirtualCurrencyNetworkDo
	WriteDB() IVirtualCurrencyNetworkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVirtualCurrencyNetworkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVirtualCurrencyNetworkDo
	Not(conds ...gen.Condition) IVirtualCurrencyNetworkDo
	Or(conds ...gen.Condition) IVirtualCurrencyNetworkDo
	Select(conds ...field.Expr) IVirtualCurrencyNetworkDo
	Where(conds ...gen.Condition) IVirtualCurrencyNetworkDo
	Order(conds ...field.Expr) IVirtualCurrencyNetworkDo
	Distinct(cols ...field.Expr) IVirtualCurrencyNetworkDo
	Omit(cols ...field.Expr) IVirtualCurrencyNetworkDo
	Join(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo
	Group(cols ...field.Expr) IVirtualCurrencyNetworkDo
	Having(conds ...gen.Condition) IVirtualCurrencyNetworkDo
	Limit(limit int) IVirtualCurrencyNetworkDo
	Offset(offset int) IVirtualCurrencyNetworkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVirtualCurrencyNetworkDo
	Unscoped() IVirtualCurrencyNetworkDo
	Create(values ...*model.VirtualCurrencyNetwork) error
	CreateInBatches(values []*model.VirtualCurrencyNetwork, batchSize int) error
	Save(values ...*model.VirtualCurrencyNetwork) error
	First() (*model.VirtualCurrencyNetwork, error)
	Take() (*model.VirtualCurrencyNetwork, error)
	Last() (*model.VirtualCurrencyNetwork, error)
	Find() ([]*model.VirtualCurrencyNetwork, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VirtualCurrencyNetwork, err error)
	FindInBatches(result *[]*model.VirtualCurrencyNetwork, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VirtualCurrencyNetwork) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVirtualCurrencyNetworkDo
	Assign(attrs ...field.AssignExpr) IVirtualCurrencyNetworkDo
	Joins(fields ...field.RelationField) IVirtualCurrencyNetworkDo
	Preload(fields ...field.RelationField) IVirtualCurrencyNetworkDo
	FirstOrInit() (*model.VirtualCurrencyNetwork, error)
	FirstOrCreate() (*model.VirtualCurrencyNetwork, error)
	FindByPage(offset int, limit int) (result []*model.VirtualCurrencyNetwork, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVirtualCurrencyNetworkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v virtualCurrencyNetworkDo) Debug() IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Debug())
}

func (v virtualCurrencyNetworkDo) WithContext(ctx context.Context) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v virtualCurrencyNetworkDo) ReadDB() IVirtualCurrencyNetworkDo {
	return v.Clauses(dbresolver.Read)
}

func (v virtualCurrencyNetworkDo) WriteDB() IVirtualCurrencyNetworkDo {
	return v.Clauses(dbresolver.Write)
}

func (v virtualCurrencyNetworkDo) Session(config *gorm.Session) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Session(config))
}

func (v virtualCurrencyNetworkDo) Clauses(conds ...clause.Expression) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v virtualCurrencyNetworkDo) Returning(value interface{}, columns ...string) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v virtualCurrencyNetworkDo) Not(conds ...gen.Condition) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v virtualCurrencyNetworkDo) Or(conds ...gen.Condition) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v virtualCurrencyNetworkDo) Select(conds ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v virtualCurrencyNetworkDo) Where(conds ...gen.Condition) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v virtualCurrencyNetworkDo) Order(conds ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v virtualCurrencyNetworkDo) Distinct(cols ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v virtualCurrencyNetworkDo) Omit(cols ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v virtualCurrencyNetworkDo) Join(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v virtualCurrencyNetworkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v virtualCurrencyNetworkDo) RightJoin(table schema.Tabler, on ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v virtualCurrencyNetworkDo) Group(cols ...field.Expr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v virtualCurrencyNetworkDo) Having(conds ...gen.Condition) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v virtualCurrencyNetworkDo) Limit(limit int) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v virtualCurrencyNetworkDo) Offset(offset int) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v virtualCurrencyNetworkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v virtualCurrencyNetworkDo) Unscoped() IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Unscoped())
}

func (v virtualCurrencyNetworkDo) Create(values ...*model.VirtualCurrencyNetwork) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v virtualCurrencyNetworkDo) CreateInBatches(values []*model.VirtualCurrencyNetwork, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v virtualCurrencyNetworkDo) Save(values ...*model.VirtualCurrencyNetwork) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v virtualCurrencyNetworkDo) First() (*model.VirtualCurrencyNetwork, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyNetwork), nil
	}
}

func (v virtualCurrencyNetworkDo) Take() (*model.VirtualCurrencyNetwork, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyNetwork), nil
	}
}

func (v virtualCurrencyNetworkDo) Last() (*model.VirtualCurrencyNetwork, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyNetwork), nil
	}
}

func (v virtualCurrencyNetworkDo) Find() ([]*model.VirtualCurrencyNetwork, error) {
	result, err := v.DO.Find()
	return result.([]*model.VirtualCurrencyNetwork), err
}

func (v virtualCurrencyNetworkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VirtualCurrencyNetwork, err error) {
	buf := make([]*model.VirtualCurrencyNetwork, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v virtualCurrencyNetworkDo) FindInBatches(result *[]*model.VirtualCurrencyNetwork, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v virtualCurrencyNetworkDo) Attrs(attrs ...field.AssignExpr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v virtualCurrencyNetworkDo) Assign(attrs ...field.AssignExpr) IVirtualCurrencyNetworkDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v virtualCurrencyNetworkDo) Joins(fields ...field.RelationField) IVirtualCurrencyNetworkDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v virtualCurrencyNetworkDo) Preload(fields ...field.RelationField) IVirtualCurrencyNetworkDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v virtualCurrencyNetworkDo) FirstOrInit() (*model.VirtualCurrencyNetwork, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyNetwork), nil
	}
}

func (v virtualCurrencyNetworkDo) FirstOrCreate() (*model.VirtualCurrencyNetwork, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualCurrencyNetwork), nil
	}
}

func (v virtualCurrencyNetworkDo) FindByPage(offset int, limit int) (result []*model.VirtualCurrencyNetwork, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v virtualCurrencyNetworkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v virtualCurrencyNetworkDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v virtualCurrencyNetworkDo) Delete(models ...*model.VirtualCurrencyNetwork) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *virtualCurrencyNetworkDo) withDO(do gen.Dao) *virtualCurrencyNetworkDo {
	v.DO = *do.(*gen.DO)
	return v
}
