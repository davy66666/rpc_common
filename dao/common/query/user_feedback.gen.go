// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserFeedback(db *gorm.DB, opts ...gen.DOOption) userFeedback {
	_userFeedback := userFeedback{}

	_userFeedback.userFeedbackDo.UseDB(db, opts...)
	_userFeedback.userFeedbackDo.UseModel(&model.UserFeedback{})

	tableName := _userFeedback.userFeedbackDo.TableName()
	_userFeedback.ALL = field.NewAsterisk(tableName)
	_userFeedback.ID = field.NewInt64(tableName, "id")
	_userFeedback.TypeID = field.NewInt64(tableName, "type_id")
	_userFeedback.UserID = field.NewInt64(tableName, "user_id")
	_userFeedback.Title = field.NewString(tableName, "title")
	_userFeedback.Content = field.NewString(tableName, "content")
	_userFeedback.Reply = field.NewString(tableName, "reply")
	_userFeedback.PicStr = field.NewString(tableName, "pic_str")
	_userFeedback.Remark = field.NewString(tableName, "remark")
	_userFeedback.Tel = field.NewString(tableName, "tel")
	_userFeedback.Status = field.NewInt64(tableName, "status")
	_userFeedback.AppPlat = field.NewInt64(tableName, "app_plat")
	_userFeedback.Operator = field.NewString(tableName, "operator")
	_userFeedback.CreatedAt = field.NewField(tableName, "created_at")
	_userFeedback.UpdatedAt = field.NewField(tableName, "updated_at")

	_userFeedback.fillFieldMap()

	return _userFeedback
}

type userFeedback struct {
	userFeedbackDo userFeedbackDo

	ALL       field.Asterisk
	ID        field.Int64
	TypeID    field.Int64  // 反馈意见类型
	UserID    field.Int64  // 会员id
	Title     field.String // 标题
	Content   field.String // 内容
	Reply     field.String // 回复内容
	PicStr    field.String // 反馈图片
	Remark    field.String // 备注
	Tel       field.String // 投诉人手机号
	Status    field.Int64  // 1:未处理, 2:处理中,3:已处理
	AppPlat   field.Int64  // 1:综合app;2:体育app
	Operator  field.String // 处理人
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userFeedback) Table(newTableName string) *userFeedback {
	u.userFeedbackDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFeedback) As(alias string) *userFeedback {
	u.userFeedbackDo.DO = *(u.userFeedbackDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFeedback) updateTableName(table string) *userFeedback {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.TypeID = field.NewInt64(table, "type_id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Title = field.NewString(table, "title")
	u.Content = field.NewString(table, "content")
	u.Reply = field.NewString(table, "reply")
	u.PicStr = field.NewString(table, "pic_str")
	u.Remark = field.NewString(table, "remark")
	u.Tel = field.NewString(table, "tel")
	u.Status = field.NewInt64(table, "status")
	u.AppPlat = field.NewInt64(table, "app_plat")
	u.Operator = field.NewString(table, "operator")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userFeedback) WithContext(ctx context.Context) IUserFeedbackDo {
	return u.userFeedbackDo.WithContext(ctx)
}

func (u userFeedback) TableName() string { return u.userFeedbackDo.TableName() }

func (u userFeedback) Alias() string { return u.userFeedbackDo.Alias() }

func (u userFeedback) Columns(cols ...field.Expr) gen.Columns {
	return u.userFeedbackDo.Columns(cols...)
}

func (u *userFeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFeedback) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["type_id"] = u.TypeID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["title"] = u.Title
	u.fieldMap["content"] = u.Content
	u.fieldMap["reply"] = u.Reply
	u.fieldMap["pic_str"] = u.PicStr
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["tel"] = u.Tel
	u.fieldMap["status"] = u.Status
	u.fieldMap["app_plat"] = u.AppPlat
	u.fieldMap["operator"] = u.Operator
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userFeedback) clone(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFeedback) replaceDB(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceDB(db)
	return u
}

type userFeedbackDo struct{ gen.DO }

type IUserFeedbackDo interface {
	gen.SubQuery
	Debug() IUserFeedbackDo
	WithContext(ctx context.Context) IUserFeedbackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFeedbackDo
	WriteDB() IUserFeedbackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFeedbackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFeedbackDo
	Not(conds ...gen.Condition) IUserFeedbackDo
	Or(conds ...gen.Condition) IUserFeedbackDo
	Select(conds ...field.Expr) IUserFeedbackDo
	Where(conds ...gen.Condition) IUserFeedbackDo
	Order(conds ...field.Expr) IUserFeedbackDo
	Distinct(cols ...field.Expr) IUserFeedbackDo
	Omit(cols ...field.Expr) IUserFeedbackDo
	Join(table schema.Tabler, on ...field.Expr) IUserFeedbackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackDo
	Group(cols ...field.Expr) IUserFeedbackDo
	Having(conds ...gen.Condition) IUserFeedbackDo
	Limit(limit int) IUserFeedbackDo
	Offset(offset int) IUserFeedbackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeedbackDo
	Unscoped() IUserFeedbackDo
	Create(values ...*model.UserFeedback) error
	CreateInBatches(values []*model.UserFeedback, batchSize int) error
	Save(values ...*model.UserFeedback) error
	First() (*model.UserFeedback, error)
	Take() (*model.UserFeedback, error)
	Last() (*model.UserFeedback, error)
	Find() ([]*model.UserFeedback, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFeedback, err error)
	FindInBatches(result *[]*model.UserFeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFeedback) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFeedbackDo
	Assign(attrs ...field.AssignExpr) IUserFeedbackDo
	Joins(fields ...field.RelationField) IUserFeedbackDo
	Preload(fields ...field.RelationField) IUserFeedbackDo
	FirstOrInit() (*model.UserFeedback, error)
	FirstOrCreate() (*model.UserFeedback, error)
	FindByPage(offset int, limit int) (result []*model.UserFeedback, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFeedbackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFeedbackDo) Debug() IUserFeedbackDo {
	return u.withDO(u.DO.Debug())
}

func (u userFeedbackDo) WithContext(ctx context.Context) IUserFeedbackDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFeedbackDo) ReadDB() IUserFeedbackDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFeedbackDo) WriteDB() IUserFeedbackDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFeedbackDo) Session(config *gorm.Session) IUserFeedbackDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFeedbackDo) Clauses(conds ...clause.Expression) IUserFeedbackDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFeedbackDo) Returning(value interface{}, columns ...string) IUserFeedbackDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFeedbackDo) Not(conds ...gen.Condition) IUserFeedbackDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFeedbackDo) Or(conds ...gen.Condition) IUserFeedbackDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFeedbackDo) Select(conds ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFeedbackDo) Where(conds ...gen.Condition) IUserFeedbackDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFeedbackDo) Order(conds ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFeedbackDo) Distinct(cols ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFeedbackDo) Omit(cols ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFeedbackDo) Join(table schema.Tabler, on ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFeedbackDo) Group(cols ...field.Expr) IUserFeedbackDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFeedbackDo) Having(conds ...gen.Condition) IUserFeedbackDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFeedbackDo) Limit(limit int) IUserFeedbackDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFeedbackDo) Offset(offset int) IUserFeedbackDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFeedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeedbackDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFeedbackDo) Unscoped() IUserFeedbackDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFeedbackDo) Create(values ...*model.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFeedbackDo) CreateInBatches(values []*model.UserFeedback, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFeedbackDo) Save(values ...*model.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFeedbackDo) First() (*model.UserFeedback, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Take() (*model.UserFeedback, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Last() (*model.UserFeedback, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Find() ([]*model.UserFeedback, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFeedback), err
}

func (u userFeedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFeedback, err error) {
	buf := make([]*model.UserFeedback, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFeedbackDo) FindInBatches(result *[]*model.UserFeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFeedbackDo) Attrs(attrs ...field.AssignExpr) IUserFeedbackDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFeedbackDo) Assign(attrs ...field.AssignExpr) IUserFeedbackDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFeedbackDo) Joins(fields ...field.RelationField) IUserFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFeedbackDo) Preload(fields ...field.RelationField) IUserFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFeedbackDo) FirstOrInit() (*model.UserFeedback, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) FirstOrCreate() (*model.UserFeedback, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) FindByPage(offset int, limit int) (result []*model.UserFeedback, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFeedbackDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFeedbackDo) Delete(models ...*model.UserFeedback) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFeedbackDo) withDO(do gen.Dao) *userFeedbackDo {
	u.DO = *do.(*gen.DO)
	return u
}
