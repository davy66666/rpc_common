// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserBorrowRecord(db *gorm.DB, opts ...gen.DOOption) userBorrowRecord {
	_userBorrowRecord := userBorrowRecord{}

	_userBorrowRecord.userBorrowRecordDo.UseDB(db, opts...)
	_userBorrowRecord.userBorrowRecordDo.UseModel(&model.UserBorrowRecord{})

	tableName := _userBorrowRecord.userBorrowRecordDo.TableName()
	_userBorrowRecord.ALL = field.NewAsterisk(tableName)
	_userBorrowRecord.ID = field.NewInt64(tableName, "id")
	_userBorrowRecord.UserID = field.NewInt64(tableName, "user_id")
	_userBorrowRecord.Username = field.NewString(tableName, "username")
	_userBorrowRecord.ParentID = field.NewInt64(tableName, "parent_id")
	_userBorrowRecord.ParentName = field.NewString(tableName, "parent_name")
	_userBorrowRecord.BorrowMoney = field.NewFloat64(tableName, "borrow_money")
	_userBorrowRecord.ReturnMoney = field.NewFloat64(tableName, "return_money")
	_userBorrowRecord.UserLevel = field.NewInt64(tableName, "user_level")
	_userBorrowRecord.IsOver = field.NewInt64(tableName, "is_over")
	_userBorrowRecord.Status = field.NewInt64(tableName, "status")
	_userBorrowRecord.BorrowDays = field.NewInt64(tableName, "borrow_days")
	_userBorrowRecord.BorrowAt = field.NewField(tableName, "borrow_at")
	_userBorrowRecord.ReturnAt = field.NewField(tableName, "return_at")
	_userBorrowRecord.VerifyTime = field.NewField(tableName, "verify_time")
	_userBorrowRecord.CreatedAt = field.NewField(tableName, "created_at")
	_userBorrowRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_userBorrowRecord.fillFieldMap()

	return _userBorrowRecord
}

// userBorrowRecord vip用户借款记录表
type userBorrowRecord struct {
	userBorrowRecordDo userBorrowRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64   // 用户id
	Username    field.String  // 用户名
	ParentID    field.Int64   // 用户id
	ParentName  field.String  // 用户名
	BorrowMoney field.Float64 // 用户本期借款金额
	ReturnMoney field.Float64 // 用户已还款金额
	UserLevel   field.Int64   // 用户vip 等级
	IsOver      field.Int64   // 1:待还款;2:已还款未超时;3:已还款超时;4:待还款超时
	Status      field.Int64   // 0:正常;1:已删除
	BorrowDays  field.Int64   // 借款天数
	BorrowAt    field.Field   // 借款开始时间
	ReturnAt    field.Field   // 还款时间
	VerifyTime  field.Field   // 审核时间
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (u userBorrowRecord) Table(newTableName string) *userBorrowRecord {
	u.userBorrowRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBorrowRecord) As(alias string) *userBorrowRecord {
	u.userBorrowRecordDo.DO = *(u.userBorrowRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBorrowRecord) updateTableName(table string) *userBorrowRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ParentName = field.NewString(table, "parent_name")
	u.BorrowMoney = field.NewFloat64(table, "borrow_money")
	u.ReturnMoney = field.NewFloat64(table, "return_money")
	u.UserLevel = field.NewInt64(table, "user_level")
	u.IsOver = field.NewInt64(table, "is_over")
	u.Status = field.NewInt64(table, "status")
	u.BorrowDays = field.NewInt64(table, "borrow_days")
	u.BorrowAt = field.NewField(table, "borrow_at")
	u.ReturnAt = field.NewField(table, "return_at")
	u.VerifyTime = field.NewField(table, "verify_time")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userBorrowRecord) WithContext(ctx context.Context) IUserBorrowRecordDo {
	return u.userBorrowRecordDo.WithContext(ctx)
}

func (u userBorrowRecord) TableName() string { return u.userBorrowRecordDo.TableName() }

func (u userBorrowRecord) Alias() string { return u.userBorrowRecordDo.Alias() }

func (u userBorrowRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userBorrowRecordDo.Columns(cols...)
}

func (u *userBorrowRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBorrowRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 16)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["borrow_money"] = u.BorrowMoney
	u.fieldMap["return_money"] = u.ReturnMoney
	u.fieldMap["user_level"] = u.UserLevel
	u.fieldMap["is_over"] = u.IsOver
	u.fieldMap["status"] = u.Status
	u.fieldMap["borrow_days"] = u.BorrowDays
	u.fieldMap["borrow_at"] = u.BorrowAt
	u.fieldMap["return_at"] = u.ReturnAt
	u.fieldMap["verify_time"] = u.VerifyTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userBorrowRecord) clone(db *gorm.DB) userBorrowRecord {
	u.userBorrowRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBorrowRecord) replaceDB(db *gorm.DB) userBorrowRecord {
	u.userBorrowRecordDo.ReplaceDB(db)
	return u
}

type userBorrowRecordDo struct{ gen.DO }

type IUserBorrowRecordDo interface {
	gen.SubQuery
	Debug() IUserBorrowRecordDo
	WithContext(ctx context.Context) IUserBorrowRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBorrowRecordDo
	WriteDB() IUserBorrowRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBorrowRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBorrowRecordDo
	Not(conds ...gen.Condition) IUserBorrowRecordDo
	Or(conds ...gen.Condition) IUserBorrowRecordDo
	Select(conds ...field.Expr) IUserBorrowRecordDo
	Where(conds ...gen.Condition) IUserBorrowRecordDo
	Order(conds ...field.Expr) IUserBorrowRecordDo
	Distinct(cols ...field.Expr) IUserBorrowRecordDo
	Omit(cols ...field.Expr) IUserBorrowRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo
	Group(cols ...field.Expr) IUserBorrowRecordDo
	Having(conds ...gen.Condition) IUserBorrowRecordDo
	Limit(limit int) IUserBorrowRecordDo
	Offset(offset int) IUserBorrowRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBorrowRecordDo
	Unscoped() IUserBorrowRecordDo
	Create(values ...*model.UserBorrowRecord) error
	CreateInBatches(values []*model.UserBorrowRecord, batchSize int) error
	Save(values ...*model.UserBorrowRecord) error
	First() (*model.UserBorrowRecord, error)
	Take() (*model.UserBorrowRecord, error)
	Last() (*model.UserBorrowRecord, error)
	Find() ([]*model.UserBorrowRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBorrowRecord, err error)
	FindInBatches(result *[]*model.UserBorrowRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBorrowRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBorrowRecordDo
	Assign(attrs ...field.AssignExpr) IUserBorrowRecordDo
	Joins(fields ...field.RelationField) IUserBorrowRecordDo
	Preload(fields ...field.RelationField) IUserBorrowRecordDo
	FirstOrInit() (*model.UserBorrowRecord, error)
	FirstOrCreate() (*model.UserBorrowRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserBorrowRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBorrowRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBorrowRecordDo) Debug() IUserBorrowRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userBorrowRecordDo) WithContext(ctx context.Context) IUserBorrowRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBorrowRecordDo) ReadDB() IUserBorrowRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBorrowRecordDo) WriteDB() IUserBorrowRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBorrowRecordDo) Session(config *gorm.Session) IUserBorrowRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBorrowRecordDo) Clauses(conds ...clause.Expression) IUserBorrowRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBorrowRecordDo) Returning(value interface{}, columns ...string) IUserBorrowRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBorrowRecordDo) Not(conds ...gen.Condition) IUserBorrowRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBorrowRecordDo) Or(conds ...gen.Condition) IUserBorrowRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBorrowRecordDo) Select(conds ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBorrowRecordDo) Where(conds ...gen.Condition) IUserBorrowRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBorrowRecordDo) Order(conds ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBorrowRecordDo) Distinct(cols ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBorrowRecordDo) Omit(cols ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBorrowRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBorrowRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBorrowRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBorrowRecordDo) Group(cols ...field.Expr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBorrowRecordDo) Having(conds ...gen.Condition) IUserBorrowRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBorrowRecordDo) Limit(limit int) IUserBorrowRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBorrowRecordDo) Offset(offset int) IUserBorrowRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBorrowRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBorrowRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBorrowRecordDo) Unscoped() IUserBorrowRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBorrowRecordDo) Create(values ...*model.UserBorrowRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBorrowRecordDo) CreateInBatches(values []*model.UserBorrowRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBorrowRecordDo) Save(values ...*model.UserBorrowRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBorrowRecordDo) First() (*model.UserBorrowRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBorrowRecord), nil
	}
}

func (u userBorrowRecordDo) Take() (*model.UserBorrowRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBorrowRecord), nil
	}
}

func (u userBorrowRecordDo) Last() (*model.UserBorrowRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBorrowRecord), nil
	}
}

func (u userBorrowRecordDo) Find() ([]*model.UserBorrowRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBorrowRecord), err
}

func (u userBorrowRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBorrowRecord, err error) {
	buf := make([]*model.UserBorrowRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBorrowRecordDo) FindInBatches(result *[]*model.UserBorrowRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBorrowRecordDo) Attrs(attrs ...field.AssignExpr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBorrowRecordDo) Assign(attrs ...field.AssignExpr) IUserBorrowRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBorrowRecordDo) Joins(fields ...field.RelationField) IUserBorrowRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBorrowRecordDo) Preload(fields ...field.RelationField) IUserBorrowRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBorrowRecordDo) FirstOrInit() (*model.UserBorrowRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBorrowRecord), nil
	}
}

func (u userBorrowRecordDo) FirstOrCreate() (*model.UserBorrowRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBorrowRecord), nil
	}
}

func (u userBorrowRecordDo) FindByPage(offset int, limit int) (result []*model.UserBorrowRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBorrowRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBorrowRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBorrowRecordDo) Delete(models ...*model.UserBorrowRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBorrowRecordDo) withDO(do gen.Dao) *userBorrowRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
