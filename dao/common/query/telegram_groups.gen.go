// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTelegramGroup(db *gorm.DB, opts ...gen.DOOption) telegramGroup {
	_telegramGroup := telegramGroup{}

	_telegramGroup.telegramGroupDo.UseDB(db, opts...)
	_telegramGroup.telegramGroupDo.UseModel(&model.TelegramGroup{})

	tableName := _telegramGroup.telegramGroupDo.TableName()
	_telegramGroup.ALL = field.NewAsterisk(tableName)
	_telegramGroup.ID = field.NewInt64(tableName, "id")
	_telegramGroup.ChatID = field.NewString(tableName, "chat_id")
	_telegramGroup.Title = field.NewString(tableName, "title")
	_telegramGroup.Type = field.NewString(tableName, "type")
	_telegramGroup.CreatedAt = field.NewField(tableName, "created_at")
	_telegramGroup.UpdatedAt = field.NewField(tableName, "updated_at")

	_telegramGroup.fillFieldMap()

	return _telegramGroup
}

type telegramGroup struct {
	telegramGroupDo telegramGroupDo

	ALL       field.Asterisk
	ID        field.Int64
	ChatID    field.String
	Title     field.String
	Type      field.String
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (t telegramGroup) Table(newTableName string) *telegramGroup {
	t.telegramGroupDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t telegramGroup) As(alias string) *telegramGroup {
	t.telegramGroupDo.DO = *(t.telegramGroupDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *telegramGroup) updateTableName(table string) *telegramGroup {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ChatID = field.NewString(table, "chat_id")
	t.Title = field.NewString(table, "title")
	t.Type = field.NewString(table, "type")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *telegramGroup) WithContext(ctx context.Context) ITelegramGroupDo {
	return t.telegramGroupDo.WithContext(ctx)
}

func (t telegramGroup) TableName() string { return t.telegramGroupDo.TableName() }

func (t telegramGroup) Alias() string { return t.telegramGroupDo.Alias() }

func (t telegramGroup) Columns(cols ...field.Expr) gen.Columns {
	return t.telegramGroupDo.Columns(cols...)
}

func (t *telegramGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *telegramGroup) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["chat_id"] = t.ChatID
	t.fieldMap["title"] = t.Title
	t.fieldMap["type"] = t.Type
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t telegramGroup) clone(db *gorm.DB) telegramGroup {
	t.telegramGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t telegramGroup) replaceDB(db *gorm.DB) telegramGroup {
	t.telegramGroupDo.ReplaceDB(db)
	return t
}

type telegramGroupDo struct{ gen.DO }

type ITelegramGroupDo interface {
	gen.SubQuery
	Debug() ITelegramGroupDo
	WithContext(ctx context.Context) ITelegramGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITelegramGroupDo
	WriteDB() ITelegramGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITelegramGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITelegramGroupDo
	Not(conds ...gen.Condition) ITelegramGroupDo
	Or(conds ...gen.Condition) ITelegramGroupDo
	Select(conds ...field.Expr) ITelegramGroupDo
	Where(conds ...gen.Condition) ITelegramGroupDo
	Order(conds ...field.Expr) ITelegramGroupDo
	Distinct(cols ...field.Expr) ITelegramGroupDo
	Omit(cols ...field.Expr) ITelegramGroupDo
	Join(table schema.Tabler, on ...field.Expr) ITelegramGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITelegramGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITelegramGroupDo
	Group(cols ...field.Expr) ITelegramGroupDo
	Having(conds ...gen.Condition) ITelegramGroupDo
	Limit(limit int) ITelegramGroupDo
	Offset(offset int) ITelegramGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITelegramGroupDo
	Unscoped() ITelegramGroupDo
	Create(values ...*model.TelegramGroup) error
	CreateInBatches(values []*model.TelegramGroup, batchSize int) error
	Save(values ...*model.TelegramGroup) error
	First() (*model.TelegramGroup, error)
	Take() (*model.TelegramGroup, error)
	Last() (*model.TelegramGroup, error)
	Find() ([]*model.TelegramGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelegramGroup, err error)
	FindInBatches(result *[]*model.TelegramGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TelegramGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITelegramGroupDo
	Assign(attrs ...field.AssignExpr) ITelegramGroupDo
	Joins(fields ...field.RelationField) ITelegramGroupDo
	Preload(fields ...field.RelationField) ITelegramGroupDo
	FirstOrInit() (*model.TelegramGroup, error)
	FirstOrCreate() (*model.TelegramGroup, error)
	FindByPage(offset int, limit int) (result []*model.TelegramGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITelegramGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t telegramGroupDo) Debug() ITelegramGroupDo {
	return t.withDO(t.DO.Debug())
}

func (t telegramGroupDo) WithContext(ctx context.Context) ITelegramGroupDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t telegramGroupDo) ReadDB() ITelegramGroupDo {
	return t.Clauses(dbresolver.Read)
}

func (t telegramGroupDo) WriteDB() ITelegramGroupDo {
	return t.Clauses(dbresolver.Write)
}

func (t telegramGroupDo) Session(config *gorm.Session) ITelegramGroupDo {
	return t.withDO(t.DO.Session(config))
}

func (t telegramGroupDo) Clauses(conds ...clause.Expression) ITelegramGroupDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t telegramGroupDo) Returning(value interface{}, columns ...string) ITelegramGroupDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t telegramGroupDo) Not(conds ...gen.Condition) ITelegramGroupDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t telegramGroupDo) Or(conds ...gen.Condition) ITelegramGroupDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t telegramGroupDo) Select(conds ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t telegramGroupDo) Where(conds ...gen.Condition) ITelegramGroupDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t telegramGroupDo) Order(conds ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t telegramGroupDo) Distinct(cols ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t telegramGroupDo) Omit(cols ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t telegramGroupDo) Join(table schema.Tabler, on ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t telegramGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t telegramGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t telegramGroupDo) Group(cols ...field.Expr) ITelegramGroupDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t telegramGroupDo) Having(conds ...gen.Condition) ITelegramGroupDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t telegramGroupDo) Limit(limit int) ITelegramGroupDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t telegramGroupDo) Offset(offset int) ITelegramGroupDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t telegramGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITelegramGroupDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t telegramGroupDo) Unscoped() ITelegramGroupDo {
	return t.withDO(t.DO.Unscoped())
}

func (t telegramGroupDo) Create(values ...*model.TelegramGroup) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t telegramGroupDo) CreateInBatches(values []*model.TelegramGroup, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t telegramGroupDo) Save(values ...*model.TelegramGroup) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t telegramGroupDo) First() (*model.TelegramGroup, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelegramGroup), nil
	}
}

func (t telegramGroupDo) Take() (*model.TelegramGroup, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelegramGroup), nil
	}
}

func (t telegramGroupDo) Last() (*model.TelegramGroup, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelegramGroup), nil
	}
}

func (t telegramGroupDo) Find() ([]*model.TelegramGroup, error) {
	result, err := t.DO.Find()
	return result.([]*model.TelegramGroup), err
}

func (t telegramGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelegramGroup, err error) {
	buf := make([]*model.TelegramGroup, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t telegramGroupDo) FindInBatches(result *[]*model.TelegramGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t telegramGroupDo) Attrs(attrs ...field.AssignExpr) ITelegramGroupDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t telegramGroupDo) Assign(attrs ...field.AssignExpr) ITelegramGroupDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t telegramGroupDo) Joins(fields ...field.RelationField) ITelegramGroupDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t telegramGroupDo) Preload(fields ...field.RelationField) ITelegramGroupDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t telegramGroupDo) FirstOrInit() (*model.TelegramGroup, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelegramGroup), nil
	}
}

func (t telegramGroupDo) FirstOrCreate() (*model.TelegramGroup, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelegramGroup), nil
	}
}

func (t telegramGroupDo) FindByPage(offset int, limit int) (result []*model.TelegramGroup, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t telegramGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t telegramGroupDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t telegramGroupDo) Delete(models ...*model.TelegramGroup) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *telegramGroupDo) withDO(do gen.Dao) *telegramGroupDo {
	t.DO = *do.(*gen.DO)
	return t
}
