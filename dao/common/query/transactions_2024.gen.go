// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransactions2024(db *gorm.DB, opts ...gen.DOOption) transactions2024 {
	_transactions2024 := transactions2024{}

	_transactions2024.transactions2024Do.UseDB(db, opts...)
	_transactions2024.transactions2024Do.UseModel(&model.Transactions2024{})

	tableName := _transactions2024.transactions2024Do.TableName()
	_transactions2024.ALL = field.NewAsterisk(tableName)
	_transactions2024.ID = field.NewInt64(tableName, "id")
	_transactions2024.UserID = field.NewInt64(tableName, "user_id")
	_transactions2024.Username = field.NewString(tableName, "username")
	_transactions2024.IsTester = field.NewInt64(tableName, "is_tester")
	_transactions2024.ParentID = field.NewInt64(tableName, "parent_id")
	_transactions2024.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_transactions2024.Amount = field.NewFloat64(tableName, "amount")
	_transactions2024.BankType = field.NewInt64(tableName, "bank_type")
	_transactions2024.TransFatherID = field.NewInt64(tableName, "trans_father_id")
	_transactions2024.TransTypesID = field.NewInt64(tableName, "trans_types_id")
	_transactions2024.TransTypesCnTitle = field.NewString(tableName, "trans_types_cn_title")
	_transactions2024.TransTypesEnTitle = field.NewString(tableName, "trans_types_en_title")
	_transactions2024.IsIncome = field.NewInt64(tableName, "is_income")
	_transactions2024.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_transactions2024.Money = field.NewFloat64(tableName, "money")
	_transactions2024.GameCode = field.NewString(tableName, "game_code")
	_transactions2024.Issue = field.NewString(tableName, "issue")
	_transactions2024.GameName = field.NewString(tableName, "game_name")
	_transactions2024.BillID = field.NewString(tableName, "bill_id")
	_transactions2024.AdminID = field.NewInt64(tableName, "admin_id")
	_transactions2024.Adminname = field.NewString(tableName, "adminname")
	_transactions2024.IP = field.NewString(tableName, "ip")
	_transactions2024.Status = field.NewInt64(tableName, "status")
	_transactions2024.Remark = field.NewString(tableName, "remark")
	_transactions2024.PayType = field.NewString(tableName, "pay_type")
	_transactions2024.CreatedAt = field.NewField(tableName, "created_at")
	_transactions2024.UpdatedAt = field.NewField(tableName, "updated_at")
	_transactions2024.Description = field.NewString(tableName, "description")
	_transactions2024.IsFreeze = field.NewInt64(tableName, "is_freeze")
	_transactions2024.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_transactions2024.MerchantNum = field.NewString(tableName, "merchant_num")
	_transactions2024.ThirdTrackNum = field.NewString(tableName, "third_track_num")
	_transactions2024.ThirdBillNo = field.NewString(tableName, "third_bill_no")

	_transactions2024.fillFieldMap()

	return _transactions2024
}

type transactions2024 struct {
	transactions2024Do transactions2024Do

	ALL               field.Asterisk
	ID                field.Int64
	UserID            field.Int64
	Username          field.String
	IsTester          field.Int64
	ParentID          field.Int64 // 上级id
	ForefatherIds     field.String
	Amount            field.Float64 // 用户当前交易金额
	BankType          field.Int64   // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	TransFatherID     field.Int64   // 账变类型父类
	TransTypesID      field.Int64
	TransTypesCnTitle field.String
	TransTypesEnTitle field.String
	IsIncome          field.Int64 // 是否入款
	BeforeMoney       field.Float64
	Money             field.Float64 // 交易后金额
	GameCode          field.String  // 游戏game
	Issue             field.String
	GameName          field.String // 具体玩法
	BillID            field.String
	AdminID           field.Int64
	Adminname         field.String
	IP                field.String // ip
	Status            field.Int64  // 状态：0已删除,1:成功
	Remark            field.String // 备注
	PayType           field.String // 支付类型
	CreatedAt         field.Field  // 交易时间
	UpdatedAt         field.Field
	Description       field.String // 转账说明
	IsFreeze          field.Int64  // 是否冻结 1:是 0:否
	ThirdMerchantName field.String // 三方商户名称
	MerchantNum       field.String // 商户编号
	ThirdTrackNum     field.String // 三方单号
	ThirdBillNo       field.String // 第三方平台订单号

	fieldMap map[string]field.Expr
}

func (t transactions2024) Table(newTableName string) *transactions2024 {
	t.transactions2024Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactions2024) As(alias string) *transactions2024 {
	t.transactions2024Do.DO = *(t.transactions2024Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactions2024) updateTableName(table string) *transactions2024 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewInt64(table, "user_id")
	t.Username = field.NewString(table, "username")
	t.IsTester = field.NewInt64(table, "is_tester")
	t.ParentID = field.NewInt64(table, "parent_id")
	t.ForefatherIds = field.NewString(table, "forefather_ids")
	t.Amount = field.NewFloat64(table, "amount")
	t.BankType = field.NewInt64(table, "bank_type")
	t.TransFatherID = field.NewInt64(table, "trans_father_id")
	t.TransTypesID = field.NewInt64(table, "trans_types_id")
	t.TransTypesCnTitle = field.NewString(table, "trans_types_cn_title")
	t.TransTypesEnTitle = field.NewString(table, "trans_types_en_title")
	t.IsIncome = field.NewInt64(table, "is_income")
	t.BeforeMoney = field.NewFloat64(table, "before_money")
	t.Money = field.NewFloat64(table, "money")
	t.GameCode = field.NewString(table, "game_code")
	t.Issue = field.NewString(table, "issue")
	t.GameName = field.NewString(table, "game_name")
	t.BillID = field.NewString(table, "bill_id")
	t.AdminID = field.NewInt64(table, "admin_id")
	t.Adminname = field.NewString(table, "adminname")
	t.IP = field.NewString(table, "ip")
	t.Status = field.NewInt64(table, "status")
	t.Remark = field.NewString(table, "remark")
	t.PayType = field.NewString(table, "pay_type")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")
	t.Description = field.NewString(table, "description")
	t.IsFreeze = field.NewInt64(table, "is_freeze")
	t.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	t.MerchantNum = field.NewString(table, "merchant_num")
	t.ThirdTrackNum = field.NewString(table, "third_track_num")
	t.ThirdBillNo = field.NewString(table, "third_bill_no")

	t.fillFieldMap()

	return t
}

func (t *transactions2024) WithContext(ctx context.Context) ITransactions2024Do {
	return t.transactions2024Do.WithContext(ctx)
}

func (t transactions2024) TableName() string { return t.transactions2024Do.TableName() }

func (t transactions2024) Alias() string { return t.transactions2024Do.Alias() }

func (t transactions2024) Columns(cols ...field.Expr) gen.Columns {
	return t.transactions2024Do.Columns(cols...)
}

func (t *transactions2024) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactions2024) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 33)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["username"] = t.Username
	t.fieldMap["is_tester"] = t.IsTester
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["forefather_ids"] = t.ForefatherIds
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["bank_type"] = t.BankType
	t.fieldMap["trans_father_id"] = t.TransFatherID
	t.fieldMap["trans_types_id"] = t.TransTypesID
	t.fieldMap["trans_types_cn_title"] = t.TransTypesCnTitle
	t.fieldMap["trans_types_en_title"] = t.TransTypesEnTitle
	t.fieldMap["is_income"] = t.IsIncome
	t.fieldMap["before_money"] = t.BeforeMoney
	t.fieldMap["money"] = t.Money
	t.fieldMap["game_code"] = t.GameCode
	t.fieldMap["issue"] = t.Issue
	t.fieldMap["game_name"] = t.GameName
	t.fieldMap["bill_id"] = t.BillID
	t.fieldMap["admin_id"] = t.AdminID
	t.fieldMap["adminname"] = t.Adminname
	t.fieldMap["ip"] = t.IP
	t.fieldMap["status"] = t.Status
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["pay_type"] = t.PayType
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["description"] = t.Description
	t.fieldMap["is_freeze"] = t.IsFreeze
	t.fieldMap["third_merchant_name"] = t.ThirdMerchantName
	t.fieldMap["merchant_num"] = t.MerchantNum
	t.fieldMap["third_track_num"] = t.ThirdTrackNum
	t.fieldMap["third_bill_no"] = t.ThirdBillNo
}

func (t transactions2024) clone(db *gorm.DB) transactions2024 {
	t.transactions2024Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactions2024) replaceDB(db *gorm.DB) transactions2024 {
	t.transactions2024Do.ReplaceDB(db)
	return t
}

type transactions2024Do struct{ gen.DO }

type ITransactions2024Do interface {
	gen.SubQuery
	Debug() ITransactions2024Do
	WithContext(ctx context.Context) ITransactions2024Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactions2024Do
	WriteDB() ITransactions2024Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactions2024Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactions2024Do
	Not(conds ...gen.Condition) ITransactions2024Do
	Or(conds ...gen.Condition) ITransactions2024Do
	Select(conds ...field.Expr) ITransactions2024Do
	Where(conds ...gen.Condition) ITransactions2024Do
	Order(conds ...field.Expr) ITransactions2024Do
	Distinct(cols ...field.Expr) ITransactions2024Do
	Omit(cols ...field.Expr) ITransactions2024Do
	Join(table schema.Tabler, on ...field.Expr) ITransactions2024Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactions2024Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactions2024Do
	Group(cols ...field.Expr) ITransactions2024Do
	Having(conds ...gen.Condition) ITransactions2024Do
	Limit(limit int) ITransactions2024Do
	Offset(offset int) ITransactions2024Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactions2024Do
	Unscoped() ITransactions2024Do
	Create(values ...*model.Transactions2024) error
	CreateInBatches(values []*model.Transactions2024, batchSize int) error
	Save(values ...*model.Transactions2024) error
	First() (*model.Transactions2024, error)
	Take() (*model.Transactions2024, error)
	Last() (*model.Transactions2024, error)
	Find() ([]*model.Transactions2024, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Transactions2024, err error)
	FindInBatches(result *[]*model.Transactions2024, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Transactions2024) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactions2024Do
	Assign(attrs ...field.AssignExpr) ITransactions2024Do
	Joins(fields ...field.RelationField) ITransactions2024Do
	Preload(fields ...field.RelationField) ITransactions2024Do
	FirstOrInit() (*model.Transactions2024, error)
	FirstOrCreate() (*model.Transactions2024, error)
	FindByPage(offset int, limit int) (result []*model.Transactions2024, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactions2024Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactions2024Do) Debug() ITransactions2024Do {
	return t.withDO(t.DO.Debug())
}

func (t transactions2024Do) WithContext(ctx context.Context) ITransactions2024Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactions2024Do) ReadDB() ITransactions2024Do {
	return t.Clauses(dbresolver.Read)
}

func (t transactions2024Do) WriteDB() ITransactions2024Do {
	return t.Clauses(dbresolver.Write)
}

func (t transactions2024Do) Session(config *gorm.Session) ITransactions2024Do {
	return t.withDO(t.DO.Session(config))
}

func (t transactions2024Do) Clauses(conds ...clause.Expression) ITransactions2024Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactions2024Do) Returning(value interface{}, columns ...string) ITransactions2024Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactions2024Do) Not(conds ...gen.Condition) ITransactions2024Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactions2024Do) Or(conds ...gen.Condition) ITransactions2024Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactions2024Do) Select(conds ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactions2024Do) Where(conds ...gen.Condition) ITransactions2024Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactions2024Do) Order(conds ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactions2024Do) Distinct(cols ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactions2024Do) Omit(cols ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactions2024Do) Join(table schema.Tabler, on ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactions2024Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactions2024Do) RightJoin(table schema.Tabler, on ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactions2024Do) Group(cols ...field.Expr) ITransactions2024Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactions2024Do) Having(conds ...gen.Condition) ITransactions2024Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactions2024Do) Limit(limit int) ITransactions2024Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactions2024Do) Offset(offset int) ITransactions2024Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactions2024Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactions2024Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactions2024Do) Unscoped() ITransactions2024Do {
	return t.withDO(t.DO.Unscoped())
}

func (t transactions2024Do) Create(values ...*model.Transactions2024) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactions2024Do) CreateInBatches(values []*model.Transactions2024, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactions2024Do) Save(values ...*model.Transactions2024) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactions2024Do) First() (*model.Transactions2024, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transactions2024), nil
	}
}

func (t transactions2024Do) Take() (*model.Transactions2024, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transactions2024), nil
	}
}

func (t transactions2024Do) Last() (*model.Transactions2024, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transactions2024), nil
	}
}

func (t transactions2024Do) Find() ([]*model.Transactions2024, error) {
	result, err := t.DO.Find()
	return result.([]*model.Transactions2024), err
}

func (t transactions2024Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Transactions2024, err error) {
	buf := make([]*model.Transactions2024, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactions2024Do) FindInBatches(result *[]*model.Transactions2024, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactions2024Do) Attrs(attrs ...field.AssignExpr) ITransactions2024Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactions2024Do) Assign(attrs ...field.AssignExpr) ITransactions2024Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactions2024Do) Joins(fields ...field.RelationField) ITransactions2024Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactions2024Do) Preload(fields ...field.RelationField) ITransactions2024Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactions2024Do) FirstOrInit() (*model.Transactions2024, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transactions2024), nil
	}
}

func (t transactions2024Do) FirstOrCreate() (*model.Transactions2024, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transactions2024), nil
	}
}

func (t transactions2024Do) FindByPage(offset int, limit int) (result []*model.Transactions2024, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactions2024Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactions2024Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactions2024Do) Delete(models ...*model.Transactions2024) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactions2024Do) withDO(do gen.Dao) *transactions2024Do {
	t.DO = *do.(*gen.DO)
	return t
}
