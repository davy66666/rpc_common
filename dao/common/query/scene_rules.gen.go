// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSceneRule(db *gorm.DB, opts ...gen.DOOption) sceneRule {
	_sceneRule := sceneRule{}

	_sceneRule.sceneRuleDo.UseDB(db, opts...)
	_sceneRule.sceneRuleDo.UseModel(&model.SceneRule{})

	tableName := _sceneRule.sceneRuleDo.TableName()
	_sceneRule.ALL = field.NewAsterisk(tableName)
	_sceneRule.ID = field.NewInt64(tableName, "id")
	_sceneRule.IsOpen = field.NewInt64(tableName, "is_open")
	_sceneRule.Cid = field.NewInt64(tableName, "cid")
	_sceneRule.SceneType = field.NewInt64(tableName, "scene_type")
	_sceneRule.Val = field.NewInt64(tableName, "val")
	_sceneRule.CustomerMark = field.NewString(tableName, "customer_mark")

	_sceneRule.fillFieldMap()

	return _sceneRule
}

// sceneRule 七鱼场景表
type sceneRule struct {
	sceneRuleDo sceneRuleDo

	ALL          field.Asterisk
	ID           field.Int64
	IsOpen       field.Int64  // 是否开启0:否;1:是
	Cid          field.Int64  // customer_id
	SceneType    field.Int64  // 用户连续充值失败
	Val          field.Int64  // 类型值
	CustomerMark field.String // 客服标识

	fieldMap map[string]field.Expr
}

func (s sceneRule) Table(newTableName string) *sceneRule {
	s.sceneRuleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneRule) As(alias string) *sceneRule {
	s.sceneRuleDo.DO = *(s.sceneRuleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneRule) updateTableName(table string) *sceneRule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.IsOpen = field.NewInt64(table, "is_open")
	s.Cid = field.NewInt64(table, "cid")
	s.SceneType = field.NewInt64(table, "scene_type")
	s.Val = field.NewInt64(table, "val")
	s.CustomerMark = field.NewString(table, "customer_mark")

	s.fillFieldMap()

	return s
}

func (s *sceneRule) WithContext(ctx context.Context) ISceneRuleDo {
	return s.sceneRuleDo.WithContext(ctx)
}

func (s sceneRule) TableName() string { return s.sceneRuleDo.TableName() }

func (s sceneRule) Alias() string { return s.sceneRuleDo.Alias() }

func (s sceneRule) Columns(cols ...field.Expr) gen.Columns { return s.sceneRuleDo.Columns(cols...) }

func (s *sceneRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneRule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["is_open"] = s.IsOpen
	s.fieldMap["cid"] = s.Cid
	s.fieldMap["scene_type"] = s.SceneType
	s.fieldMap["val"] = s.Val
	s.fieldMap["customer_mark"] = s.CustomerMark
}

func (s sceneRule) clone(db *gorm.DB) sceneRule {
	s.sceneRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneRule) replaceDB(db *gorm.DB) sceneRule {
	s.sceneRuleDo.ReplaceDB(db)
	return s
}

type sceneRuleDo struct{ gen.DO }

type ISceneRuleDo interface {
	gen.SubQuery
	Debug() ISceneRuleDo
	WithContext(ctx context.Context) ISceneRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISceneRuleDo
	WriteDB() ISceneRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISceneRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISceneRuleDo
	Not(conds ...gen.Condition) ISceneRuleDo
	Or(conds ...gen.Condition) ISceneRuleDo
	Select(conds ...field.Expr) ISceneRuleDo
	Where(conds ...gen.Condition) ISceneRuleDo
	Order(conds ...field.Expr) ISceneRuleDo
	Distinct(cols ...field.Expr) ISceneRuleDo
	Omit(cols ...field.Expr) ISceneRuleDo
	Join(table schema.Tabler, on ...field.Expr) ISceneRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISceneRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISceneRuleDo
	Group(cols ...field.Expr) ISceneRuleDo
	Having(conds ...gen.Condition) ISceneRuleDo
	Limit(limit int) ISceneRuleDo
	Offset(offset int) ISceneRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneRuleDo
	Unscoped() ISceneRuleDo
	Create(values ...*model.SceneRule) error
	CreateInBatches(values []*model.SceneRule, batchSize int) error
	Save(values ...*model.SceneRule) error
	First() (*model.SceneRule, error)
	Take() (*model.SceneRule, error)
	Last() (*model.SceneRule, error)
	Find() ([]*model.SceneRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneRule, err error)
	FindInBatches(result *[]*model.SceneRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SceneRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISceneRuleDo
	Assign(attrs ...field.AssignExpr) ISceneRuleDo
	Joins(fields ...field.RelationField) ISceneRuleDo
	Preload(fields ...field.RelationField) ISceneRuleDo
	FirstOrInit() (*model.SceneRule, error)
	FirstOrCreate() (*model.SceneRule, error)
	FindByPage(offset int, limit int) (result []*model.SceneRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISceneRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sceneRuleDo) Debug() ISceneRuleDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneRuleDo) WithContext(ctx context.Context) ISceneRuleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneRuleDo) ReadDB() ISceneRuleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneRuleDo) WriteDB() ISceneRuleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneRuleDo) Session(config *gorm.Session) ISceneRuleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneRuleDo) Clauses(conds ...clause.Expression) ISceneRuleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneRuleDo) Returning(value interface{}, columns ...string) ISceneRuleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneRuleDo) Not(conds ...gen.Condition) ISceneRuleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneRuleDo) Or(conds ...gen.Condition) ISceneRuleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneRuleDo) Select(conds ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneRuleDo) Where(conds ...gen.Condition) ISceneRuleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneRuleDo) Order(conds ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneRuleDo) Distinct(cols ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneRuleDo) Omit(cols ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneRuleDo) Join(table schema.Tabler, on ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneRuleDo) Group(cols ...field.Expr) ISceneRuleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneRuleDo) Having(conds ...gen.Condition) ISceneRuleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneRuleDo) Limit(limit int) ISceneRuleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneRuleDo) Offset(offset int) ISceneRuleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneRuleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneRuleDo) Unscoped() ISceneRuleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneRuleDo) Create(values ...*model.SceneRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneRuleDo) CreateInBatches(values []*model.SceneRule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneRuleDo) Save(values ...*model.SceneRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneRuleDo) First() (*model.SceneRule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneRule), nil
	}
}

func (s sceneRuleDo) Take() (*model.SceneRule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneRule), nil
	}
}

func (s sceneRuleDo) Last() (*model.SceneRule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneRule), nil
	}
}

func (s sceneRuleDo) Find() ([]*model.SceneRule, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneRule), err
}

func (s sceneRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneRule, err error) {
	buf := make([]*model.SceneRule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneRuleDo) FindInBatches(result *[]*model.SceneRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneRuleDo) Attrs(attrs ...field.AssignExpr) ISceneRuleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneRuleDo) Assign(attrs ...field.AssignExpr) ISceneRuleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneRuleDo) Joins(fields ...field.RelationField) ISceneRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneRuleDo) Preload(fields ...field.RelationField) ISceneRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneRuleDo) FirstOrInit() (*model.SceneRule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneRule), nil
	}
}

func (s sceneRuleDo) FirstOrCreate() (*model.SceneRule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneRule), nil
	}
}

func (s sceneRuleDo) FindByPage(offset int, limit int) (result []*model.SceneRule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneRuleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneRuleDo) Delete(models ...*model.SceneRule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneRuleDo) withDO(do gen.Dao) *sceneRuleDo {
	s.DO = *do.(*gen.DO)
	return s
}
