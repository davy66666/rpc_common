// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserQuestion(db *gorm.DB, opts ...gen.DOOption) userQuestion {
	_userQuestion := userQuestion{}

	_userQuestion.userQuestionDo.UseDB(db, opts...)
	_userQuestion.userQuestionDo.UseModel(&model.UserQuestion{})

	tableName := _userQuestion.userQuestionDo.TableName()
	_userQuestion.ALL = field.NewAsterisk(tableName)
	_userQuestion.ID = field.NewInt64(tableName, "id")
	_userQuestion.Question = field.NewString(tableName, "question")
	_userQuestion.CreatedAt = field.NewField(tableName, "created_at")
	_userQuestion.UpdatedAt = field.NewField(tableName, "updated_at")

	_userQuestion.fillFieldMap()

	return _userQuestion
}

type userQuestion struct {
	userQuestionDo userQuestionDo

	ALL       field.Asterisk
	ID        field.Int64
	Question  field.String // 问题
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userQuestion) Table(newTableName string) *userQuestion {
	u.userQuestionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userQuestion) As(alias string) *userQuestion {
	u.userQuestionDo.DO = *(u.userQuestionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userQuestion) updateTableName(table string) *userQuestion {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Question = field.NewString(table, "question")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userQuestion) WithContext(ctx context.Context) IUserQuestionDo {
	return u.userQuestionDo.WithContext(ctx)
}

func (u userQuestion) TableName() string { return u.userQuestionDo.TableName() }

func (u userQuestion) Alias() string { return u.userQuestionDo.Alias() }

func (u userQuestion) Columns(cols ...field.Expr) gen.Columns {
	return u.userQuestionDo.Columns(cols...)
}

func (u *userQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userQuestion) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["question"] = u.Question
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userQuestion) clone(db *gorm.DB) userQuestion {
	u.userQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userQuestion) replaceDB(db *gorm.DB) userQuestion {
	u.userQuestionDo.ReplaceDB(db)
	return u
}

type userQuestionDo struct{ gen.DO }

type IUserQuestionDo interface {
	gen.SubQuery
	Debug() IUserQuestionDo
	WithContext(ctx context.Context) IUserQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserQuestionDo
	WriteDB() IUserQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserQuestionDo
	Not(conds ...gen.Condition) IUserQuestionDo
	Or(conds ...gen.Condition) IUserQuestionDo
	Select(conds ...field.Expr) IUserQuestionDo
	Where(conds ...gen.Condition) IUserQuestionDo
	Order(conds ...field.Expr) IUserQuestionDo
	Distinct(cols ...field.Expr) IUserQuestionDo
	Omit(cols ...field.Expr) IUserQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IUserQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserQuestionDo
	Group(cols ...field.Expr) IUserQuestionDo
	Having(conds ...gen.Condition) IUserQuestionDo
	Limit(limit int) IUserQuestionDo
	Offset(offset int) IUserQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQuestionDo
	Unscoped() IUserQuestionDo
	Create(values ...*model.UserQuestion) error
	CreateInBatches(values []*model.UserQuestion, batchSize int) error
	Save(values ...*model.UserQuestion) error
	First() (*model.UserQuestion, error)
	Take() (*model.UserQuestion, error)
	Last() (*model.UserQuestion, error)
	Find() ([]*model.UserQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQuestion, err error)
	FindInBatches(result *[]*model.UserQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserQuestionDo
	Assign(attrs ...field.AssignExpr) IUserQuestionDo
	Joins(fields ...field.RelationField) IUserQuestionDo
	Preload(fields ...field.RelationField) IUserQuestionDo
	FirstOrInit() (*model.UserQuestion, error)
	FirstOrCreate() (*model.UserQuestion, error)
	FindByPage(offset int, limit int) (result []*model.UserQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userQuestionDo) Debug() IUserQuestionDo {
	return u.withDO(u.DO.Debug())
}

func (u userQuestionDo) WithContext(ctx context.Context) IUserQuestionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userQuestionDo) ReadDB() IUserQuestionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userQuestionDo) WriteDB() IUserQuestionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userQuestionDo) Session(config *gorm.Session) IUserQuestionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userQuestionDo) Clauses(conds ...clause.Expression) IUserQuestionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userQuestionDo) Returning(value interface{}, columns ...string) IUserQuestionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userQuestionDo) Not(conds ...gen.Condition) IUserQuestionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userQuestionDo) Or(conds ...gen.Condition) IUserQuestionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userQuestionDo) Select(conds ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userQuestionDo) Where(conds ...gen.Condition) IUserQuestionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userQuestionDo) Order(conds ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userQuestionDo) Distinct(cols ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userQuestionDo) Omit(cols ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userQuestionDo) Join(table schema.Tabler, on ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userQuestionDo) Group(cols ...field.Expr) IUserQuestionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userQuestionDo) Having(conds ...gen.Condition) IUserQuestionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userQuestionDo) Limit(limit int) IUserQuestionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userQuestionDo) Offset(offset int) IUserQuestionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQuestionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userQuestionDo) Unscoped() IUserQuestionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userQuestionDo) Create(values ...*model.UserQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userQuestionDo) CreateInBatches(values []*model.UserQuestion, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userQuestionDo) Save(values ...*model.UserQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userQuestionDo) First() (*model.UserQuestion, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuestion), nil
	}
}

func (u userQuestionDo) Take() (*model.UserQuestion, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuestion), nil
	}
}

func (u userQuestionDo) Last() (*model.UserQuestion, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuestion), nil
	}
}

func (u userQuestionDo) Find() ([]*model.UserQuestion, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserQuestion), err
}

func (u userQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQuestion, err error) {
	buf := make([]*model.UserQuestion, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userQuestionDo) FindInBatches(result *[]*model.UserQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userQuestionDo) Attrs(attrs ...field.AssignExpr) IUserQuestionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userQuestionDo) Assign(attrs ...field.AssignExpr) IUserQuestionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userQuestionDo) Joins(fields ...field.RelationField) IUserQuestionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userQuestionDo) Preload(fields ...field.RelationField) IUserQuestionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userQuestionDo) FirstOrInit() (*model.UserQuestion, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuestion), nil
	}
}

func (u userQuestionDo) FirstOrCreate() (*model.UserQuestion, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuestion), nil
	}
}

func (u userQuestionDo) FindByPage(offset int, limit int) (result []*model.UserQuestion, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userQuestionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userQuestionDo) Delete(models ...*model.UserQuestion) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userQuestionDo) withDO(do gen.Dao) *userQuestionDo {
	u.DO = *do.(*gen.DO)
	return u
}
