// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSyncTableVersion(db *gorm.DB, opts ...gen.DOOption) syncTableVersion {
	_syncTableVersion := syncTableVersion{}

	_syncTableVersion.syncTableVersionDo.UseDB(db, opts...)
	_syncTableVersion.syncTableVersionDo.UseModel(&model.SyncTableVersion{})

	tableName := _syncTableVersion.syncTableVersionDo.TableName()
	_syncTableVersion.ALL = field.NewAsterisk(tableName)
	_syncTableVersion.ID = field.NewInt64(tableName, "id")
	_syncTableVersion.TableName_ = field.NewString(tableName, "table_name")
	_syncTableVersion.LastSyncID = field.NewInt64(tableName, "last_sync_id")
	_syncTableVersion.CreatedAt = field.NewField(tableName, "created_at")
	_syncTableVersion.UpdatedAt = field.NewField(tableName, "updated_at")

	_syncTableVersion.fillFieldMap()

	return _syncTableVersion
}

// syncTableVersion 记录同步数据表最后同步id
type syncTableVersion struct {
	syncTableVersionDo syncTableVersionDo

	ALL        field.Asterisk
	ID         field.Int64
	TableName_ field.String // 表名
	LastSyncID field.Int64  // 最后一次同步id
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (s syncTableVersion) Table(newTableName string) *syncTableVersion {
	s.syncTableVersionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncTableVersion) As(alias string) *syncTableVersion {
	s.syncTableVersionDo.DO = *(s.syncTableVersionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncTableVersion) updateTableName(table string) *syncTableVersion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TableName_ = field.NewString(table, "table_name")
	s.LastSyncID = field.NewInt64(table, "last_sync_id")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *syncTableVersion) WithContext(ctx context.Context) ISyncTableVersionDo {
	return s.syncTableVersionDo.WithContext(ctx)
}

func (s syncTableVersion) TableName() string { return s.syncTableVersionDo.TableName() }

func (s syncTableVersion) Alias() string { return s.syncTableVersionDo.Alias() }

func (s syncTableVersion) Columns(cols ...field.Expr) gen.Columns {
	return s.syncTableVersionDo.Columns(cols...)
}

func (s *syncTableVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncTableVersion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["table_name"] = s.TableName_
	s.fieldMap["last_sync_id"] = s.LastSyncID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s syncTableVersion) clone(db *gorm.DB) syncTableVersion {
	s.syncTableVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncTableVersion) replaceDB(db *gorm.DB) syncTableVersion {
	s.syncTableVersionDo.ReplaceDB(db)
	return s
}

type syncTableVersionDo struct{ gen.DO }

type ISyncTableVersionDo interface {
	gen.SubQuery
	Debug() ISyncTableVersionDo
	WithContext(ctx context.Context) ISyncTableVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISyncTableVersionDo
	WriteDB() ISyncTableVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISyncTableVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyncTableVersionDo
	Not(conds ...gen.Condition) ISyncTableVersionDo
	Or(conds ...gen.Condition) ISyncTableVersionDo
	Select(conds ...field.Expr) ISyncTableVersionDo
	Where(conds ...gen.Condition) ISyncTableVersionDo
	Order(conds ...field.Expr) ISyncTableVersionDo
	Distinct(cols ...field.Expr) ISyncTableVersionDo
	Omit(cols ...field.Expr) ISyncTableVersionDo
	Join(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo
	Group(cols ...field.Expr) ISyncTableVersionDo
	Having(conds ...gen.Condition) ISyncTableVersionDo
	Limit(limit int) ISyncTableVersionDo
	Offset(offset int) ISyncTableVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncTableVersionDo
	Unscoped() ISyncTableVersionDo
	Create(values ...*model.SyncTableVersion) error
	CreateInBatches(values []*model.SyncTableVersion, batchSize int) error
	Save(values ...*model.SyncTableVersion) error
	First() (*model.SyncTableVersion, error)
	Take() (*model.SyncTableVersion, error)
	Last() (*model.SyncTableVersion, error)
	Find() ([]*model.SyncTableVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncTableVersion, err error)
	FindInBatches(result *[]*model.SyncTableVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SyncTableVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyncTableVersionDo
	Assign(attrs ...field.AssignExpr) ISyncTableVersionDo
	Joins(fields ...field.RelationField) ISyncTableVersionDo
	Preload(fields ...field.RelationField) ISyncTableVersionDo
	FirstOrInit() (*model.SyncTableVersion, error)
	FirstOrCreate() (*model.SyncTableVersion, error)
	FindByPage(offset int, limit int) (result []*model.SyncTableVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyncTableVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syncTableVersionDo) Debug() ISyncTableVersionDo {
	return s.withDO(s.DO.Debug())
}

func (s syncTableVersionDo) WithContext(ctx context.Context) ISyncTableVersionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncTableVersionDo) ReadDB() ISyncTableVersionDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncTableVersionDo) WriteDB() ISyncTableVersionDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncTableVersionDo) Session(config *gorm.Session) ISyncTableVersionDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncTableVersionDo) Clauses(conds ...clause.Expression) ISyncTableVersionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncTableVersionDo) Returning(value interface{}, columns ...string) ISyncTableVersionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncTableVersionDo) Not(conds ...gen.Condition) ISyncTableVersionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncTableVersionDo) Or(conds ...gen.Condition) ISyncTableVersionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncTableVersionDo) Select(conds ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncTableVersionDo) Where(conds ...gen.Condition) ISyncTableVersionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncTableVersionDo) Order(conds ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncTableVersionDo) Distinct(cols ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncTableVersionDo) Omit(cols ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncTableVersionDo) Join(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncTableVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncTableVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncTableVersionDo) Group(cols ...field.Expr) ISyncTableVersionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncTableVersionDo) Having(conds ...gen.Condition) ISyncTableVersionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncTableVersionDo) Limit(limit int) ISyncTableVersionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncTableVersionDo) Offset(offset int) ISyncTableVersionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncTableVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyncTableVersionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncTableVersionDo) Unscoped() ISyncTableVersionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncTableVersionDo) Create(values ...*model.SyncTableVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncTableVersionDo) CreateInBatches(values []*model.SyncTableVersion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncTableVersionDo) Save(values ...*model.SyncTableVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncTableVersionDo) First() (*model.SyncTableVersion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTableVersion), nil
	}
}

func (s syncTableVersionDo) Take() (*model.SyncTableVersion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTableVersion), nil
	}
}

func (s syncTableVersionDo) Last() (*model.SyncTableVersion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTableVersion), nil
	}
}

func (s syncTableVersionDo) Find() ([]*model.SyncTableVersion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncTableVersion), err
}

func (s syncTableVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncTableVersion, err error) {
	buf := make([]*model.SyncTableVersion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncTableVersionDo) FindInBatches(result *[]*model.SyncTableVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncTableVersionDo) Attrs(attrs ...field.AssignExpr) ISyncTableVersionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncTableVersionDo) Assign(attrs ...field.AssignExpr) ISyncTableVersionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncTableVersionDo) Joins(fields ...field.RelationField) ISyncTableVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncTableVersionDo) Preload(fields ...field.RelationField) ISyncTableVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncTableVersionDo) FirstOrInit() (*model.SyncTableVersion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTableVersion), nil
	}
}

func (s syncTableVersionDo) FirstOrCreate() (*model.SyncTableVersion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncTableVersion), nil
	}
}

func (s syncTableVersionDo) FindByPage(offset int, limit int) (result []*model.SyncTableVersion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncTableVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncTableVersionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncTableVersionDo) Delete(models ...*model.SyncTableVersion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncTableVersionDo) withDO(do gen.Dao) *syncTableVersionDo {
	s.DO = *do.(*gen.DO)
	return s
}
