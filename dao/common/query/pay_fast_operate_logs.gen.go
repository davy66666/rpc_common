// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayFastOperateLog(db *gorm.DB, opts ...gen.DOOption) payFastOperateLog {
	_payFastOperateLog := payFastOperateLog{}

	_payFastOperateLog.payFastOperateLogDo.UseDB(db, opts...)
	_payFastOperateLog.payFastOperateLogDo.UseModel(&model.PayFastOperateLog{})

	tableName := _payFastOperateLog.payFastOperateLogDo.TableName()
	_payFastOperateLog.ALL = field.NewAsterisk(tableName)
	_payFastOperateLog.ID = field.NewInt64(tableName, "id")
	_payFastOperateLog.PayFastRecordID = field.NewInt64(tableName, "pay_fast_record_id")
	_payFastOperateLog.Status = field.NewInt64(tableName, "status")
	_payFastOperateLog.Name = field.NewString(tableName, "name")
	_payFastOperateLog.IsAdmin = field.NewInt64(tableName, "is_admin")
	_payFastOperateLog.CreatedAt = field.NewField(tableName, "created_at")
	_payFastOperateLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_payFastOperateLog.Remark = field.NewString(tableName, "remark")

	_payFastOperateLog.fillFieldMap()

	return _payFastOperateLog
}

type payFastOperateLog struct {
	payFastOperateLogDo payFastOperateLogDo

	ALL             field.Asterisk
	ID              field.Int64
	PayFastRecordID field.Int64  // 极速存取款id
	Status          field.Int64  // 状态
	Name            field.String // 操作人员名称
	IsAdmin         field.Int64  // 是否是管理员 1:是 0:否
	CreatedAt       field.Field
	UpdatedAt       field.Field
	Remark          field.String // 备注

	fieldMap map[string]field.Expr
}

func (p payFastOperateLog) Table(newTableName string) *payFastOperateLog {
	p.payFastOperateLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payFastOperateLog) As(alias string) *payFastOperateLog {
	p.payFastOperateLogDo.DO = *(p.payFastOperateLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payFastOperateLog) updateTableName(table string) *payFastOperateLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PayFastRecordID = field.NewInt64(table, "pay_fast_record_id")
	p.Status = field.NewInt64(table, "status")
	p.Name = field.NewString(table, "name")
	p.IsAdmin = field.NewInt64(table, "is_admin")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.Remark = field.NewString(table, "remark")

	p.fillFieldMap()

	return p
}

func (p *payFastOperateLog) WithContext(ctx context.Context) IPayFastOperateLogDo {
	return p.payFastOperateLogDo.WithContext(ctx)
}

func (p payFastOperateLog) TableName() string { return p.payFastOperateLogDo.TableName() }

func (p payFastOperateLog) Alias() string { return p.payFastOperateLogDo.Alias() }

func (p payFastOperateLog) Columns(cols ...field.Expr) gen.Columns {
	return p.payFastOperateLogDo.Columns(cols...)
}

func (p *payFastOperateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payFastOperateLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["pay_fast_record_id"] = p.PayFastRecordID
	p.fieldMap["status"] = p.Status
	p.fieldMap["name"] = p.Name
	p.fieldMap["is_admin"] = p.IsAdmin
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["remark"] = p.Remark
}

func (p payFastOperateLog) clone(db *gorm.DB) payFastOperateLog {
	p.payFastOperateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payFastOperateLog) replaceDB(db *gorm.DB) payFastOperateLog {
	p.payFastOperateLogDo.ReplaceDB(db)
	return p
}

type payFastOperateLogDo struct{ gen.DO }

type IPayFastOperateLogDo interface {
	gen.SubQuery
	Debug() IPayFastOperateLogDo
	WithContext(ctx context.Context) IPayFastOperateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayFastOperateLogDo
	WriteDB() IPayFastOperateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayFastOperateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayFastOperateLogDo
	Not(conds ...gen.Condition) IPayFastOperateLogDo
	Or(conds ...gen.Condition) IPayFastOperateLogDo
	Select(conds ...field.Expr) IPayFastOperateLogDo
	Where(conds ...gen.Condition) IPayFastOperateLogDo
	Order(conds ...field.Expr) IPayFastOperateLogDo
	Distinct(cols ...field.Expr) IPayFastOperateLogDo
	Omit(cols ...field.Expr) IPayFastOperateLogDo
	Join(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo
	Group(cols ...field.Expr) IPayFastOperateLogDo
	Having(conds ...gen.Condition) IPayFastOperateLogDo
	Limit(limit int) IPayFastOperateLogDo
	Offset(offset int) IPayFastOperateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastOperateLogDo
	Unscoped() IPayFastOperateLogDo
	Create(values ...*model.PayFastOperateLog) error
	CreateInBatches(values []*model.PayFastOperateLog, batchSize int) error
	Save(values ...*model.PayFastOperateLog) error
	First() (*model.PayFastOperateLog, error)
	Take() (*model.PayFastOperateLog, error)
	Last() (*model.PayFastOperateLog, error)
	Find() ([]*model.PayFastOperateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastOperateLog, err error)
	FindInBatches(result *[]*model.PayFastOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayFastOperateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayFastOperateLogDo
	Assign(attrs ...field.AssignExpr) IPayFastOperateLogDo
	Joins(fields ...field.RelationField) IPayFastOperateLogDo
	Preload(fields ...field.RelationField) IPayFastOperateLogDo
	FirstOrInit() (*model.PayFastOperateLog, error)
	FirstOrCreate() (*model.PayFastOperateLog, error)
	FindByPage(offset int, limit int) (result []*model.PayFastOperateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayFastOperateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payFastOperateLogDo) Debug() IPayFastOperateLogDo {
	return p.withDO(p.DO.Debug())
}

func (p payFastOperateLogDo) WithContext(ctx context.Context) IPayFastOperateLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payFastOperateLogDo) ReadDB() IPayFastOperateLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p payFastOperateLogDo) WriteDB() IPayFastOperateLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p payFastOperateLogDo) Session(config *gorm.Session) IPayFastOperateLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p payFastOperateLogDo) Clauses(conds ...clause.Expression) IPayFastOperateLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payFastOperateLogDo) Returning(value interface{}, columns ...string) IPayFastOperateLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payFastOperateLogDo) Not(conds ...gen.Condition) IPayFastOperateLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payFastOperateLogDo) Or(conds ...gen.Condition) IPayFastOperateLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payFastOperateLogDo) Select(conds ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payFastOperateLogDo) Where(conds ...gen.Condition) IPayFastOperateLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payFastOperateLogDo) Order(conds ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payFastOperateLogDo) Distinct(cols ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payFastOperateLogDo) Omit(cols ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payFastOperateLogDo) Join(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payFastOperateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payFastOperateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payFastOperateLogDo) Group(cols ...field.Expr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payFastOperateLogDo) Having(conds ...gen.Condition) IPayFastOperateLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payFastOperateLogDo) Limit(limit int) IPayFastOperateLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payFastOperateLogDo) Offset(offset int) IPayFastOperateLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payFastOperateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastOperateLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payFastOperateLogDo) Unscoped() IPayFastOperateLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payFastOperateLogDo) Create(values ...*model.PayFastOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payFastOperateLogDo) CreateInBatches(values []*model.PayFastOperateLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payFastOperateLogDo) Save(values ...*model.PayFastOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payFastOperateLogDo) First() (*model.PayFastOperateLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastOperateLog), nil
	}
}

func (p payFastOperateLogDo) Take() (*model.PayFastOperateLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastOperateLog), nil
	}
}

func (p payFastOperateLogDo) Last() (*model.PayFastOperateLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastOperateLog), nil
	}
}

func (p payFastOperateLogDo) Find() ([]*model.PayFastOperateLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayFastOperateLog), err
}

func (p payFastOperateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastOperateLog, err error) {
	buf := make([]*model.PayFastOperateLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payFastOperateLogDo) FindInBatches(result *[]*model.PayFastOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payFastOperateLogDo) Attrs(attrs ...field.AssignExpr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payFastOperateLogDo) Assign(attrs ...field.AssignExpr) IPayFastOperateLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payFastOperateLogDo) Joins(fields ...field.RelationField) IPayFastOperateLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payFastOperateLogDo) Preload(fields ...field.RelationField) IPayFastOperateLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payFastOperateLogDo) FirstOrInit() (*model.PayFastOperateLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastOperateLog), nil
	}
}

func (p payFastOperateLogDo) FirstOrCreate() (*model.PayFastOperateLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastOperateLog), nil
	}
}

func (p payFastOperateLogDo) FindByPage(offset int, limit int) (result []*model.PayFastOperateLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payFastOperateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payFastOperateLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payFastOperateLogDo) Delete(models ...*model.PayFastOperateLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payFastOperateLogDo) withDO(do gen.Dao) *payFastOperateLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
