// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskRuleType(db *gorm.DB, opts ...gen.DOOption) riskRuleType {
	_riskRuleType := riskRuleType{}

	_riskRuleType.riskRuleTypeDo.UseDB(db, opts...)
	_riskRuleType.riskRuleTypeDo.UseModel(&model.RiskRuleType{})

	tableName := _riskRuleType.riskRuleTypeDo.TableName()
	_riskRuleType.ALL = field.NewAsterisk(tableName)
	_riskRuleType.ID = field.NewInt64(tableName, "id")
	_riskRuleType.Name = field.NewString(tableName, "name")
	_riskRuleType.AdminName = field.NewString(tableName, "admin_name")
	_riskRuleType.CreatedAt = field.NewField(tableName, "created_at")
	_riskRuleType.UpdatedAt = field.NewField(tableName, "updated_at")

	_riskRuleType.fillFieldMap()

	return _riskRuleType
}

// riskRuleType 规则类型
type riskRuleType struct {
	riskRuleTypeDo riskRuleTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 类型名称
	AdminName field.String // 操作人
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (r riskRuleType) Table(newTableName string) *riskRuleType {
	r.riskRuleTypeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskRuleType) As(alias string) *riskRuleType {
	r.riskRuleTypeDo.DO = *(r.riskRuleTypeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskRuleType) updateTableName(table string) *riskRuleType {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Name = field.NewString(table, "name")
	r.AdminName = field.NewString(table, "admin_name")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *riskRuleType) WithContext(ctx context.Context) IRiskRuleTypeDo {
	return r.riskRuleTypeDo.WithContext(ctx)
}

func (r riskRuleType) TableName() string { return r.riskRuleTypeDo.TableName() }

func (r riskRuleType) Alias() string { return r.riskRuleTypeDo.Alias() }

func (r riskRuleType) Columns(cols ...field.Expr) gen.Columns {
	return r.riskRuleTypeDo.Columns(cols...)
}

func (r *riskRuleType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskRuleType) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["admin_name"] = r.AdminName
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r riskRuleType) clone(db *gorm.DB) riskRuleType {
	r.riskRuleTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskRuleType) replaceDB(db *gorm.DB) riskRuleType {
	r.riskRuleTypeDo.ReplaceDB(db)
	return r
}

type riskRuleTypeDo struct{ gen.DO }

type IRiskRuleTypeDo interface {
	gen.SubQuery
	Debug() IRiskRuleTypeDo
	WithContext(ctx context.Context) IRiskRuleTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskRuleTypeDo
	WriteDB() IRiskRuleTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskRuleTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskRuleTypeDo
	Not(conds ...gen.Condition) IRiskRuleTypeDo
	Or(conds ...gen.Condition) IRiskRuleTypeDo
	Select(conds ...field.Expr) IRiskRuleTypeDo
	Where(conds ...gen.Condition) IRiskRuleTypeDo
	Order(conds ...field.Expr) IRiskRuleTypeDo
	Distinct(cols ...field.Expr) IRiskRuleTypeDo
	Omit(cols ...field.Expr) IRiskRuleTypeDo
	Join(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo
	Group(cols ...field.Expr) IRiskRuleTypeDo
	Having(conds ...gen.Condition) IRiskRuleTypeDo
	Limit(limit int) IRiskRuleTypeDo
	Offset(offset int) IRiskRuleTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleTypeDo
	Unscoped() IRiskRuleTypeDo
	Create(values ...*model.RiskRuleType) error
	CreateInBatches(values []*model.RiskRuleType, batchSize int) error
	Save(values ...*model.RiskRuleType) error
	First() (*model.RiskRuleType, error)
	Take() (*model.RiskRuleType, error)
	Last() (*model.RiskRuleType, error)
	Find() ([]*model.RiskRuleType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleType, err error)
	FindInBatches(result *[]*model.RiskRuleType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskRuleType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskRuleTypeDo
	Assign(attrs ...field.AssignExpr) IRiskRuleTypeDo
	Joins(fields ...field.RelationField) IRiskRuleTypeDo
	Preload(fields ...field.RelationField) IRiskRuleTypeDo
	FirstOrInit() (*model.RiskRuleType, error)
	FirstOrCreate() (*model.RiskRuleType, error)
	FindByPage(offset int, limit int) (result []*model.RiskRuleType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskRuleTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskRuleTypeDo) Debug() IRiskRuleTypeDo {
	return r.withDO(r.DO.Debug())
}

func (r riskRuleTypeDo) WithContext(ctx context.Context) IRiskRuleTypeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskRuleTypeDo) ReadDB() IRiskRuleTypeDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskRuleTypeDo) WriteDB() IRiskRuleTypeDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskRuleTypeDo) Session(config *gorm.Session) IRiskRuleTypeDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskRuleTypeDo) Clauses(conds ...clause.Expression) IRiskRuleTypeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskRuleTypeDo) Returning(value interface{}, columns ...string) IRiskRuleTypeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskRuleTypeDo) Not(conds ...gen.Condition) IRiskRuleTypeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskRuleTypeDo) Or(conds ...gen.Condition) IRiskRuleTypeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskRuleTypeDo) Select(conds ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskRuleTypeDo) Where(conds ...gen.Condition) IRiskRuleTypeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskRuleTypeDo) Order(conds ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskRuleTypeDo) Distinct(cols ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskRuleTypeDo) Omit(cols ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskRuleTypeDo) Join(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskRuleTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskRuleTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskRuleTypeDo) Group(cols ...field.Expr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskRuleTypeDo) Having(conds ...gen.Condition) IRiskRuleTypeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskRuleTypeDo) Limit(limit int) IRiskRuleTypeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskRuleTypeDo) Offset(offset int) IRiskRuleTypeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskRuleTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskRuleTypeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskRuleTypeDo) Unscoped() IRiskRuleTypeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskRuleTypeDo) Create(values ...*model.RiskRuleType) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskRuleTypeDo) CreateInBatches(values []*model.RiskRuleType, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskRuleTypeDo) Save(values ...*model.RiskRuleType) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskRuleTypeDo) First() (*model.RiskRuleType, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleType), nil
	}
}

func (r riskRuleTypeDo) Take() (*model.RiskRuleType, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleType), nil
	}
}

func (r riskRuleTypeDo) Last() (*model.RiskRuleType, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleType), nil
	}
}

func (r riskRuleTypeDo) Find() ([]*model.RiskRuleType, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskRuleType), err
}

func (r riskRuleTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskRuleType, err error) {
	buf := make([]*model.RiskRuleType, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskRuleTypeDo) FindInBatches(result *[]*model.RiskRuleType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskRuleTypeDo) Attrs(attrs ...field.AssignExpr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskRuleTypeDo) Assign(attrs ...field.AssignExpr) IRiskRuleTypeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskRuleTypeDo) Joins(fields ...field.RelationField) IRiskRuleTypeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskRuleTypeDo) Preload(fields ...field.RelationField) IRiskRuleTypeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskRuleTypeDo) FirstOrInit() (*model.RiskRuleType, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleType), nil
	}
}

func (r riskRuleTypeDo) FirstOrCreate() (*model.RiskRuleType, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskRuleType), nil
	}
}

func (r riskRuleTypeDo) FindByPage(offset int, limit int) (result []*model.RiskRuleType, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskRuleTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskRuleTypeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskRuleTypeDo) Delete(models ...*model.RiskRuleType) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskRuleTypeDo) withDO(do gen.Dao) *riskRuleTypeDo {
	r.DO = *do.(*gen.DO)
	return r
}
