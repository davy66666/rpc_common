// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAppLoginErrorLog(db *gorm.DB, opts ...gen.DOOption) appLoginErrorLog {
	_appLoginErrorLog := appLoginErrorLog{}

	_appLoginErrorLog.appLoginErrorLogDo.UseDB(db, opts...)
	_appLoginErrorLog.appLoginErrorLogDo.UseModel(&model.AppLoginErrorLog{})

	tableName := _appLoginErrorLog.appLoginErrorLogDo.TableName()
	_appLoginErrorLog.ALL = field.NewAsterisk(tableName)
	_appLoginErrorLog.ID = field.NewInt64(tableName, "id")
	_appLoginErrorLog.Plat = field.NewInt64(tableName, "plat")
	_appLoginErrorLog.Platform = field.NewInt64(tableName, "platform")
	_appLoginErrorLog.UserID = field.NewInt64(tableName, "user_id")
	_appLoginErrorLog.Username = field.NewString(tableName, "username")
	_appLoginErrorLog.Domain = field.NewString(tableName, "domain")
	_appLoginErrorLog.IP = field.NewString(tableName, "ip")
	_appLoginErrorLog.IPArea = field.NewString(tableName, "ip_area")
	_appLoginErrorLog.Params = field.NewString(tableName, "params")
	_appLoginErrorLog.ErrorInfo = field.NewString(tableName, "error_info")
	_appLoginErrorLog.DeviceID = field.NewString(tableName, "device_id")
	_appLoginErrorLog.DeviceInfo = field.NewString(tableName, "device_info")
	_appLoginErrorLog.CreatedAt = field.NewField(tableName, "created_at")
	_appLoginErrorLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_appLoginErrorLog.fillFieldMap()

	return _appLoginErrorLog
}

type appLoginErrorLog struct {
	appLoginErrorLogDo appLoginErrorLogDo

	ALL        field.Asterisk
	ID         field.Int64
	Plat       field.Int64  // 平台
	Platform   field.Int64  // 2安卓 3苹果
	UserID     field.Int64  // 会员id
	Username   field.String // 会员名称
	Domain     field.String // 域名
	IP         field.String // ip
	IPArea     field.String // ip区域
	Params     field.String // 具体参数
	ErrorInfo  field.String // 错误原因
	DeviceID   field.String // 设备ID
	DeviceInfo field.String // 设备信息
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (a appLoginErrorLog) Table(newTableName string) *appLoginErrorLog {
	a.appLoginErrorLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appLoginErrorLog) As(alias string) *appLoginErrorLog {
	a.appLoginErrorLogDo.DO = *(a.appLoginErrorLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appLoginErrorLog) updateTableName(table string) *appLoginErrorLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Plat = field.NewInt64(table, "plat")
	a.Platform = field.NewInt64(table, "platform")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.Domain = field.NewString(table, "domain")
	a.IP = field.NewString(table, "ip")
	a.IPArea = field.NewString(table, "ip_area")
	a.Params = field.NewString(table, "params")
	a.ErrorInfo = field.NewString(table, "error_info")
	a.DeviceID = field.NewString(table, "device_id")
	a.DeviceInfo = field.NewString(table, "device_info")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *appLoginErrorLog) WithContext(ctx context.Context) IAppLoginErrorLogDo {
	return a.appLoginErrorLogDo.WithContext(ctx)
}

func (a appLoginErrorLog) TableName() string { return a.appLoginErrorLogDo.TableName() }

func (a appLoginErrorLog) Alias() string { return a.appLoginErrorLogDo.Alias() }

func (a appLoginErrorLog) Columns(cols ...field.Expr) gen.Columns {
	return a.appLoginErrorLogDo.Columns(cols...)
}

func (a *appLoginErrorLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appLoginErrorLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["platform"] = a.Platform
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["domain"] = a.Domain
	a.fieldMap["ip"] = a.IP
	a.fieldMap["ip_area"] = a.IPArea
	a.fieldMap["params"] = a.Params
	a.fieldMap["error_info"] = a.ErrorInfo
	a.fieldMap["device_id"] = a.DeviceID
	a.fieldMap["device_info"] = a.DeviceInfo
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a appLoginErrorLog) clone(db *gorm.DB) appLoginErrorLog {
	a.appLoginErrorLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appLoginErrorLog) replaceDB(db *gorm.DB) appLoginErrorLog {
	a.appLoginErrorLogDo.ReplaceDB(db)
	return a
}

type appLoginErrorLogDo struct{ gen.DO }

type IAppLoginErrorLogDo interface {
	gen.SubQuery
	Debug() IAppLoginErrorLogDo
	WithContext(ctx context.Context) IAppLoginErrorLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppLoginErrorLogDo
	WriteDB() IAppLoginErrorLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppLoginErrorLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppLoginErrorLogDo
	Not(conds ...gen.Condition) IAppLoginErrorLogDo
	Or(conds ...gen.Condition) IAppLoginErrorLogDo
	Select(conds ...field.Expr) IAppLoginErrorLogDo
	Where(conds ...gen.Condition) IAppLoginErrorLogDo
	Order(conds ...field.Expr) IAppLoginErrorLogDo
	Distinct(cols ...field.Expr) IAppLoginErrorLogDo
	Omit(cols ...field.Expr) IAppLoginErrorLogDo
	Join(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo
	Group(cols ...field.Expr) IAppLoginErrorLogDo
	Having(conds ...gen.Condition) IAppLoginErrorLogDo
	Limit(limit int) IAppLoginErrorLogDo
	Offset(offset int) IAppLoginErrorLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppLoginErrorLogDo
	Unscoped() IAppLoginErrorLogDo
	Create(values ...*model.AppLoginErrorLog) error
	CreateInBatches(values []*model.AppLoginErrorLog, batchSize int) error
	Save(values ...*model.AppLoginErrorLog) error
	First() (*model.AppLoginErrorLog, error)
	Take() (*model.AppLoginErrorLog, error)
	Last() (*model.AppLoginErrorLog, error)
	Find() ([]*model.AppLoginErrorLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppLoginErrorLog, err error)
	FindInBatches(result *[]*model.AppLoginErrorLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppLoginErrorLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppLoginErrorLogDo
	Assign(attrs ...field.AssignExpr) IAppLoginErrorLogDo
	Joins(fields ...field.RelationField) IAppLoginErrorLogDo
	Preload(fields ...field.RelationField) IAppLoginErrorLogDo
	FirstOrInit() (*model.AppLoginErrorLog, error)
	FirstOrCreate() (*model.AppLoginErrorLog, error)
	FindByPage(offset int, limit int) (result []*model.AppLoginErrorLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppLoginErrorLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appLoginErrorLogDo) Debug() IAppLoginErrorLogDo {
	return a.withDO(a.DO.Debug())
}

func (a appLoginErrorLogDo) WithContext(ctx context.Context) IAppLoginErrorLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appLoginErrorLogDo) ReadDB() IAppLoginErrorLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a appLoginErrorLogDo) WriteDB() IAppLoginErrorLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a appLoginErrorLogDo) Session(config *gorm.Session) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a appLoginErrorLogDo) Clauses(conds ...clause.Expression) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appLoginErrorLogDo) Returning(value interface{}, columns ...string) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appLoginErrorLogDo) Not(conds ...gen.Condition) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appLoginErrorLogDo) Or(conds ...gen.Condition) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appLoginErrorLogDo) Select(conds ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appLoginErrorLogDo) Where(conds ...gen.Condition) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appLoginErrorLogDo) Order(conds ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appLoginErrorLogDo) Distinct(cols ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appLoginErrorLogDo) Omit(cols ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appLoginErrorLogDo) Join(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appLoginErrorLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appLoginErrorLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appLoginErrorLogDo) Group(cols ...field.Expr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appLoginErrorLogDo) Having(conds ...gen.Condition) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appLoginErrorLogDo) Limit(limit int) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appLoginErrorLogDo) Offset(offset int) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appLoginErrorLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appLoginErrorLogDo) Unscoped() IAppLoginErrorLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appLoginErrorLogDo) Create(values ...*model.AppLoginErrorLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appLoginErrorLogDo) CreateInBatches(values []*model.AppLoginErrorLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appLoginErrorLogDo) Save(values ...*model.AppLoginErrorLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appLoginErrorLogDo) First() (*model.AppLoginErrorLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLoginErrorLog), nil
	}
}

func (a appLoginErrorLogDo) Take() (*model.AppLoginErrorLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLoginErrorLog), nil
	}
}

func (a appLoginErrorLogDo) Last() (*model.AppLoginErrorLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLoginErrorLog), nil
	}
}

func (a appLoginErrorLogDo) Find() ([]*model.AppLoginErrorLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppLoginErrorLog), err
}

func (a appLoginErrorLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppLoginErrorLog, err error) {
	buf := make([]*model.AppLoginErrorLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appLoginErrorLogDo) FindInBatches(result *[]*model.AppLoginErrorLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appLoginErrorLogDo) Attrs(attrs ...field.AssignExpr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appLoginErrorLogDo) Assign(attrs ...field.AssignExpr) IAppLoginErrorLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appLoginErrorLogDo) Joins(fields ...field.RelationField) IAppLoginErrorLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appLoginErrorLogDo) Preload(fields ...field.RelationField) IAppLoginErrorLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appLoginErrorLogDo) FirstOrInit() (*model.AppLoginErrorLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLoginErrorLog), nil
	}
}

func (a appLoginErrorLogDo) FirstOrCreate() (*model.AppLoginErrorLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLoginErrorLog), nil
	}
}

func (a appLoginErrorLogDo) FindByPage(offset int, limit int) (result []*model.AppLoginErrorLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appLoginErrorLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appLoginErrorLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appLoginErrorLogDo) Delete(models ...*model.AppLoginErrorLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appLoginErrorLogDo) withDO(do gen.Dao) *appLoginErrorLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
