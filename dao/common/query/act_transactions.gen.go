// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActTransaction(db *gorm.DB, opts ...gen.DOOption) actTransaction {
	_actTransaction := actTransaction{}

	_actTransaction.actTransactionDo.UseDB(db, opts...)
	_actTransaction.actTransactionDo.UseModel(&model.ActTransaction{})

	tableName := _actTransaction.actTransactionDo.TableName()
	_actTransaction.ALL = field.NewAsterisk(tableName)
	_actTransaction.ID = field.NewInt64(tableName, "id")
	_actTransaction.UserID = field.NewInt64(tableName, "user_id")
	_actTransaction.Username = field.NewString(tableName, "username")
	_actTransaction.IsTester = field.NewInt64(tableName, "is_tester")
	_actTransaction.ParentID = field.NewInt64(tableName, "parent_id")
	_actTransaction.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_actTransaction.Amount = field.NewFloat64(tableName, "amount")
	_actTransaction.TransFatherID = field.NewInt64(tableName, "trans_father_id")
	_actTransaction.TransTypesID = field.NewInt64(tableName, "trans_types_id")
	_actTransaction.TransTypesCnTitle = field.NewString(tableName, "trans_types_cn_title")
	_actTransaction.TransTypesEnTitle = field.NewString(tableName, "trans_types_en_title")
	_actTransaction.IsIncome = field.NewInt64(tableName, "is_income")
	_actTransaction.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_actTransaction.Money = field.NewFloat64(tableName, "money")
	_actTransaction.GameCode = field.NewString(tableName, "game_code")
	_actTransaction.Issue = field.NewString(tableName, "issue")
	_actTransaction.GameName = field.NewString(tableName, "game_name")
	_actTransaction.BillID = field.NewString(tableName, "bill_id")
	_actTransaction.AdminID = field.NewInt64(tableName, "admin_id")
	_actTransaction.Adminname = field.NewString(tableName, "adminname")
	_actTransaction.IP = field.NewString(tableName, "ip")
	_actTransaction.Status = field.NewInt64(tableName, "status")
	_actTransaction.Remark = field.NewString(tableName, "remark")
	_actTransaction.PayType = field.NewString(tableName, "pay_type")
	_actTransaction.CreatedAt = field.NewField(tableName, "created_at")
	_actTransaction.UpdatedAt = field.NewField(tableName, "updated_at")
	_actTransaction.Description = field.NewString(tableName, "description")
	_actTransaction.IsCal = field.NewInt64(tableName, "is_cal")
	_actTransaction.LeaderID = field.NewInt64(tableName, "leader_id")
	_actTransaction.BankType = field.NewInt64(tableName, "bank_type")
	_actTransaction.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_actTransaction.MerchantNum = field.NewString(tableName, "merchant_num")
	_actTransaction.ThirdTrackNum = field.NewString(tableName, "third_track_num")

	_actTransaction.fillFieldMap()

	return _actTransaction
}

type actTransaction struct {
	actTransactionDo actTransactionDo

	ALL               field.Asterisk
	ID                field.Int64
	UserID            field.Int64
	Username          field.String
	IsTester          field.Int64
	ParentID          field.Int64 // 上级id
	ForefatherIds     field.String
	Amount            field.Float64 // 用户当前交易金额
	TransFatherID     field.Int64   // 账变类型父类
	TransTypesID      field.Int64
	TransTypesCnTitle field.String
	TransTypesEnTitle field.String
	IsIncome          field.Int64 // 是否入款
	BeforeMoney       field.Float64
	Money             field.Float64 // 交易后金额
	GameCode          field.String  // 游戏game
	Issue             field.String
	GameName          field.String // 具体玩法
	BillID            field.String
	AdminID           field.Int64
	Adminname         field.String
	IP                field.String
	Status            field.Int64  // 状态：0已删除,1:成功
	Remark            field.String // 备注
	PayType           field.String // 支付类型
	CreatedAt         field.Field  // 交易时间
	UpdatedAt         field.Field
	Description       field.String // 转账说明
	IsCal             field.Int64  // is_cal 0:未结算 1:结算中 2：已结算
	LeaderID          field.Int64  // 队长id
	BankType          field.Int64  // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	ThirdMerchantName field.String // 三方商户名称
	MerchantNum       field.String // 商户编号
	ThirdTrackNum     field.String // 三方单号

	fieldMap map[string]field.Expr
}

func (a actTransaction) Table(newTableName string) *actTransaction {
	a.actTransactionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actTransaction) As(alias string) *actTransaction {
	a.actTransactionDo.DO = *(a.actTransactionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actTransaction) updateTableName(table string) *actTransaction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.IsTester = field.NewInt64(table, "is_tester")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.Amount = field.NewFloat64(table, "amount")
	a.TransFatherID = field.NewInt64(table, "trans_father_id")
	a.TransTypesID = field.NewInt64(table, "trans_types_id")
	a.TransTypesCnTitle = field.NewString(table, "trans_types_cn_title")
	a.TransTypesEnTitle = field.NewString(table, "trans_types_en_title")
	a.IsIncome = field.NewInt64(table, "is_income")
	a.BeforeMoney = field.NewFloat64(table, "before_money")
	a.Money = field.NewFloat64(table, "money")
	a.GameCode = field.NewString(table, "game_code")
	a.Issue = field.NewString(table, "issue")
	a.GameName = field.NewString(table, "game_name")
	a.BillID = field.NewString(table, "bill_id")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.Adminname = field.NewString(table, "adminname")
	a.IP = field.NewString(table, "ip")
	a.Status = field.NewInt64(table, "status")
	a.Remark = field.NewString(table, "remark")
	a.PayType = field.NewString(table, "pay_type")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.Description = field.NewString(table, "description")
	a.IsCal = field.NewInt64(table, "is_cal")
	a.LeaderID = field.NewInt64(table, "leader_id")
	a.BankType = field.NewInt64(table, "bank_type")
	a.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	a.MerchantNum = field.NewString(table, "merchant_num")
	a.ThirdTrackNum = field.NewString(table, "third_track_num")

	a.fillFieldMap()

	return a
}

func (a *actTransaction) WithContext(ctx context.Context) IActTransactionDo {
	return a.actTransactionDo.WithContext(ctx)
}

func (a actTransaction) TableName() string { return a.actTransactionDo.TableName() }

func (a actTransaction) Alias() string { return a.actTransactionDo.Alias() }

func (a actTransaction) Columns(cols ...field.Expr) gen.Columns {
	return a.actTransactionDo.Columns(cols...)
}

func (a *actTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actTransaction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 33)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["is_tester"] = a.IsTester
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["trans_father_id"] = a.TransFatherID
	a.fieldMap["trans_types_id"] = a.TransTypesID
	a.fieldMap["trans_types_cn_title"] = a.TransTypesCnTitle
	a.fieldMap["trans_types_en_title"] = a.TransTypesEnTitle
	a.fieldMap["is_income"] = a.IsIncome
	a.fieldMap["before_money"] = a.BeforeMoney
	a.fieldMap["money"] = a.Money
	a.fieldMap["game_code"] = a.GameCode
	a.fieldMap["issue"] = a.Issue
	a.fieldMap["game_name"] = a.GameName
	a.fieldMap["bill_id"] = a.BillID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["adminname"] = a.Adminname
	a.fieldMap["ip"] = a.IP
	a.fieldMap["status"] = a.Status
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["pay_type"] = a.PayType
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["description"] = a.Description
	a.fieldMap["is_cal"] = a.IsCal
	a.fieldMap["leader_id"] = a.LeaderID
	a.fieldMap["bank_type"] = a.BankType
	a.fieldMap["third_merchant_name"] = a.ThirdMerchantName
	a.fieldMap["merchant_num"] = a.MerchantNum
	a.fieldMap["third_track_num"] = a.ThirdTrackNum
}

func (a actTransaction) clone(db *gorm.DB) actTransaction {
	a.actTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actTransaction) replaceDB(db *gorm.DB) actTransaction {
	a.actTransactionDo.ReplaceDB(db)
	return a
}

type actTransactionDo struct{ gen.DO }

type IActTransactionDo interface {
	gen.SubQuery
	Debug() IActTransactionDo
	WithContext(ctx context.Context) IActTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActTransactionDo
	WriteDB() IActTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActTransactionDo
	Not(conds ...gen.Condition) IActTransactionDo
	Or(conds ...gen.Condition) IActTransactionDo
	Select(conds ...field.Expr) IActTransactionDo
	Where(conds ...gen.Condition) IActTransactionDo
	Order(conds ...field.Expr) IActTransactionDo
	Distinct(cols ...field.Expr) IActTransactionDo
	Omit(cols ...field.Expr) IActTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IActTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActTransactionDo
	Group(cols ...field.Expr) IActTransactionDo
	Having(conds ...gen.Condition) IActTransactionDo
	Limit(limit int) IActTransactionDo
	Offset(offset int) IActTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActTransactionDo
	Unscoped() IActTransactionDo
	Create(values ...*model.ActTransaction) error
	CreateInBatches(values []*model.ActTransaction, batchSize int) error
	Save(values ...*model.ActTransaction) error
	First() (*model.ActTransaction, error)
	Take() (*model.ActTransaction, error)
	Last() (*model.ActTransaction, error)
	Find() ([]*model.ActTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActTransaction, err error)
	FindInBatches(result *[]*model.ActTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActTransactionDo
	Assign(attrs ...field.AssignExpr) IActTransactionDo
	Joins(fields ...field.RelationField) IActTransactionDo
	Preload(fields ...field.RelationField) IActTransactionDo
	FirstOrInit() (*model.ActTransaction, error)
	FirstOrCreate() (*model.ActTransaction, error)
	FindByPage(offset int, limit int) (result []*model.ActTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actTransactionDo) Debug() IActTransactionDo {
	return a.withDO(a.DO.Debug())
}

func (a actTransactionDo) WithContext(ctx context.Context) IActTransactionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actTransactionDo) ReadDB() IActTransactionDo {
	return a.Clauses(dbresolver.Read)
}

func (a actTransactionDo) WriteDB() IActTransactionDo {
	return a.Clauses(dbresolver.Write)
}

func (a actTransactionDo) Session(config *gorm.Session) IActTransactionDo {
	return a.withDO(a.DO.Session(config))
}

func (a actTransactionDo) Clauses(conds ...clause.Expression) IActTransactionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actTransactionDo) Returning(value interface{}, columns ...string) IActTransactionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actTransactionDo) Not(conds ...gen.Condition) IActTransactionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actTransactionDo) Or(conds ...gen.Condition) IActTransactionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actTransactionDo) Select(conds ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actTransactionDo) Where(conds ...gen.Condition) IActTransactionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actTransactionDo) Order(conds ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actTransactionDo) Distinct(cols ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actTransactionDo) Omit(cols ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actTransactionDo) Join(table schema.Tabler, on ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actTransactionDo) Group(cols ...field.Expr) IActTransactionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actTransactionDo) Having(conds ...gen.Condition) IActTransactionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actTransactionDo) Limit(limit int) IActTransactionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actTransactionDo) Offset(offset int) IActTransactionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActTransactionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actTransactionDo) Unscoped() IActTransactionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actTransactionDo) Create(values ...*model.ActTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actTransactionDo) CreateInBatches(values []*model.ActTransaction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actTransactionDo) Save(values ...*model.ActTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actTransactionDo) First() (*model.ActTransaction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActTransaction), nil
	}
}

func (a actTransactionDo) Take() (*model.ActTransaction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActTransaction), nil
	}
}

func (a actTransactionDo) Last() (*model.ActTransaction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActTransaction), nil
	}
}

func (a actTransactionDo) Find() ([]*model.ActTransaction, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActTransaction), err
}

func (a actTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActTransaction, err error) {
	buf := make([]*model.ActTransaction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actTransactionDo) FindInBatches(result *[]*model.ActTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actTransactionDo) Attrs(attrs ...field.AssignExpr) IActTransactionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actTransactionDo) Assign(attrs ...field.AssignExpr) IActTransactionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actTransactionDo) Joins(fields ...field.RelationField) IActTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actTransactionDo) Preload(fields ...field.RelationField) IActTransactionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actTransactionDo) FirstOrInit() (*model.ActTransaction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActTransaction), nil
	}
}

func (a actTransactionDo) FirstOrCreate() (*model.ActTransaction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActTransaction), nil
	}
}

func (a actTransactionDo) FindByPage(offset int, limit int) (result []*model.ActTransaction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actTransactionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actTransactionDo) Delete(models ...*model.ActTransaction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actTransactionDo) withDO(do gen.Dao) *actTransactionDo {
	a.DO = *do.(*gen.DO)
	return a
}
