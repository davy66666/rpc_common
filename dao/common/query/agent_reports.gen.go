// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentReport(db *gorm.DB, opts ...gen.DOOption) agentReport {
	_agentReport := agentReport{}

	_agentReport.agentReportDo.UseDB(db, opts...)
	_agentReport.agentReportDo.UseModel(&model.AgentReport{})

	tableName := _agentReport.agentReportDo.TableName()
	_agentReport.ALL = field.NewAsterisk(tableName)
	_agentReport.ID = field.NewInt64(tableName, "id")
	_agentReport.Date = field.NewTime(tableName, "date")
	_agentReport.AgentID = field.NewInt64(tableName, "agent_id")
	_agentReport.ParentName = field.NewString(tableName, "parent_name")
	_agentReport.RegisterCount = field.NewInt64(tableName, "register_count")
	_agentReport.FirstRechargeCount = field.NewInt64(tableName, "first_recharge_count")
	_agentReport.FirstRechargeAmount = field.NewFloat64(tableName, "first_recharge_amount")
	_agentReport.Deposit = field.NewFloat64(tableName, "deposit")
	_agentReport.Withdraw = field.NewFloat64(tableName, "withdraw")
	_agentReport.CreatedAt = field.NewField(tableName, "created_at")
	_agentReport.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentReport.fillFieldMap()

	return _agentReport
}

type agentReport struct {
	agentReportDo agentReportDo

	ALL                 field.Asterisk
	ID                  field.Int64
	Date                field.Time    // 日期
	AgentID             field.Int64   // 代理id
	ParentName          field.String  // 代理名称
	RegisterCount       field.Int64   // 注册人数
	FirstRechargeCount  field.Int64   // 首存人数
	FirstRechargeAmount field.Float64 // 首存金额
	Deposit             field.Float64 // 充值金额
	Withdraw            field.Float64 // 提款金额
	CreatedAt           field.Field
	UpdatedAt           field.Field

	fieldMap map[string]field.Expr
}

func (a agentReport) Table(newTableName string) *agentReport {
	a.agentReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentReport) As(alias string) *agentReport {
	a.agentReportDo.DO = *(a.agentReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentReport) updateTableName(table string) *agentReport {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Date = field.NewTime(table, "date")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.RegisterCount = field.NewInt64(table, "register_count")
	a.FirstRechargeCount = field.NewInt64(table, "first_recharge_count")
	a.FirstRechargeAmount = field.NewFloat64(table, "first_recharge_amount")
	a.Deposit = field.NewFloat64(table, "deposit")
	a.Withdraw = field.NewFloat64(table, "withdraw")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentReport) WithContext(ctx context.Context) IAgentReportDo {
	return a.agentReportDo.WithContext(ctx)
}

func (a agentReport) TableName() string { return a.agentReportDo.TableName() }

func (a agentReport) Alias() string { return a.agentReportDo.Alias() }

func (a agentReport) Columns(cols ...field.Expr) gen.Columns { return a.agentReportDo.Columns(cols...) }

func (a *agentReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["date"] = a.Date
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["register_count"] = a.RegisterCount
	a.fieldMap["first_recharge_count"] = a.FirstRechargeCount
	a.fieldMap["first_recharge_amount"] = a.FirstRechargeAmount
	a.fieldMap["deposit"] = a.Deposit
	a.fieldMap["withdraw"] = a.Withdraw
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentReport) clone(db *gorm.DB) agentReport {
	a.agentReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentReport) replaceDB(db *gorm.DB) agentReport {
	a.agentReportDo.ReplaceDB(db)
	return a
}

type agentReportDo struct{ gen.DO }

type IAgentReportDo interface {
	gen.SubQuery
	Debug() IAgentReportDo
	WithContext(ctx context.Context) IAgentReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentReportDo
	WriteDB() IAgentReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentReportDo
	Not(conds ...gen.Condition) IAgentReportDo
	Or(conds ...gen.Condition) IAgentReportDo
	Select(conds ...field.Expr) IAgentReportDo
	Where(conds ...gen.Condition) IAgentReportDo
	Order(conds ...field.Expr) IAgentReportDo
	Distinct(cols ...field.Expr) IAgentReportDo
	Omit(cols ...field.Expr) IAgentReportDo
	Join(table schema.Tabler, on ...field.Expr) IAgentReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentReportDo
	Group(cols ...field.Expr) IAgentReportDo
	Having(conds ...gen.Condition) IAgentReportDo
	Limit(limit int) IAgentReportDo
	Offset(offset int) IAgentReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentReportDo
	Unscoped() IAgentReportDo
	Create(values ...*model.AgentReport) error
	CreateInBatches(values []*model.AgentReport, batchSize int) error
	Save(values ...*model.AgentReport) error
	First() (*model.AgentReport, error)
	Take() (*model.AgentReport, error)
	Last() (*model.AgentReport, error)
	Find() ([]*model.AgentReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentReport, err error)
	FindInBatches(result *[]*model.AgentReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentReportDo
	Assign(attrs ...field.AssignExpr) IAgentReportDo
	Joins(fields ...field.RelationField) IAgentReportDo
	Preload(fields ...field.RelationField) IAgentReportDo
	FirstOrInit() (*model.AgentReport, error)
	FirstOrCreate() (*model.AgentReport, error)
	FindByPage(offset int, limit int) (result []*model.AgentReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentReportDo) Debug() IAgentReportDo {
	return a.withDO(a.DO.Debug())
}

func (a agentReportDo) WithContext(ctx context.Context) IAgentReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentReportDo) ReadDB() IAgentReportDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentReportDo) WriteDB() IAgentReportDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentReportDo) Session(config *gorm.Session) IAgentReportDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentReportDo) Clauses(conds ...clause.Expression) IAgentReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentReportDo) Returning(value interface{}, columns ...string) IAgentReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentReportDo) Not(conds ...gen.Condition) IAgentReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentReportDo) Or(conds ...gen.Condition) IAgentReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentReportDo) Select(conds ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentReportDo) Where(conds ...gen.Condition) IAgentReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentReportDo) Order(conds ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentReportDo) Distinct(cols ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentReportDo) Omit(cols ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentReportDo) Join(table schema.Tabler, on ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentReportDo) Group(cols ...field.Expr) IAgentReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentReportDo) Having(conds ...gen.Condition) IAgentReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentReportDo) Limit(limit int) IAgentReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentReportDo) Offset(offset int) IAgentReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentReportDo) Unscoped() IAgentReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentReportDo) Create(values ...*model.AgentReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentReportDo) CreateInBatches(values []*model.AgentReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentReportDo) Save(values ...*model.AgentReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentReportDo) First() (*model.AgentReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentReport), nil
	}
}

func (a agentReportDo) Take() (*model.AgentReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentReport), nil
	}
}

func (a agentReportDo) Last() (*model.AgentReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentReport), nil
	}
}

func (a agentReportDo) Find() ([]*model.AgentReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentReport), err
}

func (a agentReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentReport, err error) {
	buf := make([]*model.AgentReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentReportDo) FindInBatches(result *[]*model.AgentReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentReportDo) Attrs(attrs ...field.AssignExpr) IAgentReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentReportDo) Assign(attrs ...field.AssignExpr) IAgentReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentReportDo) Joins(fields ...field.RelationField) IAgentReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentReportDo) Preload(fields ...field.RelationField) IAgentReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentReportDo) FirstOrInit() (*model.AgentReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentReport), nil
	}
}

func (a agentReportDo) FirstOrCreate() (*model.AgentReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentReport), nil
	}
}

func (a agentReportDo) FindByPage(offset int, limit int) (result []*model.AgentReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentReportDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentReportDo) Delete(models ...*model.AgentReport) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentReportDo) withDO(do gen.Dao) *agentReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
