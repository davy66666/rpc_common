// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayFastConfig(db *gorm.DB, opts ...gen.DOOption) payFastConfig {
	_payFastConfig := payFastConfig{}

	_payFastConfig.payFastConfigDo.UseDB(db, opts...)
	_payFastConfig.payFastConfigDo.UseModel(&model.PayFastConfig{})

	tableName := _payFastConfig.payFastConfigDo.TableName()
	_payFastConfig.ALL = field.NewAsterisk(tableName)
	_payFastConfig.ID = field.NewInt64(tableName, "id")
	_payFastConfig.BankType = field.NewInt64(tableName, "bank_type")
	_payFastConfig.LockTime = field.NewInt64(tableName, "lock_time")
	_payFastConfig.PayLockTime = field.NewInt64(tableName, "pay_lock_time")
	_payFastConfig.MinMoney = field.NewFloat64(tableName, "min_money")
	_payFastConfig.MaxMoney = field.NewFloat64(tableName, "max_money")
	_payFastConfig.IsOpen = field.NewInt64(tableName, "is_open")
	_payFastConfig.ImgPath = field.NewString(tableName, "img_path")
	_payFastConfig.AdminName = field.NewString(tableName, "admin_name")
	_payFastConfig.CreatedAt = field.NewField(tableName, "created_at")
	_payFastConfig.UpdatedAt = field.NewField(tableName, "updated_at")
	_payFastConfig.VideoPath = field.NewString(tableName, "video_path")
	_payFastConfig.GiftMoneyRate = field.NewFloat64(tableName, "gift_money_rate")
	_payFastConfig.BankStatementPath = field.NewString(tableName, "bank_statement_path")
	_payFastConfig.FixedRange = field.NewString(tableName, "fixed_range")
	_payFastConfig.WithdrawMatchingNum = field.NewInt64(tableName, "withdraw_matching_num")
	_payFastConfig.RechargeLimitTime = field.NewInt64(tableName, "recharge_limit_time")
	_payFastConfig.RechargeFailTimes = field.NewInt64(tableName, "recharge_fail_times")
	_payFastConfig.RechargeLockTime = field.NewInt64(tableName, "recharge_lock_time")
	_payFastConfig.WithdrawAPIWhitelist = field.NewString(tableName, "withdraw_api_whitelist")
	_payFastConfig.Sort = field.NewInt64(tableName, "sort")
	_payFastConfig.RechargeRemark = field.NewString(tableName, "recharge_remark")
	_payFastConfig.ReserveWithdrawalConfig = field.NewString(tableName, "reserve_withdrawal_config")
	_payFastConfig.ReserveWithdrawalIsOpen = field.NewInt64(tableName, "reserve_withdrawal_is_open")
	_payFastConfig.PayFastTgMessageTime = field.NewInt64(tableName, "pay_fast_tg_message_time")
	_payFastConfig.FreezeLimitMessage = field.NewString(tableName, "freeze_limit_message")
	_payFastConfig.NoRechargeOrderMessage = field.NewString(tableName, "no_recharge_order_message")
	_payFastConfig.PendingOrderMessage = field.NewString(tableName, "pending_order_message")
	_payFastConfig.MatchingWithdrawalSuccessMessage = field.NewString(tableName, "matching_withdrawal_success_message")

	_payFastConfig.fillFieldMap()

	return _payFastConfig
}

type payFastConfig struct {
	payFastConfigDo payFastConfigDo

	ALL                              field.Asterisk
	ID                               field.Int64
	BankType                         field.Int64   // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	LockTime                         field.Int64   // 锁定时间(分钟)
	PayLockTime                      field.Int64   // 支付中锁定时间(分钟)
	MinMoney                         field.Float64 // 极速取款最小金额
	MaxMoney                         field.Float64 // 极速取款最大金额
	IsOpen                           field.Int64   // 状态
	ImgPath                          field.String  // 示意图
	AdminName                        field.String  // 操作管理员
	CreatedAt                        field.Field
	UpdatedAt                        field.Field
	VideoPath                        field.String  // 视频示例
	GiftMoneyRate                    field.Float64 // 取款优惠比例（单位：%）
	BankStatementPath                field.String  // 资金明细示意图
	FixedRange                       field.String  // 固定额度区间
	WithdrawMatchingNum              field.Int64   // 提款单匹配次数
	RechargeLimitTime                field.Int64   // 充值限制小时（存秒数）
	RechargeFailTimes                field.Int64   // 充值连续失败次数
	RechargeLockTime                 field.Int64   // 限制会员使用充值时间（存秒数）
	WithdrawAPIWhitelist             field.String  // 外部调用生成极速提款单API白名单，多个ip使用英文逗号分隔
	Sort                             field.Int64   // 排序
	RechargeRemark                   field.String  // 充值重要提示
	ReserveWithdrawalConfig          field.String  // 预约取款配置
	ReserveWithdrawalIsOpen          field.Int64   // 预约取款配置开关状态
	PayFastTgMessageTime             field.Int64   // tg 推送
	FreezeLimitMessage               field.String  // 获取次数超限被冻结提示文案
	NoRechargeOrderMessage           field.String  // 所获取金额通道无充值订单提示文案
	PendingOrderMessage              field.String  // 上一笔款项未处理完成提示文案
	MatchingWithdrawalSuccessMessage field.String  // 匹配取款单成功的弹窗内容

	fieldMap map[string]field.Expr
}

func (p payFastConfig) Table(newTableName string) *payFastConfig {
	p.payFastConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payFastConfig) As(alias string) *payFastConfig {
	p.payFastConfigDo.DO = *(p.payFastConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payFastConfig) updateTableName(table string) *payFastConfig {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.BankType = field.NewInt64(table, "bank_type")
	p.LockTime = field.NewInt64(table, "lock_time")
	p.PayLockTime = field.NewInt64(table, "pay_lock_time")
	p.MinMoney = field.NewFloat64(table, "min_money")
	p.MaxMoney = field.NewFloat64(table, "max_money")
	p.IsOpen = field.NewInt64(table, "is_open")
	p.ImgPath = field.NewString(table, "img_path")
	p.AdminName = field.NewString(table, "admin_name")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.VideoPath = field.NewString(table, "video_path")
	p.GiftMoneyRate = field.NewFloat64(table, "gift_money_rate")
	p.BankStatementPath = field.NewString(table, "bank_statement_path")
	p.FixedRange = field.NewString(table, "fixed_range")
	p.WithdrawMatchingNum = field.NewInt64(table, "withdraw_matching_num")
	p.RechargeLimitTime = field.NewInt64(table, "recharge_limit_time")
	p.RechargeFailTimes = field.NewInt64(table, "recharge_fail_times")
	p.RechargeLockTime = field.NewInt64(table, "recharge_lock_time")
	p.WithdrawAPIWhitelist = field.NewString(table, "withdraw_api_whitelist")
	p.Sort = field.NewInt64(table, "sort")
	p.RechargeRemark = field.NewString(table, "recharge_remark")
	p.ReserveWithdrawalConfig = field.NewString(table, "reserve_withdrawal_config")
	p.ReserveWithdrawalIsOpen = field.NewInt64(table, "reserve_withdrawal_is_open")
	p.PayFastTgMessageTime = field.NewInt64(table, "pay_fast_tg_message_time")
	p.FreezeLimitMessage = field.NewString(table, "freeze_limit_message")
	p.NoRechargeOrderMessage = field.NewString(table, "no_recharge_order_message")
	p.PendingOrderMessage = field.NewString(table, "pending_order_message")
	p.MatchingWithdrawalSuccessMessage = field.NewString(table, "matching_withdrawal_success_message")

	p.fillFieldMap()

	return p
}

func (p *payFastConfig) WithContext(ctx context.Context) IPayFastConfigDo {
	return p.payFastConfigDo.WithContext(ctx)
}

func (p payFastConfig) TableName() string { return p.payFastConfigDo.TableName() }

func (p payFastConfig) Alias() string { return p.payFastConfigDo.Alias() }

func (p payFastConfig) Columns(cols ...field.Expr) gen.Columns {
	return p.payFastConfigDo.Columns(cols...)
}

func (p *payFastConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payFastConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 29)
	p.fieldMap["id"] = p.ID
	p.fieldMap["bank_type"] = p.BankType
	p.fieldMap["lock_time"] = p.LockTime
	p.fieldMap["pay_lock_time"] = p.PayLockTime
	p.fieldMap["min_money"] = p.MinMoney
	p.fieldMap["max_money"] = p.MaxMoney
	p.fieldMap["is_open"] = p.IsOpen
	p.fieldMap["img_path"] = p.ImgPath
	p.fieldMap["admin_name"] = p.AdminName
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["video_path"] = p.VideoPath
	p.fieldMap["gift_money_rate"] = p.GiftMoneyRate
	p.fieldMap["bank_statement_path"] = p.BankStatementPath
	p.fieldMap["fixed_range"] = p.FixedRange
	p.fieldMap["withdraw_matching_num"] = p.WithdrawMatchingNum
	p.fieldMap["recharge_limit_time"] = p.RechargeLimitTime
	p.fieldMap["recharge_fail_times"] = p.RechargeFailTimes
	p.fieldMap["recharge_lock_time"] = p.RechargeLockTime
	p.fieldMap["withdraw_api_whitelist"] = p.WithdrawAPIWhitelist
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["recharge_remark"] = p.RechargeRemark
	p.fieldMap["reserve_withdrawal_config"] = p.ReserveWithdrawalConfig
	p.fieldMap["reserve_withdrawal_is_open"] = p.ReserveWithdrawalIsOpen
	p.fieldMap["pay_fast_tg_message_time"] = p.PayFastTgMessageTime
	p.fieldMap["freeze_limit_message"] = p.FreezeLimitMessage
	p.fieldMap["no_recharge_order_message"] = p.NoRechargeOrderMessage
	p.fieldMap["pending_order_message"] = p.PendingOrderMessage
	p.fieldMap["matching_withdrawal_success_message"] = p.MatchingWithdrawalSuccessMessage
}

func (p payFastConfig) clone(db *gorm.DB) payFastConfig {
	p.payFastConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payFastConfig) replaceDB(db *gorm.DB) payFastConfig {
	p.payFastConfigDo.ReplaceDB(db)
	return p
}

type payFastConfigDo struct{ gen.DO }

type IPayFastConfigDo interface {
	gen.SubQuery
	Debug() IPayFastConfigDo
	WithContext(ctx context.Context) IPayFastConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayFastConfigDo
	WriteDB() IPayFastConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayFastConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayFastConfigDo
	Not(conds ...gen.Condition) IPayFastConfigDo
	Or(conds ...gen.Condition) IPayFastConfigDo
	Select(conds ...field.Expr) IPayFastConfigDo
	Where(conds ...gen.Condition) IPayFastConfigDo
	Order(conds ...field.Expr) IPayFastConfigDo
	Distinct(cols ...field.Expr) IPayFastConfigDo
	Omit(cols ...field.Expr) IPayFastConfigDo
	Join(table schema.Tabler, on ...field.Expr) IPayFastConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayFastConfigDo
	Group(cols ...field.Expr) IPayFastConfigDo
	Having(conds ...gen.Condition) IPayFastConfigDo
	Limit(limit int) IPayFastConfigDo
	Offset(offset int) IPayFastConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastConfigDo
	Unscoped() IPayFastConfigDo
	Create(values ...*model.PayFastConfig) error
	CreateInBatches(values []*model.PayFastConfig, batchSize int) error
	Save(values ...*model.PayFastConfig) error
	First() (*model.PayFastConfig, error)
	Take() (*model.PayFastConfig, error)
	Last() (*model.PayFastConfig, error)
	Find() ([]*model.PayFastConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastConfig, err error)
	FindInBatches(result *[]*model.PayFastConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayFastConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayFastConfigDo
	Assign(attrs ...field.AssignExpr) IPayFastConfigDo
	Joins(fields ...field.RelationField) IPayFastConfigDo
	Preload(fields ...field.RelationField) IPayFastConfigDo
	FirstOrInit() (*model.PayFastConfig, error)
	FirstOrCreate() (*model.PayFastConfig, error)
	FindByPage(offset int, limit int) (result []*model.PayFastConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayFastConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payFastConfigDo) Debug() IPayFastConfigDo {
	return p.withDO(p.DO.Debug())
}

func (p payFastConfigDo) WithContext(ctx context.Context) IPayFastConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payFastConfigDo) ReadDB() IPayFastConfigDo {
	return p.Clauses(dbresolver.Read)
}

func (p payFastConfigDo) WriteDB() IPayFastConfigDo {
	return p.Clauses(dbresolver.Write)
}

func (p payFastConfigDo) Session(config *gorm.Session) IPayFastConfigDo {
	return p.withDO(p.DO.Session(config))
}

func (p payFastConfigDo) Clauses(conds ...clause.Expression) IPayFastConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payFastConfigDo) Returning(value interface{}, columns ...string) IPayFastConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payFastConfigDo) Not(conds ...gen.Condition) IPayFastConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payFastConfigDo) Or(conds ...gen.Condition) IPayFastConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payFastConfigDo) Select(conds ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payFastConfigDo) Where(conds ...gen.Condition) IPayFastConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payFastConfigDo) Order(conds ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payFastConfigDo) Distinct(cols ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payFastConfigDo) Omit(cols ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payFastConfigDo) Join(table schema.Tabler, on ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payFastConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payFastConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payFastConfigDo) Group(cols ...field.Expr) IPayFastConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payFastConfigDo) Having(conds ...gen.Condition) IPayFastConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payFastConfigDo) Limit(limit int) IPayFastConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payFastConfigDo) Offset(offset int) IPayFastConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payFastConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayFastConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payFastConfigDo) Unscoped() IPayFastConfigDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payFastConfigDo) Create(values ...*model.PayFastConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payFastConfigDo) CreateInBatches(values []*model.PayFastConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payFastConfigDo) Save(values ...*model.PayFastConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payFastConfigDo) First() (*model.PayFastConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastConfig), nil
	}
}

func (p payFastConfigDo) Take() (*model.PayFastConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastConfig), nil
	}
}

func (p payFastConfigDo) Last() (*model.PayFastConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastConfig), nil
	}
}

func (p payFastConfigDo) Find() ([]*model.PayFastConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayFastConfig), err
}

func (p payFastConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayFastConfig, err error) {
	buf := make([]*model.PayFastConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payFastConfigDo) FindInBatches(result *[]*model.PayFastConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payFastConfigDo) Attrs(attrs ...field.AssignExpr) IPayFastConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payFastConfigDo) Assign(attrs ...field.AssignExpr) IPayFastConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payFastConfigDo) Joins(fields ...field.RelationField) IPayFastConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payFastConfigDo) Preload(fields ...field.RelationField) IPayFastConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payFastConfigDo) FirstOrInit() (*model.PayFastConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastConfig), nil
	}
}

func (p payFastConfigDo) FirstOrCreate() (*model.PayFastConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayFastConfig), nil
	}
}

func (p payFastConfigDo) FindByPage(offset int, limit int) (result []*model.PayFastConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payFastConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payFastConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payFastConfigDo) Delete(models ...*model.PayFastConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payFastConfigDo) withDO(do gen.Dao) *payFastConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
