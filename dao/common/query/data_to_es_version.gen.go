// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newDataToEsVersion(db *gorm.DB, opts ...gen.DOOption) dataToEsVersion {
	_dataToEsVersion := dataToEsVersion{}

	_dataToEsVersion.dataToEsVersionDo.UseDB(db, opts...)
	_dataToEsVersion.dataToEsVersionDo.UseModel(&model.DataToEsVersion{})

	tableName := _dataToEsVersion.dataToEsVersionDo.TableName()
	_dataToEsVersion.ALL = field.NewAsterisk(tableName)
	_dataToEsVersion.ID = field.NewInt64(tableName, "id")
	_dataToEsVersion.ModelName = field.NewString(tableName, "model_name")
	_dataToEsVersion.LastSyncID = field.NewInt64(tableName, "last_sync_id")
	_dataToEsVersion.CreatedAt = field.NewField(tableName, "created_at")
	_dataToEsVersion.UpdatedAt = field.NewField(tableName, "updated_at")

	_dataToEsVersion.fillFieldMap()

	return _dataToEsVersion
}

// dataToEsVersion DB数据同步ES最后id记录表
type dataToEsVersion struct {
	dataToEsVersionDo dataToEsVersionDo

	ALL        field.Asterisk
	ID         field.Int64
	ModelName  field.String // Models文件名
	LastSyncID field.Int64  // 最后一次同步id
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (d dataToEsVersion) Table(newTableName string) *dataToEsVersion {
	d.dataToEsVersionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataToEsVersion) As(alias string) *dataToEsVersion {
	d.dataToEsVersionDo.DO = *(d.dataToEsVersionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataToEsVersion) updateTableName(table string) *dataToEsVersion {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.ModelName = field.NewString(table, "model_name")
	d.LastSyncID = field.NewInt64(table, "last_sync_id")
	d.CreatedAt = field.NewField(table, "created_at")
	d.UpdatedAt = field.NewField(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dataToEsVersion) WithContext(ctx context.Context) IDataToEsVersionDo {
	return d.dataToEsVersionDo.WithContext(ctx)
}

func (d dataToEsVersion) TableName() string { return d.dataToEsVersionDo.TableName() }

func (d dataToEsVersion) Alias() string { return d.dataToEsVersionDo.Alias() }

func (d dataToEsVersion) Columns(cols ...field.Expr) gen.Columns {
	return d.dataToEsVersionDo.Columns(cols...)
}

func (d *dataToEsVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataToEsVersion) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["model_name"] = d.ModelName
	d.fieldMap["last_sync_id"] = d.LastSyncID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dataToEsVersion) clone(db *gorm.DB) dataToEsVersion {
	d.dataToEsVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataToEsVersion) replaceDB(db *gorm.DB) dataToEsVersion {
	d.dataToEsVersionDo.ReplaceDB(db)
	return d
}

type dataToEsVersionDo struct{ gen.DO }

type IDataToEsVersionDo interface {
	gen.SubQuery
	Debug() IDataToEsVersionDo
	WithContext(ctx context.Context) IDataToEsVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataToEsVersionDo
	WriteDB() IDataToEsVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataToEsVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataToEsVersionDo
	Not(conds ...gen.Condition) IDataToEsVersionDo
	Or(conds ...gen.Condition) IDataToEsVersionDo
	Select(conds ...field.Expr) IDataToEsVersionDo
	Where(conds ...gen.Condition) IDataToEsVersionDo
	Order(conds ...field.Expr) IDataToEsVersionDo
	Distinct(cols ...field.Expr) IDataToEsVersionDo
	Omit(cols ...field.Expr) IDataToEsVersionDo
	Join(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo
	Group(cols ...field.Expr) IDataToEsVersionDo
	Having(conds ...gen.Condition) IDataToEsVersionDo
	Limit(limit int) IDataToEsVersionDo
	Offset(offset int) IDataToEsVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataToEsVersionDo
	Unscoped() IDataToEsVersionDo
	Create(values ...*model.DataToEsVersion) error
	CreateInBatches(values []*model.DataToEsVersion, batchSize int) error
	Save(values ...*model.DataToEsVersion) error
	First() (*model.DataToEsVersion, error)
	Take() (*model.DataToEsVersion, error)
	Last() (*model.DataToEsVersion, error)
	Find() ([]*model.DataToEsVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataToEsVersion, err error)
	FindInBatches(result *[]*model.DataToEsVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataToEsVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataToEsVersionDo
	Assign(attrs ...field.AssignExpr) IDataToEsVersionDo
	Joins(fields ...field.RelationField) IDataToEsVersionDo
	Preload(fields ...field.RelationField) IDataToEsVersionDo
	FirstOrInit() (*model.DataToEsVersion, error)
	FirstOrCreate() (*model.DataToEsVersion, error)
	FindByPage(offset int, limit int) (result []*model.DataToEsVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataToEsVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataToEsVersionDo) Debug() IDataToEsVersionDo {
	return d.withDO(d.DO.Debug())
}

func (d dataToEsVersionDo) WithContext(ctx context.Context) IDataToEsVersionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataToEsVersionDo) ReadDB() IDataToEsVersionDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataToEsVersionDo) WriteDB() IDataToEsVersionDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataToEsVersionDo) Session(config *gorm.Session) IDataToEsVersionDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataToEsVersionDo) Clauses(conds ...clause.Expression) IDataToEsVersionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataToEsVersionDo) Returning(value interface{}, columns ...string) IDataToEsVersionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataToEsVersionDo) Not(conds ...gen.Condition) IDataToEsVersionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataToEsVersionDo) Or(conds ...gen.Condition) IDataToEsVersionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataToEsVersionDo) Select(conds ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataToEsVersionDo) Where(conds ...gen.Condition) IDataToEsVersionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataToEsVersionDo) Order(conds ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataToEsVersionDo) Distinct(cols ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataToEsVersionDo) Omit(cols ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataToEsVersionDo) Join(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataToEsVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataToEsVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataToEsVersionDo) Group(cols ...field.Expr) IDataToEsVersionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataToEsVersionDo) Having(conds ...gen.Condition) IDataToEsVersionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataToEsVersionDo) Limit(limit int) IDataToEsVersionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataToEsVersionDo) Offset(offset int) IDataToEsVersionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataToEsVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataToEsVersionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataToEsVersionDo) Unscoped() IDataToEsVersionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataToEsVersionDo) Create(values ...*model.DataToEsVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataToEsVersionDo) CreateInBatches(values []*model.DataToEsVersion, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataToEsVersionDo) Save(values ...*model.DataToEsVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataToEsVersionDo) First() (*model.DataToEsVersion, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataToEsVersion), nil
	}
}

func (d dataToEsVersionDo) Take() (*model.DataToEsVersion, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataToEsVersion), nil
	}
}

func (d dataToEsVersionDo) Last() (*model.DataToEsVersion, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataToEsVersion), nil
	}
}

func (d dataToEsVersionDo) Find() ([]*model.DataToEsVersion, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataToEsVersion), err
}

func (d dataToEsVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataToEsVersion, err error) {
	buf := make([]*model.DataToEsVersion, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataToEsVersionDo) FindInBatches(result *[]*model.DataToEsVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataToEsVersionDo) Attrs(attrs ...field.AssignExpr) IDataToEsVersionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataToEsVersionDo) Assign(attrs ...field.AssignExpr) IDataToEsVersionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataToEsVersionDo) Joins(fields ...field.RelationField) IDataToEsVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataToEsVersionDo) Preload(fields ...field.RelationField) IDataToEsVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataToEsVersionDo) FirstOrInit() (*model.DataToEsVersion, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataToEsVersion), nil
	}
}

func (d dataToEsVersionDo) FirstOrCreate() (*model.DataToEsVersion, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataToEsVersion), nil
	}
}

func (d dataToEsVersionDo) FindByPage(offset int, limit int) (result []*model.DataToEsVersion, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataToEsVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataToEsVersionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataToEsVersionDo) Delete(models ...*model.DataToEsVersion) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataToEsVersionDo) withDO(do gen.Dao) *dataToEsVersionDo {
	d.DO = *do.(*gen.DO)
	return d
}
