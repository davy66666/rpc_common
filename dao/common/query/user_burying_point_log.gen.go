// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserBuryingPointLog(db *gorm.DB, opts ...gen.DOOption) userBuryingPointLog {
	_userBuryingPointLog := userBuryingPointLog{}

	_userBuryingPointLog.userBuryingPointLogDo.UseDB(db, opts...)
	_userBuryingPointLog.userBuryingPointLogDo.UseModel(&model.UserBuryingPointLog{})

	tableName := _userBuryingPointLog.userBuryingPointLogDo.TableName()
	_userBuryingPointLog.ALL = field.NewAsterisk(tableName)
	_userBuryingPointLog.ID = field.NewInt64(tableName, "id")
	_userBuryingPointLog.UserID = field.NewInt64(tableName, "user_id")
	_userBuryingPointLog.PositionCode = field.NewString(tableName, "position_code")
	_userBuryingPointLog.PositionName = field.NewString(tableName, "position_name")
	_userBuryingPointLog.Plat = field.NewInt64(tableName, "plat")
	_userBuryingPointLog.LastActiveTime = field.NewField(tableName, "last_active_time")
	_userBuryingPointLog.CurrentActiveDuration = field.NewInt64(tableName, "current_active_duration")
	_userBuryingPointLog.CreatedAt = field.NewField(tableName, "created_at")
	_userBuryingPointLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userBuryingPointLog.fillFieldMap()

	return _userBuryingPointLog
}

// userBuryingPointLog 用户埋点记录表
type userBuryingPointLog struct {
	userBuryingPointLogDo userBuryingPointLogDo

	ALL                   field.Asterisk
	ID                    field.Int64
	UserID                field.Int64  // 用户id
	PositionCode          field.String // 埋点code
	PositionName          field.String // 埋点中文标识
	Plat                  field.Int64  // 当前登录平台
	LastActiveTime        field.Field  // 上次点击时间
	CurrentActiveDuration field.Int64  // 相较与上次点击，间隔时长
	CreatedAt             field.Field  // 创建时间
	UpdatedAt             field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (u userBuryingPointLog) Table(newTableName string) *userBuryingPointLog {
	u.userBuryingPointLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBuryingPointLog) As(alias string) *userBuryingPointLog {
	u.userBuryingPointLogDo.DO = *(u.userBuryingPointLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBuryingPointLog) updateTableName(table string) *userBuryingPointLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.PositionCode = field.NewString(table, "position_code")
	u.PositionName = field.NewString(table, "position_name")
	u.Plat = field.NewInt64(table, "plat")
	u.LastActiveTime = field.NewField(table, "last_active_time")
	u.CurrentActiveDuration = field.NewInt64(table, "current_active_duration")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userBuryingPointLog) WithContext(ctx context.Context) IUserBuryingPointLogDo {
	return u.userBuryingPointLogDo.WithContext(ctx)
}

func (u userBuryingPointLog) TableName() string { return u.userBuryingPointLogDo.TableName() }

func (u userBuryingPointLog) Alias() string { return u.userBuryingPointLogDo.Alias() }

func (u userBuryingPointLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userBuryingPointLogDo.Columns(cols...)
}

func (u *userBuryingPointLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBuryingPointLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["position_code"] = u.PositionCode
	u.fieldMap["position_name"] = u.PositionName
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["last_active_time"] = u.LastActiveTime
	u.fieldMap["current_active_duration"] = u.CurrentActiveDuration
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userBuryingPointLog) clone(db *gorm.DB) userBuryingPointLog {
	u.userBuryingPointLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBuryingPointLog) replaceDB(db *gorm.DB) userBuryingPointLog {
	u.userBuryingPointLogDo.ReplaceDB(db)
	return u
}

type userBuryingPointLogDo struct{ gen.DO }

type IUserBuryingPointLogDo interface {
	gen.SubQuery
	Debug() IUserBuryingPointLogDo
	WithContext(ctx context.Context) IUserBuryingPointLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBuryingPointLogDo
	WriteDB() IUserBuryingPointLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBuryingPointLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBuryingPointLogDo
	Not(conds ...gen.Condition) IUserBuryingPointLogDo
	Or(conds ...gen.Condition) IUserBuryingPointLogDo
	Select(conds ...field.Expr) IUserBuryingPointLogDo
	Where(conds ...gen.Condition) IUserBuryingPointLogDo
	Order(conds ...field.Expr) IUserBuryingPointLogDo
	Distinct(cols ...field.Expr) IUserBuryingPointLogDo
	Omit(cols ...field.Expr) IUserBuryingPointLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo
	Group(cols ...field.Expr) IUserBuryingPointLogDo
	Having(conds ...gen.Condition) IUserBuryingPointLogDo
	Limit(limit int) IUserBuryingPointLogDo
	Offset(offset int) IUserBuryingPointLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBuryingPointLogDo
	Unscoped() IUserBuryingPointLogDo
	Create(values ...*model.UserBuryingPointLog) error
	CreateInBatches(values []*model.UserBuryingPointLog, batchSize int) error
	Save(values ...*model.UserBuryingPointLog) error
	First() (*model.UserBuryingPointLog, error)
	Take() (*model.UserBuryingPointLog, error)
	Last() (*model.UserBuryingPointLog, error)
	Find() ([]*model.UserBuryingPointLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBuryingPointLog, err error)
	FindInBatches(result *[]*model.UserBuryingPointLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBuryingPointLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBuryingPointLogDo
	Assign(attrs ...field.AssignExpr) IUserBuryingPointLogDo
	Joins(fields ...field.RelationField) IUserBuryingPointLogDo
	Preload(fields ...field.RelationField) IUserBuryingPointLogDo
	FirstOrInit() (*model.UserBuryingPointLog, error)
	FirstOrCreate() (*model.UserBuryingPointLog, error)
	FindByPage(offset int, limit int) (result []*model.UserBuryingPointLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBuryingPointLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBuryingPointLogDo) Debug() IUserBuryingPointLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userBuryingPointLogDo) WithContext(ctx context.Context) IUserBuryingPointLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBuryingPointLogDo) ReadDB() IUserBuryingPointLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBuryingPointLogDo) WriteDB() IUserBuryingPointLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBuryingPointLogDo) Session(config *gorm.Session) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBuryingPointLogDo) Clauses(conds ...clause.Expression) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBuryingPointLogDo) Returning(value interface{}, columns ...string) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBuryingPointLogDo) Not(conds ...gen.Condition) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBuryingPointLogDo) Or(conds ...gen.Condition) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBuryingPointLogDo) Select(conds ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBuryingPointLogDo) Where(conds ...gen.Condition) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBuryingPointLogDo) Order(conds ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBuryingPointLogDo) Distinct(cols ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBuryingPointLogDo) Omit(cols ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBuryingPointLogDo) Join(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBuryingPointLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBuryingPointLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBuryingPointLogDo) Group(cols ...field.Expr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBuryingPointLogDo) Having(conds ...gen.Condition) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBuryingPointLogDo) Limit(limit int) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBuryingPointLogDo) Offset(offset int) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBuryingPointLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBuryingPointLogDo) Unscoped() IUserBuryingPointLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBuryingPointLogDo) Create(values ...*model.UserBuryingPointLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBuryingPointLogDo) CreateInBatches(values []*model.UserBuryingPointLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBuryingPointLogDo) Save(values ...*model.UserBuryingPointLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBuryingPointLogDo) First() (*model.UserBuryingPointLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBuryingPointLog), nil
	}
}

func (u userBuryingPointLogDo) Take() (*model.UserBuryingPointLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBuryingPointLog), nil
	}
}

func (u userBuryingPointLogDo) Last() (*model.UserBuryingPointLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBuryingPointLog), nil
	}
}

func (u userBuryingPointLogDo) Find() ([]*model.UserBuryingPointLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBuryingPointLog), err
}

func (u userBuryingPointLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBuryingPointLog, err error) {
	buf := make([]*model.UserBuryingPointLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBuryingPointLogDo) FindInBatches(result *[]*model.UserBuryingPointLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBuryingPointLogDo) Attrs(attrs ...field.AssignExpr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBuryingPointLogDo) Assign(attrs ...field.AssignExpr) IUserBuryingPointLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBuryingPointLogDo) Joins(fields ...field.RelationField) IUserBuryingPointLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBuryingPointLogDo) Preload(fields ...field.RelationField) IUserBuryingPointLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBuryingPointLogDo) FirstOrInit() (*model.UserBuryingPointLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBuryingPointLog), nil
	}
}

func (u userBuryingPointLogDo) FirstOrCreate() (*model.UserBuryingPointLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBuryingPointLog), nil
	}
}

func (u userBuryingPointLogDo) FindByPage(offset int, limit int) (result []*model.UserBuryingPointLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBuryingPointLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBuryingPointLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBuryingPointLogDo) Delete(models ...*model.UserBuryingPointLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBuryingPointLogDo) withDO(do gen.Dao) *userBuryingPointLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
