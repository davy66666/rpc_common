// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRiskListLog(db *gorm.DB, opts ...gen.DOOption) userRiskListLog {
	_userRiskListLog := userRiskListLog{}

	_userRiskListLog.userRiskListLogDo.UseDB(db, opts...)
	_userRiskListLog.userRiskListLogDo.UseModel(&model.UserRiskListLog{})

	tableName := _userRiskListLog.userRiskListLogDo.TableName()
	_userRiskListLog.ALL = field.NewAsterisk(tableName)
	_userRiskListLog.ID = field.NewInt64(tableName, "id")
	_userRiskListLog.UserID = field.NewInt64(tableName, "user_id")
	_userRiskListLog.Type = field.NewInt64(tableName, "type")
	_userRiskListLog.SystemWarning = field.NewInt64(tableName, "system_warning")
	_userRiskListLog.CreatedAt = field.NewField(tableName, "created_at")
	_userRiskListLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRiskListLog.fillFieldMap()

	return _userRiskListLog
}

// userRiskListLog 风险名单库记录
type userRiskListLog struct {
	userRiskListLogDo userRiskListLogDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64
	Type          field.Int64 // 记录： 1添加 0删除
	SystemWarning field.Int64 // 系统警告
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (u userRiskListLog) Table(newTableName string) *userRiskListLog {
	u.userRiskListLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRiskListLog) As(alias string) *userRiskListLog {
	u.userRiskListLogDo.DO = *(u.userRiskListLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRiskListLog) updateTableName(table string) *userRiskListLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Type = field.NewInt64(table, "type")
	u.SystemWarning = field.NewInt64(table, "system_warning")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRiskListLog) WithContext(ctx context.Context) IUserRiskListLogDo {
	return u.userRiskListLogDo.WithContext(ctx)
}

func (u userRiskListLog) TableName() string { return u.userRiskListLogDo.TableName() }

func (u userRiskListLog) Alias() string { return u.userRiskListLogDo.Alias() }

func (u userRiskListLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userRiskListLogDo.Columns(cols...)
}

func (u *userRiskListLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRiskListLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["type"] = u.Type
	u.fieldMap["system_warning"] = u.SystemWarning
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRiskListLog) clone(db *gorm.DB) userRiskListLog {
	u.userRiskListLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRiskListLog) replaceDB(db *gorm.DB) userRiskListLog {
	u.userRiskListLogDo.ReplaceDB(db)
	return u
}

type userRiskListLogDo struct{ gen.DO }

type IUserRiskListLogDo interface {
	gen.SubQuery
	Debug() IUserRiskListLogDo
	WithContext(ctx context.Context) IUserRiskListLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRiskListLogDo
	WriteDB() IUserRiskListLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRiskListLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRiskListLogDo
	Not(conds ...gen.Condition) IUserRiskListLogDo
	Or(conds ...gen.Condition) IUserRiskListLogDo
	Select(conds ...field.Expr) IUserRiskListLogDo
	Where(conds ...gen.Condition) IUserRiskListLogDo
	Order(conds ...field.Expr) IUserRiskListLogDo
	Distinct(cols ...field.Expr) IUserRiskListLogDo
	Omit(cols ...field.Expr) IUserRiskListLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo
	Group(cols ...field.Expr) IUserRiskListLogDo
	Having(conds ...gen.Condition) IUserRiskListLogDo
	Limit(limit int) IUserRiskListLogDo
	Offset(offset int) IUserRiskListLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskListLogDo
	Unscoped() IUserRiskListLogDo
	Create(values ...*model.UserRiskListLog) error
	CreateInBatches(values []*model.UserRiskListLog, batchSize int) error
	Save(values ...*model.UserRiskListLog) error
	First() (*model.UserRiskListLog, error)
	Take() (*model.UserRiskListLog, error)
	Last() (*model.UserRiskListLog, error)
	Find() ([]*model.UserRiskListLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskListLog, err error)
	FindInBatches(result *[]*model.UserRiskListLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRiskListLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRiskListLogDo
	Assign(attrs ...field.AssignExpr) IUserRiskListLogDo
	Joins(fields ...field.RelationField) IUserRiskListLogDo
	Preload(fields ...field.RelationField) IUserRiskListLogDo
	FirstOrInit() (*model.UserRiskListLog, error)
	FirstOrCreate() (*model.UserRiskListLog, error)
	FindByPage(offset int, limit int) (result []*model.UserRiskListLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRiskListLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRiskListLogDo) Debug() IUserRiskListLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userRiskListLogDo) WithContext(ctx context.Context) IUserRiskListLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRiskListLogDo) ReadDB() IUserRiskListLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRiskListLogDo) WriteDB() IUserRiskListLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRiskListLogDo) Session(config *gorm.Session) IUserRiskListLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRiskListLogDo) Clauses(conds ...clause.Expression) IUserRiskListLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRiskListLogDo) Returning(value interface{}, columns ...string) IUserRiskListLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRiskListLogDo) Not(conds ...gen.Condition) IUserRiskListLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRiskListLogDo) Or(conds ...gen.Condition) IUserRiskListLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRiskListLogDo) Select(conds ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRiskListLogDo) Where(conds ...gen.Condition) IUserRiskListLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRiskListLogDo) Order(conds ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRiskListLogDo) Distinct(cols ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRiskListLogDo) Omit(cols ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRiskListLogDo) Join(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRiskListLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRiskListLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRiskListLogDo) Group(cols ...field.Expr) IUserRiskListLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRiskListLogDo) Having(conds ...gen.Condition) IUserRiskListLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRiskListLogDo) Limit(limit int) IUserRiskListLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRiskListLogDo) Offset(offset int) IUserRiskListLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRiskListLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskListLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRiskListLogDo) Unscoped() IUserRiskListLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRiskListLogDo) Create(values ...*model.UserRiskListLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRiskListLogDo) CreateInBatches(values []*model.UserRiskListLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRiskListLogDo) Save(values ...*model.UserRiskListLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRiskListLogDo) First() (*model.UserRiskListLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskListLog), nil
	}
}

func (u userRiskListLogDo) Take() (*model.UserRiskListLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskListLog), nil
	}
}

func (u userRiskListLogDo) Last() (*model.UserRiskListLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskListLog), nil
	}
}

func (u userRiskListLogDo) Find() ([]*model.UserRiskListLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRiskListLog), err
}

func (u userRiskListLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskListLog, err error) {
	buf := make([]*model.UserRiskListLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRiskListLogDo) FindInBatches(result *[]*model.UserRiskListLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRiskListLogDo) Attrs(attrs ...field.AssignExpr) IUserRiskListLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRiskListLogDo) Assign(attrs ...field.AssignExpr) IUserRiskListLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRiskListLogDo) Joins(fields ...field.RelationField) IUserRiskListLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRiskListLogDo) Preload(fields ...field.RelationField) IUserRiskListLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRiskListLogDo) FirstOrInit() (*model.UserRiskListLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskListLog), nil
	}
}

func (u userRiskListLogDo) FirstOrCreate() (*model.UserRiskListLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskListLog), nil
	}
}

func (u userRiskListLogDo) FindByPage(offset int, limit int) (result []*model.UserRiskListLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRiskListLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRiskListLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRiskListLogDo) Delete(models ...*model.UserRiskListLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRiskListLogDo) withDO(do gen.Dao) *userRiskListLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
