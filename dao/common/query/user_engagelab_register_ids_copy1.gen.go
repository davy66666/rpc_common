// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserEngagelabRegisterIdsCopy1(db *gorm.DB, opts ...gen.DOOption) userEngagelabRegisterIdsCopy1 {
	_userEngagelabRegisterIdsCopy1 := userEngagelabRegisterIdsCopy1{}

	_userEngagelabRegisterIdsCopy1.userEngagelabRegisterIdsCopy1Do.UseDB(db, opts...)
	_userEngagelabRegisterIdsCopy1.userEngagelabRegisterIdsCopy1Do.UseModel(&model.UserEngagelabRegisterIdsCopy1{})

	tableName := _userEngagelabRegisterIdsCopy1.userEngagelabRegisterIdsCopy1Do.TableName()
	_userEngagelabRegisterIdsCopy1.ALL = field.NewAsterisk(tableName)
	_userEngagelabRegisterIdsCopy1.ID = field.NewInt64(tableName, "id")
	_userEngagelabRegisterIdsCopy1.UserID = field.NewInt64(tableName, "user_id")
	_userEngagelabRegisterIdsCopy1.Username = field.NewString(tableName, "username")
	_userEngagelabRegisterIdsCopy1.Plat = field.NewInt64(tableName, "plat")
	_userEngagelabRegisterIdsCopy1.RegistrationID = field.NewString(tableName, "registration_id")
	_userEngagelabRegisterIdsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_userEngagelabRegisterIdsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_userEngagelabRegisterIdsCopy1.Host = field.NewString(tableName, "host")

	_userEngagelabRegisterIdsCopy1.fillFieldMap()

	return _userEngagelabRegisterIdsCopy1
}

type userEngagelabRegisterIdsCopy1 struct {
	userEngagelabRegisterIdsCopy1Do userEngagelabRegisterIdsCopy1Do

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64
	Username       field.String
	Plat           field.Int64  // 终端设备
	RegistrationID field.String // 注册id
	CreatedAt      field.Field
	UpdatedAt      field.Field
	Host           field.String // 域名

	fieldMap map[string]field.Expr
}

func (u userEngagelabRegisterIdsCopy1) Table(newTableName string) *userEngagelabRegisterIdsCopy1 {
	u.userEngagelabRegisterIdsCopy1Do.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEngagelabRegisterIdsCopy1) As(alias string) *userEngagelabRegisterIdsCopy1 {
	u.userEngagelabRegisterIdsCopy1Do.DO = *(u.userEngagelabRegisterIdsCopy1Do.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEngagelabRegisterIdsCopy1) updateTableName(table string) *userEngagelabRegisterIdsCopy1 {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.Plat = field.NewInt64(table, "plat")
	u.RegistrationID = field.NewString(table, "registration_id")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.Host = field.NewString(table, "host")

	u.fillFieldMap()

	return u
}

func (u *userEngagelabRegisterIdsCopy1) WithContext(ctx context.Context) IUserEngagelabRegisterIdsCopy1Do {
	return u.userEngagelabRegisterIdsCopy1Do.WithContext(ctx)
}

func (u userEngagelabRegisterIdsCopy1) TableName() string {
	return u.userEngagelabRegisterIdsCopy1Do.TableName()
}

func (u userEngagelabRegisterIdsCopy1) Alias() string {
	return u.userEngagelabRegisterIdsCopy1Do.Alias()
}

func (u userEngagelabRegisterIdsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return u.userEngagelabRegisterIdsCopy1Do.Columns(cols...)
}

func (u *userEngagelabRegisterIdsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEngagelabRegisterIdsCopy1) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["registration_id"] = u.RegistrationID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["host"] = u.Host
}

func (u userEngagelabRegisterIdsCopy1) clone(db *gorm.DB) userEngagelabRegisterIdsCopy1 {
	u.userEngagelabRegisterIdsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEngagelabRegisterIdsCopy1) replaceDB(db *gorm.DB) userEngagelabRegisterIdsCopy1 {
	u.userEngagelabRegisterIdsCopy1Do.ReplaceDB(db)
	return u
}

type userEngagelabRegisterIdsCopy1Do struct{ gen.DO }

type IUserEngagelabRegisterIdsCopy1Do interface {
	gen.SubQuery
	Debug() IUserEngagelabRegisterIdsCopy1Do
	WithContext(ctx context.Context) IUserEngagelabRegisterIdsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEngagelabRegisterIdsCopy1Do
	WriteDB() IUserEngagelabRegisterIdsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEngagelabRegisterIdsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEngagelabRegisterIdsCopy1Do
	Not(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do
	Or(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do
	Select(conds ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Where(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do
	Order(conds ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Distinct(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Omit(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Group(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do
	Having(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do
	Limit(limit int) IUserEngagelabRegisterIdsCopy1Do
	Offset(offset int) IUserEngagelabRegisterIdsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEngagelabRegisterIdsCopy1Do
	Unscoped() IUserEngagelabRegisterIdsCopy1Do
	Create(values ...*model.UserEngagelabRegisterIdsCopy1) error
	CreateInBatches(values []*model.UserEngagelabRegisterIdsCopy1, batchSize int) error
	Save(values ...*model.UserEngagelabRegisterIdsCopy1) error
	First() (*model.UserEngagelabRegisterIdsCopy1, error)
	Take() (*model.UserEngagelabRegisterIdsCopy1, error)
	Last() (*model.UserEngagelabRegisterIdsCopy1, error)
	Find() ([]*model.UserEngagelabRegisterIdsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEngagelabRegisterIdsCopy1, err error)
	FindInBatches(result *[]*model.UserEngagelabRegisterIdsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEngagelabRegisterIdsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEngagelabRegisterIdsCopy1Do
	Assign(attrs ...field.AssignExpr) IUserEngagelabRegisterIdsCopy1Do
	Joins(fields ...field.RelationField) IUserEngagelabRegisterIdsCopy1Do
	Preload(fields ...field.RelationField) IUserEngagelabRegisterIdsCopy1Do
	FirstOrInit() (*model.UserEngagelabRegisterIdsCopy1, error)
	FirstOrCreate() (*model.UserEngagelabRegisterIdsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.UserEngagelabRegisterIdsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEngagelabRegisterIdsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEngagelabRegisterIdsCopy1Do) Debug() IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Debug())
}

func (u userEngagelabRegisterIdsCopy1Do) WithContext(ctx context.Context) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEngagelabRegisterIdsCopy1Do) ReadDB() IUserEngagelabRegisterIdsCopy1Do {
	return u.Clauses(dbresolver.Read)
}

func (u userEngagelabRegisterIdsCopy1Do) WriteDB() IUserEngagelabRegisterIdsCopy1Do {
	return u.Clauses(dbresolver.Write)
}

func (u userEngagelabRegisterIdsCopy1Do) Session(config *gorm.Session) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Session(config))
}

func (u userEngagelabRegisterIdsCopy1Do) Clauses(conds ...clause.Expression) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Returning(value interface{}, columns ...string) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEngagelabRegisterIdsCopy1Do) Not(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Or(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Select(conds ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Where(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Order(conds ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Distinct(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEngagelabRegisterIdsCopy1Do) Omit(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEngagelabRegisterIdsCopy1Do) Join(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEngagelabRegisterIdsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEngagelabRegisterIdsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEngagelabRegisterIdsCopy1Do) Group(cols ...field.Expr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEngagelabRegisterIdsCopy1Do) Having(conds ...gen.Condition) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEngagelabRegisterIdsCopy1Do) Limit(limit int) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEngagelabRegisterIdsCopy1Do) Offset(offset int) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEngagelabRegisterIdsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEngagelabRegisterIdsCopy1Do) Unscoped() IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Unscoped())
}

func (u userEngagelabRegisterIdsCopy1Do) Create(values ...*model.UserEngagelabRegisterIdsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEngagelabRegisterIdsCopy1Do) CreateInBatches(values []*model.UserEngagelabRegisterIdsCopy1, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEngagelabRegisterIdsCopy1Do) Save(values ...*model.UserEngagelabRegisterIdsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEngagelabRegisterIdsCopy1Do) First() (*model.UserEngagelabRegisterIdsCopy1, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterIdsCopy1), nil
	}
}

func (u userEngagelabRegisterIdsCopy1Do) Take() (*model.UserEngagelabRegisterIdsCopy1, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterIdsCopy1), nil
	}
}

func (u userEngagelabRegisterIdsCopy1Do) Last() (*model.UserEngagelabRegisterIdsCopy1, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterIdsCopy1), nil
	}
}

func (u userEngagelabRegisterIdsCopy1Do) Find() ([]*model.UserEngagelabRegisterIdsCopy1, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEngagelabRegisterIdsCopy1), err
}

func (u userEngagelabRegisterIdsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEngagelabRegisterIdsCopy1, err error) {
	buf := make([]*model.UserEngagelabRegisterIdsCopy1, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEngagelabRegisterIdsCopy1Do) FindInBatches(result *[]*model.UserEngagelabRegisterIdsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEngagelabRegisterIdsCopy1Do) Attrs(attrs ...field.AssignExpr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEngagelabRegisterIdsCopy1Do) Assign(attrs ...field.AssignExpr) IUserEngagelabRegisterIdsCopy1Do {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEngagelabRegisterIdsCopy1Do) Joins(fields ...field.RelationField) IUserEngagelabRegisterIdsCopy1Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEngagelabRegisterIdsCopy1Do) Preload(fields ...field.RelationField) IUserEngagelabRegisterIdsCopy1Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEngagelabRegisterIdsCopy1Do) FirstOrInit() (*model.UserEngagelabRegisterIdsCopy1, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterIdsCopy1), nil
	}
}

func (u userEngagelabRegisterIdsCopy1Do) FirstOrCreate() (*model.UserEngagelabRegisterIdsCopy1, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterIdsCopy1), nil
	}
}

func (u userEngagelabRegisterIdsCopy1Do) FindByPage(offset int, limit int) (result []*model.UserEngagelabRegisterIdsCopy1, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEngagelabRegisterIdsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEngagelabRegisterIdsCopy1Do) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEngagelabRegisterIdsCopy1Do) Delete(models ...*model.UserEngagelabRegisterIdsCopy1) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEngagelabRegisterIdsCopy1Do) withDO(do gen.Dao) *userEngagelabRegisterIdsCopy1Do {
	u.DO = *do.(*gen.DO)
	return u
}
