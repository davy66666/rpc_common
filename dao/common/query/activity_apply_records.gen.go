// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityApplyRecord(db *gorm.DB, opts ...gen.DOOption) activityApplyRecord {
	_activityApplyRecord := activityApplyRecord{}

	_activityApplyRecord.activityApplyRecordDo.UseDB(db, opts...)
	_activityApplyRecord.activityApplyRecordDo.UseModel(&model.ActivityApplyRecord{})

	tableName := _activityApplyRecord.activityApplyRecordDo.TableName()
	_activityApplyRecord.ALL = field.NewAsterisk(tableName)
	_activityApplyRecord.ID = field.NewInt64(tableName, "id")
	_activityApplyRecord.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityApplyRecord.UID = field.NewInt64(tableName, "uid")
	_activityApplyRecord.Status = field.NewInt64(tableName, "status")
	_activityApplyRecord.IP = field.NewString(tableName, "ip")
	_activityApplyRecord.IPArea = field.NewString(tableName, "ip_area")
	_activityApplyRecord.BonusAmount = field.NewFloat64(tableName, "bonus_amount")
	_activityApplyRecord.Remark = field.NewString(tableName, "remark")
	_activityApplyRecord.AdminID = field.NewInt64(tableName, "admin_id")
	_activityApplyRecord.AdminName = field.NewString(tableName, "admin_name")
	_activityApplyRecord.CreatedAt = field.NewField(tableName, "created_at")
	_activityApplyRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityApplyRecord.fillFieldMap()

	return _activityApplyRecord
}

// activityApplyRecord 活动申请记录表
type activityApplyRecord struct {
	activityApplyRecordDo activityApplyRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	ActivityID  field.Int64   // 活动id
	UID         field.Int64   // 申请人id
	Status      field.Int64   // 1:审核中, 2:通过, 3:不通过
	IP          field.String  // IP
	IPArea      field.String  // ip地址
	BonusAmount field.Float64 // 优惠金额
	Remark      field.String  // 备注
	AdminID     field.Int64   // 管理员ID
	AdminName   field.String  // 管理员姓名
	CreatedAt   field.Field   // 创建时间
	UpdatedAt   field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityApplyRecord) Table(newTableName string) *activityApplyRecord {
	a.activityApplyRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityApplyRecord) As(alias string) *activityApplyRecord {
	a.activityApplyRecordDo.DO = *(a.activityApplyRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityApplyRecord) updateTableName(table string) *activityApplyRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.UID = field.NewInt64(table, "uid")
	a.Status = field.NewInt64(table, "status")
	a.IP = field.NewString(table, "ip")
	a.IPArea = field.NewString(table, "ip_area")
	a.BonusAmount = field.NewFloat64(table, "bonus_amount")
	a.Remark = field.NewString(table, "remark")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.AdminName = field.NewString(table, "admin_name")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityApplyRecord) WithContext(ctx context.Context) IActivityApplyRecordDo {
	return a.activityApplyRecordDo.WithContext(ctx)
}

func (a activityApplyRecord) TableName() string { return a.activityApplyRecordDo.TableName() }

func (a activityApplyRecord) Alias() string { return a.activityApplyRecordDo.Alias() }

func (a activityApplyRecord) Columns(cols ...field.Expr) gen.Columns {
	return a.activityApplyRecordDo.Columns(cols...)
}

func (a *activityApplyRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityApplyRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["status"] = a.Status
	a.fieldMap["ip"] = a.IP
	a.fieldMap["ip_area"] = a.IPArea
	a.fieldMap["bonus_amount"] = a.BonusAmount
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityApplyRecord) clone(db *gorm.DB) activityApplyRecord {
	a.activityApplyRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityApplyRecord) replaceDB(db *gorm.DB) activityApplyRecord {
	a.activityApplyRecordDo.ReplaceDB(db)
	return a
}

type activityApplyRecordDo struct{ gen.DO }

type IActivityApplyRecordDo interface {
	gen.SubQuery
	Debug() IActivityApplyRecordDo
	WithContext(ctx context.Context) IActivityApplyRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityApplyRecordDo
	WriteDB() IActivityApplyRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityApplyRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityApplyRecordDo
	Not(conds ...gen.Condition) IActivityApplyRecordDo
	Or(conds ...gen.Condition) IActivityApplyRecordDo
	Select(conds ...field.Expr) IActivityApplyRecordDo
	Where(conds ...gen.Condition) IActivityApplyRecordDo
	Order(conds ...field.Expr) IActivityApplyRecordDo
	Distinct(cols ...field.Expr) IActivityApplyRecordDo
	Omit(cols ...field.Expr) IActivityApplyRecordDo
	Join(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo
	Group(cols ...field.Expr) IActivityApplyRecordDo
	Having(conds ...gen.Condition) IActivityApplyRecordDo
	Limit(limit int) IActivityApplyRecordDo
	Offset(offset int) IActivityApplyRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityApplyRecordDo
	Unscoped() IActivityApplyRecordDo
	Create(values ...*model.ActivityApplyRecord) error
	CreateInBatches(values []*model.ActivityApplyRecord, batchSize int) error
	Save(values ...*model.ActivityApplyRecord) error
	First() (*model.ActivityApplyRecord, error)
	Take() (*model.ActivityApplyRecord, error)
	Last() (*model.ActivityApplyRecord, error)
	Find() ([]*model.ActivityApplyRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityApplyRecord, err error)
	FindInBatches(result *[]*model.ActivityApplyRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityApplyRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityApplyRecordDo
	Assign(attrs ...field.AssignExpr) IActivityApplyRecordDo
	Joins(fields ...field.RelationField) IActivityApplyRecordDo
	Preload(fields ...field.RelationField) IActivityApplyRecordDo
	FirstOrInit() (*model.ActivityApplyRecord, error)
	FirstOrCreate() (*model.ActivityApplyRecord, error)
	FindByPage(offset int, limit int) (result []*model.ActivityApplyRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityApplyRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityApplyRecordDo) Debug() IActivityApplyRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a activityApplyRecordDo) WithContext(ctx context.Context) IActivityApplyRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityApplyRecordDo) ReadDB() IActivityApplyRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityApplyRecordDo) WriteDB() IActivityApplyRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityApplyRecordDo) Session(config *gorm.Session) IActivityApplyRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityApplyRecordDo) Clauses(conds ...clause.Expression) IActivityApplyRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityApplyRecordDo) Returning(value interface{}, columns ...string) IActivityApplyRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityApplyRecordDo) Not(conds ...gen.Condition) IActivityApplyRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityApplyRecordDo) Or(conds ...gen.Condition) IActivityApplyRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityApplyRecordDo) Select(conds ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityApplyRecordDo) Where(conds ...gen.Condition) IActivityApplyRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityApplyRecordDo) Order(conds ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityApplyRecordDo) Distinct(cols ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityApplyRecordDo) Omit(cols ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityApplyRecordDo) Join(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityApplyRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityApplyRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityApplyRecordDo) Group(cols ...field.Expr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityApplyRecordDo) Having(conds ...gen.Condition) IActivityApplyRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityApplyRecordDo) Limit(limit int) IActivityApplyRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityApplyRecordDo) Offset(offset int) IActivityApplyRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityApplyRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityApplyRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityApplyRecordDo) Unscoped() IActivityApplyRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityApplyRecordDo) Create(values ...*model.ActivityApplyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityApplyRecordDo) CreateInBatches(values []*model.ActivityApplyRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityApplyRecordDo) Save(values ...*model.ActivityApplyRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityApplyRecordDo) First() (*model.ActivityApplyRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyRecord), nil
	}
}

func (a activityApplyRecordDo) Take() (*model.ActivityApplyRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyRecord), nil
	}
}

func (a activityApplyRecordDo) Last() (*model.ActivityApplyRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyRecord), nil
	}
}

func (a activityApplyRecordDo) Find() ([]*model.ActivityApplyRecord, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityApplyRecord), err
}

func (a activityApplyRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityApplyRecord, err error) {
	buf := make([]*model.ActivityApplyRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityApplyRecordDo) FindInBatches(result *[]*model.ActivityApplyRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityApplyRecordDo) Attrs(attrs ...field.AssignExpr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityApplyRecordDo) Assign(attrs ...field.AssignExpr) IActivityApplyRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityApplyRecordDo) Joins(fields ...field.RelationField) IActivityApplyRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityApplyRecordDo) Preload(fields ...field.RelationField) IActivityApplyRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityApplyRecordDo) FirstOrInit() (*model.ActivityApplyRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyRecord), nil
	}
}

func (a activityApplyRecordDo) FirstOrCreate() (*model.ActivityApplyRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityApplyRecord), nil
	}
}

func (a activityApplyRecordDo) FindByPage(offset int, limit int) (result []*model.ActivityApplyRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityApplyRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityApplyRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityApplyRecordDo) Delete(models ...*model.ActivityApplyRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityApplyRecordDo) withDO(do gen.Dao) *activityApplyRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
