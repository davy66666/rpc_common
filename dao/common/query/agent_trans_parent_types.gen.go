// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentTransParentType(db *gorm.DB, opts ...gen.DOOption) agentTransParentType {
	_agentTransParentType := agentTransParentType{}

	_agentTransParentType.agentTransParentTypeDo.UseDB(db, opts...)
	_agentTransParentType.agentTransParentTypeDo.UseModel(&model.AgentTransParentType{})

	tableName := _agentTransParentType.agentTransParentTypeDo.TableName()
	_agentTransParentType.ALL = field.NewAsterisk(tableName)
	_agentTransParentType.ID = field.NewInt64(tableName, "id")
	_agentTransParentType.EnName = field.NewString(tableName, "en_name")
	_agentTransParentType.CnName = field.NewString(tableName, "cn_name")
	_agentTransParentType.IsOpen = field.NewInt64(tableName, "is_open")
	_agentTransParentType.CreatedAt = field.NewField(tableName, "created_at")
	_agentTransParentType.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentTransParentType.fillFieldMap()

	return _agentTransParentType
}

type agentTransParentType struct {
	agentTransParentTypeDo agentTransParentTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	EnName    field.String // 类型名称 英文
	CnName    field.String // 类型名称 中文
	IsOpen    field.Int64  // 是否开启0:否;1:是
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (a agentTransParentType) Table(newTableName string) *agentTransParentType {
	a.agentTransParentTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentTransParentType) As(alias string) *agentTransParentType {
	a.agentTransParentTypeDo.DO = *(a.agentTransParentTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentTransParentType) updateTableName(table string) *agentTransParentType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.EnName = field.NewString(table, "en_name")
	a.CnName = field.NewString(table, "cn_name")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentTransParentType) WithContext(ctx context.Context) IAgentTransParentTypeDo {
	return a.agentTransParentTypeDo.WithContext(ctx)
}

func (a agentTransParentType) TableName() string { return a.agentTransParentTypeDo.TableName() }

func (a agentTransParentType) Alias() string { return a.agentTransParentTypeDo.Alias() }

func (a agentTransParentType) Columns(cols ...field.Expr) gen.Columns {
	return a.agentTransParentTypeDo.Columns(cols...)
}

func (a *agentTransParentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentTransParentType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["en_name"] = a.EnName
	a.fieldMap["cn_name"] = a.CnName
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentTransParentType) clone(db *gorm.DB) agentTransParentType {
	a.agentTransParentTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentTransParentType) replaceDB(db *gorm.DB) agentTransParentType {
	a.agentTransParentTypeDo.ReplaceDB(db)
	return a
}

type agentTransParentTypeDo struct{ gen.DO }

type IAgentTransParentTypeDo interface {
	gen.SubQuery
	Debug() IAgentTransParentTypeDo
	WithContext(ctx context.Context) IAgentTransParentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentTransParentTypeDo
	WriteDB() IAgentTransParentTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentTransParentTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentTransParentTypeDo
	Not(conds ...gen.Condition) IAgentTransParentTypeDo
	Or(conds ...gen.Condition) IAgentTransParentTypeDo
	Select(conds ...field.Expr) IAgentTransParentTypeDo
	Where(conds ...gen.Condition) IAgentTransParentTypeDo
	Order(conds ...field.Expr) IAgentTransParentTypeDo
	Distinct(cols ...field.Expr) IAgentTransParentTypeDo
	Omit(cols ...field.Expr) IAgentTransParentTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo
	Group(cols ...field.Expr) IAgentTransParentTypeDo
	Having(conds ...gen.Condition) IAgentTransParentTypeDo
	Limit(limit int) IAgentTransParentTypeDo
	Offset(offset int) IAgentTransParentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransParentTypeDo
	Unscoped() IAgentTransParentTypeDo
	Create(values ...*model.AgentTransParentType) error
	CreateInBatches(values []*model.AgentTransParentType, batchSize int) error
	Save(values ...*model.AgentTransParentType) error
	First() (*model.AgentTransParentType, error)
	Take() (*model.AgentTransParentType, error)
	Last() (*model.AgentTransParentType, error)
	Find() ([]*model.AgentTransParentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransParentType, err error)
	FindInBatches(result *[]*model.AgentTransParentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentTransParentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentTransParentTypeDo
	Assign(attrs ...field.AssignExpr) IAgentTransParentTypeDo
	Joins(fields ...field.RelationField) IAgentTransParentTypeDo
	Preload(fields ...field.RelationField) IAgentTransParentTypeDo
	FirstOrInit() (*model.AgentTransParentType, error)
	FirstOrCreate() (*model.AgentTransParentType, error)
	FindByPage(offset int, limit int) (result []*model.AgentTransParentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentTransParentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentTransParentTypeDo) Debug() IAgentTransParentTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a agentTransParentTypeDo) WithContext(ctx context.Context) IAgentTransParentTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentTransParentTypeDo) ReadDB() IAgentTransParentTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentTransParentTypeDo) WriteDB() IAgentTransParentTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentTransParentTypeDo) Session(config *gorm.Session) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentTransParentTypeDo) Clauses(conds ...clause.Expression) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentTransParentTypeDo) Returning(value interface{}, columns ...string) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentTransParentTypeDo) Not(conds ...gen.Condition) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentTransParentTypeDo) Or(conds ...gen.Condition) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentTransParentTypeDo) Select(conds ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentTransParentTypeDo) Where(conds ...gen.Condition) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentTransParentTypeDo) Order(conds ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentTransParentTypeDo) Distinct(cols ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentTransParentTypeDo) Omit(cols ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentTransParentTypeDo) Join(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentTransParentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentTransParentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentTransParentTypeDo) Group(cols ...field.Expr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentTransParentTypeDo) Having(conds ...gen.Condition) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentTransParentTypeDo) Limit(limit int) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentTransParentTypeDo) Offset(offset int) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentTransParentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentTransParentTypeDo) Unscoped() IAgentTransParentTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentTransParentTypeDo) Create(values ...*model.AgentTransParentType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentTransParentTypeDo) CreateInBatches(values []*model.AgentTransParentType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentTransParentTypeDo) Save(values ...*model.AgentTransParentType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentTransParentTypeDo) First() (*model.AgentTransParentType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransParentType), nil
	}
}

func (a agentTransParentTypeDo) Take() (*model.AgentTransParentType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransParentType), nil
	}
}

func (a agentTransParentTypeDo) Last() (*model.AgentTransParentType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransParentType), nil
	}
}

func (a agentTransParentTypeDo) Find() ([]*model.AgentTransParentType, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentTransParentType), err
}

func (a agentTransParentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTransParentType, err error) {
	buf := make([]*model.AgentTransParentType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentTransParentTypeDo) FindInBatches(result *[]*model.AgentTransParentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentTransParentTypeDo) Attrs(attrs ...field.AssignExpr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentTransParentTypeDo) Assign(attrs ...field.AssignExpr) IAgentTransParentTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentTransParentTypeDo) Joins(fields ...field.RelationField) IAgentTransParentTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentTransParentTypeDo) Preload(fields ...field.RelationField) IAgentTransParentTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentTransParentTypeDo) FirstOrInit() (*model.AgentTransParentType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransParentType), nil
	}
}

func (a agentTransParentTypeDo) FirstOrCreate() (*model.AgentTransParentType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTransParentType), nil
	}
}

func (a agentTransParentTypeDo) FindByPage(offset int, limit int) (result []*model.AgentTransParentType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentTransParentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentTransParentTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentTransParentTypeDo) Delete(models ...*model.AgentTransParentType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentTransParentTypeDo) withDO(do gen.Dao) *agentTransParentTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
