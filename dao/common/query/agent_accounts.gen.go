// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentAccount(db *gorm.DB, opts ...gen.DOOption) agentAccount {
	_agentAccount := agentAccount{}

	_agentAccount.agentAccountDo.UseDB(db, opts...)
	_agentAccount.agentAccountDo.UseModel(&model.AgentAccount{})

	tableName := _agentAccount.agentAccountDo.TableName()
	_agentAccount.ALL = field.NewAsterisk(tableName)
	_agentAccount.ID = field.NewInt64(tableName, "id")
	_agentAccount.AgentID = field.NewInt64(tableName, "agent_id")
	_agentAccount.AgentName = field.NewString(tableName, "agent_name")
	_agentAccount.Amount = field.NewFloat64(tableName, "amount")
	_agentAccount.LockMoney = field.NewFloat64(tableName, "lock_money")
	_agentAccount.IsOpen = field.NewInt64(tableName, "is_open")
	_agentAccount.Tuijian = field.NewFloat64(tableName, "tuijian")
	_agentAccount.Locked = field.NewInt64(tableName, "locked")
	_agentAccount.Deposit = field.NewFloat64(tableName, "deposit")
	_agentAccount.Withdraw = field.NewFloat64(tableName, "withdraw")
	_agentAccount.DepositTimes = field.NewInt64(tableName, "deposit_times")
	_agentAccount.WithdrawTimes = field.NewInt64(tableName, "withdraw_times")
	_agentAccount.CreatedAt = field.NewField(tableName, "created_at")
	_agentAccount.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentAccount.fillFieldMap()

	return _agentAccount
}

type agentAccount struct {
	agentAccountDo agentAccountDo

	ALL           field.Asterisk
	ID            field.Int64
	AgentID       field.Int64   // 代理id
	AgentName     field.String  // 代理名称
	Amount        field.Float64 // 余额
	LockMoney     field.Float64 // 冻结金额
	IsOpen        field.Int64   // 是否开启
	Tuijian       field.Float64 // 推荐累计金额
	Locked        field.Int64   // 是否锁住
	Deposit       field.Float64 // 充值总额
	Withdraw      field.Float64 // 提现总额
	DepositTimes  field.Int64   // 充值次数
	WithdrawTimes field.Int64   // 提现次数
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a agentAccount) Table(newTableName string) *agentAccount {
	a.agentAccountDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentAccount) As(alias string) *agentAccount {
	a.agentAccountDo.DO = *(a.agentAccountDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentAccount) updateTableName(table string) *agentAccount {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.Amount = field.NewFloat64(table, "amount")
	a.LockMoney = field.NewFloat64(table, "lock_money")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.Tuijian = field.NewFloat64(table, "tuijian")
	a.Locked = field.NewInt64(table, "locked")
	a.Deposit = field.NewFloat64(table, "deposit")
	a.Withdraw = field.NewFloat64(table, "withdraw")
	a.DepositTimes = field.NewInt64(table, "deposit_times")
	a.WithdrawTimes = field.NewInt64(table, "withdraw_times")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentAccount) WithContext(ctx context.Context) IAgentAccountDo {
	return a.agentAccountDo.WithContext(ctx)
}

func (a agentAccount) TableName() string { return a.agentAccountDo.TableName() }

func (a agentAccount) Alias() string { return a.agentAccountDo.Alias() }

func (a agentAccount) Columns(cols ...field.Expr) gen.Columns {
	return a.agentAccountDo.Columns(cols...)
}

func (a *agentAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentAccount) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["lock_money"] = a.LockMoney
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["tuijian"] = a.Tuijian
	a.fieldMap["locked"] = a.Locked
	a.fieldMap["deposit"] = a.Deposit
	a.fieldMap["withdraw"] = a.Withdraw
	a.fieldMap["deposit_times"] = a.DepositTimes
	a.fieldMap["withdraw_times"] = a.WithdrawTimes
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentAccount) clone(db *gorm.DB) agentAccount {
	a.agentAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentAccount) replaceDB(db *gorm.DB) agentAccount {
	a.agentAccountDo.ReplaceDB(db)
	return a
}

type agentAccountDo struct{ gen.DO }

type IAgentAccountDo interface {
	gen.SubQuery
	Debug() IAgentAccountDo
	WithContext(ctx context.Context) IAgentAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentAccountDo
	WriteDB() IAgentAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentAccountDo
	Not(conds ...gen.Condition) IAgentAccountDo
	Or(conds ...gen.Condition) IAgentAccountDo
	Select(conds ...field.Expr) IAgentAccountDo
	Where(conds ...gen.Condition) IAgentAccountDo
	Order(conds ...field.Expr) IAgentAccountDo
	Distinct(cols ...field.Expr) IAgentAccountDo
	Omit(cols ...field.Expr) IAgentAccountDo
	Join(table schema.Tabler, on ...field.Expr) IAgentAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentAccountDo
	Group(cols ...field.Expr) IAgentAccountDo
	Having(conds ...gen.Condition) IAgentAccountDo
	Limit(limit int) IAgentAccountDo
	Offset(offset int) IAgentAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentAccountDo
	Unscoped() IAgentAccountDo
	Create(values ...*model.AgentAccount) error
	CreateInBatches(values []*model.AgentAccount, batchSize int) error
	Save(values ...*model.AgentAccount) error
	First() (*model.AgentAccount, error)
	Take() (*model.AgentAccount, error)
	Last() (*model.AgentAccount, error)
	Find() ([]*model.AgentAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentAccount, err error)
	FindInBatches(result *[]*model.AgentAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentAccountDo
	Assign(attrs ...field.AssignExpr) IAgentAccountDo
	Joins(fields ...field.RelationField) IAgentAccountDo
	Preload(fields ...field.RelationField) IAgentAccountDo
	FirstOrInit() (*model.AgentAccount, error)
	FirstOrCreate() (*model.AgentAccount, error)
	FindByPage(offset int, limit int) (result []*model.AgentAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentAccountDo) Debug() IAgentAccountDo {
	return a.withDO(a.DO.Debug())
}

func (a agentAccountDo) WithContext(ctx context.Context) IAgentAccountDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentAccountDo) ReadDB() IAgentAccountDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentAccountDo) WriteDB() IAgentAccountDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentAccountDo) Session(config *gorm.Session) IAgentAccountDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentAccountDo) Clauses(conds ...clause.Expression) IAgentAccountDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentAccountDo) Returning(value interface{}, columns ...string) IAgentAccountDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentAccountDo) Not(conds ...gen.Condition) IAgentAccountDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentAccountDo) Or(conds ...gen.Condition) IAgentAccountDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentAccountDo) Select(conds ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentAccountDo) Where(conds ...gen.Condition) IAgentAccountDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentAccountDo) Order(conds ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentAccountDo) Distinct(cols ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentAccountDo) Omit(cols ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentAccountDo) Join(table schema.Tabler, on ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentAccountDo) Group(cols ...field.Expr) IAgentAccountDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentAccountDo) Having(conds ...gen.Condition) IAgentAccountDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentAccountDo) Limit(limit int) IAgentAccountDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentAccountDo) Offset(offset int) IAgentAccountDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentAccountDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentAccountDo) Unscoped() IAgentAccountDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentAccountDo) Create(values ...*model.AgentAccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentAccountDo) CreateInBatches(values []*model.AgentAccount, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentAccountDo) Save(values ...*model.AgentAccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentAccountDo) First() (*model.AgentAccount, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAccount), nil
	}
}

func (a agentAccountDo) Take() (*model.AgentAccount, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAccount), nil
	}
}

func (a agentAccountDo) Last() (*model.AgentAccount, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAccount), nil
	}
}

func (a agentAccountDo) Find() ([]*model.AgentAccount, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentAccount), err
}

func (a agentAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentAccount, err error) {
	buf := make([]*model.AgentAccount, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentAccountDo) FindInBatches(result *[]*model.AgentAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentAccountDo) Attrs(attrs ...field.AssignExpr) IAgentAccountDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentAccountDo) Assign(attrs ...field.AssignExpr) IAgentAccountDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentAccountDo) Joins(fields ...field.RelationField) IAgentAccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentAccountDo) Preload(fields ...field.RelationField) IAgentAccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentAccountDo) FirstOrInit() (*model.AgentAccount, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAccount), nil
	}
}

func (a agentAccountDo) FirstOrCreate() (*model.AgentAccount, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAccount), nil
	}
}

func (a agentAccountDo) FindByPage(offset int, limit int) (result []*model.AgentAccount, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentAccountDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentAccountDo) Delete(models ...*model.AgentAccount) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentAccountDo) withDO(do gen.Dao) *agentAccountDo {
	a.DO = *do.(*gen.DO)
	return a
}
