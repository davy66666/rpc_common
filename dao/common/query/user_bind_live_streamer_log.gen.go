// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserBindLiveStreamerLog(db *gorm.DB, opts ...gen.DOOption) userBindLiveStreamerLog {
	_userBindLiveStreamerLog := userBindLiveStreamerLog{}

	_userBindLiveStreamerLog.userBindLiveStreamerLogDo.UseDB(db, opts...)
	_userBindLiveStreamerLog.userBindLiveStreamerLogDo.UseModel(&model.UserBindLiveStreamerLog{})

	tableName := _userBindLiveStreamerLog.userBindLiveStreamerLogDo.TableName()
	_userBindLiveStreamerLog.ALL = field.NewAsterisk(tableName)
	_userBindLiveStreamerLog.ID = field.NewInt64(tableName, "id")
	_userBindLiveStreamerLog.UserID = field.NewInt64(tableName, "user_id")
	_userBindLiveStreamerLog.Username = field.NewString(tableName, "username")
	_userBindLiveStreamerLog.LiveStreamerID = field.NewInt64(tableName, "live_streamer_id")
	_userBindLiveStreamerLog.AdminID = field.NewInt64(tableName, "admin_id")
	_userBindLiveStreamerLog.AdminName = field.NewString(tableName, "admin_name")
	_userBindLiveStreamerLog.CreatedAt = field.NewField(tableName, "created_at")
	_userBindLiveStreamerLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userBindLiveStreamerLog.fillFieldMap()

	return _userBindLiveStreamerLog
}

// userBindLiveStreamerLog 用户绑定主播记录表
type userBindLiveStreamerLog struct {
	userBindLiveStreamerLogDo userBindLiveStreamerLogDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64
	Username       field.String // 用户名
	LiveStreamerID field.Int64  // 直播站主播id
	AdminID        field.Int64  // 管理员id
	AdminName      field.String // 管理员名称
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userBindLiveStreamerLog) Table(newTableName string) *userBindLiveStreamerLog {
	u.userBindLiveStreamerLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBindLiveStreamerLog) As(alias string) *userBindLiveStreamerLog {
	u.userBindLiveStreamerLogDo.DO = *(u.userBindLiveStreamerLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBindLiveStreamerLog) updateTableName(table string) *userBindLiveStreamerLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.LiveStreamerID = field.NewInt64(table, "live_streamer_id")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.AdminName = field.NewString(table, "admin_name")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userBindLiveStreamerLog) WithContext(ctx context.Context) IUserBindLiveStreamerLogDo {
	return u.userBindLiveStreamerLogDo.WithContext(ctx)
}

func (u userBindLiveStreamerLog) TableName() string { return u.userBindLiveStreamerLogDo.TableName() }

func (u userBindLiveStreamerLog) Alias() string { return u.userBindLiveStreamerLogDo.Alias() }

func (u userBindLiveStreamerLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userBindLiveStreamerLogDo.Columns(cols...)
}

func (u *userBindLiveStreamerLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBindLiveStreamerLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["live_streamer_id"] = u.LiveStreamerID
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["admin_name"] = u.AdminName
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userBindLiveStreamerLog) clone(db *gorm.DB) userBindLiveStreamerLog {
	u.userBindLiveStreamerLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBindLiveStreamerLog) replaceDB(db *gorm.DB) userBindLiveStreamerLog {
	u.userBindLiveStreamerLogDo.ReplaceDB(db)
	return u
}

type userBindLiveStreamerLogDo struct{ gen.DO }

type IUserBindLiveStreamerLogDo interface {
	gen.SubQuery
	Debug() IUserBindLiveStreamerLogDo
	WithContext(ctx context.Context) IUserBindLiveStreamerLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBindLiveStreamerLogDo
	WriteDB() IUserBindLiveStreamerLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBindLiveStreamerLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBindLiveStreamerLogDo
	Not(conds ...gen.Condition) IUserBindLiveStreamerLogDo
	Or(conds ...gen.Condition) IUserBindLiveStreamerLogDo
	Select(conds ...field.Expr) IUserBindLiveStreamerLogDo
	Where(conds ...gen.Condition) IUserBindLiveStreamerLogDo
	Order(conds ...field.Expr) IUserBindLiveStreamerLogDo
	Distinct(cols ...field.Expr) IUserBindLiveStreamerLogDo
	Omit(cols ...field.Expr) IUserBindLiveStreamerLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo
	Group(cols ...field.Expr) IUserBindLiveStreamerLogDo
	Having(conds ...gen.Condition) IUserBindLiveStreamerLogDo
	Limit(limit int) IUserBindLiveStreamerLogDo
	Offset(offset int) IUserBindLiveStreamerLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBindLiveStreamerLogDo
	Unscoped() IUserBindLiveStreamerLogDo
	Create(values ...*model.UserBindLiveStreamerLog) error
	CreateInBatches(values []*model.UserBindLiveStreamerLog, batchSize int) error
	Save(values ...*model.UserBindLiveStreamerLog) error
	First() (*model.UserBindLiveStreamerLog, error)
	Take() (*model.UserBindLiveStreamerLog, error)
	Last() (*model.UserBindLiveStreamerLog, error)
	Find() ([]*model.UserBindLiveStreamerLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBindLiveStreamerLog, err error)
	FindInBatches(result *[]*model.UserBindLiveStreamerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBindLiveStreamerLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBindLiveStreamerLogDo
	Assign(attrs ...field.AssignExpr) IUserBindLiveStreamerLogDo
	Joins(fields ...field.RelationField) IUserBindLiveStreamerLogDo
	Preload(fields ...field.RelationField) IUserBindLiveStreamerLogDo
	FirstOrInit() (*model.UserBindLiveStreamerLog, error)
	FirstOrCreate() (*model.UserBindLiveStreamerLog, error)
	FindByPage(offset int, limit int) (result []*model.UserBindLiveStreamerLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBindLiveStreamerLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBindLiveStreamerLogDo) Debug() IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userBindLiveStreamerLogDo) WithContext(ctx context.Context) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBindLiveStreamerLogDo) ReadDB() IUserBindLiveStreamerLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBindLiveStreamerLogDo) WriteDB() IUserBindLiveStreamerLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBindLiveStreamerLogDo) Session(config *gorm.Session) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBindLiveStreamerLogDo) Clauses(conds ...clause.Expression) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBindLiveStreamerLogDo) Returning(value interface{}, columns ...string) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBindLiveStreamerLogDo) Not(conds ...gen.Condition) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBindLiveStreamerLogDo) Or(conds ...gen.Condition) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBindLiveStreamerLogDo) Select(conds ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBindLiveStreamerLogDo) Where(conds ...gen.Condition) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBindLiveStreamerLogDo) Order(conds ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBindLiveStreamerLogDo) Distinct(cols ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBindLiveStreamerLogDo) Omit(cols ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBindLiveStreamerLogDo) Join(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBindLiveStreamerLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBindLiveStreamerLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBindLiveStreamerLogDo) Group(cols ...field.Expr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBindLiveStreamerLogDo) Having(conds ...gen.Condition) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBindLiveStreamerLogDo) Limit(limit int) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBindLiveStreamerLogDo) Offset(offset int) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBindLiveStreamerLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBindLiveStreamerLogDo) Unscoped() IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBindLiveStreamerLogDo) Create(values ...*model.UserBindLiveStreamerLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBindLiveStreamerLogDo) CreateInBatches(values []*model.UserBindLiveStreamerLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBindLiveStreamerLogDo) Save(values ...*model.UserBindLiveStreamerLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBindLiveStreamerLogDo) First() (*model.UserBindLiveStreamerLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindLiveStreamerLog), nil
	}
}

func (u userBindLiveStreamerLogDo) Take() (*model.UserBindLiveStreamerLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindLiveStreamerLog), nil
	}
}

func (u userBindLiveStreamerLogDo) Last() (*model.UserBindLiveStreamerLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindLiveStreamerLog), nil
	}
}

func (u userBindLiveStreamerLogDo) Find() ([]*model.UserBindLiveStreamerLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBindLiveStreamerLog), err
}

func (u userBindLiveStreamerLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBindLiveStreamerLog, err error) {
	buf := make([]*model.UserBindLiveStreamerLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBindLiveStreamerLogDo) FindInBatches(result *[]*model.UserBindLiveStreamerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBindLiveStreamerLogDo) Attrs(attrs ...field.AssignExpr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBindLiveStreamerLogDo) Assign(attrs ...field.AssignExpr) IUserBindLiveStreamerLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBindLiveStreamerLogDo) Joins(fields ...field.RelationField) IUserBindLiveStreamerLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBindLiveStreamerLogDo) Preload(fields ...field.RelationField) IUserBindLiveStreamerLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBindLiveStreamerLogDo) FirstOrInit() (*model.UserBindLiveStreamerLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindLiveStreamerLog), nil
	}
}

func (u userBindLiveStreamerLogDo) FirstOrCreate() (*model.UserBindLiveStreamerLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBindLiveStreamerLog), nil
	}
}

func (u userBindLiveStreamerLogDo) FindByPage(offset int, limit int) (result []*model.UserBindLiveStreamerLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBindLiveStreamerLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBindLiveStreamerLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBindLiveStreamerLogDo) Delete(models ...*model.UserBindLiveStreamerLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBindLiveStreamerLogDo) withDO(do gen.Dao) *userBindLiveStreamerLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
