// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newFissionExclusiveReward(db *gorm.DB, opts ...gen.DOOption) fissionExclusiveReward {
	_fissionExclusiveReward := fissionExclusiveReward{}

	_fissionExclusiveReward.fissionExclusiveRewardDo.UseDB(db, opts...)
	_fissionExclusiveReward.fissionExclusiveRewardDo.UseModel(&model.FissionExclusiveReward{})

	tableName := _fissionExclusiveReward.fissionExclusiveRewardDo.TableName()
	_fissionExclusiveReward.ALL = field.NewAsterisk(tableName)
	_fissionExclusiveReward.ID = field.NewInt64(tableName, "id")
	_fissionExclusiveReward.ExtID = field.NewString(tableName, "ext_id")
	_fissionExclusiveReward.Name = field.NewString(tableName, "name")
	_fissionExclusiveReward.RewardType = field.NewInt64(tableName, "reward_type")
	_fissionExclusiveReward.RewardValue = field.NewString(tableName, "reward_value")
	_fissionExclusiveReward.Remark = field.NewString(tableName, "remark")
	_fissionExclusiveReward.Type = field.NewInt64(tableName, "type")
	_fissionExclusiveReward.CreatedAt = field.NewField(tableName, "created_at")
	_fissionExclusiveReward.UpdatedAt = field.NewField(tableName, "updated_at")
	_fissionExclusiveReward.OpAdminUsers = field.NewString(tableName, "op_admin_users")

	_fissionExclusiveReward.fillFieldMap()

	return _fissionExclusiveReward
}

// fissionExclusiveReward 专属奖励
type fissionExclusiveReward struct {
	fissionExclusiveRewardDo fissionExclusiveRewardDo

	ALL          field.Asterisk
	ID           field.Int64
	ExtID        field.String // vip等级id，支付分层id
	Name         field.String // 奖励名称
	RewardType   field.Int64  // 奖励类型:0好友负盈利比例, 1好友充值比例,2线下陪玩,3首存彩金
	RewardValue  field.String // 奖励值
	Remark       field.String // 描述
	Type         field.Int64  // 1按照vip等级设置奖励,2按支付分层设置奖励
	CreatedAt    field.Field
	UpdatedAt    field.Field
	OpAdminUsers field.String // 操作人

	fieldMap map[string]field.Expr
}

func (f fissionExclusiveReward) Table(newTableName string) *fissionExclusiveReward {
	f.fissionExclusiveRewardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fissionExclusiveReward) As(alias string) *fissionExclusiveReward {
	f.fissionExclusiveRewardDo.DO = *(f.fissionExclusiveRewardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fissionExclusiveReward) updateTableName(table string) *fissionExclusiveReward {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.ExtID = field.NewString(table, "ext_id")
	f.Name = field.NewString(table, "name")
	f.RewardType = field.NewInt64(table, "reward_type")
	f.RewardValue = field.NewString(table, "reward_value")
	f.Remark = field.NewString(table, "remark")
	f.Type = field.NewInt64(table, "type")
	f.CreatedAt = field.NewField(table, "created_at")
	f.UpdatedAt = field.NewField(table, "updated_at")
	f.OpAdminUsers = field.NewString(table, "op_admin_users")

	f.fillFieldMap()

	return f
}

func (f *fissionExclusiveReward) WithContext(ctx context.Context) IFissionExclusiveRewardDo {
	return f.fissionExclusiveRewardDo.WithContext(ctx)
}

func (f fissionExclusiveReward) TableName() string { return f.fissionExclusiveRewardDo.TableName() }

func (f fissionExclusiveReward) Alias() string { return f.fissionExclusiveRewardDo.Alias() }

func (f fissionExclusiveReward) Columns(cols ...field.Expr) gen.Columns {
	return f.fissionExclusiveRewardDo.Columns(cols...)
}

func (f *fissionExclusiveReward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fissionExclusiveReward) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["ext_id"] = f.ExtID
	f.fieldMap["name"] = f.Name
	f.fieldMap["reward_type"] = f.RewardType
	f.fieldMap["reward_value"] = f.RewardValue
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["type"] = f.Type
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["op_admin_users"] = f.OpAdminUsers
}

func (f fissionExclusiveReward) clone(db *gorm.DB) fissionExclusiveReward {
	f.fissionExclusiveRewardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fissionExclusiveReward) replaceDB(db *gorm.DB) fissionExclusiveReward {
	f.fissionExclusiveRewardDo.ReplaceDB(db)
	return f
}

type fissionExclusiveRewardDo struct{ gen.DO }

type IFissionExclusiveRewardDo interface {
	gen.SubQuery
	Debug() IFissionExclusiveRewardDo
	WithContext(ctx context.Context) IFissionExclusiveRewardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFissionExclusiveRewardDo
	WriteDB() IFissionExclusiveRewardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFissionExclusiveRewardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFissionExclusiveRewardDo
	Not(conds ...gen.Condition) IFissionExclusiveRewardDo
	Or(conds ...gen.Condition) IFissionExclusiveRewardDo
	Select(conds ...field.Expr) IFissionExclusiveRewardDo
	Where(conds ...gen.Condition) IFissionExclusiveRewardDo
	Order(conds ...field.Expr) IFissionExclusiveRewardDo
	Distinct(cols ...field.Expr) IFissionExclusiveRewardDo
	Omit(cols ...field.Expr) IFissionExclusiveRewardDo
	Join(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo
	Group(cols ...field.Expr) IFissionExclusiveRewardDo
	Having(conds ...gen.Condition) IFissionExclusiveRewardDo
	Limit(limit int) IFissionExclusiveRewardDo
	Offset(offset int) IFissionExclusiveRewardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionExclusiveRewardDo
	Unscoped() IFissionExclusiveRewardDo
	Create(values ...*model.FissionExclusiveReward) error
	CreateInBatches(values []*model.FissionExclusiveReward, batchSize int) error
	Save(values ...*model.FissionExclusiveReward) error
	First() (*model.FissionExclusiveReward, error)
	Take() (*model.FissionExclusiveReward, error)
	Last() (*model.FissionExclusiveReward, error)
	Find() ([]*model.FissionExclusiveReward, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionExclusiveReward, err error)
	FindInBatches(result *[]*model.FissionExclusiveReward, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FissionExclusiveReward) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFissionExclusiveRewardDo
	Assign(attrs ...field.AssignExpr) IFissionExclusiveRewardDo
	Joins(fields ...field.RelationField) IFissionExclusiveRewardDo
	Preload(fields ...field.RelationField) IFissionExclusiveRewardDo
	FirstOrInit() (*model.FissionExclusiveReward, error)
	FirstOrCreate() (*model.FissionExclusiveReward, error)
	FindByPage(offset int, limit int) (result []*model.FissionExclusiveReward, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFissionExclusiveRewardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fissionExclusiveRewardDo) Debug() IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Debug())
}

func (f fissionExclusiveRewardDo) WithContext(ctx context.Context) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fissionExclusiveRewardDo) ReadDB() IFissionExclusiveRewardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fissionExclusiveRewardDo) WriteDB() IFissionExclusiveRewardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fissionExclusiveRewardDo) Session(config *gorm.Session) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fissionExclusiveRewardDo) Clauses(conds ...clause.Expression) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fissionExclusiveRewardDo) Returning(value interface{}, columns ...string) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fissionExclusiveRewardDo) Not(conds ...gen.Condition) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fissionExclusiveRewardDo) Or(conds ...gen.Condition) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fissionExclusiveRewardDo) Select(conds ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fissionExclusiveRewardDo) Where(conds ...gen.Condition) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fissionExclusiveRewardDo) Order(conds ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fissionExclusiveRewardDo) Distinct(cols ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fissionExclusiveRewardDo) Omit(cols ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fissionExclusiveRewardDo) Join(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fissionExclusiveRewardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fissionExclusiveRewardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fissionExclusiveRewardDo) Group(cols ...field.Expr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fissionExclusiveRewardDo) Having(conds ...gen.Condition) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fissionExclusiveRewardDo) Limit(limit int) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fissionExclusiveRewardDo) Offset(offset int) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fissionExclusiveRewardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fissionExclusiveRewardDo) Unscoped() IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fissionExclusiveRewardDo) Create(values ...*model.FissionExclusiveReward) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fissionExclusiveRewardDo) CreateInBatches(values []*model.FissionExclusiveReward, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fissionExclusiveRewardDo) Save(values ...*model.FissionExclusiveReward) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fissionExclusiveRewardDo) First() (*model.FissionExclusiveReward, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveReward), nil
	}
}

func (f fissionExclusiveRewardDo) Take() (*model.FissionExclusiveReward, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveReward), nil
	}
}

func (f fissionExclusiveRewardDo) Last() (*model.FissionExclusiveReward, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveReward), nil
	}
}

func (f fissionExclusiveRewardDo) Find() ([]*model.FissionExclusiveReward, error) {
	result, err := f.DO.Find()
	return result.([]*model.FissionExclusiveReward), err
}

func (f fissionExclusiveRewardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FissionExclusiveReward, err error) {
	buf := make([]*model.FissionExclusiveReward, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fissionExclusiveRewardDo) FindInBatches(result *[]*model.FissionExclusiveReward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fissionExclusiveRewardDo) Attrs(attrs ...field.AssignExpr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fissionExclusiveRewardDo) Assign(attrs ...field.AssignExpr) IFissionExclusiveRewardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fissionExclusiveRewardDo) Joins(fields ...field.RelationField) IFissionExclusiveRewardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fissionExclusiveRewardDo) Preload(fields ...field.RelationField) IFissionExclusiveRewardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fissionExclusiveRewardDo) FirstOrInit() (*model.FissionExclusiveReward, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveReward), nil
	}
}

func (f fissionExclusiveRewardDo) FirstOrCreate() (*model.FissionExclusiveReward, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FissionExclusiveReward), nil
	}
}

func (f fissionExclusiveRewardDo) FindByPage(offset int, limit int) (result []*model.FissionExclusiveReward, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fissionExclusiveRewardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fissionExclusiveRewardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fissionExclusiveRewardDo) Delete(models ...*model.FissionExclusiveReward) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fissionExclusiveRewardDo) withDO(do gen.Dao) *fissionExclusiveRewardDo {
	f.DO = *do.(*gen.DO)
	return f
}
