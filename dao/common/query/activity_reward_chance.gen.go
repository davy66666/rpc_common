// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityRewardChance(db *gorm.DB, opts ...gen.DOOption) activityRewardChance {
	_activityRewardChance := activityRewardChance{}

	_activityRewardChance.activityRewardChanceDo.UseDB(db, opts...)
	_activityRewardChance.activityRewardChanceDo.UseModel(&model.ActivityRewardChance{})

	tableName := _activityRewardChance.activityRewardChanceDo.TableName()
	_activityRewardChance.ALL = field.NewAsterisk(tableName)
	_activityRewardChance.ID = field.NewInt64(tableName, "id")
	_activityRewardChance.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityRewardChance.StartRank = field.NewInt64(tableName, "start_rank")
	_activityRewardChance.EndRank = field.NewInt64(tableName, "end_rank")
	_activityRewardChance.Name = field.NewString(tableName, "name")
	_activityRewardChance.Nums = field.NewInt64(tableName, "nums")
	_activityRewardChance.CreatedAt = field.NewField(tableName, "created_at")
	_activityRewardChance.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityRewardChance.fillFieldMap()

	return _activityRewardChance
}

// activityRewardChance 活动排名抽奖次数
type activityRewardChance struct {
	activityRewardChanceDo activityRewardChanceDo

	ALL        field.Asterisk
	ID         field.Int64
	ActivityID field.Int64  // 配置ID
	StartRank  field.Int64  // 最小排名
	EndRank    field.Int64  // 最大排名
	Name       field.String // 名称
	Nums       field.Int64  // 数量
	CreatedAt  field.Field  // 创建时间
	UpdatedAt  field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (a activityRewardChance) Table(newTableName string) *activityRewardChance {
	a.activityRewardChanceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityRewardChance) As(alias string) *activityRewardChance {
	a.activityRewardChanceDo.DO = *(a.activityRewardChanceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityRewardChance) updateTableName(table string) *activityRewardChance {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.StartRank = field.NewInt64(table, "start_rank")
	a.EndRank = field.NewInt64(table, "end_rank")
	a.Name = field.NewString(table, "name")
	a.Nums = field.NewInt64(table, "nums")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityRewardChance) WithContext(ctx context.Context) IActivityRewardChanceDo {
	return a.activityRewardChanceDo.WithContext(ctx)
}

func (a activityRewardChance) TableName() string { return a.activityRewardChanceDo.TableName() }

func (a activityRewardChance) Alias() string { return a.activityRewardChanceDo.Alias() }

func (a activityRewardChance) Columns(cols ...field.Expr) gen.Columns {
	return a.activityRewardChanceDo.Columns(cols...)
}

func (a *activityRewardChance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityRewardChance) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["start_rank"] = a.StartRank
	a.fieldMap["end_rank"] = a.EndRank
	a.fieldMap["name"] = a.Name
	a.fieldMap["nums"] = a.Nums
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityRewardChance) clone(db *gorm.DB) activityRewardChance {
	a.activityRewardChanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityRewardChance) replaceDB(db *gorm.DB) activityRewardChance {
	a.activityRewardChanceDo.ReplaceDB(db)
	return a
}

type activityRewardChanceDo struct{ gen.DO }

type IActivityRewardChanceDo interface {
	gen.SubQuery
	Debug() IActivityRewardChanceDo
	WithContext(ctx context.Context) IActivityRewardChanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityRewardChanceDo
	WriteDB() IActivityRewardChanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityRewardChanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityRewardChanceDo
	Not(conds ...gen.Condition) IActivityRewardChanceDo
	Or(conds ...gen.Condition) IActivityRewardChanceDo
	Select(conds ...field.Expr) IActivityRewardChanceDo
	Where(conds ...gen.Condition) IActivityRewardChanceDo
	Order(conds ...field.Expr) IActivityRewardChanceDo
	Distinct(cols ...field.Expr) IActivityRewardChanceDo
	Omit(cols ...field.Expr) IActivityRewardChanceDo
	Join(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo
	Group(cols ...field.Expr) IActivityRewardChanceDo
	Having(conds ...gen.Condition) IActivityRewardChanceDo
	Limit(limit int) IActivityRewardChanceDo
	Offset(offset int) IActivityRewardChanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardChanceDo
	Unscoped() IActivityRewardChanceDo
	Create(values ...*model.ActivityRewardChance) error
	CreateInBatches(values []*model.ActivityRewardChance, batchSize int) error
	Save(values ...*model.ActivityRewardChance) error
	First() (*model.ActivityRewardChance, error)
	Take() (*model.ActivityRewardChance, error)
	Last() (*model.ActivityRewardChance, error)
	Find() ([]*model.ActivityRewardChance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardChance, err error)
	FindInBatches(result *[]*model.ActivityRewardChance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityRewardChance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityRewardChanceDo
	Assign(attrs ...field.AssignExpr) IActivityRewardChanceDo
	Joins(fields ...field.RelationField) IActivityRewardChanceDo
	Preload(fields ...field.RelationField) IActivityRewardChanceDo
	FirstOrInit() (*model.ActivityRewardChance, error)
	FirstOrCreate() (*model.ActivityRewardChance, error)
	FindByPage(offset int, limit int) (result []*model.ActivityRewardChance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityRewardChanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityRewardChanceDo) Debug() IActivityRewardChanceDo {
	return a.withDO(a.DO.Debug())
}

func (a activityRewardChanceDo) WithContext(ctx context.Context) IActivityRewardChanceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityRewardChanceDo) ReadDB() IActivityRewardChanceDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityRewardChanceDo) WriteDB() IActivityRewardChanceDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityRewardChanceDo) Session(config *gorm.Session) IActivityRewardChanceDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityRewardChanceDo) Clauses(conds ...clause.Expression) IActivityRewardChanceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityRewardChanceDo) Returning(value interface{}, columns ...string) IActivityRewardChanceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityRewardChanceDo) Not(conds ...gen.Condition) IActivityRewardChanceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityRewardChanceDo) Or(conds ...gen.Condition) IActivityRewardChanceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityRewardChanceDo) Select(conds ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityRewardChanceDo) Where(conds ...gen.Condition) IActivityRewardChanceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityRewardChanceDo) Order(conds ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityRewardChanceDo) Distinct(cols ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityRewardChanceDo) Omit(cols ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityRewardChanceDo) Join(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityRewardChanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityRewardChanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityRewardChanceDo) Group(cols ...field.Expr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityRewardChanceDo) Having(conds ...gen.Condition) IActivityRewardChanceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityRewardChanceDo) Limit(limit int) IActivityRewardChanceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityRewardChanceDo) Offset(offset int) IActivityRewardChanceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityRewardChanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityRewardChanceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityRewardChanceDo) Unscoped() IActivityRewardChanceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityRewardChanceDo) Create(values ...*model.ActivityRewardChance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityRewardChanceDo) CreateInBatches(values []*model.ActivityRewardChance, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityRewardChanceDo) Save(values ...*model.ActivityRewardChance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityRewardChanceDo) First() (*model.ActivityRewardChance, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardChance), nil
	}
}

func (a activityRewardChanceDo) Take() (*model.ActivityRewardChance, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardChance), nil
	}
}

func (a activityRewardChanceDo) Last() (*model.ActivityRewardChance, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardChance), nil
	}
}

func (a activityRewardChanceDo) Find() ([]*model.ActivityRewardChance, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityRewardChance), err
}

func (a activityRewardChanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityRewardChance, err error) {
	buf := make([]*model.ActivityRewardChance, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityRewardChanceDo) FindInBatches(result *[]*model.ActivityRewardChance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityRewardChanceDo) Attrs(attrs ...field.AssignExpr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityRewardChanceDo) Assign(attrs ...field.AssignExpr) IActivityRewardChanceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityRewardChanceDo) Joins(fields ...field.RelationField) IActivityRewardChanceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityRewardChanceDo) Preload(fields ...field.RelationField) IActivityRewardChanceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityRewardChanceDo) FirstOrInit() (*model.ActivityRewardChance, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardChance), nil
	}
}

func (a activityRewardChanceDo) FirstOrCreate() (*model.ActivityRewardChance, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityRewardChance), nil
	}
}

func (a activityRewardChanceDo) FindByPage(offset int, limit int) (result []*model.ActivityRewardChance, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityRewardChanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityRewardChanceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityRewardChanceDo) Delete(models ...*model.ActivityRewardChance) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityRewardChanceDo) withDO(do gen.Dao) *activityRewardChanceDo {
	a.DO = *do.(*gen.DO)
	return a
}
