// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserGameBetAmountsCopy(db *gorm.DB, opts ...gen.DOOption) userGameBetAmountsCopy {
	_userGameBetAmountsCopy := userGameBetAmountsCopy{}

	_userGameBetAmountsCopy.userGameBetAmountsCopyDo.UseDB(db, opts...)
	_userGameBetAmountsCopy.userGameBetAmountsCopyDo.UseModel(&model.UserGameBetAmountsCopy{})

	tableName := _userGameBetAmountsCopy.userGameBetAmountsCopyDo.TableName()
	_userGameBetAmountsCopy.ALL = field.NewAsterisk(tableName)
	_userGameBetAmountsCopy.ID = field.NewInt64(tableName, "id")
	_userGameBetAmountsCopy.DateAt = field.NewString(tableName, "date_at")
	_userGameBetAmountsCopy.SeriesID = field.NewInt64(tableName, "series_id")
	_userGameBetAmountsCopy.GameCode = field.NewString(tableName, "game_code")
	_userGameBetAmountsCopy.UserID = field.NewInt64(tableName, "user_id")
	_userGameBetAmountsCopy.Username = field.NewString(tableName, "username")
	_userGameBetAmountsCopy.ParentID = field.NewInt64(tableName, "parent_id")
	_userGameBetAmountsCopy.ParentName = field.NewString(tableName, "parent_name")
	_userGameBetAmountsCopy.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userGameBetAmountsCopy.BetNums = field.NewInt64(tableName, "bet_nums")
	_userGameBetAmountsCopy.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_userGameBetAmountsCopy.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userGameBetAmountsCopy.NetAmount = field.NewFloat64(tableName, "net_amount")
	_userGameBetAmountsCopy.TotalFanshui = field.NewFloat64(tableName, "total_fanshui")
	_userGameBetAmountsCopy.IsFanshui = field.NewInt64(tableName, "is_fanshui")
	_userGameBetAmountsCopy.FanshuiAt = field.NewField(tableName, "fanshui_at")
	_userGameBetAmountsCopy.IsManual = field.NewInt64(tableName, "is_manual")
	_userGameBetAmountsCopy.IsOpen = field.NewInt64(tableName, "is_open")
	_userGameBetAmountsCopy.IsYongjin = field.NewInt64(tableName, "is_yongjin")
	_userGameBetAmountsCopy.IsTotalBet = field.NewInt64(tableName, "is_total_bet")
	_userGameBetAmountsCopy.IsTodayProfit = field.NewInt64(tableName, "is_today_profit")
	_userGameBetAmountsCopy.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_userGameBetAmountsCopy.CreatedAt = field.NewField(tableName, "created_at")
	_userGameBetAmountsCopy.UpdatedAt = field.NewField(tableName, "updated_at")

	_userGameBetAmountsCopy.fillFieldMap()

	return _userGameBetAmountsCopy
}

// userGameBetAmountsCopy 游戏打码量表
type userGameBetAmountsCopy struct {
	userGameBetAmountsCopyDo userGameBetAmountsCopyDo

	ALL            field.Asterisk
	ID             field.Int64
	DateAt         field.String  // 当天时间
	SeriesID       field.Int64   // 游戏系列id
	GameCode       field.String  // 游戏类型
	UserID         field.Int64   // 用户id
	Username       field.String  // 用户名
	ParentID       field.Int64   // 用户id
	ParentName     field.String  // 用户名
	ForefatherIds  field.String  // 上级树,多个以逗号隔开
	BetNums        field.Int64   // 注单量
	BetAmount      field.Float64 // 用户投注金额 包括无效金额
	ValidBetAmount field.Float64 // 有效投注金额
	NetAmount      field.Float64 // 玩家的所赢金额
	TotalFanshui   field.Float64 // 返水金额
	IsFanshui      field.Int64   // 0:未返水;1:返水进行中;2:已返水;
	FanshuiAt      field.Field   // 返水时间
	IsManual       field.Int64   // 是否手动返水0:否;1:是手动
	IsOpen         field.Int64   // 是否启用0:否;1:是;如果为0就重新统计打码量
	IsYongjin      field.Int64   // 是否统计了代理佣金0否，1进行中；2:已经返佣
	IsTotalBet     field.Int64   // 是否统计到总注单表：0否，1进行中；2:已统计
	IsTodayProfit  field.Int64   // 是否统计到今日盈亏表：0否，1进行中；2:已统计；today_profits
	IsDeleted      field.Int64   // 是否删除0:否;1:已删除
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userGameBetAmountsCopy) Table(newTableName string) *userGameBetAmountsCopy {
	u.userGameBetAmountsCopyDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGameBetAmountsCopy) As(alias string) *userGameBetAmountsCopy {
	u.userGameBetAmountsCopyDo.DO = *(u.userGameBetAmountsCopyDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGameBetAmountsCopy) updateTableName(table string) *userGameBetAmountsCopy {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewString(table, "date_at")
	u.SeriesID = field.NewInt64(table, "series_id")
	u.GameCode = field.NewString(table, "game_code")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ParentName = field.NewString(table, "parent_name")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.BetNums = field.NewInt64(table, "bet_nums")
	u.BetAmount = field.NewFloat64(table, "bet_amount")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.NetAmount = field.NewFloat64(table, "net_amount")
	u.TotalFanshui = field.NewFloat64(table, "total_fanshui")
	u.IsFanshui = field.NewInt64(table, "is_fanshui")
	u.FanshuiAt = field.NewField(table, "fanshui_at")
	u.IsManual = field.NewInt64(table, "is_manual")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.IsYongjin = field.NewInt64(table, "is_yongjin")
	u.IsTotalBet = field.NewInt64(table, "is_total_bet")
	u.IsTodayProfit = field.NewInt64(table, "is_today_profit")
	u.IsDeleted = field.NewInt64(table, "is_deleted")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGameBetAmountsCopy) WithContext(ctx context.Context) IUserGameBetAmountsCopyDo {
	return u.userGameBetAmountsCopyDo.WithContext(ctx)
}

func (u userGameBetAmountsCopy) TableName() string { return u.userGameBetAmountsCopyDo.TableName() }

func (u userGameBetAmountsCopy) Alias() string { return u.userGameBetAmountsCopyDo.Alias() }

func (u userGameBetAmountsCopy) Columns(cols ...field.Expr) gen.Columns {
	return u.userGameBetAmountsCopyDo.Columns(cols...)
}

func (u *userGameBetAmountsCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGameBetAmountsCopy) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 24)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["series_id"] = u.SeriesID
	u.fieldMap["game_code"] = u.GameCode
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["bet_nums"] = u.BetNums
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["net_amount"] = u.NetAmount
	u.fieldMap["total_fanshui"] = u.TotalFanshui
	u.fieldMap["is_fanshui"] = u.IsFanshui
	u.fieldMap["fanshui_at"] = u.FanshuiAt
	u.fieldMap["is_manual"] = u.IsManual
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["is_yongjin"] = u.IsYongjin
	u.fieldMap["is_total_bet"] = u.IsTotalBet
	u.fieldMap["is_today_profit"] = u.IsTodayProfit
	u.fieldMap["is_deleted"] = u.IsDeleted
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGameBetAmountsCopy) clone(db *gorm.DB) userGameBetAmountsCopy {
	u.userGameBetAmountsCopyDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGameBetAmountsCopy) replaceDB(db *gorm.DB) userGameBetAmountsCopy {
	u.userGameBetAmountsCopyDo.ReplaceDB(db)
	return u
}

type userGameBetAmountsCopyDo struct{ gen.DO }

type IUserGameBetAmountsCopyDo interface {
	gen.SubQuery
	Debug() IUserGameBetAmountsCopyDo
	WithContext(ctx context.Context) IUserGameBetAmountsCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGameBetAmountsCopyDo
	WriteDB() IUserGameBetAmountsCopyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGameBetAmountsCopyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGameBetAmountsCopyDo
	Not(conds ...gen.Condition) IUserGameBetAmountsCopyDo
	Or(conds ...gen.Condition) IUserGameBetAmountsCopyDo
	Select(conds ...field.Expr) IUserGameBetAmountsCopyDo
	Where(conds ...gen.Condition) IUserGameBetAmountsCopyDo
	Order(conds ...field.Expr) IUserGameBetAmountsCopyDo
	Distinct(cols ...field.Expr) IUserGameBetAmountsCopyDo
	Omit(cols ...field.Expr) IUserGameBetAmountsCopyDo
	Join(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo
	Group(cols ...field.Expr) IUserGameBetAmountsCopyDo
	Having(conds ...gen.Condition) IUserGameBetAmountsCopyDo
	Limit(limit int) IUserGameBetAmountsCopyDo
	Offset(offset int) IUserGameBetAmountsCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGameBetAmountsCopyDo
	Unscoped() IUserGameBetAmountsCopyDo
	Create(values ...*model.UserGameBetAmountsCopy) error
	CreateInBatches(values []*model.UserGameBetAmountsCopy, batchSize int) error
	Save(values ...*model.UserGameBetAmountsCopy) error
	First() (*model.UserGameBetAmountsCopy, error)
	Take() (*model.UserGameBetAmountsCopy, error)
	Last() (*model.UserGameBetAmountsCopy, error)
	Find() ([]*model.UserGameBetAmountsCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGameBetAmountsCopy, err error)
	FindInBatches(result *[]*model.UserGameBetAmountsCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGameBetAmountsCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGameBetAmountsCopyDo
	Assign(attrs ...field.AssignExpr) IUserGameBetAmountsCopyDo
	Joins(fields ...field.RelationField) IUserGameBetAmountsCopyDo
	Preload(fields ...field.RelationField) IUserGameBetAmountsCopyDo
	FirstOrInit() (*model.UserGameBetAmountsCopy, error)
	FirstOrCreate() (*model.UserGameBetAmountsCopy, error)
	FindByPage(offset int, limit int) (result []*model.UserGameBetAmountsCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGameBetAmountsCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGameBetAmountsCopyDo) Debug() IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Debug())
}

func (u userGameBetAmountsCopyDo) WithContext(ctx context.Context) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGameBetAmountsCopyDo) ReadDB() IUserGameBetAmountsCopyDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGameBetAmountsCopyDo) WriteDB() IUserGameBetAmountsCopyDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGameBetAmountsCopyDo) Session(config *gorm.Session) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGameBetAmountsCopyDo) Clauses(conds ...clause.Expression) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGameBetAmountsCopyDo) Returning(value interface{}, columns ...string) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGameBetAmountsCopyDo) Not(conds ...gen.Condition) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGameBetAmountsCopyDo) Or(conds ...gen.Condition) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGameBetAmountsCopyDo) Select(conds ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGameBetAmountsCopyDo) Where(conds ...gen.Condition) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGameBetAmountsCopyDo) Order(conds ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGameBetAmountsCopyDo) Distinct(cols ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGameBetAmountsCopyDo) Omit(cols ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGameBetAmountsCopyDo) Join(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGameBetAmountsCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGameBetAmountsCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGameBetAmountsCopyDo) Group(cols ...field.Expr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGameBetAmountsCopyDo) Having(conds ...gen.Condition) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGameBetAmountsCopyDo) Limit(limit int) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGameBetAmountsCopyDo) Offset(offset int) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGameBetAmountsCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGameBetAmountsCopyDo) Unscoped() IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGameBetAmountsCopyDo) Create(values ...*model.UserGameBetAmountsCopy) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGameBetAmountsCopyDo) CreateInBatches(values []*model.UserGameBetAmountsCopy, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGameBetAmountsCopyDo) Save(values ...*model.UserGameBetAmountsCopy) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGameBetAmountsCopyDo) First() (*model.UserGameBetAmountsCopy, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmountsCopy), nil
	}
}

func (u userGameBetAmountsCopyDo) Take() (*model.UserGameBetAmountsCopy, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmountsCopy), nil
	}
}

func (u userGameBetAmountsCopyDo) Last() (*model.UserGameBetAmountsCopy, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmountsCopy), nil
	}
}

func (u userGameBetAmountsCopyDo) Find() ([]*model.UserGameBetAmountsCopy, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGameBetAmountsCopy), err
}

func (u userGameBetAmountsCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGameBetAmountsCopy, err error) {
	buf := make([]*model.UserGameBetAmountsCopy, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGameBetAmountsCopyDo) FindInBatches(result *[]*model.UserGameBetAmountsCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGameBetAmountsCopyDo) Attrs(attrs ...field.AssignExpr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGameBetAmountsCopyDo) Assign(attrs ...field.AssignExpr) IUserGameBetAmountsCopyDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGameBetAmountsCopyDo) Joins(fields ...field.RelationField) IUserGameBetAmountsCopyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGameBetAmountsCopyDo) Preload(fields ...field.RelationField) IUserGameBetAmountsCopyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGameBetAmountsCopyDo) FirstOrInit() (*model.UserGameBetAmountsCopy, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmountsCopy), nil
	}
}

func (u userGameBetAmountsCopyDo) FirstOrCreate() (*model.UserGameBetAmountsCopy, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmountsCopy), nil
	}
}

func (u userGameBetAmountsCopyDo) FindByPage(offset int, limit int) (result []*model.UserGameBetAmountsCopy, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGameBetAmountsCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGameBetAmountsCopyDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGameBetAmountsCopyDo) Delete(models ...*model.UserGameBetAmountsCopy) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGameBetAmountsCopyDo) withDO(do gen.Dao) *userGameBetAmountsCopyDo {
	u.DO = *do.(*gen.DO)
	return u
}
