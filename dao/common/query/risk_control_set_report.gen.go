// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRiskControlSetReport(db *gorm.DB, opts ...gen.DOOption) riskControlSetReport {
	_riskControlSetReport := riskControlSetReport{}

	_riskControlSetReport.riskControlSetReportDo.UseDB(db, opts...)
	_riskControlSetReport.riskControlSetReportDo.UseModel(&model.RiskControlSetReport{})

	tableName := _riskControlSetReport.riskControlSetReportDo.TableName()
	_riskControlSetReport.ALL = field.NewAsterisk(tableName)
	_riskControlSetReport.ID = field.NewInt64(tableName, "id")
	_riskControlSetReport.UserID = field.NewInt64(tableName, "user_id")
	_riskControlSetReport.Username = field.NewString(tableName, "username")
	_riskControlSetReport.RelatedType = field.NewInt64(tableName, "related_type")
	_riskControlSetReport.RelatedID = field.NewInt64(tableName, "related_id")
	_riskControlSetReport.SetID = field.NewInt64(tableName, "set_id")
	_riskControlSetReport.SetName = field.NewString(tableName, "set_name")
	_riskControlSetReport.Total = field.NewInt64(tableName, "total")
	_riskControlSetReport.MatchTotal = field.NewInt64(tableName, "match_total")
	_riskControlSetReport.CreatedAt = field.NewField(tableName, "created_at")
	_riskControlSetReport.UpdatedAt = field.NewField(tableName, "updated_at")
	_riskControlSetReport.IsMatch = field.NewInt64(tableName, "is_match")
	_riskControlSetReport.AuditType = field.NewInt64(tableName, "audit_type")

	_riskControlSetReport.fillFieldMap()

	return _riskControlSetReport
}

// riskControlSetReport 风控集合报告
type riskControlSetReport struct {
	riskControlSetReportDo riskControlSetReportDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	UserID      field.Int64  // 会员id
	Username    field.String // 会员账号
	RelatedType field.Int64  // 关联类型 1.优惠 2.备用
	RelatedID   field.Int64  // 关联id
	SetID       field.Int64  // 风控集id
	SetName     field.String // 风控集名称
	Total       field.Int64  // 规则数量
	MatchTotal  field.Int64  // 命中规则数量
	CreatedAt   field.Field  // 创建时间
	UpdatedAt   field.Field  // 更新时间
	IsMatch     field.Int64  // 是否匹配 1：是 0：否
	AuditType   field.Int64  // 审核方式 1：人工审核 2：自动审核

	fieldMap map[string]field.Expr
}

func (r riskControlSetReport) Table(newTableName string) *riskControlSetReport {
	r.riskControlSetReportDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskControlSetReport) As(alias string) *riskControlSetReport {
	r.riskControlSetReportDo.DO = *(r.riskControlSetReportDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskControlSetReport) updateTableName(table string) *riskControlSetReport {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Username = field.NewString(table, "username")
	r.RelatedType = field.NewInt64(table, "related_type")
	r.RelatedID = field.NewInt64(table, "related_id")
	r.SetID = field.NewInt64(table, "set_id")
	r.SetName = field.NewString(table, "set_name")
	r.Total = field.NewInt64(table, "total")
	r.MatchTotal = field.NewInt64(table, "match_total")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.IsMatch = field.NewInt64(table, "is_match")
	r.AuditType = field.NewInt64(table, "audit_type")

	r.fillFieldMap()

	return r
}

func (r *riskControlSetReport) WithContext(ctx context.Context) IRiskControlSetReportDo {
	return r.riskControlSetReportDo.WithContext(ctx)
}

func (r riskControlSetReport) TableName() string { return r.riskControlSetReportDo.TableName() }

func (r riskControlSetReport) Alias() string { return r.riskControlSetReportDo.Alias() }

func (r riskControlSetReport) Columns(cols ...field.Expr) gen.Columns {
	return r.riskControlSetReportDo.Columns(cols...)
}

func (r *riskControlSetReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskControlSetReport) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 13)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["username"] = r.Username
	r.fieldMap["related_type"] = r.RelatedType
	r.fieldMap["related_id"] = r.RelatedID
	r.fieldMap["set_id"] = r.SetID
	r.fieldMap["set_name"] = r.SetName
	r.fieldMap["total"] = r.Total
	r.fieldMap["match_total"] = r.MatchTotal
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["is_match"] = r.IsMatch
	r.fieldMap["audit_type"] = r.AuditType
}

func (r riskControlSetReport) clone(db *gorm.DB) riskControlSetReport {
	r.riskControlSetReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskControlSetReport) replaceDB(db *gorm.DB) riskControlSetReport {
	r.riskControlSetReportDo.ReplaceDB(db)
	return r
}

type riskControlSetReportDo struct{ gen.DO }

type IRiskControlSetReportDo interface {
	gen.SubQuery
	Debug() IRiskControlSetReportDo
	WithContext(ctx context.Context) IRiskControlSetReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRiskControlSetReportDo
	WriteDB() IRiskControlSetReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRiskControlSetReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRiskControlSetReportDo
	Not(conds ...gen.Condition) IRiskControlSetReportDo
	Or(conds ...gen.Condition) IRiskControlSetReportDo
	Select(conds ...field.Expr) IRiskControlSetReportDo
	Where(conds ...gen.Condition) IRiskControlSetReportDo
	Order(conds ...field.Expr) IRiskControlSetReportDo
	Distinct(cols ...field.Expr) IRiskControlSetReportDo
	Omit(cols ...field.Expr) IRiskControlSetReportDo
	Join(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo
	Group(cols ...field.Expr) IRiskControlSetReportDo
	Having(conds ...gen.Condition) IRiskControlSetReportDo
	Limit(limit int) IRiskControlSetReportDo
	Offset(offset int) IRiskControlSetReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskControlSetReportDo
	Unscoped() IRiskControlSetReportDo
	Create(values ...*model.RiskControlSetReport) error
	CreateInBatches(values []*model.RiskControlSetReport, batchSize int) error
	Save(values ...*model.RiskControlSetReport) error
	First() (*model.RiskControlSetReport, error)
	Take() (*model.RiskControlSetReport, error)
	Last() (*model.RiskControlSetReport, error)
	Find() ([]*model.RiskControlSetReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskControlSetReport, err error)
	FindInBatches(result *[]*model.RiskControlSetReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RiskControlSetReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRiskControlSetReportDo
	Assign(attrs ...field.AssignExpr) IRiskControlSetReportDo
	Joins(fields ...field.RelationField) IRiskControlSetReportDo
	Preload(fields ...field.RelationField) IRiskControlSetReportDo
	FirstOrInit() (*model.RiskControlSetReport, error)
	FirstOrCreate() (*model.RiskControlSetReport, error)
	FindByPage(offset int, limit int) (result []*model.RiskControlSetReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRiskControlSetReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r riskControlSetReportDo) Debug() IRiskControlSetReportDo {
	return r.withDO(r.DO.Debug())
}

func (r riskControlSetReportDo) WithContext(ctx context.Context) IRiskControlSetReportDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskControlSetReportDo) ReadDB() IRiskControlSetReportDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskControlSetReportDo) WriteDB() IRiskControlSetReportDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskControlSetReportDo) Session(config *gorm.Session) IRiskControlSetReportDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskControlSetReportDo) Clauses(conds ...clause.Expression) IRiskControlSetReportDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskControlSetReportDo) Returning(value interface{}, columns ...string) IRiskControlSetReportDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskControlSetReportDo) Not(conds ...gen.Condition) IRiskControlSetReportDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskControlSetReportDo) Or(conds ...gen.Condition) IRiskControlSetReportDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskControlSetReportDo) Select(conds ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskControlSetReportDo) Where(conds ...gen.Condition) IRiskControlSetReportDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskControlSetReportDo) Order(conds ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskControlSetReportDo) Distinct(cols ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskControlSetReportDo) Omit(cols ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskControlSetReportDo) Join(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskControlSetReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskControlSetReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskControlSetReportDo) Group(cols ...field.Expr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskControlSetReportDo) Having(conds ...gen.Condition) IRiskControlSetReportDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskControlSetReportDo) Limit(limit int) IRiskControlSetReportDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskControlSetReportDo) Offset(offset int) IRiskControlSetReportDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskControlSetReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRiskControlSetReportDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskControlSetReportDo) Unscoped() IRiskControlSetReportDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskControlSetReportDo) Create(values ...*model.RiskControlSetReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskControlSetReportDo) CreateInBatches(values []*model.RiskControlSetReport, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskControlSetReportDo) Save(values ...*model.RiskControlSetReport) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskControlSetReportDo) First() (*model.RiskControlSetReport, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlSetReport), nil
	}
}

func (r riskControlSetReportDo) Take() (*model.RiskControlSetReport, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlSetReport), nil
	}
}

func (r riskControlSetReportDo) Last() (*model.RiskControlSetReport, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlSetReport), nil
	}
}

func (r riskControlSetReportDo) Find() ([]*model.RiskControlSetReport, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskControlSetReport), err
}

func (r riskControlSetReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskControlSetReport, err error) {
	buf := make([]*model.RiskControlSetReport, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskControlSetReportDo) FindInBatches(result *[]*model.RiskControlSetReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskControlSetReportDo) Attrs(attrs ...field.AssignExpr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskControlSetReportDo) Assign(attrs ...field.AssignExpr) IRiskControlSetReportDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskControlSetReportDo) Joins(fields ...field.RelationField) IRiskControlSetReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskControlSetReportDo) Preload(fields ...field.RelationField) IRiskControlSetReportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskControlSetReportDo) FirstOrInit() (*model.RiskControlSetReport, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlSetReport), nil
	}
}

func (r riskControlSetReportDo) FirstOrCreate() (*model.RiskControlSetReport, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskControlSetReport), nil
	}
}

func (r riskControlSetReportDo) FindByPage(offset int, limit int) (result []*model.RiskControlSetReport, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskControlSetReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskControlSetReportDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskControlSetReportDo) Delete(models ...*model.RiskControlSetReport) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskControlSetReportDo) withDO(do gen.Dao) *riskControlSetReportDo {
	r.DO = *do.(*gen.DO)
	return r
}
