// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminUser(db *gorm.DB, opts ...gen.DOOption) adminUser {
	_adminUser := adminUser{}

	_adminUser.adminUserDo.UseDB(db, opts...)
	_adminUser.adminUserDo.UseModel(&model.AdminUser{})

	tableName := _adminUser.adminUserDo.TableName()
	_adminUser.ALL = field.NewAsterisk(tableName)
	_adminUser.ID = field.NewInt64(tableName, "id")
	_adminUser.Name = field.NewString(tableName, "name")
	_adminUser.AdminParentID = field.NewInt64(tableName, "admin_parent_id")
	_adminUser.ParentID = field.NewInt64(tableName, "parent_id")
	_adminUser.ParentName = field.NewString(tableName, "parent_name")
	_adminUser.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_adminUser.Password = field.NewString(tableName, "password")
	_adminUser.IsSuperAdmin = field.NewInt64(tableName, "is_super_admin")
	_adminUser.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_adminUser.LastLoginAt = field.NewField(tableName, "last_login_at")
	_adminUser.Status = field.NewInt64(tableName, "status")
	_adminUser.Remark = field.NewString(tableName, "remark")
	_adminUser.OperateAdminName = field.NewString(tableName, "operate_admin_name")
	_adminUser.OldToken = field.NewString(tableName, "old_token")
	_adminUser.RegCode = field.NewBytes(tableName, "reg_code")
	_adminUser.IsTester = field.NewInt64(tableName, "is_tester")
	_adminUser.IsAgent = field.NewInt64(tableName, "is_agent")
	_adminUser.IsGoogleVerify = field.NewInt64(tableName, "is_google_verify")
	_adminUser.GoogleSecretKey = field.NewString(tableName, "google_secret_key")
	_adminUser.CodeURL = field.NewString(tableName, "code_url")
	_adminUser.PerIncomeLimit = field.NewInt64(tableName, "per_income_limit")
	_adminUser.TotalIncomeLimit = field.NewInt64(tableName, "total_income_limit")
	_adminUser.CurrentIncomeLimit = field.NewInt64(tableName, "current_income_limit")
	_adminUser.CreatedAt = field.NewField(tableName, "created_at")
	_adminUser.UpdatedAt = field.NewField(tableName, "updated_at")
	_adminUser.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_adminUser.YongJin = field.NewInt64(tableName, "yong_jin")
	_adminUser.RechargeRate = field.NewFloat64(tableName, "recharge_rate")
	_adminUser.WithdrawalRate = field.NewFloat64(tableName, "withdrawal_rate")
	_adminUser.IsNeedChangePassword = field.NewInt64(tableName, "is_need_change_password")

	_adminUser.fillFieldMap()

	return _adminUser
}

type adminUser struct {
	adminUserDo adminUserDo

	ALL                  field.Asterisk
	ID                   field.Int64
	Name                 field.String
	AdminParentID        field.Int64 // 上级账号id
	ParentID             field.Int64
	ParentName           field.String
	ForefatherIds        field.String // 用户的所有上级以逗号分隔
	Password             field.String
	IsSuperAdmin         field.Int64 // 是否是超级管理员
	LastLoginIP          field.String
	LastLoginAt          field.Field
	Status               field.Int64
	Remark               field.String
	OperateAdminName     field.String // 操作管理员
	OldToken             field.String
	RegCode              field.Bytes  // 代理 推广码
	IsTester             field.Int64  // 0:非测试;1:测试账号
	IsAgent              field.Int64  // 0: 后台管理员账号,1:股东;2:总代理; 3: 代理;
	IsGoogleVerify       field.Int64  // 是否开启google验证
	GoogleSecretKey      field.String // google验证密钥
	CodeURL              field.String // google二维码
	PerIncomeLimit       field.Int64  // 单笔手动充值及赠送彩金限制
	TotalIncomeLimit     field.Int64  // 手动充值及赠送彩金限制总额
	CurrentIncomeLimit   field.Int64  // 手动充值及赠送彩金限制当前总额
	CreatedAt            field.Field
	UpdatedAt            field.Field
	IsDeleted            field.Int64   // 是否删除
	YongJin              field.Int64   // 退佣比例(内容数据为百分比数字，使用时需要除100)
	RechargeRate         field.Float64 // 充值手续费
	WithdrawalRate       field.Float64 // 提现手续费
	IsNeedChangePassword field.Int64   // 是否需要修改密码 0：不需要 1：需要

	fieldMap map[string]field.Expr
}

func (a adminUser) Table(newTableName string) *adminUser {
	a.adminUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminUser) As(alias string) *adminUser {
	a.adminUserDo.DO = *(a.adminUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminUser) updateTableName(table string) *adminUser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.AdminParentID = field.NewInt64(table, "admin_parent_id")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.Password = field.NewString(table, "password")
	a.IsSuperAdmin = field.NewInt64(table, "is_super_admin")
	a.LastLoginIP = field.NewString(table, "last_login_ip")
	a.LastLoginAt = field.NewField(table, "last_login_at")
	a.Status = field.NewInt64(table, "status")
	a.Remark = field.NewString(table, "remark")
	a.OperateAdminName = field.NewString(table, "operate_admin_name")
	a.OldToken = field.NewString(table, "old_token")
	a.RegCode = field.NewBytes(table, "reg_code")
	a.IsTester = field.NewInt64(table, "is_tester")
	a.IsAgent = field.NewInt64(table, "is_agent")
	a.IsGoogleVerify = field.NewInt64(table, "is_google_verify")
	a.GoogleSecretKey = field.NewString(table, "google_secret_key")
	a.CodeURL = field.NewString(table, "code_url")
	a.PerIncomeLimit = field.NewInt64(table, "per_income_limit")
	a.TotalIncomeLimit = field.NewInt64(table, "total_income_limit")
	a.CurrentIncomeLimit = field.NewInt64(table, "current_income_limit")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.IsDeleted = field.NewInt64(table, "is_deleted")
	a.YongJin = field.NewInt64(table, "yong_jin")
	a.RechargeRate = field.NewFloat64(table, "recharge_rate")
	a.WithdrawalRate = field.NewFloat64(table, "withdrawal_rate")
	a.IsNeedChangePassword = field.NewInt64(table, "is_need_change_password")

	a.fillFieldMap()

	return a
}

func (a *adminUser) WithContext(ctx context.Context) IAdminUserDo {
	return a.adminUserDo.WithContext(ctx)
}

func (a adminUser) TableName() string { return a.adminUserDo.TableName() }

func (a adminUser) Alias() string { return a.adminUserDo.Alias() }

func (a adminUser) Columns(cols ...field.Expr) gen.Columns { return a.adminUserDo.Columns(cols...) }

func (a *adminUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 30)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["admin_parent_id"] = a.AdminParentID
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["password"] = a.Password
	a.fieldMap["is_super_admin"] = a.IsSuperAdmin
	a.fieldMap["last_login_ip"] = a.LastLoginIP
	a.fieldMap["last_login_at"] = a.LastLoginAt
	a.fieldMap["status"] = a.Status
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["operate_admin_name"] = a.OperateAdminName
	a.fieldMap["old_token"] = a.OldToken
	a.fieldMap["reg_code"] = a.RegCode
	a.fieldMap["is_tester"] = a.IsTester
	a.fieldMap["is_agent"] = a.IsAgent
	a.fieldMap["is_google_verify"] = a.IsGoogleVerify
	a.fieldMap["google_secret_key"] = a.GoogleSecretKey
	a.fieldMap["code_url"] = a.CodeURL
	a.fieldMap["per_income_limit"] = a.PerIncomeLimit
	a.fieldMap["total_income_limit"] = a.TotalIncomeLimit
	a.fieldMap["current_income_limit"] = a.CurrentIncomeLimit
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["yong_jin"] = a.YongJin
	a.fieldMap["recharge_rate"] = a.RechargeRate
	a.fieldMap["withdrawal_rate"] = a.WithdrawalRate
	a.fieldMap["is_need_change_password"] = a.IsNeedChangePassword
}

func (a adminUser) clone(db *gorm.DB) adminUser {
	a.adminUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminUser) replaceDB(db *gorm.DB) adminUser {
	a.adminUserDo.ReplaceDB(db)
	return a
}

type adminUserDo struct{ gen.DO }

type IAdminUserDo interface {
	gen.SubQuery
	Debug() IAdminUserDo
	WithContext(ctx context.Context) IAdminUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminUserDo
	WriteDB() IAdminUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminUserDo
	Not(conds ...gen.Condition) IAdminUserDo
	Or(conds ...gen.Condition) IAdminUserDo
	Select(conds ...field.Expr) IAdminUserDo
	Where(conds ...gen.Condition) IAdminUserDo
	Order(conds ...field.Expr) IAdminUserDo
	Distinct(cols ...field.Expr) IAdminUserDo
	Omit(cols ...field.Expr) IAdminUserDo
	Join(table schema.Tabler, on ...field.Expr) IAdminUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserDo
	Group(cols ...field.Expr) IAdminUserDo
	Having(conds ...gen.Condition) IAdminUserDo
	Limit(limit int) IAdminUserDo
	Offset(offset int) IAdminUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserDo
	Unscoped() IAdminUserDo
	Create(values ...*model.AdminUser) error
	CreateInBatches(values []*model.AdminUser, batchSize int) error
	Save(values ...*model.AdminUser) error
	First() (*model.AdminUser, error)
	Take() (*model.AdminUser, error)
	Last() (*model.AdminUser, error)
	Find() ([]*model.AdminUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUser, err error)
	FindInBatches(result *[]*model.AdminUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminUserDo
	Assign(attrs ...field.AssignExpr) IAdminUserDo
	Joins(fields ...field.RelationField) IAdminUserDo
	Preload(fields ...field.RelationField) IAdminUserDo
	FirstOrInit() (*model.AdminUser, error)
	FirstOrCreate() (*model.AdminUser, error)
	FindByPage(offset int, limit int) (result []*model.AdminUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminUserDo) Debug() IAdminUserDo {
	return a.withDO(a.DO.Debug())
}

func (a adminUserDo) WithContext(ctx context.Context) IAdminUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminUserDo) ReadDB() IAdminUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminUserDo) WriteDB() IAdminUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminUserDo) Session(config *gorm.Session) IAdminUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminUserDo) Clauses(conds ...clause.Expression) IAdminUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminUserDo) Returning(value interface{}, columns ...string) IAdminUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminUserDo) Not(conds ...gen.Condition) IAdminUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminUserDo) Or(conds ...gen.Condition) IAdminUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminUserDo) Select(conds ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminUserDo) Where(conds ...gen.Condition) IAdminUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminUserDo) Order(conds ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminUserDo) Distinct(cols ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminUserDo) Omit(cols ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminUserDo) Join(table schema.Tabler, on ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminUserDo) Group(cols ...field.Expr) IAdminUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminUserDo) Having(conds ...gen.Condition) IAdminUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminUserDo) Limit(limit int) IAdminUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminUserDo) Offset(offset int) IAdminUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminUserDo) Unscoped() IAdminUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminUserDo) Create(values ...*model.AdminUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminUserDo) CreateInBatches(values []*model.AdminUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminUserDo) Save(values ...*model.AdminUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminUserDo) First() (*model.AdminUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUser), nil
	}
}

func (a adminUserDo) Take() (*model.AdminUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUser), nil
	}
}

func (a adminUserDo) Last() (*model.AdminUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUser), nil
	}
}

func (a adminUserDo) Find() ([]*model.AdminUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminUser), err
}

func (a adminUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminUser, err error) {
	buf := make([]*model.AdminUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminUserDo) FindInBatches(result *[]*model.AdminUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminUserDo) Attrs(attrs ...field.AssignExpr) IAdminUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminUserDo) Assign(attrs ...field.AssignExpr) IAdminUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminUserDo) Joins(fields ...field.RelationField) IAdminUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminUserDo) Preload(fields ...field.RelationField) IAdminUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminUserDo) FirstOrInit() (*model.AdminUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUser), nil
	}
}

func (a adminUserDo) FirstOrCreate() (*model.AdminUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminUser), nil
	}
}

func (a adminUserDo) FindByPage(offset int, limit int) (result []*model.AdminUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminUserDo) Delete(models ...*model.AdminUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminUserDo) withDO(do gen.Dao) *adminUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
