// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserSuccessRechargeStaticsCopy1(db *gorm.DB, opts ...gen.DOOption) userSuccessRechargeStaticsCopy1 {
	_userSuccessRechargeStaticsCopy1 := userSuccessRechargeStaticsCopy1{}

	_userSuccessRechargeStaticsCopy1.userSuccessRechargeStaticsCopy1Do.UseDB(db, opts...)
	_userSuccessRechargeStaticsCopy1.userSuccessRechargeStaticsCopy1Do.UseModel(&model.UserSuccessRechargeStaticsCopy1{})

	tableName := _userSuccessRechargeStaticsCopy1.userSuccessRechargeStaticsCopy1Do.TableName()
	_userSuccessRechargeStaticsCopy1.ALL = field.NewAsterisk(tableName)
	_userSuccessRechargeStaticsCopy1.ID = field.NewInt64(tableName, "id")
	_userSuccessRechargeStaticsCopy1.DateAt = field.NewTime(tableName, "date_at")
	_userSuccessRechargeStaticsCopy1.YearValue = field.NewInt64(tableName, "year_value")
	_userSuccessRechargeStaticsCopy1.RechargeCount = field.NewInt64(tableName, "recharge_count")
	_userSuccessRechargeStaticsCopy1.LoginCount = field.NewInt64(tableName, "login_count")
	_userSuccessRechargeStaticsCopy1.ConversionRate = field.NewFloat64(tableName, "conversion_rate")
	_userSuccessRechargeStaticsCopy1.BetCount = field.NewInt64(tableName, "bet_count")
	_userSuccessRechargeStaticsCopy1.RechargeBetRate = field.NewFloat64(tableName, "recharge_bet_rate")
	_userSuccessRechargeStaticsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_userSuccessRechargeStaticsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_userSuccessRechargeStaticsCopy1.NewRechargeCount = field.NewInt64(tableName, "new_recharge_count")
	_userSuccessRechargeStaticsCopy1.NewLoginCount = field.NewInt64(tableName, "new_login_count")
	_userSuccessRechargeStaticsCopy1.NewConversionRate = field.NewFloat64(tableName, "new_conversion_rate")
	_userSuccessRechargeStaticsCopy1.NewBetCount = field.NewInt64(tableName, "new_bet_count")
	_userSuccessRechargeStaticsCopy1.NewRechargeBetRate = field.NewFloat64(tableName, "new_recharge_bet_rate")
	_userSuccessRechargeStaticsCopy1.OldRechargeCount = field.NewInt64(tableName, "old_recharge_count")
	_userSuccessRechargeStaticsCopy1.OldLoginCount = field.NewInt64(tableName, "old_login_count")
	_userSuccessRechargeStaticsCopy1.OldConversionRate = field.NewFloat64(tableName, "old_conversion_rate")
	_userSuccessRechargeStaticsCopy1.OldBetCount = field.NewInt64(tableName, "old_bet_count")
	_userSuccessRechargeStaticsCopy1.OldRechargeBetRate = field.NewFloat64(tableName, "old_recharge_bet_rate")

	_userSuccessRechargeStaticsCopy1.fillFieldMap()

	return _userSuccessRechargeStaticsCopy1
}

// userSuccessRechargeStaticsCopy1 用户充值成功统计数据表
type userSuccessRechargeStaticsCopy1 struct {
	userSuccessRechargeStaticsCopy1Do userSuccessRechargeStaticsCopy1Do

	ALL                field.Asterisk
	ID                 field.Int64   // 自增id
	DateAt             field.Time    // 时间date
	YearValue          field.Int64   // 年度
	RechargeCount      field.Int64   // 充值数量
	LoginCount         field.Int64   // 登陆数量
	ConversionRate     field.Float64 // 转化率
	BetCount           field.Int64   // 投注人数
	RechargeBetRate    field.Float64 // 充值投注转化率
	CreatedAt          field.Field   // 记录创建时间
	UpdatedAt          field.Field   // 记录更新时间
	NewRechargeCount   field.Int64   // 新会员充值数量
	NewLoginCount      field.Int64   // 新会员登录数量
	NewConversionRate  field.Float64 // 新会员转化率
	NewBetCount        field.Int64   // 新会员投注人数
	NewRechargeBetRate field.Float64 // 新会员充值投注转化率
	OldRechargeCount   field.Int64   // 新会员充值数量
	OldLoginCount      field.Int64   // 新会员登录数量
	OldConversionRate  field.Float64 // 新会员转化率
	OldBetCount        field.Int64   // 新会员投注人数
	OldRechargeBetRate field.Float64 // 新会员充值投注转化率

	fieldMap map[string]field.Expr
}

func (u userSuccessRechargeStaticsCopy1) Table(newTableName string) *userSuccessRechargeStaticsCopy1 {
	u.userSuccessRechargeStaticsCopy1Do.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSuccessRechargeStaticsCopy1) As(alias string) *userSuccessRechargeStaticsCopy1 {
	u.userSuccessRechargeStaticsCopy1Do.DO = *(u.userSuccessRechargeStaticsCopy1Do.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSuccessRechargeStaticsCopy1) updateTableName(table string) *userSuccessRechargeStaticsCopy1 {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewTime(table, "date_at")
	u.YearValue = field.NewInt64(table, "year_value")
	u.RechargeCount = field.NewInt64(table, "recharge_count")
	u.LoginCount = field.NewInt64(table, "login_count")
	u.ConversionRate = field.NewFloat64(table, "conversion_rate")
	u.BetCount = field.NewInt64(table, "bet_count")
	u.RechargeBetRate = field.NewFloat64(table, "recharge_bet_rate")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.NewRechargeCount = field.NewInt64(table, "new_recharge_count")
	u.NewLoginCount = field.NewInt64(table, "new_login_count")
	u.NewConversionRate = field.NewFloat64(table, "new_conversion_rate")
	u.NewBetCount = field.NewInt64(table, "new_bet_count")
	u.NewRechargeBetRate = field.NewFloat64(table, "new_recharge_bet_rate")
	u.OldRechargeCount = field.NewInt64(table, "old_recharge_count")
	u.OldLoginCount = field.NewInt64(table, "old_login_count")
	u.OldConversionRate = field.NewFloat64(table, "old_conversion_rate")
	u.OldBetCount = field.NewInt64(table, "old_bet_count")
	u.OldRechargeBetRate = field.NewFloat64(table, "old_recharge_bet_rate")

	u.fillFieldMap()

	return u
}

func (u *userSuccessRechargeStaticsCopy1) WithContext(ctx context.Context) IUserSuccessRechargeStaticsCopy1Do {
	return u.userSuccessRechargeStaticsCopy1Do.WithContext(ctx)
}

func (u userSuccessRechargeStaticsCopy1) TableName() string {
	return u.userSuccessRechargeStaticsCopy1Do.TableName()
}

func (u userSuccessRechargeStaticsCopy1) Alias() string {
	return u.userSuccessRechargeStaticsCopy1Do.Alias()
}

func (u userSuccessRechargeStaticsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return u.userSuccessRechargeStaticsCopy1Do.Columns(cols...)
}

func (u *userSuccessRechargeStaticsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSuccessRechargeStaticsCopy1) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 20)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["year_value"] = u.YearValue
	u.fieldMap["recharge_count"] = u.RechargeCount
	u.fieldMap["login_count"] = u.LoginCount
	u.fieldMap["conversion_rate"] = u.ConversionRate
	u.fieldMap["bet_count"] = u.BetCount
	u.fieldMap["recharge_bet_rate"] = u.RechargeBetRate
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["new_recharge_count"] = u.NewRechargeCount
	u.fieldMap["new_login_count"] = u.NewLoginCount
	u.fieldMap["new_conversion_rate"] = u.NewConversionRate
	u.fieldMap["new_bet_count"] = u.NewBetCount
	u.fieldMap["new_recharge_bet_rate"] = u.NewRechargeBetRate
	u.fieldMap["old_recharge_count"] = u.OldRechargeCount
	u.fieldMap["old_login_count"] = u.OldLoginCount
	u.fieldMap["old_conversion_rate"] = u.OldConversionRate
	u.fieldMap["old_bet_count"] = u.OldBetCount
	u.fieldMap["old_recharge_bet_rate"] = u.OldRechargeBetRate
}

func (u userSuccessRechargeStaticsCopy1) clone(db *gorm.DB) userSuccessRechargeStaticsCopy1 {
	u.userSuccessRechargeStaticsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSuccessRechargeStaticsCopy1) replaceDB(db *gorm.DB) userSuccessRechargeStaticsCopy1 {
	u.userSuccessRechargeStaticsCopy1Do.ReplaceDB(db)
	return u
}

type userSuccessRechargeStaticsCopy1Do struct{ gen.DO }

type IUserSuccessRechargeStaticsCopy1Do interface {
	gen.SubQuery
	Debug() IUserSuccessRechargeStaticsCopy1Do
	WithContext(ctx context.Context) IUserSuccessRechargeStaticsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSuccessRechargeStaticsCopy1Do
	WriteDB() IUserSuccessRechargeStaticsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSuccessRechargeStaticsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSuccessRechargeStaticsCopy1Do
	Not(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do
	Or(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do
	Select(conds ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Where(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do
	Order(conds ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Distinct(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Omit(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Group(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do
	Having(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do
	Limit(limit int) IUserSuccessRechargeStaticsCopy1Do
	Offset(offset int) IUserSuccessRechargeStaticsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeStaticsCopy1Do
	Unscoped() IUserSuccessRechargeStaticsCopy1Do
	Create(values ...*model.UserSuccessRechargeStaticsCopy1) error
	CreateInBatches(values []*model.UserSuccessRechargeStaticsCopy1, batchSize int) error
	Save(values ...*model.UserSuccessRechargeStaticsCopy1) error
	First() (*model.UserSuccessRechargeStaticsCopy1, error)
	Take() (*model.UserSuccessRechargeStaticsCopy1, error)
	Last() (*model.UserSuccessRechargeStaticsCopy1, error)
	Find() ([]*model.UserSuccessRechargeStaticsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeStaticsCopy1, err error)
	FindInBatches(result *[]*model.UserSuccessRechargeStaticsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSuccessRechargeStaticsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeStaticsCopy1Do
	Assign(attrs ...field.AssignExpr) IUserSuccessRechargeStaticsCopy1Do
	Joins(fields ...field.RelationField) IUserSuccessRechargeStaticsCopy1Do
	Preload(fields ...field.RelationField) IUserSuccessRechargeStaticsCopy1Do
	FirstOrInit() (*model.UserSuccessRechargeStaticsCopy1, error)
	FirstOrCreate() (*model.UserSuccessRechargeStaticsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeStaticsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSuccessRechargeStaticsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSuccessRechargeStaticsCopy1Do) Debug() IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Debug())
}

func (u userSuccessRechargeStaticsCopy1Do) WithContext(ctx context.Context) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSuccessRechargeStaticsCopy1Do) ReadDB() IUserSuccessRechargeStaticsCopy1Do {
	return u.Clauses(dbresolver.Read)
}

func (u userSuccessRechargeStaticsCopy1Do) WriteDB() IUserSuccessRechargeStaticsCopy1Do {
	return u.Clauses(dbresolver.Write)
}

func (u userSuccessRechargeStaticsCopy1Do) Session(config *gorm.Session) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Session(config))
}

func (u userSuccessRechargeStaticsCopy1Do) Clauses(conds ...clause.Expression) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Returning(value interface{}, columns ...string) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSuccessRechargeStaticsCopy1Do) Not(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Or(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Select(conds ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Where(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Order(conds ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Distinct(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSuccessRechargeStaticsCopy1Do) Omit(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSuccessRechargeStaticsCopy1Do) Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSuccessRechargeStaticsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSuccessRechargeStaticsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSuccessRechargeStaticsCopy1Do) Group(cols ...field.Expr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSuccessRechargeStaticsCopy1Do) Having(conds ...gen.Condition) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSuccessRechargeStaticsCopy1Do) Limit(limit int) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSuccessRechargeStaticsCopy1Do) Offset(offset int) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSuccessRechargeStaticsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSuccessRechargeStaticsCopy1Do) Unscoped() IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Unscoped())
}

func (u userSuccessRechargeStaticsCopy1Do) Create(values ...*model.UserSuccessRechargeStaticsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSuccessRechargeStaticsCopy1Do) CreateInBatches(values []*model.UserSuccessRechargeStaticsCopy1, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSuccessRechargeStaticsCopy1Do) Save(values ...*model.UserSuccessRechargeStaticsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSuccessRechargeStaticsCopy1Do) First() (*model.UserSuccessRechargeStaticsCopy1, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStaticsCopy1), nil
	}
}

func (u userSuccessRechargeStaticsCopy1Do) Take() (*model.UserSuccessRechargeStaticsCopy1, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStaticsCopy1), nil
	}
}

func (u userSuccessRechargeStaticsCopy1Do) Last() (*model.UserSuccessRechargeStaticsCopy1, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStaticsCopy1), nil
	}
}

func (u userSuccessRechargeStaticsCopy1Do) Find() ([]*model.UserSuccessRechargeStaticsCopy1, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSuccessRechargeStaticsCopy1), err
}

func (u userSuccessRechargeStaticsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeStaticsCopy1, err error) {
	buf := make([]*model.UserSuccessRechargeStaticsCopy1, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSuccessRechargeStaticsCopy1Do) FindInBatches(result *[]*model.UserSuccessRechargeStaticsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSuccessRechargeStaticsCopy1Do) Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSuccessRechargeStaticsCopy1Do) Assign(attrs ...field.AssignExpr) IUserSuccessRechargeStaticsCopy1Do {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSuccessRechargeStaticsCopy1Do) Joins(fields ...field.RelationField) IUserSuccessRechargeStaticsCopy1Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSuccessRechargeStaticsCopy1Do) Preload(fields ...field.RelationField) IUserSuccessRechargeStaticsCopy1Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSuccessRechargeStaticsCopy1Do) FirstOrInit() (*model.UserSuccessRechargeStaticsCopy1, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStaticsCopy1), nil
	}
}

func (u userSuccessRechargeStaticsCopy1Do) FirstOrCreate() (*model.UserSuccessRechargeStaticsCopy1, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStaticsCopy1), nil
	}
}

func (u userSuccessRechargeStaticsCopy1Do) FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeStaticsCopy1, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSuccessRechargeStaticsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSuccessRechargeStaticsCopy1Do) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSuccessRechargeStaticsCopy1Do) Delete(models ...*model.UserSuccessRechargeStaticsCopy1) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSuccessRechargeStaticsCopy1Do) withDO(do gen.Dao) *userSuccessRechargeStaticsCopy1Do {
	u.DO = *do.(*gen.DO)
	return u
}
