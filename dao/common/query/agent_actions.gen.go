// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentAction(db *gorm.DB, opts ...gen.DOOption) agentAction {
	_agentAction := agentAction{}

	_agentAction.agentActionDo.UseDB(db, opts...)
	_agentAction.agentActionDo.UseModel(&model.AgentAction{})

	tableName := _agentAction.agentActionDo.TableName()
	_agentAction.ALL = field.NewAsterisk(tableName)
	_agentAction.ID = field.NewInt64(tableName, "id")
	_agentAction.MenuCode = field.NewString(tableName, "menu_code")
	_agentAction.Name = field.NewString(tableName, "name")
	_agentAction.Action = field.NewString(tableName, "action")
	_agentAction.Method = field.NewString(tableName, "method")
	_agentAction.Remark = field.NewString(tableName, "remark")
	_agentAction.CreatedAt = field.NewField(tableName, "created_at")
	_agentAction.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentAction.OperateAdminName = field.NewString(tableName, "operate_admin_name")

	_agentAction.fillFieldMap()

	return _agentAction
}

type agentAction struct {
	agentActionDo agentActionDo

	ALL              field.Asterisk
	ID               field.Int64
	MenuCode         field.String
	Name             field.String
	Action           field.String
	Method           field.String // 请求方法
	Remark           field.String
	CreatedAt        field.Field
	UpdatedAt        field.Field
	OperateAdminName field.String

	fieldMap map[string]field.Expr
}

func (a agentAction) Table(newTableName string) *agentAction {
	a.agentActionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentAction) As(alias string) *agentAction {
	a.agentActionDo.DO = *(a.agentActionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentAction) updateTableName(table string) *agentAction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.MenuCode = field.NewString(table, "menu_code")
	a.Name = field.NewString(table, "name")
	a.Action = field.NewString(table, "action")
	a.Method = field.NewString(table, "method")
	a.Remark = field.NewString(table, "remark")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.OperateAdminName = field.NewString(table, "operate_admin_name")

	a.fillFieldMap()

	return a
}

func (a *agentAction) WithContext(ctx context.Context) IAgentActionDo {
	return a.agentActionDo.WithContext(ctx)
}

func (a agentAction) TableName() string { return a.agentActionDo.TableName() }

func (a agentAction) Alias() string { return a.agentActionDo.Alias() }

func (a agentAction) Columns(cols ...field.Expr) gen.Columns { return a.agentActionDo.Columns(cols...) }

func (a *agentAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentAction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["menu_code"] = a.MenuCode
	a.fieldMap["name"] = a.Name
	a.fieldMap["action"] = a.Action
	a.fieldMap["method"] = a.Method
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["operate_admin_name"] = a.OperateAdminName
}

func (a agentAction) clone(db *gorm.DB) agentAction {
	a.agentActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentAction) replaceDB(db *gorm.DB) agentAction {
	a.agentActionDo.ReplaceDB(db)
	return a
}

type agentActionDo struct{ gen.DO }

type IAgentActionDo interface {
	gen.SubQuery
	Debug() IAgentActionDo
	WithContext(ctx context.Context) IAgentActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentActionDo
	WriteDB() IAgentActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentActionDo
	Not(conds ...gen.Condition) IAgentActionDo
	Or(conds ...gen.Condition) IAgentActionDo
	Select(conds ...field.Expr) IAgentActionDo
	Where(conds ...gen.Condition) IAgentActionDo
	Order(conds ...field.Expr) IAgentActionDo
	Distinct(cols ...field.Expr) IAgentActionDo
	Omit(cols ...field.Expr) IAgentActionDo
	Join(table schema.Tabler, on ...field.Expr) IAgentActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentActionDo
	Group(cols ...field.Expr) IAgentActionDo
	Having(conds ...gen.Condition) IAgentActionDo
	Limit(limit int) IAgentActionDo
	Offset(offset int) IAgentActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentActionDo
	Unscoped() IAgentActionDo
	Create(values ...*model.AgentAction) error
	CreateInBatches(values []*model.AgentAction, batchSize int) error
	Save(values ...*model.AgentAction) error
	First() (*model.AgentAction, error)
	Take() (*model.AgentAction, error)
	Last() (*model.AgentAction, error)
	Find() ([]*model.AgentAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentAction, err error)
	FindInBatches(result *[]*model.AgentAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentActionDo
	Assign(attrs ...field.AssignExpr) IAgentActionDo
	Joins(fields ...field.RelationField) IAgentActionDo
	Preload(fields ...field.RelationField) IAgentActionDo
	FirstOrInit() (*model.AgentAction, error)
	FirstOrCreate() (*model.AgentAction, error)
	FindByPage(offset int, limit int) (result []*model.AgentAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentActionDo) Debug() IAgentActionDo {
	return a.withDO(a.DO.Debug())
}

func (a agentActionDo) WithContext(ctx context.Context) IAgentActionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentActionDo) ReadDB() IAgentActionDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentActionDo) WriteDB() IAgentActionDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentActionDo) Session(config *gorm.Session) IAgentActionDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentActionDo) Clauses(conds ...clause.Expression) IAgentActionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentActionDo) Returning(value interface{}, columns ...string) IAgentActionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentActionDo) Not(conds ...gen.Condition) IAgentActionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentActionDo) Or(conds ...gen.Condition) IAgentActionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentActionDo) Select(conds ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentActionDo) Where(conds ...gen.Condition) IAgentActionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentActionDo) Order(conds ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentActionDo) Distinct(cols ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentActionDo) Omit(cols ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentActionDo) Join(table schema.Tabler, on ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentActionDo) Group(cols ...field.Expr) IAgentActionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentActionDo) Having(conds ...gen.Condition) IAgentActionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentActionDo) Limit(limit int) IAgentActionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentActionDo) Offset(offset int) IAgentActionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentActionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentActionDo) Unscoped() IAgentActionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentActionDo) Create(values ...*model.AgentAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentActionDo) CreateInBatches(values []*model.AgentAction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentActionDo) Save(values ...*model.AgentAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentActionDo) First() (*model.AgentAction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAction), nil
	}
}

func (a agentActionDo) Take() (*model.AgentAction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAction), nil
	}
}

func (a agentActionDo) Last() (*model.AgentAction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAction), nil
	}
}

func (a agentActionDo) Find() ([]*model.AgentAction, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentAction), err
}

func (a agentActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentAction, err error) {
	buf := make([]*model.AgentAction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentActionDo) FindInBatches(result *[]*model.AgentAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentActionDo) Attrs(attrs ...field.AssignExpr) IAgentActionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentActionDo) Assign(attrs ...field.AssignExpr) IAgentActionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentActionDo) Joins(fields ...field.RelationField) IAgentActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentActionDo) Preload(fields ...field.RelationField) IAgentActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentActionDo) FirstOrInit() (*model.AgentAction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAction), nil
	}
}

func (a agentActionDo) FirstOrCreate() (*model.AgentAction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentAction), nil
	}
}

func (a agentActionDo) FindByPage(offset int, limit int) (result []*model.AgentAction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentActionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentActionDo) Delete(models ...*model.AgentAction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentActionDo) withDO(do gen.Dao) *agentActionDo {
	a.DO = *do.(*gen.DO)
	return a
}
