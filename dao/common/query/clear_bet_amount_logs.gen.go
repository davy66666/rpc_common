// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newClearBetAmountLog(db *gorm.DB, opts ...gen.DOOption) clearBetAmountLog {
	_clearBetAmountLog := clearBetAmountLog{}

	_clearBetAmountLog.clearBetAmountLogDo.UseDB(db, opts...)
	_clearBetAmountLog.clearBetAmountLogDo.UseModel(&model.ClearBetAmountLog{})

	tableName := _clearBetAmountLog.clearBetAmountLogDo.TableName()
	_clearBetAmountLog.ALL = field.NewAsterisk(tableName)
	_clearBetAmountLog.ID = field.NewInt64(tableName, "id")
	_clearBetAmountLog.UserID = field.NewInt64(tableName, "user_id")
	_clearBetAmountLog.Username = field.NewString(tableName, "username")
	_clearBetAmountLog.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_clearBetAmountLog.UserGameBetAmountIds = field.NewString(tableName, "user_game_bet_amount_ids")
	_clearBetAmountLog.Content = field.NewString(tableName, "content")
	_clearBetAmountLog.Status = field.NewInt64(tableName, "status")
	_clearBetAmountLog.FinishedAt = field.NewField(tableName, "finished_at")
	_clearBetAmountLog.CreatedAt = field.NewField(tableName, "created_at")
	_clearBetAmountLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_clearBetAmountLog.AdminName = field.NewString(tableName, "admin_name")

	_clearBetAmountLog.fillFieldMap()

	return _clearBetAmountLog
}

// clearBetAmountLog 清空打码量记录表
type clearBetAmountLog struct {
	clearBetAmountLogDo clearBetAmountLogDo

	ALL                  field.Asterisk
	ID                   field.Int64
	UserID               field.Int64   // 用户id
	Username             field.String  // 用户名
	BetAmount            field.Float64 // 清空总打码金额
	UserGameBetAmountIds field.String  // 清空打码记录的ids
	Content              field.String  // 打码详情内容，jsonArr格式
	Status               field.Int64   // 是否完成[0:否;1:是]
	FinishedAt           field.Field   // 完成时间
	CreatedAt            field.Field
	UpdatedAt            field.Field
	AdminName            field.String // 操作员

	fieldMap map[string]field.Expr
}

func (c clearBetAmountLog) Table(newTableName string) *clearBetAmountLog {
	c.clearBetAmountLogDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clearBetAmountLog) As(alias string) *clearBetAmountLog {
	c.clearBetAmountLogDo.DO = *(c.clearBetAmountLogDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clearBetAmountLog) updateTableName(table string) *clearBetAmountLog {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewInt64(table, "user_id")
	c.Username = field.NewString(table, "username")
	c.BetAmount = field.NewFloat64(table, "bet_amount")
	c.UserGameBetAmountIds = field.NewString(table, "user_game_bet_amount_ids")
	c.Content = field.NewString(table, "content")
	c.Status = field.NewInt64(table, "status")
	c.FinishedAt = field.NewField(table, "finished_at")
	c.CreatedAt = field.NewField(table, "created_at")
	c.UpdatedAt = field.NewField(table, "updated_at")
	c.AdminName = field.NewString(table, "admin_name")

	c.fillFieldMap()

	return c
}

func (c *clearBetAmountLog) WithContext(ctx context.Context) IClearBetAmountLogDo {
	return c.clearBetAmountLogDo.WithContext(ctx)
}

func (c clearBetAmountLog) TableName() string { return c.clearBetAmountLogDo.TableName() }

func (c clearBetAmountLog) Alias() string { return c.clearBetAmountLogDo.Alias() }

func (c clearBetAmountLog) Columns(cols ...field.Expr) gen.Columns {
	return c.clearBetAmountLogDo.Columns(cols...)
}

func (c *clearBetAmountLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clearBetAmountLog) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["username"] = c.Username
	c.fieldMap["bet_amount"] = c.BetAmount
	c.fieldMap["user_game_bet_amount_ids"] = c.UserGameBetAmountIds
	c.fieldMap["content"] = c.Content
	c.fieldMap["status"] = c.Status
	c.fieldMap["finished_at"] = c.FinishedAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["admin_name"] = c.AdminName
}

func (c clearBetAmountLog) clone(db *gorm.DB) clearBetAmountLog {
	c.clearBetAmountLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clearBetAmountLog) replaceDB(db *gorm.DB) clearBetAmountLog {
	c.clearBetAmountLogDo.ReplaceDB(db)
	return c
}

type clearBetAmountLogDo struct{ gen.DO }

type IClearBetAmountLogDo interface {
	gen.SubQuery
	Debug() IClearBetAmountLogDo
	WithContext(ctx context.Context) IClearBetAmountLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClearBetAmountLogDo
	WriteDB() IClearBetAmountLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClearBetAmountLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClearBetAmountLogDo
	Not(conds ...gen.Condition) IClearBetAmountLogDo
	Or(conds ...gen.Condition) IClearBetAmountLogDo
	Select(conds ...field.Expr) IClearBetAmountLogDo
	Where(conds ...gen.Condition) IClearBetAmountLogDo
	Order(conds ...field.Expr) IClearBetAmountLogDo
	Distinct(cols ...field.Expr) IClearBetAmountLogDo
	Omit(cols ...field.Expr) IClearBetAmountLogDo
	Join(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo
	Group(cols ...field.Expr) IClearBetAmountLogDo
	Having(conds ...gen.Condition) IClearBetAmountLogDo
	Limit(limit int) IClearBetAmountLogDo
	Offset(offset int) IClearBetAmountLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClearBetAmountLogDo
	Unscoped() IClearBetAmountLogDo
	Create(values ...*model.ClearBetAmountLog) error
	CreateInBatches(values []*model.ClearBetAmountLog, batchSize int) error
	Save(values ...*model.ClearBetAmountLog) error
	First() (*model.ClearBetAmountLog, error)
	Take() (*model.ClearBetAmountLog, error)
	Last() (*model.ClearBetAmountLog, error)
	Find() ([]*model.ClearBetAmountLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClearBetAmountLog, err error)
	FindInBatches(result *[]*model.ClearBetAmountLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ClearBetAmountLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClearBetAmountLogDo
	Assign(attrs ...field.AssignExpr) IClearBetAmountLogDo
	Joins(fields ...field.RelationField) IClearBetAmountLogDo
	Preload(fields ...field.RelationField) IClearBetAmountLogDo
	FirstOrInit() (*model.ClearBetAmountLog, error)
	FirstOrCreate() (*model.ClearBetAmountLog, error)
	FindByPage(offset int, limit int) (result []*model.ClearBetAmountLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClearBetAmountLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clearBetAmountLogDo) Debug() IClearBetAmountLogDo {
	return c.withDO(c.DO.Debug())
}

func (c clearBetAmountLogDo) WithContext(ctx context.Context) IClearBetAmountLogDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clearBetAmountLogDo) ReadDB() IClearBetAmountLogDo {
	return c.Clauses(dbresolver.Read)
}

func (c clearBetAmountLogDo) WriteDB() IClearBetAmountLogDo {
	return c.Clauses(dbresolver.Write)
}

func (c clearBetAmountLogDo) Session(config *gorm.Session) IClearBetAmountLogDo {
	return c.withDO(c.DO.Session(config))
}

func (c clearBetAmountLogDo) Clauses(conds ...clause.Expression) IClearBetAmountLogDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clearBetAmountLogDo) Returning(value interface{}, columns ...string) IClearBetAmountLogDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clearBetAmountLogDo) Not(conds ...gen.Condition) IClearBetAmountLogDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clearBetAmountLogDo) Or(conds ...gen.Condition) IClearBetAmountLogDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clearBetAmountLogDo) Select(conds ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clearBetAmountLogDo) Where(conds ...gen.Condition) IClearBetAmountLogDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clearBetAmountLogDo) Order(conds ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clearBetAmountLogDo) Distinct(cols ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clearBetAmountLogDo) Omit(cols ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clearBetAmountLogDo) Join(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clearBetAmountLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clearBetAmountLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clearBetAmountLogDo) Group(cols ...field.Expr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clearBetAmountLogDo) Having(conds ...gen.Condition) IClearBetAmountLogDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clearBetAmountLogDo) Limit(limit int) IClearBetAmountLogDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clearBetAmountLogDo) Offset(offset int) IClearBetAmountLogDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clearBetAmountLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClearBetAmountLogDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clearBetAmountLogDo) Unscoped() IClearBetAmountLogDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clearBetAmountLogDo) Create(values ...*model.ClearBetAmountLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clearBetAmountLogDo) CreateInBatches(values []*model.ClearBetAmountLog, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clearBetAmountLogDo) Save(values ...*model.ClearBetAmountLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clearBetAmountLogDo) First() (*model.ClearBetAmountLog, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearBetAmountLog), nil
	}
}

func (c clearBetAmountLogDo) Take() (*model.ClearBetAmountLog, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearBetAmountLog), nil
	}
}

func (c clearBetAmountLogDo) Last() (*model.ClearBetAmountLog, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearBetAmountLog), nil
	}
}

func (c clearBetAmountLogDo) Find() ([]*model.ClearBetAmountLog, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClearBetAmountLog), err
}

func (c clearBetAmountLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClearBetAmountLog, err error) {
	buf := make([]*model.ClearBetAmountLog, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clearBetAmountLogDo) FindInBatches(result *[]*model.ClearBetAmountLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clearBetAmountLogDo) Attrs(attrs ...field.AssignExpr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clearBetAmountLogDo) Assign(attrs ...field.AssignExpr) IClearBetAmountLogDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clearBetAmountLogDo) Joins(fields ...field.RelationField) IClearBetAmountLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clearBetAmountLogDo) Preload(fields ...field.RelationField) IClearBetAmountLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clearBetAmountLogDo) FirstOrInit() (*model.ClearBetAmountLog, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearBetAmountLog), nil
	}
}

func (c clearBetAmountLogDo) FirstOrCreate() (*model.ClearBetAmountLog, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearBetAmountLog), nil
	}
}

func (c clearBetAmountLogDo) FindByPage(offset int, limit int) (result []*model.ClearBetAmountLog, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clearBetAmountLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clearBetAmountLogDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clearBetAmountLogDo) Delete(models ...*model.ClearBetAmountLog) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clearBetAmountLogDo) withDO(do gen.Dao) *clearBetAmountLogDo {
	c.DO = *do.(*gen.DO)
	return c
}
