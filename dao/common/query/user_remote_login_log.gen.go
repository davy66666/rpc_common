// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRemoteLoginLog(db *gorm.DB, opts ...gen.DOOption) userRemoteLoginLog {
	_userRemoteLoginLog := userRemoteLoginLog{}

	_userRemoteLoginLog.userRemoteLoginLogDo.UseDB(db, opts...)
	_userRemoteLoginLog.userRemoteLoginLogDo.UseModel(&model.UserRemoteLoginLog{})

	tableName := _userRemoteLoginLog.userRemoteLoginLogDo.TableName()
	_userRemoteLoginLog.ALL = field.NewAsterisk(tableName)
	_userRemoteLoginLog.ID = field.NewInt64(tableName, "id")
	_userRemoteLoginLog.UserID = field.NewInt64(tableName, "user_id")
	_userRemoteLoginLog.UserName = field.NewString(tableName, "user_name")
	_userRemoteLoginLog.LastIP = field.NewString(tableName, "last_ip")
	_userRemoteLoginLog.LastProvince = field.NewString(tableName, "last_province")
	_userRemoteLoginLog.LastCity = field.NewString(tableName, "last_city")
	_userRemoteLoginLog.IP = field.NewString(tableName, "ip")
	_userRemoteLoginLog.Province = field.NewString(tableName, "province")
	_userRemoteLoginLog.City = field.NewString(tableName, "city")
	_userRemoteLoginLog.CreatedAt = field.NewField(tableName, "created_at")
	_userRemoteLoginLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRemoteLoginLog.fillFieldMap()

	return _userRemoteLoginLog
}

type userRemoteLoginLog struct {
	userRemoteLoginLogDo userRemoteLoginLogDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.Int64  // 用户id
	UserName     field.String // 用户昵称
	LastIP       field.String // 上次登录ip
	LastProvince field.String // 上次登录省份/国家
	LastCity     field.String // 上次登录城市
	IP           field.String // IP
	Province     field.String // 本次登录省份
	City         field.String // 本次登录城市
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (u userRemoteLoginLog) Table(newTableName string) *userRemoteLoginLog {
	u.userRemoteLoginLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRemoteLoginLog) As(alias string) *userRemoteLoginLog {
	u.userRemoteLoginLogDo.DO = *(u.userRemoteLoginLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRemoteLoginLog) updateTableName(table string) *userRemoteLoginLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.UserName = field.NewString(table, "user_name")
	u.LastIP = field.NewString(table, "last_ip")
	u.LastProvince = field.NewString(table, "last_province")
	u.LastCity = field.NewString(table, "last_city")
	u.IP = field.NewString(table, "ip")
	u.Province = field.NewString(table, "province")
	u.City = field.NewString(table, "city")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRemoteLoginLog) WithContext(ctx context.Context) IUserRemoteLoginLogDo {
	return u.userRemoteLoginLogDo.WithContext(ctx)
}

func (u userRemoteLoginLog) TableName() string { return u.userRemoteLoginLogDo.TableName() }

func (u userRemoteLoginLog) Alias() string { return u.userRemoteLoginLogDo.Alias() }

func (u userRemoteLoginLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userRemoteLoginLogDo.Columns(cols...)
}

func (u *userRemoteLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRemoteLoginLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["last_ip"] = u.LastIP
	u.fieldMap["last_province"] = u.LastProvince
	u.fieldMap["last_city"] = u.LastCity
	u.fieldMap["ip"] = u.IP
	u.fieldMap["province"] = u.Province
	u.fieldMap["city"] = u.City
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRemoteLoginLog) clone(db *gorm.DB) userRemoteLoginLog {
	u.userRemoteLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRemoteLoginLog) replaceDB(db *gorm.DB) userRemoteLoginLog {
	u.userRemoteLoginLogDo.ReplaceDB(db)
	return u
}

type userRemoteLoginLogDo struct{ gen.DO }

type IUserRemoteLoginLogDo interface {
	gen.SubQuery
	Debug() IUserRemoteLoginLogDo
	WithContext(ctx context.Context) IUserRemoteLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRemoteLoginLogDo
	WriteDB() IUserRemoteLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRemoteLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRemoteLoginLogDo
	Not(conds ...gen.Condition) IUserRemoteLoginLogDo
	Or(conds ...gen.Condition) IUserRemoteLoginLogDo
	Select(conds ...field.Expr) IUserRemoteLoginLogDo
	Where(conds ...gen.Condition) IUserRemoteLoginLogDo
	Order(conds ...field.Expr) IUserRemoteLoginLogDo
	Distinct(cols ...field.Expr) IUserRemoteLoginLogDo
	Omit(cols ...field.Expr) IUserRemoteLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo
	Group(cols ...field.Expr) IUserRemoteLoginLogDo
	Having(conds ...gen.Condition) IUserRemoteLoginLogDo
	Limit(limit int) IUserRemoteLoginLogDo
	Offset(offset int) IUserRemoteLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRemoteLoginLogDo
	Unscoped() IUserRemoteLoginLogDo
	Create(values ...*model.UserRemoteLoginLog) error
	CreateInBatches(values []*model.UserRemoteLoginLog, batchSize int) error
	Save(values ...*model.UserRemoteLoginLog) error
	First() (*model.UserRemoteLoginLog, error)
	Take() (*model.UserRemoteLoginLog, error)
	Last() (*model.UserRemoteLoginLog, error)
	Find() ([]*model.UserRemoteLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRemoteLoginLog, err error)
	FindInBatches(result *[]*model.UserRemoteLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRemoteLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRemoteLoginLogDo
	Assign(attrs ...field.AssignExpr) IUserRemoteLoginLogDo
	Joins(fields ...field.RelationField) IUserRemoteLoginLogDo
	Preload(fields ...field.RelationField) IUserRemoteLoginLogDo
	FirstOrInit() (*model.UserRemoteLoginLog, error)
	FirstOrCreate() (*model.UserRemoteLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.UserRemoteLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRemoteLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRemoteLoginLogDo) Debug() IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userRemoteLoginLogDo) WithContext(ctx context.Context) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRemoteLoginLogDo) ReadDB() IUserRemoteLoginLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRemoteLoginLogDo) WriteDB() IUserRemoteLoginLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRemoteLoginLogDo) Session(config *gorm.Session) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRemoteLoginLogDo) Clauses(conds ...clause.Expression) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRemoteLoginLogDo) Returning(value interface{}, columns ...string) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRemoteLoginLogDo) Not(conds ...gen.Condition) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRemoteLoginLogDo) Or(conds ...gen.Condition) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRemoteLoginLogDo) Select(conds ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRemoteLoginLogDo) Where(conds ...gen.Condition) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRemoteLoginLogDo) Order(conds ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRemoteLoginLogDo) Distinct(cols ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRemoteLoginLogDo) Omit(cols ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRemoteLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRemoteLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRemoteLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRemoteLoginLogDo) Group(cols ...field.Expr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRemoteLoginLogDo) Having(conds ...gen.Condition) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRemoteLoginLogDo) Limit(limit int) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRemoteLoginLogDo) Offset(offset int) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRemoteLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRemoteLoginLogDo) Unscoped() IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRemoteLoginLogDo) Create(values ...*model.UserRemoteLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRemoteLoginLogDo) CreateInBatches(values []*model.UserRemoteLoginLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRemoteLoginLogDo) Save(values ...*model.UserRemoteLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRemoteLoginLogDo) First() (*model.UserRemoteLoginLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginLog), nil
	}
}

func (u userRemoteLoginLogDo) Take() (*model.UserRemoteLoginLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginLog), nil
	}
}

func (u userRemoteLoginLogDo) Last() (*model.UserRemoteLoginLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginLog), nil
	}
}

func (u userRemoteLoginLogDo) Find() ([]*model.UserRemoteLoginLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRemoteLoginLog), err
}

func (u userRemoteLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRemoteLoginLog, err error) {
	buf := make([]*model.UserRemoteLoginLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRemoteLoginLogDo) FindInBatches(result *[]*model.UserRemoteLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRemoteLoginLogDo) Attrs(attrs ...field.AssignExpr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRemoteLoginLogDo) Assign(attrs ...field.AssignExpr) IUserRemoteLoginLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRemoteLoginLogDo) Joins(fields ...field.RelationField) IUserRemoteLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRemoteLoginLogDo) Preload(fields ...field.RelationField) IUserRemoteLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRemoteLoginLogDo) FirstOrInit() (*model.UserRemoteLoginLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginLog), nil
	}
}

func (u userRemoteLoginLogDo) FirstOrCreate() (*model.UserRemoteLoginLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRemoteLoginLog), nil
	}
}

func (u userRemoteLoginLogDo) FindByPage(offset int, limit int) (result []*model.UserRemoteLoginLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRemoteLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRemoteLoginLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRemoteLoginLogDo) Delete(models ...*model.UserRemoteLoginLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRemoteLoginLogDo) withDO(do gen.Dao) *userRemoteLoginLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
