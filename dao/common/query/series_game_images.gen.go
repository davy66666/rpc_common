// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newSeriesGameImage(db *gorm.DB, opts ...gen.DOOption) seriesGameImage {
	_seriesGameImage := seriesGameImage{}

	_seriesGameImage.seriesGameImageDo.UseDB(db, opts...)
	_seriesGameImage.seriesGameImageDo.UseModel(&model.SeriesGameImage{})

	tableName := _seriesGameImage.seriesGameImageDo.TableName()
	_seriesGameImage.ALL = field.NewAsterisk(tableName)
	_seriesGameImage.ID = field.NewInt64(tableName, "id")
	_seriesGameImage.SeriesID = field.NewInt64(tableName, "series_id")
	_seriesGameImage.CnName = field.NewString(tableName, "cn_name")
	_seriesGameImage.GameCode = field.NewString(tableName, "game_code")
	_seriesGameImage.TitlePicURL = field.NewString(tableName, "title_pic_url")
	_seriesGameImage.BigPicURL = field.NewString(tableName, "big_pic_url")
	_seriesGameImage.SmallPicURL = field.NewString(tableName, "small_pic_url")
	_seriesGameImage.CheckedLogoURL = field.NewString(tableName, "checked_logo_url")
	_seriesGameImage.NotCheckLogoURL = field.NewString(tableName, "not_check_logo_url")
	_seriesGameImage.SmallLogoURL = field.NewString(tableName, "small_logo_url")
	_seriesGameImage.Type = field.NewInt64(tableName, "type")
	_seriesGameImage.CreatedAt = field.NewField(tableName, "created_at")
	_seriesGameImage.UpdatedAt = field.NewField(tableName, "updated_at")

	_seriesGameImage.fillFieldMap()

	return _seriesGameImage
}

type seriesGameImage struct {
	seriesGameImageDo seriesGameImageDo

	ALL             field.Asterisk
	ID              field.Int64
	SeriesID        field.Int64
	CnName          field.String
	GameCode        field.String
	TitlePicURL     field.String // 游戏标题图片
	BigPicURL       field.String // 游戏大图
	SmallPicURL     field.String // 游戏小图
	CheckedLogoURL  field.String // 选中大图标
	NotCheckLogoURL field.String // 未选中大图标
	SmallLogoURL    field.String // 游戏小图标
	Type            field.Int64  // 类型 1:pc, 2:h5
	CreatedAt       field.Field
	UpdatedAt       field.Field

	fieldMap map[string]field.Expr
}

func (s seriesGameImage) Table(newTableName string) *seriesGameImage {
	s.seriesGameImageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seriesGameImage) As(alias string) *seriesGameImage {
	s.seriesGameImageDo.DO = *(s.seriesGameImageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seriesGameImage) updateTableName(table string) *seriesGameImage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SeriesID = field.NewInt64(table, "series_id")
	s.CnName = field.NewString(table, "cn_name")
	s.GameCode = field.NewString(table, "game_code")
	s.TitlePicURL = field.NewString(table, "title_pic_url")
	s.BigPicURL = field.NewString(table, "big_pic_url")
	s.SmallPicURL = field.NewString(table, "small_pic_url")
	s.CheckedLogoURL = field.NewString(table, "checked_logo_url")
	s.NotCheckLogoURL = field.NewString(table, "not_check_logo_url")
	s.SmallLogoURL = field.NewString(table, "small_logo_url")
	s.Type = field.NewInt64(table, "type")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *seriesGameImage) WithContext(ctx context.Context) ISeriesGameImageDo {
	return s.seriesGameImageDo.WithContext(ctx)
}

func (s seriesGameImage) TableName() string { return s.seriesGameImageDo.TableName() }

func (s seriesGameImage) Alias() string { return s.seriesGameImageDo.Alias() }

func (s seriesGameImage) Columns(cols ...field.Expr) gen.Columns {
	return s.seriesGameImageDo.Columns(cols...)
}

func (s *seriesGameImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seriesGameImage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["series_id"] = s.SeriesID
	s.fieldMap["cn_name"] = s.CnName
	s.fieldMap["game_code"] = s.GameCode
	s.fieldMap["title_pic_url"] = s.TitlePicURL
	s.fieldMap["big_pic_url"] = s.BigPicURL
	s.fieldMap["small_pic_url"] = s.SmallPicURL
	s.fieldMap["checked_logo_url"] = s.CheckedLogoURL
	s.fieldMap["not_check_logo_url"] = s.NotCheckLogoURL
	s.fieldMap["small_logo_url"] = s.SmallLogoURL
	s.fieldMap["type"] = s.Type
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s seriesGameImage) clone(db *gorm.DB) seriesGameImage {
	s.seriesGameImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seriesGameImage) replaceDB(db *gorm.DB) seriesGameImage {
	s.seriesGameImageDo.ReplaceDB(db)
	return s
}

type seriesGameImageDo struct{ gen.DO }

type ISeriesGameImageDo interface {
	gen.SubQuery
	Debug() ISeriesGameImageDo
	WithContext(ctx context.Context) ISeriesGameImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeriesGameImageDo
	WriteDB() ISeriesGameImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeriesGameImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeriesGameImageDo
	Not(conds ...gen.Condition) ISeriesGameImageDo
	Or(conds ...gen.Condition) ISeriesGameImageDo
	Select(conds ...field.Expr) ISeriesGameImageDo
	Where(conds ...gen.Condition) ISeriesGameImageDo
	Order(conds ...field.Expr) ISeriesGameImageDo
	Distinct(cols ...field.Expr) ISeriesGameImageDo
	Omit(cols ...field.Expr) ISeriesGameImageDo
	Join(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo
	Group(cols ...field.Expr) ISeriesGameImageDo
	Having(conds ...gen.Condition) ISeriesGameImageDo
	Limit(limit int) ISeriesGameImageDo
	Offset(offset int) ISeriesGameImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesGameImageDo
	Unscoped() ISeriesGameImageDo
	Create(values ...*model.SeriesGameImage) error
	CreateInBatches(values []*model.SeriesGameImage, batchSize int) error
	Save(values ...*model.SeriesGameImage) error
	First() (*model.SeriesGameImage, error)
	Take() (*model.SeriesGameImage, error)
	Last() (*model.SeriesGameImage, error)
	Find() ([]*model.SeriesGameImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeriesGameImage, err error)
	FindInBatches(result *[]*model.SeriesGameImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeriesGameImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeriesGameImageDo
	Assign(attrs ...field.AssignExpr) ISeriesGameImageDo
	Joins(fields ...field.RelationField) ISeriesGameImageDo
	Preload(fields ...field.RelationField) ISeriesGameImageDo
	FirstOrInit() (*model.SeriesGameImage, error)
	FirstOrCreate() (*model.SeriesGameImage, error)
	FindByPage(offset int, limit int) (result []*model.SeriesGameImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeriesGameImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seriesGameImageDo) Debug() ISeriesGameImageDo {
	return s.withDO(s.DO.Debug())
}

func (s seriesGameImageDo) WithContext(ctx context.Context) ISeriesGameImageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seriesGameImageDo) ReadDB() ISeriesGameImageDo {
	return s.Clauses(dbresolver.Read)
}

func (s seriesGameImageDo) WriteDB() ISeriesGameImageDo {
	return s.Clauses(dbresolver.Write)
}

func (s seriesGameImageDo) Session(config *gorm.Session) ISeriesGameImageDo {
	return s.withDO(s.DO.Session(config))
}

func (s seriesGameImageDo) Clauses(conds ...clause.Expression) ISeriesGameImageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seriesGameImageDo) Returning(value interface{}, columns ...string) ISeriesGameImageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seriesGameImageDo) Not(conds ...gen.Condition) ISeriesGameImageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seriesGameImageDo) Or(conds ...gen.Condition) ISeriesGameImageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seriesGameImageDo) Select(conds ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seriesGameImageDo) Where(conds ...gen.Condition) ISeriesGameImageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seriesGameImageDo) Order(conds ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seriesGameImageDo) Distinct(cols ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seriesGameImageDo) Omit(cols ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seriesGameImageDo) Join(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seriesGameImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seriesGameImageDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seriesGameImageDo) Group(cols ...field.Expr) ISeriesGameImageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seriesGameImageDo) Having(conds ...gen.Condition) ISeriesGameImageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seriesGameImageDo) Limit(limit int) ISeriesGameImageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seriesGameImageDo) Offset(offset int) ISeriesGameImageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seriesGameImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesGameImageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seriesGameImageDo) Unscoped() ISeriesGameImageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seriesGameImageDo) Create(values ...*model.SeriesGameImage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seriesGameImageDo) CreateInBatches(values []*model.SeriesGameImage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seriesGameImageDo) Save(values ...*model.SeriesGameImage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seriesGameImageDo) First() (*model.SeriesGameImage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGameImage), nil
	}
}

func (s seriesGameImageDo) Take() (*model.SeriesGameImage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGameImage), nil
	}
}

func (s seriesGameImageDo) Last() (*model.SeriesGameImage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGameImage), nil
	}
}

func (s seriesGameImageDo) Find() ([]*model.SeriesGameImage, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeriesGameImage), err
}

func (s seriesGameImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeriesGameImage, err error) {
	buf := make([]*model.SeriesGameImage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seriesGameImageDo) FindInBatches(result *[]*model.SeriesGameImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seriesGameImageDo) Attrs(attrs ...field.AssignExpr) ISeriesGameImageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seriesGameImageDo) Assign(attrs ...field.AssignExpr) ISeriesGameImageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seriesGameImageDo) Joins(fields ...field.RelationField) ISeriesGameImageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seriesGameImageDo) Preload(fields ...field.RelationField) ISeriesGameImageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seriesGameImageDo) FirstOrInit() (*model.SeriesGameImage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGameImage), nil
	}
}

func (s seriesGameImageDo) FirstOrCreate() (*model.SeriesGameImage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeriesGameImage), nil
	}
}

func (s seriesGameImageDo) FindByPage(offset int, limit int) (result []*model.SeriesGameImage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seriesGameImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seriesGameImageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seriesGameImageDo) Delete(models ...*model.SeriesGameImage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seriesGameImageDo) withDO(do gen.Dao) *seriesGameImageDo {
	s.DO = *do.(*gen.DO)
	return s
}
