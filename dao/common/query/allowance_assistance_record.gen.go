// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAllowanceAssistanceRecord(db *gorm.DB, opts ...gen.DOOption) allowanceAssistanceRecord {
	_allowanceAssistanceRecord := allowanceAssistanceRecord{}

	_allowanceAssistanceRecord.allowanceAssistanceRecordDo.UseDB(db, opts...)
	_allowanceAssistanceRecord.allowanceAssistanceRecordDo.UseModel(&model.AllowanceAssistanceRecord{})

	tableName := _allowanceAssistanceRecord.allowanceAssistanceRecordDo.TableName()
	_allowanceAssistanceRecord.ALL = field.NewAsterisk(tableName)
	_allowanceAssistanceRecord.ID = field.NewInt64(tableName, "id")
	_allowanceAssistanceRecord.AllowanceAssistanceCircleID = field.NewInt64(tableName, "allowance_assistance_circle_id")
	_allowanceAssistanceRecord.Type = field.NewInt64(tableName, "type")
	_allowanceAssistanceRecord.UserID = field.NewInt64(tableName, "user_id")
	_allowanceAssistanceRecord.Username = field.NewString(tableName, "username")
	_allowanceAssistanceRecord.UserLevelID = field.NewInt64(tableName, "user_level_id")
	_allowanceAssistanceRecord.PayLevelID = field.NewInt64(tableName, "pay_level_id")
	_allowanceAssistanceRecord.FromUserID = field.NewInt64(tableName, "from_user_id")
	_allowanceAssistanceRecord.FromUsername = field.NewString(tableName, "from_username")
	_allowanceAssistanceRecord.FromUserLevelID = field.NewInt64(tableName, "from_user_level_id")
	_allowanceAssistanceRecord.FromPayLevelID = field.NewInt64(tableName, "from_pay_level_id")
	_allowanceAssistanceRecord.TiktokURL = field.NewString(tableName, "tiktok_url")
	_allowanceAssistanceRecord.ReceiveAssistanceNum = field.NewInt64(tableName, "receive_assistance_num")
	_allowanceAssistanceRecord.Status = field.NewInt64(tableName, "status")
	_allowanceAssistanceRecord.Version = field.NewInt64(tableName, "version")
	_allowanceAssistanceRecord.AdminID = field.NewInt64(tableName, "admin_id")
	_allowanceAssistanceRecord.AdminName = field.NewString(tableName, "admin_name")
	_allowanceAssistanceRecord.AuditRemark = field.NewString(tableName, "audit_remark")
	_allowanceAssistanceRecord.AuditTime = field.NewField(tableName, "audit_time")
	_allowanceAssistanceRecord.CreatedAt = field.NewField(tableName, "created_at")
	_allowanceAssistanceRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_allowanceAssistanceRecord.fillFieldMap()

	return _allowanceAssistanceRecord
}

// allowanceAssistanceRecord 助力记录表
type allowanceAssistanceRecord struct {
	allowanceAssistanceRecordDo allowanceAssistanceRecordDo

	ALL                         field.Asterisk
	ID                          field.Int64 // 自增id
	AllowanceAssistanceCircleID field.Int64
	Type                        field.Int64  // 类型 1:个人助力, 2:抖音视频助力
	UserID                      field.Int64  // 用户id
	Username                    field.String // 用户名
	UserLevelID                 field.Int64  // 用户VIP层级
	PayLevelID                  field.Int64  // 用户支付层级
	FromUserID                  field.Int64  // 来自用户id
	FromUsername                field.String // 来自用户名
	FromUserLevelID             field.Int64  // 来自用户VIP层级
	FromPayLevelID              field.Int64  // 来自用户支付层级
	TiktokURL                   field.String // 抖音链接地址
	ReceiveAssistanceNum        field.Int64  // 获得的助力数量
	Status                      field.Int64  // 0:已提交, 1:待审核, 2:审核通过, 3:审核拒绝
	Version                     field.Int64  // 版本
	AdminID                     field.Int64  // 审核人id
	AdminName                   field.String // 审核人
	AuditRemark                 field.String // 审核备注
	AuditTime                   field.Field  // 审核时间
	CreatedAt                   field.Field  // 创建时间
	UpdatedAt                   field.Field  // 更新时间

	fieldMap map[string]field.Expr
}

func (a allowanceAssistanceRecord) Table(newTableName string) *allowanceAssistanceRecord {
	a.allowanceAssistanceRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allowanceAssistanceRecord) As(alias string) *allowanceAssistanceRecord {
	a.allowanceAssistanceRecordDo.DO = *(a.allowanceAssistanceRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allowanceAssistanceRecord) updateTableName(table string) *allowanceAssistanceRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AllowanceAssistanceCircleID = field.NewInt64(table, "allowance_assistance_circle_id")
	a.Type = field.NewInt64(table, "type")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.UserLevelID = field.NewInt64(table, "user_level_id")
	a.PayLevelID = field.NewInt64(table, "pay_level_id")
	a.FromUserID = field.NewInt64(table, "from_user_id")
	a.FromUsername = field.NewString(table, "from_username")
	a.FromUserLevelID = field.NewInt64(table, "from_user_level_id")
	a.FromPayLevelID = field.NewInt64(table, "from_pay_level_id")
	a.TiktokURL = field.NewString(table, "tiktok_url")
	a.ReceiveAssistanceNum = field.NewInt64(table, "receive_assistance_num")
	a.Status = field.NewInt64(table, "status")
	a.Version = field.NewInt64(table, "version")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.AdminName = field.NewString(table, "admin_name")
	a.AuditRemark = field.NewString(table, "audit_remark")
	a.AuditTime = field.NewField(table, "audit_time")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *allowanceAssistanceRecord) WithContext(ctx context.Context) IAllowanceAssistanceRecordDo {
	return a.allowanceAssistanceRecordDo.WithContext(ctx)
}

func (a allowanceAssistanceRecord) TableName() string {
	return a.allowanceAssistanceRecordDo.TableName()
}

func (a allowanceAssistanceRecord) Alias() string { return a.allowanceAssistanceRecordDo.Alias() }

func (a allowanceAssistanceRecord) Columns(cols ...field.Expr) gen.Columns {
	return a.allowanceAssistanceRecordDo.Columns(cols...)
}

func (a *allowanceAssistanceRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allowanceAssistanceRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 21)
	a.fieldMap["id"] = a.ID
	a.fieldMap["allowance_assistance_circle_id"] = a.AllowanceAssistanceCircleID
	a.fieldMap["type"] = a.Type
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["user_level_id"] = a.UserLevelID
	a.fieldMap["pay_level_id"] = a.PayLevelID
	a.fieldMap["from_user_id"] = a.FromUserID
	a.fieldMap["from_username"] = a.FromUsername
	a.fieldMap["from_user_level_id"] = a.FromUserLevelID
	a.fieldMap["from_pay_level_id"] = a.FromPayLevelID
	a.fieldMap["tiktok_url"] = a.TiktokURL
	a.fieldMap["receive_assistance_num"] = a.ReceiveAssistanceNum
	a.fieldMap["status"] = a.Status
	a.fieldMap["version"] = a.Version
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["audit_remark"] = a.AuditRemark
	a.fieldMap["audit_time"] = a.AuditTime
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a allowanceAssistanceRecord) clone(db *gorm.DB) allowanceAssistanceRecord {
	a.allowanceAssistanceRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allowanceAssistanceRecord) replaceDB(db *gorm.DB) allowanceAssistanceRecord {
	a.allowanceAssistanceRecordDo.ReplaceDB(db)
	return a
}

type allowanceAssistanceRecordDo struct{ gen.DO }

type IAllowanceAssistanceRecordDo interface {
	gen.SubQuery
	Debug() IAllowanceAssistanceRecordDo
	WithContext(ctx context.Context) IAllowanceAssistanceRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllowanceAssistanceRecordDo
	WriteDB() IAllowanceAssistanceRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllowanceAssistanceRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllowanceAssistanceRecordDo
	Not(conds ...gen.Condition) IAllowanceAssistanceRecordDo
	Or(conds ...gen.Condition) IAllowanceAssistanceRecordDo
	Select(conds ...field.Expr) IAllowanceAssistanceRecordDo
	Where(conds ...gen.Condition) IAllowanceAssistanceRecordDo
	Order(conds ...field.Expr) IAllowanceAssistanceRecordDo
	Distinct(cols ...field.Expr) IAllowanceAssistanceRecordDo
	Omit(cols ...field.Expr) IAllowanceAssistanceRecordDo
	Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo
	Group(cols ...field.Expr) IAllowanceAssistanceRecordDo
	Having(conds ...gen.Condition) IAllowanceAssistanceRecordDo
	Limit(limit int) IAllowanceAssistanceRecordDo
	Offset(offset int) IAllowanceAssistanceRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceRecordDo
	Unscoped() IAllowanceAssistanceRecordDo
	Create(values ...*model.AllowanceAssistanceRecord) error
	CreateInBatches(values []*model.AllowanceAssistanceRecord, batchSize int) error
	Save(values ...*model.AllowanceAssistanceRecord) error
	First() (*model.AllowanceAssistanceRecord, error)
	Take() (*model.AllowanceAssistanceRecord, error)
	Last() (*model.AllowanceAssistanceRecord, error)
	Find() ([]*model.AllowanceAssistanceRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceRecord, err error)
	FindInBatches(result *[]*model.AllowanceAssistanceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllowanceAssistanceRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceRecordDo
	Assign(attrs ...field.AssignExpr) IAllowanceAssistanceRecordDo
	Joins(fields ...field.RelationField) IAllowanceAssistanceRecordDo
	Preload(fields ...field.RelationField) IAllowanceAssistanceRecordDo
	FirstOrInit() (*model.AllowanceAssistanceRecord, error)
	FirstOrCreate() (*model.AllowanceAssistanceRecord, error)
	FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllowanceAssistanceRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allowanceAssistanceRecordDo) Debug() IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a allowanceAssistanceRecordDo) WithContext(ctx context.Context) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allowanceAssistanceRecordDo) ReadDB() IAllowanceAssistanceRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a allowanceAssistanceRecordDo) WriteDB() IAllowanceAssistanceRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a allowanceAssistanceRecordDo) Session(config *gorm.Session) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a allowanceAssistanceRecordDo) Clauses(conds ...clause.Expression) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allowanceAssistanceRecordDo) Returning(value interface{}, columns ...string) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allowanceAssistanceRecordDo) Not(conds ...gen.Condition) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allowanceAssistanceRecordDo) Or(conds ...gen.Condition) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allowanceAssistanceRecordDo) Select(conds ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allowanceAssistanceRecordDo) Where(conds ...gen.Condition) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allowanceAssistanceRecordDo) Order(conds ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allowanceAssistanceRecordDo) Distinct(cols ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allowanceAssistanceRecordDo) Omit(cols ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allowanceAssistanceRecordDo) Join(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allowanceAssistanceRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allowanceAssistanceRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allowanceAssistanceRecordDo) Group(cols ...field.Expr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allowanceAssistanceRecordDo) Having(conds ...gen.Condition) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allowanceAssistanceRecordDo) Limit(limit int) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allowanceAssistanceRecordDo) Offset(offset int) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allowanceAssistanceRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allowanceAssistanceRecordDo) Unscoped() IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allowanceAssistanceRecordDo) Create(values ...*model.AllowanceAssistanceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allowanceAssistanceRecordDo) CreateInBatches(values []*model.AllowanceAssistanceRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allowanceAssistanceRecordDo) Save(values ...*model.AllowanceAssistanceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allowanceAssistanceRecordDo) First() (*model.AllowanceAssistanceRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceRecord), nil
	}
}

func (a allowanceAssistanceRecordDo) Take() (*model.AllowanceAssistanceRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceRecord), nil
	}
}

func (a allowanceAssistanceRecordDo) Last() (*model.AllowanceAssistanceRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceRecord), nil
	}
}

func (a allowanceAssistanceRecordDo) Find() ([]*model.AllowanceAssistanceRecord, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllowanceAssistanceRecord), err
}

func (a allowanceAssistanceRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllowanceAssistanceRecord, err error) {
	buf := make([]*model.AllowanceAssistanceRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allowanceAssistanceRecordDo) FindInBatches(result *[]*model.AllowanceAssistanceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allowanceAssistanceRecordDo) Attrs(attrs ...field.AssignExpr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allowanceAssistanceRecordDo) Assign(attrs ...field.AssignExpr) IAllowanceAssistanceRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allowanceAssistanceRecordDo) Joins(fields ...field.RelationField) IAllowanceAssistanceRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allowanceAssistanceRecordDo) Preload(fields ...field.RelationField) IAllowanceAssistanceRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allowanceAssistanceRecordDo) FirstOrInit() (*model.AllowanceAssistanceRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceRecord), nil
	}
}

func (a allowanceAssistanceRecordDo) FirstOrCreate() (*model.AllowanceAssistanceRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllowanceAssistanceRecord), nil
	}
}

func (a allowanceAssistanceRecordDo) FindByPage(offset int, limit int) (result []*model.AllowanceAssistanceRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allowanceAssistanceRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allowanceAssistanceRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allowanceAssistanceRecordDo) Delete(models ...*model.AllowanceAssistanceRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allowanceAssistanceRecordDo) withDO(do gen.Dao) *allowanceAssistanceRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
