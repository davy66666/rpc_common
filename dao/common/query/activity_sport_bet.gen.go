// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivitySportBet(db *gorm.DB, opts ...gen.DOOption) activitySportBet {
	_activitySportBet := activitySportBet{}

	_activitySportBet.activitySportBetDo.UseDB(db, opts...)
	_activitySportBet.activitySportBetDo.UseModel(&model.ActivitySportBet{})

	tableName := _activitySportBet.activitySportBetDo.TableName()
	_activitySportBet.ALL = field.NewAsterisk(tableName)
	_activitySportBet.ID = field.NewInt64(tableName, "id")
	_activitySportBet.BillID = field.NewString(tableName, "bill_id")
	_activitySportBet.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_activitySportBet.NetAmount = field.NewFloat64(tableName, "net_amount")
	_activitySportBet.PayoutAmount = field.NewFloat64(tableName, "payout_amount")
	_activitySportBet.MaxWinAmount = field.NewFloat64(tableName, "max_win_amount")
	_activitySportBet.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_activitySportBet.BetTime = field.NewInt64(tableName, "bet_time")
	_activitySportBet.BetEndTime = field.NewInt64(tableName, "bet_end_time")
	_activitySportBet.PayoutTime = field.NewInt64(tableName, "payout_time")
	_activitySportBet.UserID = field.NewInt64(tableName, "user_id")
	_activitySportBet.Username = field.NewString(tableName, "username")
	_activitySportBet.UserLevel = field.NewInt64(tableName, "user_level")
	_activitySportBet.PayLevel = field.NewString(tableName, "pay_level")
	_activitySportBet.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_activitySportBet.ParentID = field.NewString(tableName, "parent_id")
	_activitySportBet.ParentName = field.NewString(tableName, "parent_name")
	_activitySportBet.IsAgent = field.NewInt64(tableName, "is_agent")
	_activitySportBet.IsStat = field.NewInt64(tableName, "is_stat")
	_activitySportBet.MatchEventID = field.NewInt64(tableName, "match_event_id")
	_activitySportBet.MatchEventName = field.NewString(tableName, "match_event_name")
	_activitySportBet.MatchID = field.NewInt64(tableName, "match_id")
	_activitySportBet.Group = field.NewString(tableName, "group")
	_activitySportBet.Round = field.NewInt64(tableName, "round")
	_activitySportBet.HomeName = field.NewString(tableName, "home_name")
	_activitySportBet.AwayName = field.NewString(tableName, "away_name")
	_activitySportBet.BetMatchTeamsID = field.NewInt64(tableName, "bet_match_teams_id")
	_activitySportBet.BetMatchTeamsName = field.NewString(tableName, "bet_match_teams_name")
	_activitySportBet.BetType = field.NewInt64(tableName, "bet_type")
	_activitySportBet.BetStatus = field.NewInt64(tableName, "bet_status")
	_activitySportBet.OrderStatus = field.NewInt64(tableName, "order_status")
	_activitySportBet.Odds = field.NewFloat64(tableName, "odds")
	_activitySportBet.AuditRemark = field.NewString(tableName, "audit_remark")
	_activitySportBet.AuditTime = field.NewField(tableName, "audit_time")
	_activitySportBet.AuditUsername = field.NewString(tableName, "audit_username")
	_activitySportBet.IP = field.NewString(tableName, "ip")
	_activitySportBet.Plat = field.NewInt64(tableName, "plat")
	_activitySportBet.CreatedAt = field.NewField(tableName, "created_at")
	_activitySportBet.UpdatedAt = field.NewField(tableName, "updated_at")

	_activitySportBet.fillFieldMap()

	return _activitySportBet
}

// activitySportBet 欧洲杯活动注单表
type activitySportBet struct {
	activitySportBetDo activitySportBetDo

	ALL               field.Asterisk
	ID                field.Int64
	BillID            field.String  // 注单号
	BetAmount         field.Float64 // 玩家的投注额
	NetAmount         field.Float64 // 玩家的所赢金额（实际派奖金额 - 玩家的投注额）
	PayoutAmount      field.Float64 // 实际派奖金额
	MaxWinAmount      field.Float64 // 最大可赢金额
	ValidBetAmount    field.Float64 // 有效投注金额(结算后写入)
	BetTime           field.Int64   // 游戏开始时间（以秒为单位的时间戳）
	BetEndTime        field.Int64   // 游戏结束时间（以秒为单位的时间戳）
	PayoutTime        field.Int64   // 派彩时间（以秒为单位的时间戳）
	UserID            field.Int64   // 用户id
	Username          field.String  // 用户名
	UserLevel         field.Int64   // 用户层级
	PayLevel          field.String  // 支付层级 对应pay_level表
	ForefatherIds     field.String  // 用户所有上级，以逗号分隔
	ParentID          field.String  // 用户父级id
	ParentName        field.String  // 用户父级用户名
	IsAgent           field.Int64   // 身份
	IsStat            field.Int64   // 是否已经统计有效流水：[1: 是 0: 否]
	MatchEventID      field.Int64   // 赛程ID
	MatchEventName    field.String  // 赛程名称（小组赛，16强，8强……）
	MatchID           field.Int64   // 赛事id
	Group             field.String  // 组别
	Round             field.Int64   // 场次
	HomeName          field.String  // 主队名称
	AwayName          field.String  // 客队名称
	BetMatchTeamsID   field.Int64   // 投注队伍ID
	BetMatchTeamsName field.String  // 投注队伍名称
	BetType           field.Int64   // 投注类型 1:常规赛，2:冠军赛
	BetStatus         field.Int64   // 投注状态 1:主队，2:和，3:客队
	OrderStatus       field.Int64   // 订单状态(1:已确认,2:待派奖,3:已派奖,4:已拒绝,5:未中奖)
	Odds              field.Float64 // 下注的赔率
	AuditRemark       field.String  // 审核备注
	AuditTime         field.Field   // 审核时间
	AuditUsername     field.String  // 审核人
	IP                field.String  // 投注IP地址
	Plat              field.Int64   // 终端;1:h5;2安卓;3ios4:pc
	CreatedAt         field.Field
	UpdatedAt         field.Field

	fieldMap map[string]field.Expr
}

func (a activitySportBet) Table(newTableName string) *activitySportBet {
	a.activitySportBetDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activitySportBet) As(alias string) *activitySportBet {
	a.activitySportBetDo.DO = *(a.activitySportBetDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activitySportBet) updateTableName(table string) *activitySportBet {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.BillID = field.NewString(table, "bill_id")
	a.BetAmount = field.NewFloat64(table, "bet_amount")
	a.NetAmount = field.NewFloat64(table, "net_amount")
	a.PayoutAmount = field.NewFloat64(table, "payout_amount")
	a.MaxWinAmount = field.NewFloat64(table, "max_win_amount")
	a.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	a.BetTime = field.NewInt64(table, "bet_time")
	a.BetEndTime = field.NewInt64(table, "bet_end_time")
	a.PayoutTime = field.NewInt64(table, "payout_time")
	a.UserID = field.NewInt64(table, "user_id")
	a.Username = field.NewString(table, "username")
	a.UserLevel = field.NewInt64(table, "user_level")
	a.PayLevel = field.NewString(table, "pay_level")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.ParentID = field.NewString(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.IsAgent = field.NewInt64(table, "is_agent")
	a.IsStat = field.NewInt64(table, "is_stat")
	a.MatchEventID = field.NewInt64(table, "match_event_id")
	a.MatchEventName = field.NewString(table, "match_event_name")
	a.MatchID = field.NewInt64(table, "match_id")
	a.Group = field.NewString(table, "group")
	a.Round = field.NewInt64(table, "round")
	a.HomeName = field.NewString(table, "home_name")
	a.AwayName = field.NewString(table, "away_name")
	a.BetMatchTeamsID = field.NewInt64(table, "bet_match_teams_id")
	a.BetMatchTeamsName = field.NewString(table, "bet_match_teams_name")
	a.BetType = field.NewInt64(table, "bet_type")
	a.BetStatus = field.NewInt64(table, "bet_status")
	a.OrderStatus = field.NewInt64(table, "order_status")
	a.Odds = field.NewFloat64(table, "odds")
	a.AuditRemark = field.NewString(table, "audit_remark")
	a.AuditTime = field.NewField(table, "audit_time")
	a.AuditUsername = field.NewString(table, "audit_username")
	a.IP = field.NewString(table, "ip")
	a.Plat = field.NewInt64(table, "plat")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activitySportBet) WithContext(ctx context.Context) IActivitySportBetDo {
	return a.activitySportBetDo.WithContext(ctx)
}

func (a activitySportBet) TableName() string { return a.activitySportBetDo.TableName() }

func (a activitySportBet) Alias() string { return a.activitySportBetDo.Alias() }

func (a activitySportBet) Columns(cols ...field.Expr) gen.Columns {
	return a.activitySportBetDo.Columns(cols...)
}

func (a *activitySportBet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activitySportBet) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 39)
	a.fieldMap["id"] = a.ID
	a.fieldMap["bill_id"] = a.BillID
	a.fieldMap["bet_amount"] = a.BetAmount
	a.fieldMap["net_amount"] = a.NetAmount
	a.fieldMap["payout_amount"] = a.PayoutAmount
	a.fieldMap["max_win_amount"] = a.MaxWinAmount
	a.fieldMap["valid_bet_amount"] = a.ValidBetAmount
	a.fieldMap["bet_time"] = a.BetTime
	a.fieldMap["bet_end_time"] = a.BetEndTime
	a.fieldMap["payout_time"] = a.PayoutTime
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["username"] = a.Username
	a.fieldMap["user_level"] = a.UserLevel
	a.fieldMap["pay_level"] = a.PayLevel
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["is_agent"] = a.IsAgent
	a.fieldMap["is_stat"] = a.IsStat
	a.fieldMap["match_event_id"] = a.MatchEventID
	a.fieldMap["match_event_name"] = a.MatchEventName
	a.fieldMap["match_id"] = a.MatchID
	a.fieldMap["group"] = a.Group
	a.fieldMap["round"] = a.Round
	a.fieldMap["home_name"] = a.HomeName
	a.fieldMap["away_name"] = a.AwayName
	a.fieldMap["bet_match_teams_id"] = a.BetMatchTeamsID
	a.fieldMap["bet_match_teams_name"] = a.BetMatchTeamsName
	a.fieldMap["bet_type"] = a.BetType
	a.fieldMap["bet_status"] = a.BetStatus
	a.fieldMap["order_status"] = a.OrderStatus
	a.fieldMap["odds"] = a.Odds
	a.fieldMap["audit_remark"] = a.AuditRemark
	a.fieldMap["audit_time"] = a.AuditTime
	a.fieldMap["audit_username"] = a.AuditUsername
	a.fieldMap["ip"] = a.IP
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activitySportBet) clone(db *gorm.DB) activitySportBet {
	a.activitySportBetDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activitySportBet) replaceDB(db *gorm.DB) activitySportBet {
	a.activitySportBetDo.ReplaceDB(db)
	return a
}

type activitySportBetDo struct{ gen.DO }

type IActivitySportBetDo interface {
	gen.SubQuery
	Debug() IActivitySportBetDo
	WithContext(ctx context.Context) IActivitySportBetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivitySportBetDo
	WriteDB() IActivitySportBetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivitySportBetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivitySportBetDo
	Not(conds ...gen.Condition) IActivitySportBetDo
	Or(conds ...gen.Condition) IActivitySportBetDo
	Select(conds ...field.Expr) IActivitySportBetDo
	Where(conds ...gen.Condition) IActivitySportBetDo
	Order(conds ...field.Expr) IActivitySportBetDo
	Distinct(cols ...field.Expr) IActivitySportBetDo
	Omit(cols ...field.Expr) IActivitySportBetDo
	Join(table schema.Tabler, on ...field.Expr) IActivitySportBetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportBetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportBetDo
	Group(cols ...field.Expr) IActivitySportBetDo
	Having(conds ...gen.Condition) IActivitySportBetDo
	Limit(limit int) IActivitySportBetDo
	Offset(offset int) IActivitySportBetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportBetDo
	Unscoped() IActivitySportBetDo
	Create(values ...*model.ActivitySportBet) error
	CreateInBatches(values []*model.ActivitySportBet, batchSize int) error
	Save(values ...*model.ActivitySportBet) error
	First() (*model.ActivitySportBet, error)
	Take() (*model.ActivitySportBet, error)
	Last() (*model.ActivitySportBet, error)
	Find() ([]*model.ActivitySportBet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportBet, err error)
	FindInBatches(result *[]*model.ActivitySportBet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivitySportBet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivitySportBetDo
	Assign(attrs ...field.AssignExpr) IActivitySportBetDo
	Joins(fields ...field.RelationField) IActivitySportBetDo
	Preload(fields ...field.RelationField) IActivitySportBetDo
	FirstOrInit() (*model.ActivitySportBet, error)
	FirstOrCreate() (*model.ActivitySportBet, error)
	FindByPage(offset int, limit int) (result []*model.ActivitySportBet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivitySportBetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activitySportBetDo) Debug() IActivitySportBetDo {
	return a.withDO(a.DO.Debug())
}

func (a activitySportBetDo) WithContext(ctx context.Context) IActivitySportBetDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activitySportBetDo) ReadDB() IActivitySportBetDo {
	return a.Clauses(dbresolver.Read)
}

func (a activitySportBetDo) WriteDB() IActivitySportBetDo {
	return a.Clauses(dbresolver.Write)
}

func (a activitySportBetDo) Session(config *gorm.Session) IActivitySportBetDo {
	return a.withDO(a.DO.Session(config))
}

func (a activitySportBetDo) Clauses(conds ...clause.Expression) IActivitySportBetDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activitySportBetDo) Returning(value interface{}, columns ...string) IActivitySportBetDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activitySportBetDo) Not(conds ...gen.Condition) IActivitySportBetDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activitySportBetDo) Or(conds ...gen.Condition) IActivitySportBetDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activitySportBetDo) Select(conds ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activitySportBetDo) Where(conds ...gen.Condition) IActivitySportBetDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activitySportBetDo) Order(conds ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activitySportBetDo) Distinct(cols ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activitySportBetDo) Omit(cols ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activitySportBetDo) Join(table schema.Tabler, on ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activitySportBetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activitySportBetDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activitySportBetDo) Group(cols ...field.Expr) IActivitySportBetDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activitySportBetDo) Having(conds ...gen.Condition) IActivitySportBetDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activitySportBetDo) Limit(limit int) IActivitySportBetDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activitySportBetDo) Offset(offset int) IActivitySportBetDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activitySportBetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitySportBetDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activitySportBetDo) Unscoped() IActivitySportBetDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activitySportBetDo) Create(values ...*model.ActivitySportBet) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activitySportBetDo) CreateInBatches(values []*model.ActivitySportBet, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activitySportBetDo) Save(values ...*model.ActivitySportBet) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activitySportBetDo) First() (*model.ActivitySportBet, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportBet), nil
	}
}

func (a activitySportBetDo) Take() (*model.ActivitySportBet, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportBet), nil
	}
}

func (a activitySportBetDo) Last() (*model.ActivitySportBet, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportBet), nil
	}
}

func (a activitySportBetDo) Find() ([]*model.ActivitySportBet, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivitySportBet), err
}

func (a activitySportBetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitySportBet, err error) {
	buf := make([]*model.ActivitySportBet, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activitySportBetDo) FindInBatches(result *[]*model.ActivitySportBet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activitySportBetDo) Attrs(attrs ...field.AssignExpr) IActivitySportBetDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activitySportBetDo) Assign(attrs ...field.AssignExpr) IActivitySportBetDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activitySportBetDo) Joins(fields ...field.RelationField) IActivitySportBetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activitySportBetDo) Preload(fields ...field.RelationField) IActivitySportBetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activitySportBetDo) FirstOrInit() (*model.ActivitySportBet, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportBet), nil
	}
}

func (a activitySportBetDo) FirstOrCreate() (*model.ActivitySportBet, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitySportBet), nil
	}
}

func (a activitySportBetDo) FindByPage(offset int, limit int) (result []*model.ActivitySportBet, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activitySportBetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activitySportBetDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activitySportBetDo) Delete(models ...*model.ActivitySportBet) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activitySportBetDo) withDO(do gen.Dao) *activitySportBetDo {
	a.DO = *do.(*gen.DO)
	return a
}
