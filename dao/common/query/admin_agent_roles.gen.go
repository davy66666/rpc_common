// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminAgentRole(db *gorm.DB, opts ...gen.DOOption) adminAgentRole {
	_adminAgentRole := adminAgentRole{}

	_adminAgentRole.adminAgentRoleDo.UseDB(db, opts...)
	_adminAgentRole.adminAgentRoleDo.UseModel(&model.AdminAgentRole{})

	tableName := _adminAgentRole.adminAgentRoleDo.TableName()
	_adminAgentRole.ALL = field.NewAsterisk(tableName)
	_adminAgentRole.ID = field.NewInt64(tableName, "id")
	_adminAgentRole.Name = field.NewString(tableName, "name")
	_adminAgentRole.Remark = field.NewString(tableName, "remark")
	_adminAgentRole.Status = field.NewInt64(tableName, "status")
	_adminAgentRole.OperateAdminName = field.NewString(tableName, "operate_admin_name")
	_adminAgentRole.CreatedAt = field.NewField(tableName, "created_at")
	_adminAgentRole.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminAgentRole.fillFieldMap()

	return _adminAgentRole
}

type adminAgentRole struct {
	adminAgentRoleDo adminAgentRoleDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	Remark           field.String
	Status           field.Int64
	OperateAdminName field.String
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (a adminAgentRole) Table(newTableName string) *adminAgentRole {
	a.adminAgentRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminAgentRole) As(alias string) *adminAgentRole {
	a.adminAgentRoleDo.DO = *(a.adminAgentRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminAgentRole) updateTableName(table string) *adminAgentRole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Remark = field.NewString(table, "remark")
	a.Status = field.NewInt64(table, "status")
	a.OperateAdminName = field.NewString(table, "operate_admin_name")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminAgentRole) WithContext(ctx context.Context) IAdminAgentRoleDo {
	return a.adminAgentRoleDo.WithContext(ctx)
}

func (a adminAgentRole) TableName() string { return a.adminAgentRoleDo.TableName() }

func (a adminAgentRole) Alias() string { return a.adminAgentRoleDo.Alias() }

func (a adminAgentRole) Columns(cols ...field.Expr) gen.Columns {
	return a.adminAgentRoleDo.Columns(cols...)
}

func (a *adminAgentRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminAgentRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["status"] = a.Status
	a.fieldMap["operate_admin_name"] = a.OperateAdminName
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminAgentRole) clone(db *gorm.DB) adminAgentRole {
	a.adminAgentRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminAgentRole) replaceDB(db *gorm.DB) adminAgentRole {
	a.adminAgentRoleDo.ReplaceDB(db)
	return a
}

type adminAgentRoleDo struct{ gen.DO }

type IAdminAgentRoleDo interface {
	gen.SubQuery
	Debug() IAdminAgentRoleDo
	WithContext(ctx context.Context) IAdminAgentRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminAgentRoleDo
	WriteDB() IAdminAgentRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminAgentRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminAgentRoleDo
	Not(conds ...gen.Condition) IAdminAgentRoleDo
	Or(conds ...gen.Condition) IAdminAgentRoleDo
	Select(conds ...field.Expr) IAdminAgentRoleDo
	Where(conds ...gen.Condition) IAdminAgentRoleDo
	Order(conds ...field.Expr) IAdminAgentRoleDo
	Distinct(cols ...field.Expr) IAdminAgentRoleDo
	Omit(cols ...field.Expr) IAdminAgentRoleDo
	Join(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo
	Group(cols ...field.Expr) IAdminAgentRoleDo
	Having(conds ...gen.Condition) IAdminAgentRoleDo
	Limit(limit int) IAdminAgentRoleDo
	Offset(offset int) IAdminAgentRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentRoleDo
	Unscoped() IAdminAgentRoleDo
	Create(values ...*model.AdminAgentRole) error
	CreateInBatches(values []*model.AdminAgentRole, batchSize int) error
	Save(values ...*model.AdminAgentRole) error
	First() (*model.AdminAgentRole, error)
	Take() (*model.AdminAgentRole, error)
	Last() (*model.AdminAgentRole, error)
	Find() ([]*model.AdminAgentRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentRole, err error)
	FindInBatches(result *[]*model.AdminAgentRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminAgentRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminAgentRoleDo
	Assign(attrs ...field.AssignExpr) IAdminAgentRoleDo
	Joins(fields ...field.RelationField) IAdminAgentRoleDo
	Preload(fields ...field.RelationField) IAdminAgentRoleDo
	FirstOrInit() (*model.AdminAgentRole, error)
	FirstOrCreate() (*model.AdminAgentRole, error)
	FindByPage(offset int, limit int) (result []*model.AdminAgentRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminAgentRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminAgentRoleDo) Debug() IAdminAgentRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a adminAgentRoleDo) WithContext(ctx context.Context) IAdminAgentRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminAgentRoleDo) ReadDB() IAdminAgentRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminAgentRoleDo) WriteDB() IAdminAgentRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminAgentRoleDo) Session(config *gorm.Session) IAdminAgentRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminAgentRoleDo) Clauses(conds ...clause.Expression) IAdminAgentRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminAgentRoleDo) Returning(value interface{}, columns ...string) IAdminAgentRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminAgentRoleDo) Not(conds ...gen.Condition) IAdminAgentRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminAgentRoleDo) Or(conds ...gen.Condition) IAdminAgentRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminAgentRoleDo) Select(conds ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminAgentRoleDo) Where(conds ...gen.Condition) IAdminAgentRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminAgentRoleDo) Order(conds ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminAgentRoleDo) Distinct(cols ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminAgentRoleDo) Omit(cols ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminAgentRoleDo) Join(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminAgentRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminAgentRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminAgentRoleDo) Group(cols ...field.Expr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminAgentRoleDo) Having(conds ...gen.Condition) IAdminAgentRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminAgentRoleDo) Limit(limit int) IAdminAgentRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminAgentRoleDo) Offset(offset int) IAdminAgentRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminAgentRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAgentRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminAgentRoleDo) Unscoped() IAdminAgentRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminAgentRoleDo) Create(values ...*model.AdminAgentRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminAgentRoleDo) CreateInBatches(values []*model.AdminAgentRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminAgentRoleDo) Save(values ...*model.AdminAgentRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminAgentRoleDo) First() (*model.AdminAgentRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRole), nil
	}
}

func (a adminAgentRoleDo) Take() (*model.AdminAgentRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRole), nil
	}
}

func (a adminAgentRoleDo) Last() (*model.AdminAgentRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRole), nil
	}
}

func (a adminAgentRoleDo) Find() ([]*model.AdminAgentRole, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminAgentRole), err
}

func (a adminAgentRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAgentRole, err error) {
	buf := make([]*model.AdminAgentRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminAgentRoleDo) FindInBatches(result *[]*model.AdminAgentRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminAgentRoleDo) Attrs(attrs ...field.AssignExpr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminAgentRoleDo) Assign(attrs ...field.AssignExpr) IAdminAgentRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminAgentRoleDo) Joins(fields ...field.RelationField) IAdminAgentRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminAgentRoleDo) Preload(fields ...field.RelationField) IAdminAgentRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminAgentRoleDo) FirstOrInit() (*model.AdminAgentRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRole), nil
	}
}

func (a adminAgentRoleDo) FirstOrCreate() (*model.AdminAgentRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAgentRole), nil
	}
}

func (a adminAgentRoleDo) FindByPage(offset int, limit int) (result []*model.AdminAgentRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminAgentRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminAgentRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminAgentRoleDo) Delete(models ...*model.AdminAgentRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminAgentRoleDo) withDO(do gen.Dao) *adminAgentRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
