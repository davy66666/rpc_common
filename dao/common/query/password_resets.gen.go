// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPasswordReset(db *gorm.DB, opts ...gen.DOOption) passwordReset {
	_passwordReset := passwordReset{}

	_passwordReset.passwordResetDo.UseDB(db, opts...)
	_passwordReset.passwordResetDo.UseModel(&model.PasswordReset{})

	tableName := _passwordReset.passwordResetDo.TableName()
	_passwordReset.ALL = field.NewAsterisk(tableName)
	_passwordReset.Email = field.NewString(tableName, "email")
	_passwordReset.Token = field.NewString(tableName, "token")
	_passwordReset.CreatedAt = field.NewField(tableName, "created_at")

	_passwordReset.fillFieldMap()

	return _passwordReset
}

type passwordReset struct {
	passwordResetDo passwordResetDo

	ALL       field.Asterisk
	Email     field.String
	Token     field.String
	CreatedAt field.Field

	fieldMap map[string]field.Expr
}

func (p passwordReset) Table(newTableName string) *passwordReset {
	p.passwordResetDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p passwordReset) As(alias string) *passwordReset {
	p.passwordResetDo.DO = *(p.passwordResetDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *passwordReset) updateTableName(table string) *passwordReset {
	p.ALL = field.NewAsterisk(table)
	p.Email = field.NewString(table, "email")
	p.Token = field.NewString(table, "token")
	p.CreatedAt = field.NewField(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *passwordReset) WithContext(ctx context.Context) IPasswordResetDo {
	return p.passwordResetDo.WithContext(ctx)
}

func (p passwordReset) TableName() string { return p.passwordResetDo.TableName() }

func (p passwordReset) Alias() string { return p.passwordResetDo.Alias() }

func (p passwordReset) Columns(cols ...field.Expr) gen.Columns {
	return p.passwordResetDo.Columns(cols...)
}

func (p *passwordReset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *passwordReset) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["email"] = p.Email
	p.fieldMap["token"] = p.Token
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p passwordReset) clone(db *gorm.DB) passwordReset {
	p.passwordResetDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p passwordReset) replaceDB(db *gorm.DB) passwordReset {
	p.passwordResetDo.ReplaceDB(db)
	return p
}

type passwordResetDo struct{ gen.DO }

type IPasswordResetDo interface {
	gen.SubQuery
	Debug() IPasswordResetDo
	WithContext(ctx context.Context) IPasswordResetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPasswordResetDo
	WriteDB() IPasswordResetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPasswordResetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPasswordResetDo
	Not(conds ...gen.Condition) IPasswordResetDo
	Or(conds ...gen.Condition) IPasswordResetDo
	Select(conds ...field.Expr) IPasswordResetDo
	Where(conds ...gen.Condition) IPasswordResetDo
	Order(conds ...field.Expr) IPasswordResetDo
	Distinct(cols ...field.Expr) IPasswordResetDo
	Omit(cols ...field.Expr) IPasswordResetDo
	Join(table schema.Tabler, on ...field.Expr) IPasswordResetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPasswordResetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPasswordResetDo
	Group(cols ...field.Expr) IPasswordResetDo
	Having(conds ...gen.Condition) IPasswordResetDo
	Limit(limit int) IPasswordResetDo
	Offset(offset int) IPasswordResetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPasswordResetDo
	Unscoped() IPasswordResetDo
	Create(values ...*model.PasswordReset) error
	CreateInBatches(values []*model.PasswordReset, batchSize int) error
	Save(values ...*model.PasswordReset) error
	First() (*model.PasswordReset, error)
	Take() (*model.PasswordReset, error)
	Last() (*model.PasswordReset, error)
	Find() ([]*model.PasswordReset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PasswordReset, err error)
	FindInBatches(result *[]*model.PasswordReset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PasswordReset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPasswordResetDo
	Assign(attrs ...field.AssignExpr) IPasswordResetDo
	Joins(fields ...field.RelationField) IPasswordResetDo
	Preload(fields ...field.RelationField) IPasswordResetDo
	FirstOrInit() (*model.PasswordReset, error)
	FirstOrCreate() (*model.PasswordReset, error)
	FindByPage(offset int, limit int) (result []*model.PasswordReset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPasswordResetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p passwordResetDo) Debug() IPasswordResetDo {
	return p.withDO(p.DO.Debug())
}

func (p passwordResetDo) WithContext(ctx context.Context) IPasswordResetDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p passwordResetDo) ReadDB() IPasswordResetDo {
	return p.Clauses(dbresolver.Read)
}

func (p passwordResetDo) WriteDB() IPasswordResetDo {
	return p.Clauses(dbresolver.Write)
}

func (p passwordResetDo) Session(config *gorm.Session) IPasswordResetDo {
	return p.withDO(p.DO.Session(config))
}

func (p passwordResetDo) Clauses(conds ...clause.Expression) IPasswordResetDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p passwordResetDo) Returning(value interface{}, columns ...string) IPasswordResetDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p passwordResetDo) Not(conds ...gen.Condition) IPasswordResetDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p passwordResetDo) Or(conds ...gen.Condition) IPasswordResetDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p passwordResetDo) Select(conds ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p passwordResetDo) Where(conds ...gen.Condition) IPasswordResetDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p passwordResetDo) Order(conds ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p passwordResetDo) Distinct(cols ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p passwordResetDo) Omit(cols ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p passwordResetDo) Join(table schema.Tabler, on ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p passwordResetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p passwordResetDo) RightJoin(table schema.Tabler, on ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p passwordResetDo) Group(cols ...field.Expr) IPasswordResetDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p passwordResetDo) Having(conds ...gen.Condition) IPasswordResetDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p passwordResetDo) Limit(limit int) IPasswordResetDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p passwordResetDo) Offset(offset int) IPasswordResetDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p passwordResetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPasswordResetDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p passwordResetDo) Unscoped() IPasswordResetDo {
	return p.withDO(p.DO.Unscoped())
}

func (p passwordResetDo) Create(values ...*model.PasswordReset) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p passwordResetDo) CreateInBatches(values []*model.PasswordReset, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p passwordResetDo) Save(values ...*model.PasswordReset) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p passwordResetDo) First() (*model.PasswordReset, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PasswordReset), nil
	}
}

func (p passwordResetDo) Take() (*model.PasswordReset, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PasswordReset), nil
	}
}

func (p passwordResetDo) Last() (*model.PasswordReset, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PasswordReset), nil
	}
}

func (p passwordResetDo) Find() ([]*model.PasswordReset, error) {
	result, err := p.DO.Find()
	return result.([]*model.PasswordReset), err
}

func (p passwordResetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PasswordReset, err error) {
	buf := make([]*model.PasswordReset, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p passwordResetDo) FindInBatches(result *[]*model.PasswordReset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p passwordResetDo) Attrs(attrs ...field.AssignExpr) IPasswordResetDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p passwordResetDo) Assign(attrs ...field.AssignExpr) IPasswordResetDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p passwordResetDo) Joins(fields ...field.RelationField) IPasswordResetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p passwordResetDo) Preload(fields ...field.RelationField) IPasswordResetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p passwordResetDo) FirstOrInit() (*model.PasswordReset, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PasswordReset), nil
	}
}

func (p passwordResetDo) FirstOrCreate() (*model.PasswordReset, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PasswordReset), nil
	}
}

func (p passwordResetDo) FindByPage(offset int, limit int) (result []*model.PasswordReset, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p passwordResetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p passwordResetDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p passwordResetDo) Delete(models ...*model.PasswordReset) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *passwordResetDo) withDO(do gen.Dao) *passwordResetDo {
	p.DO = *do.(*gen.DO)
	return p
}
