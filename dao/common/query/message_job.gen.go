// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMessageJob(db *gorm.DB, opts ...gen.DOOption) messageJob {
	_messageJob := messageJob{}

	_messageJob.messageJobDo.UseDB(db, opts...)
	_messageJob.messageJobDo.UseModel(&model.MessageJob{})

	tableName := _messageJob.messageJobDo.TableName()
	_messageJob.ALL = field.NewAsterisk(tableName)
	_messageJob.ID = field.NewInt64(tableName, "id")
	_messageJob.MsgID = field.NewInt64(tableName, "msg_id")
	_messageJob.MsgName = field.NewString(tableName, "msg_name")
	_messageJob.Data = field.NewString(tableName, "data")
	_messageJob.Status = field.NewInt64(tableName, "status")
	_messageJob.CreatedAt = field.NewField(tableName, "created_at")
	_messageJob.UpdatedAt = field.NewField(tableName, "updated_at")

	_messageJob.fillFieldMap()

	return _messageJob
}

// messageJob 私信彩金队列任务
type messageJob struct {
	messageJobDo messageJobDo

	ALL       field.Asterisk
	ID        field.Int64
	MsgID     field.Int64  // 消息类型
	MsgName   field.String // 消息名称
	Data      field.String // 队列数据
	Status    field.Int64  // 队列执行状态：0未执行，1失败，2成功
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (m messageJob) Table(newTableName string) *messageJob {
	m.messageJobDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageJob) As(alias string) *messageJob {
	m.messageJobDo.DO = *(m.messageJobDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageJob) updateTableName(table string) *messageJob {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MsgID = field.NewInt64(table, "msg_id")
	m.MsgName = field.NewString(table, "msg_name")
	m.Data = field.NewString(table, "data")
	m.Status = field.NewInt64(table, "status")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *messageJob) WithContext(ctx context.Context) IMessageJobDo {
	return m.messageJobDo.WithContext(ctx)
}

func (m messageJob) TableName() string { return m.messageJobDo.TableName() }

func (m messageJob) Alias() string { return m.messageJobDo.Alias() }

func (m messageJob) Columns(cols ...field.Expr) gen.Columns { return m.messageJobDo.Columns(cols...) }

func (m *messageJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageJob) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["msg_id"] = m.MsgID
	m.fieldMap["msg_name"] = m.MsgName
	m.fieldMap["data"] = m.Data
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m messageJob) clone(db *gorm.DB) messageJob {
	m.messageJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageJob) replaceDB(db *gorm.DB) messageJob {
	m.messageJobDo.ReplaceDB(db)
	return m
}

type messageJobDo struct{ gen.DO }

type IMessageJobDo interface {
	gen.SubQuery
	Debug() IMessageJobDo
	WithContext(ctx context.Context) IMessageJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageJobDo
	WriteDB() IMessageJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageJobDo
	Not(conds ...gen.Condition) IMessageJobDo
	Or(conds ...gen.Condition) IMessageJobDo
	Select(conds ...field.Expr) IMessageJobDo
	Where(conds ...gen.Condition) IMessageJobDo
	Order(conds ...field.Expr) IMessageJobDo
	Distinct(cols ...field.Expr) IMessageJobDo
	Omit(cols ...field.Expr) IMessageJobDo
	Join(table schema.Tabler, on ...field.Expr) IMessageJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageJobDo
	Group(cols ...field.Expr) IMessageJobDo
	Having(conds ...gen.Condition) IMessageJobDo
	Limit(limit int) IMessageJobDo
	Offset(offset int) IMessageJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageJobDo
	Unscoped() IMessageJobDo
	Create(values ...*model.MessageJob) error
	CreateInBatches(values []*model.MessageJob, batchSize int) error
	Save(values ...*model.MessageJob) error
	First() (*model.MessageJob, error)
	Take() (*model.MessageJob, error)
	Last() (*model.MessageJob, error)
	Find() ([]*model.MessageJob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageJob, err error)
	FindInBatches(result *[]*model.MessageJob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageJob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageJobDo
	Assign(attrs ...field.AssignExpr) IMessageJobDo
	Joins(fields ...field.RelationField) IMessageJobDo
	Preload(fields ...field.RelationField) IMessageJobDo
	FirstOrInit() (*model.MessageJob, error)
	FirstOrCreate() (*model.MessageJob, error)
	FindByPage(offset int, limit int) (result []*model.MessageJob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageJobDo) Debug() IMessageJobDo {
	return m.withDO(m.DO.Debug())
}

func (m messageJobDo) WithContext(ctx context.Context) IMessageJobDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageJobDo) ReadDB() IMessageJobDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageJobDo) WriteDB() IMessageJobDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageJobDo) Session(config *gorm.Session) IMessageJobDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageJobDo) Clauses(conds ...clause.Expression) IMessageJobDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageJobDo) Returning(value interface{}, columns ...string) IMessageJobDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageJobDo) Not(conds ...gen.Condition) IMessageJobDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageJobDo) Or(conds ...gen.Condition) IMessageJobDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageJobDo) Select(conds ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageJobDo) Where(conds ...gen.Condition) IMessageJobDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageJobDo) Order(conds ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageJobDo) Distinct(cols ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageJobDo) Omit(cols ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageJobDo) Join(table schema.Tabler, on ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageJobDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageJobDo) Group(cols ...field.Expr) IMessageJobDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageJobDo) Having(conds ...gen.Condition) IMessageJobDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageJobDo) Limit(limit int) IMessageJobDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageJobDo) Offset(offset int) IMessageJobDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageJobDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageJobDo) Unscoped() IMessageJobDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageJobDo) Create(values ...*model.MessageJob) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageJobDo) CreateInBatches(values []*model.MessageJob, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageJobDo) Save(values ...*model.MessageJob) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageJobDo) First() (*model.MessageJob, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageJob), nil
	}
}

func (m messageJobDo) Take() (*model.MessageJob, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageJob), nil
	}
}

func (m messageJobDo) Last() (*model.MessageJob, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageJob), nil
	}
}

func (m messageJobDo) Find() ([]*model.MessageJob, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageJob), err
}

func (m messageJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageJob, err error) {
	buf := make([]*model.MessageJob, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageJobDo) FindInBatches(result *[]*model.MessageJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageJobDo) Attrs(attrs ...field.AssignExpr) IMessageJobDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageJobDo) Assign(attrs ...field.AssignExpr) IMessageJobDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageJobDo) Joins(fields ...field.RelationField) IMessageJobDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageJobDo) Preload(fields ...field.RelationField) IMessageJobDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageJobDo) FirstOrInit() (*model.MessageJob, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageJob), nil
	}
}

func (m messageJobDo) FirstOrCreate() (*model.MessageJob, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageJob), nil
	}
}

func (m messageJobDo) FindByPage(offset int, limit int) (result []*model.MessageJob, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageJobDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageJobDo) Delete(models ...*model.MessageJob) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageJobDo) withDO(do gen.Dao) *messageJobDo {
	m.DO = *do.(*gen.DO)
	return m
}
