// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTodayProfit(db *gorm.DB, opts ...gen.DOOption) todayProfit {
	_todayProfit := todayProfit{}

	_todayProfit.todayProfitDo.UseDB(db, opts...)
	_todayProfit.todayProfitDo.UseModel(&model.TodayProfit{})

	tableName := _todayProfit.todayProfitDo.TableName()
	_todayProfit.ALL = field.NewAsterisk(tableName)
	_todayProfit.ID = field.NewInt64(tableName, "id")
	_todayProfit.DateAt = field.NewString(tableName, "date_at")
	_todayProfit.GameCode = field.NewString(tableName, "game_code")
	_todayProfit.BetNums = field.NewInt64(tableName, "bet_nums")
	_todayProfit.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_todayProfit.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_todayProfit.NetAmount = field.NewFloat64(tableName, "net_amount")
	_todayProfit.BetUsers = field.NewString(tableName, "bet_users")
	_todayProfit.CreatedAt = field.NewField(tableName, "created_at")
	_todayProfit.UpdatedAt = field.NewField(tableName, "updated_at")

	_todayProfit.fillFieldMap()

	return _todayProfit
}

type todayProfit struct {
	todayProfitDo todayProfitDo

	ALL            field.Asterisk
	ID             field.Int64
	DateAt         field.String  // 日期
	GameCode       field.String  // 游戏类型
	BetNums        field.Int64   // 注单量
	BetAmount      field.Float64 // 投注额
	ValidBetAmount field.Float64 // 有效投注金额
	NetAmount      field.Float64 // 玩家的所赢金额
	BetUsers       field.String  // 投注人数{username:投注次数，多个以逗号分隔}
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t todayProfit) Table(newTableName string) *todayProfit {
	t.todayProfitDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t todayProfit) As(alias string) *todayProfit {
	t.todayProfitDo.DO = *(t.todayProfitDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *todayProfit) updateTableName(table string) *todayProfit {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.DateAt = field.NewString(table, "date_at")
	t.GameCode = field.NewString(table, "game_code")
	t.BetNums = field.NewInt64(table, "bet_nums")
	t.BetAmount = field.NewFloat64(table, "bet_amount")
	t.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	t.NetAmount = field.NewFloat64(table, "net_amount")
	t.BetUsers = field.NewString(table, "bet_users")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *todayProfit) WithContext(ctx context.Context) ITodayProfitDo {
	return t.todayProfitDo.WithContext(ctx)
}

func (t todayProfit) TableName() string { return t.todayProfitDo.TableName() }

func (t todayProfit) Alias() string { return t.todayProfitDo.Alias() }

func (t todayProfit) Columns(cols ...field.Expr) gen.Columns { return t.todayProfitDo.Columns(cols...) }

func (t *todayProfit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *todayProfit) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["date_at"] = t.DateAt
	t.fieldMap["game_code"] = t.GameCode
	t.fieldMap["bet_nums"] = t.BetNums
	t.fieldMap["bet_amount"] = t.BetAmount
	t.fieldMap["valid_bet_amount"] = t.ValidBetAmount
	t.fieldMap["net_amount"] = t.NetAmount
	t.fieldMap["bet_users"] = t.BetUsers
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t todayProfit) clone(db *gorm.DB) todayProfit {
	t.todayProfitDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t todayProfit) replaceDB(db *gorm.DB) todayProfit {
	t.todayProfitDo.ReplaceDB(db)
	return t
}

type todayProfitDo struct{ gen.DO }

type ITodayProfitDo interface {
	gen.SubQuery
	Debug() ITodayProfitDo
	WithContext(ctx context.Context) ITodayProfitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITodayProfitDo
	WriteDB() ITodayProfitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITodayProfitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITodayProfitDo
	Not(conds ...gen.Condition) ITodayProfitDo
	Or(conds ...gen.Condition) ITodayProfitDo
	Select(conds ...field.Expr) ITodayProfitDo
	Where(conds ...gen.Condition) ITodayProfitDo
	Order(conds ...field.Expr) ITodayProfitDo
	Distinct(cols ...field.Expr) ITodayProfitDo
	Omit(cols ...field.Expr) ITodayProfitDo
	Join(table schema.Tabler, on ...field.Expr) ITodayProfitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITodayProfitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITodayProfitDo
	Group(cols ...field.Expr) ITodayProfitDo
	Having(conds ...gen.Condition) ITodayProfitDo
	Limit(limit int) ITodayProfitDo
	Offset(offset int) ITodayProfitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITodayProfitDo
	Unscoped() ITodayProfitDo
	Create(values ...*model.TodayProfit) error
	CreateInBatches(values []*model.TodayProfit, batchSize int) error
	Save(values ...*model.TodayProfit) error
	First() (*model.TodayProfit, error)
	Take() (*model.TodayProfit, error)
	Last() (*model.TodayProfit, error)
	Find() ([]*model.TodayProfit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TodayProfit, err error)
	FindInBatches(result *[]*model.TodayProfit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TodayProfit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITodayProfitDo
	Assign(attrs ...field.AssignExpr) ITodayProfitDo
	Joins(fields ...field.RelationField) ITodayProfitDo
	Preload(fields ...field.RelationField) ITodayProfitDo
	FirstOrInit() (*model.TodayProfit, error)
	FirstOrCreate() (*model.TodayProfit, error)
	FindByPage(offset int, limit int) (result []*model.TodayProfit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITodayProfitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t todayProfitDo) Debug() ITodayProfitDo {
	return t.withDO(t.DO.Debug())
}

func (t todayProfitDo) WithContext(ctx context.Context) ITodayProfitDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t todayProfitDo) ReadDB() ITodayProfitDo {
	return t.Clauses(dbresolver.Read)
}

func (t todayProfitDo) WriteDB() ITodayProfitDo {
	return t.Clauses(dbresolver.Write)
}

func (t todayProfitDo) Session(config *gorm.Session) ITodayProfitDo {
	return t.withDO(t.DO.Session(config))
}

func (t todayProfitDo) Clauses(conds ...clause.Expression) ITodayProfitDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t todayProfitDo) Returning(value interface{}, columns ...string) ITodayProfitDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t todayProfitDo) Not(conds ...gen.Condition) ITodayProfitDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t todayProfitDo) Or(conds ...gen.Condition) ITodayProfitDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t todayProfitDo) Select(conds ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t todayProfitDo) Where(conds ...gen.Condition) ITodayProfitDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t todayProfitDo) Order(conds ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t todayProfitDo) Distinct(cols ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t todayProfitDo) Omit(cols ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t todayProfitDo) Join(table schema.Tabler, on ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t todayProfitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t todayProfitDo) RightJoin(table schema.Tabler, on ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t todayProfitDo) Group(cols ...field.Expr) ITodayProfitDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t todayProfitDo) Having(conds ...gen.Condition) ITodayProfitDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t todayProfitDo) Limit(limit int) ITodayProfitDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t todayProfitDo) Offset(offset int) ITodayProfitDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t todayProfitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITodayProfitDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t todayProfitDo) Unscoped() ITodayProfitDo {
	return t.withDO(t.DO.Unscoped())
}

func (t todayProfitDo) Create(values ...*model.TodayProfit) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t todayProfitDo) CreateInBatches(values []*model.TodayProfit, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t todayProfitDo) Save(values ...*model.TodayProfit) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t todayProfitDo) First() (*model.TodayProfit, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodayProfit), nil
	}
}

func (t todayProfitDo) Take() (*model.TodayProfit, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodayProfit), nil
	}
}

func (t todayProfitDo) Last() (*model.TodayProfit, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodayProfit), nil
	}
}

func (t todayProfitDo) Find() ([]*model.TodayProfit, error) {
	result, err := t.DO.Find()
	return result.([]*model.TodayProfit), err
}

func (t todayProfitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TodayProfit, err error) {
	buf := make([]*model.TodayProfit, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t todayProfitDo) FindInBatches(result *[]*model.TodayProfit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t todayProfitDo) Attrs(attrs ...field.AssignExpr) ITodayProfitDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t todayProfitDo) Assign(attrs ...field.AssignExpr) ITodayProfitDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t todayProfitDo) Joins(fields ...field.RelationField) ITodayProfitDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t todayProfitDo) Preload(fields ...field.RelationField) ITodayProfitDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t todayProfitDo) FirstOrInit() (*model.TodayProfit, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodayProfit), nil
	}
}

func (t todayProfitDo) FirstOrCreate() (*model.TodayProfit, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TodayProfit), nil
	}
}

func (t todayProfitDo) FindByPage(offset int, limit int) (result []*model.TodayProfit, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t todayProfitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t todayProfitDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t todayProfitDo) Delete(models ...*model.TodayProfit) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *todayProfitDo) withDO(do gen.Dao) *todayProfitDo {
	t.DO = *do.(*gen.DO)
	return t
}
