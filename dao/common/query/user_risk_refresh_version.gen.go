// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRiskRefreshVersion(db *gorm.DB, opts ...gen.DOOption) userRiskRefreshVersion {
	_userRiskRefreshVersion := userRiskRefreshVersion{}

	_userRiskRefreshVersion.userRiskRefreshVersionDo.UseDB(db, opts...)
	_userRiskRefreshVersion.userRiskRefreshVersionDo.UseModel(&model.UserRiskRefreshVersion{})

	tableName := _userRiskRefreshVersion.userRiskRefreshVersionDo.TableName()
	_userRiskRefreshVersion.ALL = field.NewAsterisk(tableName)
	_userRiskRefreshVersion.ID = field.NewInt64(tableName, "id")
	_userRiskRefreshVersion.UID = field.NewInt64(tableName, "uid")
	_userRiskRefreshVersion.Version = field.NewInt64(tableName, "version")
	_userRiskRefreshVersion.CreatedAt = field.NewField(tableName, "created_at")
	_userRiskRefreshVersion.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRiskRefreshVersion.fillFieldMap()

	return _userRiskRefreshVersion
}

// userRiskRefreshVersion 风险名单最后一次刷新时间
type userRiskRefreshVersion struct {
	userRiskRefreshVersionDo userRiskRefreshVersionDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64 // 管理员ID
	Version   field.Int64 // 最后一次读取数据时间
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userRiskRefreshVersion) Table(newTableName string) *userRiskRefreshVersion {
	u.userRiskRefreshVersionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRiskRefreshVersion) As(alias string) *userRiskRefreshVersion {
	u.userRiskRefreshVersionDo.DO = *(u.userRiskRefreshVersionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRiskRefreshVersion) updateTableName(table string) *userRiskRefreshVersion {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Version = field.NewInt64(table, "version")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRiskRefreshVersion) WithContext(ctx context.Context) IUserRiskRefreshVersionDo {
	return u.userRiskRefreshVersionDo.WithContext(ctx)
}

func (u userRiskRefreshVersion) TableName() string { return u.userRiskRefreshVersionDo.TableName() }

func (u userRiskRefreshVersion) Alias() string { return u.userRiskRefreshVersionDo.Alias() }

func (u userRiskRefreshVersion) Columns(cols ...field.Expr) gen.Columns {
	return u.userRiskRefreshVersionDo.Columns(cols...)
}

func (u *userRiskRefreshVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRiskRefreshVersion) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["version"] = u.Version
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRiskRefreshVersion) clone(db *gorm.DB) userRiskRefreshVersion {
	u.userRiskRefreshVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRiskRefreshVersion) replaceDB(db *gorm.DB) userRiskRefreshVersion {
	u.userRiskRefreshVersionDo.ReplaceDB(db)
	return u
}

type userRiskRefreshVersionDo struct{ gen.DO }

type IUserRiskRefreshVersionDo interface {
	gen.SubQuery
	Debug() IUserRiskRefreshVersionDo
	WithContext(ctx context.Context) IUserRiskRefreshVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRiskRefreshVersionDo
	WriteDB() IUserRiskRefreshVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRiskRefreshVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRiskRefreshVersionDo
	Not(conds ...gen.Condition) IUserRiskRefreshVersionDo
	Or(conds ...gen.Condition) IUserRiskRefreshVersionDo
	Select(conds ...field.Expr) IUserRiskRefreshVersionDo
	Where(conds ...gen.Condition) IUserRiskRefreshVersionDo
	Order(conds ...field.Expr) IUserRiskRefreshVersionDo
	Distinct(cols ...field.Expr) IUserRiskRefreshVersionDo
	Omit(cols ...field.Expr) IUserRiskRefreshVersionDo
	Join(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo
	Group(cols ...field.Expr) IUserRiskRefreshVersionDo
	Having(conds ...gen.Condition) IUserRiskRefreshVersionDo
	Limit(limit int) IUserRiskRefreshVersionDo
	Offset(offset int) IUserRiskRefreshVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskRefreshVersionDo
	Unscoped() IUserRiskRefreshVersionDo
	Create(values ...*model.UserRiskRefreshVersion) error
	CreateInBatches(values []*model.UserRiskRefreshVersion, batchSize int) error
	Save(values ...*model.UserRiskRefreshVersion) error
	First() (*model.UserRiskRefreshVersion, error)
	Take() (*model.UserRiskRefreshVersion, error)
	Last() (*model.UserRiskRefreshVersion, error)
	Find() ([]*model.UserRiskRefreshVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskRefreshVersion, err error)
	FindInBatches(result *[]*model.UserRiskRefreshVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRiskRefreshVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRiskRefreshVersionDo
	Assign(attrs ...field.AssignExpr) IUserRiskRefreshVersionDo
	Joins(fields ...field.RelationField) IUserRiskRefreshVersionDo
	Preload(fields ...field.RelationField) IUserRiskRefreshVersionDo
	FirstOrInit() (*model.UserRiskRefreshVersion, error)
	FirstOrCreate() (*model.UserRiskRefreshVersion, error)
	FindByPage(offset int, limit int) (result []*model.UserRiskRefreshVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRiskRefreshVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRiskRefreshVersionDo) Debug() IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Debug())
}

func (u userRiskRefreshVersionDo) WithContext(ctx context.Context) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRiskRefreshVersionDo) ReadDB() IUserRiskRefreshVersionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRiskRefreshVersionDo) WriteDB() IUserRiskRefreshVersionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRiskRefreshVersionDo) Session(config *gorm.Session) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRiskRefreshVersionDo) Clauses(conds ...clause.Expression) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRiskRefreshVersionDo) Returning(value interface{}, columns ...string) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRiskRefreshVersionDo) Not(conds ...gen.Condition) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRiskRefreshVersionDo) Or(conds ...gen.Condition) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRiskRefreshVersionDo) Select(conds ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRiskRefreshVersionDo) Where(conds ...gen.Condition) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRiskRefreshVersionDo) Order(conds ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRiskRefreshVersionDo) Distinct(cols ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRiskRefreshVersionDo) Omit(cols ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRiskRefreshVersionDo) Join(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRiskRefreshVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRiskRefreshVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRiskRefreshVersionDo) Group(cols ...field.Expr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRiskRefreshVersionDo) Having(conds ...gen.Condition) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRiskRefreshVersionDo) Limit(limit int) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRiskRefreshVersionDo) Offset(offset int) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRiskRefreshVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRiskRefreshVersionDo) Unscoped() IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRiskRefreshVersionDo) Create(values ...*model.UserRiskRefreshVersion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRiskRefreshVersionDo) CreateInBatches(values []*model.UserRiskRefreshVersion, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRiskRefreshVersionDo) Save(values ...*model.UserRiskRefreshVersion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRiskRefreshVersionDo) First() (*model.UserRiskRefreshVersion, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRefreshVersion), nil
	}
}

func (u userRiskRefreshVersionDo) Take() (*model.UserRiskRefreshVersion, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRefreshVersion), nil
	}
}

func (u userRiskRefreshVersionDo) Last() (*model.UserRiskRefreshVersion, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRefreshVersion), nil
	}
}

func (u userRiskRefreshVersionDo) Find() ([]*model.UserRiskRefreshVersion, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRiskRefreshVersion), err
}

func (u userRiskRefreshVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRiskRefreshVersion, err error) {
	buf := make([]*model.UserRiskRefreshVersion, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRiskRefreshVersionDo) FindInBatches(result *[]*model.UserRiskRefreshVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRiskRefreshVersionDo) Attrs(attrs ...field.AssignExpr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRiskRefreshVersionDo) Assign(attrs ...field.AssignExpr) IUserRiskRefreshVersionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRiskRefreshVersionDo) Joins(fields ...field.RelationField) IUserRiskRefreshVersionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRiskRefreshVersionDo) Preload(fields ...field.RelationField) IUserRiskRefreshVersionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRiskRefreshVersionDo) FirstOrInit() (*model.UserRiskRefreshVersion, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRefreshVersion), nil
	}
}

func (u userRiskRefreshVersionDo) FirstOrCreate() (*model.UserRiskRefreshVersion, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRiskRefreshVersion), nil
	}
}

func (u userRiskRefreshVersionDo) FindByPage(offset int, limit int) (result []*model.UserRiskRefreshVersion, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRiskRefreshVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRiskRefreshVersionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRiskRefreshVersionDo) Delete(models ...*model.UserRiskRefreshVersion) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRiskRefreshVersionDo) withDO(do gen.Dao) *userRiskRefreshVersionDo {
	u.DO = *do.(*gen.DO)
	return u
}
