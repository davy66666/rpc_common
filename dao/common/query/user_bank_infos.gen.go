// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserBankInfo(db *gorm.DB, opts ...gen.DOOption) userBankInfo {
	_userBankInfo := userBankInfo{}

	_userBankInfo.userBankInfoDo.UseDB(db, opts...)
	_userBankInfo.userBankInfoDo.UseModel(&model.UserBankInfo{})

	tableName := _userBankInfo.userBankInfoDo.TableName()
	_userBankInfo.ALL = field.NewAsterisk(tableName)
	_userBankInfo.ID = field.NewInt64(tableName, "id")
	_userBankInfo.UserID = field.NewInt64(tableName, "user_id")
	_userBankInfo.Username = field.NewString(tableName, "username")
	_userBankInfo.NationCode = field.NewString(tableName, "nation_code")
	_userBankInfo.Phone = field.NewString(tableName, "phone")
	_userBankInfo.ShortName = field.NewString(tableName, "short_name")
	_userBankInfo.Bankname = field.NewString(tableName, "bankname")
	_userBankInfo.BankAddress = field.NewString(tableName, "bank_address")
	_userBankInfo.Province = field.NewString(tableName, "province")
	_userBankInfo.City = field.NewString(tableName, "city")
	_userBankInfo.RealName = field.NewString(tableName, "real_name")
	_userBankInfo.Account = field.NewString(tableName, "account")
	_userBankInfo.IsLock = field.NewInt64(tableName, "is_lock")
	_userBankInfo.OpUserID = field.NewInt64(tableName, "op_user_id")
	_userBankInfo.OpUsername = field.NewString(tableName, "op_username")
	_userBankInfo.MinMoney = field.NewFloat64(tableName, "min_money")
	_userBankInfo.MaxMoney = field.NewFloat64(tableName, "max_money")
	_userBankInfo.Nums = field.NewInt64(tableName, "nums")
	_userBankInfo.WithdrawalRate = field.NewString(tableName, "withdrawal_rate")
	_userBankInfo.BankType = field.NewInt64(tableName, "bank_type")
	_userBankInfo.TransferType = field.NewInt64(tableName, "transfer_type")
	_userBankInfo.Remark = field.NewString(tableName, "remark")
	_userBankInfo.IsOpen = field.NewInt64(tableName, "is_open")
	_userBankInfo.IsManualBind = field.NewInt64(tableName, "is_manual_bind")
	_userBankInfo.WithdrawType = field.NewInt64(tableName, "withdraw_type")
	_userBankInfo.Is3U = field.NewInt64(tableName, "is_3u")
	_userBankInfo.VirtualCurrencyNetworkID = field.NewInt64(tableName, "virtual_currency_network_id")
	_userBankInfo.VirtualNetworkVal = field.NewString(tableName, "virtual_network_val")
	_userBankInfo.CreatedAt = field.NewField(tableName, "created_at")
	_userBankInfo.UpdatedAt = field.NewField(tableName, "updated_at")
	_userBankInfo.PaymentCode = field.NewString(tableName, "payment_code")

	_userBankInfo.fillFieldMap()

	return _userBankInfo
}

// userBankInfo 用户银行卡信息
type userBankInfo struct {
	userBankInfoDo userBankInfoDo

	ALL                      field.Asterisk
	ID                       field.Int64
	UserID                   field.Int64   // 用户ID
	Username                 field.String  // 用户名
	NationCode               field.String  // 电话区号
	Phone                    field.String  // 电话号码
	ShortName                field.String  // 银行简称
	Bankname                 field.String  // 银行名称
	BankAddress              field.String  // 开户地址
	Province                 field.String  // 省
	City                     field.String  // 市
	RealName                 field.String  // 开户人姓名
	Account                  field.String  // 开户银行账号
	IsLock                   field.Int64   // 是否锁定0:否;1:是
	OpUserID                 field.Int64   // 操作者id
	OpUsername               field.String  // 操作者
	MinMoney                 field.Float64 // 支付最小金额
	MaxMoney                 field.Float64 // 支付最大金额
	Nums                     field.Int64   // 一天取款次数
	WithdrawalRate           field.String  // 取款手续费%
	BankType                 field.Int64   // 1:银行卡, 2:数字钱包, 3:易汇钱包, 4:支付宝, 5:微信, 6:数字人民币
	TransferType             field.Int64   // 转账类型:1:提款, 2:充值
	Remark                   field.String  // 备注
	IsOpen                   field.Int64   // 是否删除0:否;1:是
	IsManualBind             field.Int64   // 是否用户手动绑定的:0:否, 1:是
	WithdrawType             field.Int64   // 1:bank, 2:USDT, 3:购宝, 4:GOPAY
	Is3U                     field.Int64   // 是否3u, 0:否, 1:是
	VirtualCurrencyNetworkID field.Int64   // 虚拟货币配置关联的id
	VirtualNetworkVal        field.String  // 虚拟货币网络类型
	CreatedAt                field.Field
	UpdatedAt                field.Field
	PaymentCode              field.String // 收款码

	fieldMap map[string]field.Expr
}

func (u userBankInfo) Table(newTableName string) *userBankInfo {
	u.userBankInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBankInfo) As(alias string) *userBankInfo {
	u.userBankInfoDo.DO = *(u.userBankInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBankInfo) updateTableName(table string) *userBankInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.NationCode = field.NewString(table, "nation_code")
	u.Phone = field.NewString(table, "phone")
	u.ShortName = field.NewString(table, "short_name")
	u.Bankname = field.NewString(table, "bankname")
	u.BankAddress = field.NewString(table, "bank_address")
	u.Province = field.NewString(table, "province")
	u.City = field.NewString(table, "city")
	u.RealName = field.NewString(table, "real_name")
	u.Account = field.NewString(table, "account")
	u.IsLock = field.NewInt64(table, "is_lock")
	u.OpUserID = field.NewInt64(table, "op_user_id")
	u.OpUsername = field.NewString(table, "op_username")
	u.MinMoney = field.NewFloat64(table, "min_money")
	u.MaxMoney = field.NewFloat64(table, "max_money")
	u.Nums = field.NewInt64(table, "nums")
	u.WithdrawalRate = field.NewString(table, "withdrawal_rate")
	u.BankType = field.NewInt64(table, "bank_type")
	u.TransferType = field.NewInt64(table, "transfer_type")
	u.Remark = field.NewString(table, "remark")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.IsManualBind = field.NewInt64(table, "is_manual_bind")
	u.WithdrawType = field.NewInt64(table, "withdraw_type")
	u.Is3U = field.NewInt64(table, "is_3u")
	u.VirtualCurrencyNetworkID = field.NewInt64(table, "virtual_currency_network_id")
	u.VirtualNetworkVal = field.NewString(table, "virtual_network_val")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.PaymentCode = field.NewString(table, "payment_code")

	u.fillFieldMap()

	return u
}

func (u *userBankInfo) WithContext(ctx context.Context) IUserBankInfoDo {
	return u.userBankInfoDo.WithContext(ctx)
}

func (u userBankInfo) TableName() string { return u.userBankInfoDo.TableName() }

func (u userBankInfo) Alias() string { return u.userBankInfoDo.Alias() }

func (u userBankInfo) Columns(cols ...field.Expr) gen.Columns {
	return u.userBankInfoDo.Columns(cols...)
}

func (u *userBankInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBankInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 31)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["nation_code"] = u.NationCode
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["short_name"] = u.ShortName
	u.fieldMap["bankname"] = u.Bankname
	u.fieldMap["bank_address"] = u.BankAddress
	u.fieldMap["province"] = u.Province
	u.fieldMap["city"] = u.City
	u.fieldMap["real_name"] = u.RealName
	u.fieldMap["account"] = u.Account
	u.fieldMap["is_lock"] = u.IsLock
	u.fieldMap["op_user_id"] = u.OpUserID
	u.fieldMap["op_username"] = u.OpUsername
	u.fieldMap["min_money"] = u.MinMoney
	u.fieldMap["max_money"] = u.MaxMoney
	u.fieldMap["nums"] = u.Nums
	u.fieldMap["withdrawal_rate"] = u.WithdrawalRate
	u.fieldMap["bank_type"] = u.BankType
	u.fieldMap["transfer_type"] = u.TransferType
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["is_manual_bind"] = u.IsManualBind
	u.fieldMap["withdraw_type"] = u.WithdrawType
	u.fieldMap["is_3u"] = u.Is3U
	u.fieldMap["virtual_currency_network_id"] = u.VirtualCurrencyNetworkID
	u.fieldMap["virtual_network_val"] = u.VirtualNetworkVal
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["payment_code"] = u.PaymentCode
}

func (u userBankInfo) clone(db *gorm.DB) userBankInfo {
	u.userBankInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBankInfo) replaceDB(db *gorm.DB) userBankInfo {
	u.userBankInfoDo.ReplaceDB(db)
	return u
}

type userBankInfoDo struct{ gen.DO }

type IUserBankInfoDo interface {
	gen.SubQuery
	Debug() IUserBankInfoDo
	WithContext(ctx context.Context) IUserBankInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBankInfoDo
	WriteDB() IUserBankInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBankInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBankInfoDo
	Not(conds ...gen.Condition) IUserBankInfoDo
	Or(conds ...gen.Condition) IUserBankInfoDo
	Select(conds ...field.Expr) IUserBankInfoDo
	Where(conds ...gen.Condition) IUserBankInfoDo
	Order(conds ...field.Expr) IUserBankInfoDo
	Distinct(cols ...field.Expr) IUserBankInfoDo
	Omit(cols ...field.Expr) IUserBankInfoDo
	Join(table schema.Tabler, on ...field.Expr) IUserBankInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBankInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBankInfoDo
	Group(cols ...field.Expr) IUserBankInfoDo
	Having(conds ...gen.Condition) IUserBankInfoDo
	Limit(limit int) IUserBankInfoDo
	Offset(offset int) IUserBankInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBankInfoDo
	Unscoped() IUserBankInfoDo
	Create(values ...*model.UserBankInfo) error
	CreateInBatches(values []*model.UserBankInfo, batchSize int) error
	Save(values ...*model.UserBankInfo) error
	First() (*model.UserBankInfo, error)
	Take() (*model.UserBankInfo, error)
	Last() (*model.UserBankInfo, error)
	Find() ([]*model.UserBankInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBankInfo, err error)
	FindInBatches(result *[]*model.UserBankInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBankInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBankInfoDo
	Assign(attrs ...field.AssignExpr) IUserBankInfoDo
	Joins(fields ...field.RelationField) IUserBankInfoDo
	Preload(fields ...field.RelationField) IUserBankInfoDo
	FirstOrInit() (*model.UserBankInfo, error)
	FirstOrCreate() (*model.UserBankInfo, error)
	FindByPage(offset int, limit int) (result []*model.UserBankInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBankInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBankInfoDo) Debug() IUserBankInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userBankInfoDo) WithContext(ctx context.Context) IUserBankInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBankInfoDo) ReadDB() IUserBankInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBankInfoDo) WriteDB() IUserBankInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBankInfoDo) Session(config *gorm.Session) IUserBankInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBankInfoDo) Clauses(conds ...clause.Expression) IUserBankInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBankInfoDo) Returning(value interface{}, columns ...string) IUserBankInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBankInfoDo) Not(conds ...gen.Condition) IUserBankInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBankInfoDo) Or(conds ...gen.Condition) IUserBankInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBankInfoDo) Select(conds ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBankInfoDo) Where(conds ...gen.Condition) IUserBankInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBankInfoDo) Order(conds ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBankInfoDo) Distinct(cols ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBankInfoDo) Omit(cols ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBankInfoDo) Join(table schema.Tabler, on ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBankInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBankInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBankInfoDo) Group(cols ...field.Expr) IUserBankInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBankInfoDo) Having(conds ...gen.Condition) IUserBankInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBankInfoDo) Limit(limit int) IUserBankInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBankInfoDo) Offset(offset int) IUserBankInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBankInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBankInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBankInfoDo) Unscoped() IUserBankInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBankInfoDo) Create(values ...*model.UserBankInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBankInfoDo) CreateInBatches(values []*model.UserBankInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBankInfoDo) Save(values ...*model.UserBankInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBankInfoDo) First() (*model.UserBankInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBankInfo), nil
	}
}

func (u userBankInfoDo) Take() (*model.UserBankInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBankInfo), nil
	}
}

func (u userBankInfoDo) Last() (*model.UserBankInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBankInfo), nil
	}
}

func (u userBankInfoDo) Find() ([]*model.UserBankInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBankInfo), err
}

func (u userBankInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBankInfo, err error) {
	buf := make([]*model.UserBankInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBankInfoDo) FindInBatches(result *[]*model.UserBankInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBankInfoDo) Attrs(attrs ...field.AssignExpr) IUserBankInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBankInfoDo) Assign(attrs ...field.AssignExpr) IUserBankInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBankInfoDo) Joins(fields ...field.RelationField) IUserBankInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBankInfoDo) Preload(fields ...field.RelationField) IUserBankInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBankInfoDo) FirstOrInit() (*model.UserBankInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBankInfo), nil
	}
}

func (u userBankInfoDo) FirstOrCreate() (*model.UserBankInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBankInfo), nil
	}
}

func (u userBankInfoDo) FindByPage(offset int, limit int) (result []*model.UserBankInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBankInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBankInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBankInfoDo) Delete(models ...*model.UserBankInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBankInfoDo) withDO(do gen.Dao) *userBankInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
