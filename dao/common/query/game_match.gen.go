// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newGameMatch(db *gorm.DB, opts ...gen.DOOption) gameMatch {
	_gameMatch := gameMatch{}

	_gameMatch.gameMatchDo.UseDB(db, opts...)
	_gameMatch.gameMatchDo.UseModel(&model.GameMatch{})

	tableName := _gameMatch.gameMatchDo.TableName()
	_gameMatch.ALL = field.NewAsterisk(tableName)
	_gameMatch.ID = field.NewInt64(tableName, "id")
	_gameMatch.MatchName = field.NewString(tableName, "match_name")
	_gameMatch.GameCode = field.NewString(tableName, "game_code")
	_gameMatch.StartAt = field.NewField(tableName, "start_at")
	_gameMatch.EndAt = field.NewField(tableName, "end_at")
	_gameMatch.Image = field.NewString(tableName, "image")
	_gameMatch.DetailImage = field.NewString(tableName, "detail_image")
	_gameMatch.PcDetailImage = field.NewString(tableName, "pc_detail_image")
	_gameMatch.BetNums = field.NewInt64(tableName, "bet_nums")
	_gameMatch.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_gameMatch.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_gameMatch.NetAmount = field.NewFloat64(tableName, "net_amount")
	_gameMatch.EntryCondStatus = field.NewInt64(tableName, "entry_cond_status")
	_gameMatch.CondValidBetStartAt = field.NewTime(tableName, "cond_valid_bet_start_at")
	_gameMatch.CondValidBetEndAt = field.NewTime(tableName, "cond_valid_bet_end_at")
	_gameMatch.CondValidBetGameCodes = field.NewString(tableName, "cond_valid_bet_game_codes")
	_gameMatch.CondValidBetAmount = field.NewFloat64(tableName, "cond_valid_bet_amount")
	_gameMatch.IsEnable = field.NewInt64(tableName, "is_enable")
	_gameMatch.Sort = field.NewInt64(tableName, "sort")
	_gameMatch.AdminID = field.NewInt64(tableName, "admin_id")
	_gameMatch.AdminName = field.NewString(tableName, "admin_name")
	_gameMatch.CreatedAt = field.NewField(tableName, "created_at")
	_gameMatch.UpdatedAt = field.NewField(tableName, "updated_at")
	_gameMatch.IsDelete = field.NewInt64(tableName, "is_delete")
	_gameMatch.LastAdminName = field.NewString(tableName, "last_admin_name")

	_gameMatch.fillFieldMap()

	return _gameMatch
}

// gameMatch 游戏争霸赛表
type gameMatch struct {
	gameMatchDo gameMatchDo

	ALL                   field.Asterisk
	ID                    field.Int64
	MatchName             field.String  // 比赛名称
	GameCode              field.String  // 游戏类型
	StartAt               field.Field   // 比赛开始时间
	EndAt                 field.Field   // 比赛结束时间
	Image                 field.String  // 比赛图片
	DetailImage           field.String  // APP/H5详情图片
	PcDetailImage         field.String  // PC详情图片
	BetNums               field.Int64   // 注单量
	BetAmount             field.Float64 // 用户投注金额 包括无效金额
	ValidBetAmount        field.Float64 // 有效投注金额
	NetAmount             field.Float64 // 玩家的所赢金额
	EntryCondStatus       field.Int64   // 比赛门槛状态[0:关闭,1:开启]
	CondValidBetStartAt   field.Time    // 比赛门槛：有效投注抓取开始周期，为NULL则表示不限制
	CondValidBetEndAt     field.Time    // 比赛门槛：有效投注抓取结束周期，为NULL则表示不限制
	CondValidBetGameCodes field.String  // 比赛门槛：可参与计算有效投注的游戏gameCode，可填写多个，使用英文逗号分隔，例如：PG,KY
	CondValidBetAmount    field.Float64 // 比赛门槛：最低有效投注
	IsEnable              field.Int64   // 是否上架[0:关闭,1:开启]
	Sort                  field.Int64   // 排序 从大到小
	AdminID               field.Int64   // 操作员ID
	AdminName             field.String  // 操作管理员
	CreatedAt             field.Field
	UpdatedAt             field.Field
	IsDelete              field.Int64  // 是否删除 0:未删除 1:删除
	LastAdminName         field.String // 最后操作管理员

	fieldMap map[string]field.Expr
}

func (g gameMatch) Table(newTableName string) *gameMatch {
	g.gameMatchDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameMatch) As(alias string) *gameMatch {
	g.gameMatchDo.DO = *(g.gameMatchDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameMatch) updateTableName(table string) *gameMatch {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.MatchName = field.NewString(table, "match_name")
	g.GameCode = field.NewString(table, "game_code")
	g.StartAt = field.NewField(table, "start_at")
	g.EndAt = field.NewField(table, "end_at")
	g.Image = field.NewString(table, "image")
	g.DetailImage = field.NewString(table, "detail_image")
	g.PcDetailImage = field.NewString(table, "pc_detail_image")
	g.BetNums = field.NewInt64(table, "bet_nums")
	g.BetAmount = field.NewFloat64(table, "bet_amount")
	g.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	g.NetAmount = field.NewFloat64(table, "net_amount")
	g.EntryCondStatus = field.NewInt64(table, "entry_cond_status")
	g.CondValidBetStartAt = field.NewTime(table, "cond_valid_bet_start_at")
	g.CondValidBetEndAt = field.NewTime(table, "cond_valid_bet_end_at")
	g.CondValidBetGameCodes = field.NewString(table, "cond_valid_bet_game_codes")
	g.CondValidBetAmount = field.NewFloat64(table, "cond_valid_bet_amount")
	g.IsEnable = field.NewInt64(table, "is_enable")
	g.Sort = field.NewInt64(table, "sort")
	g.AdminID = field.NewInt64(table, "admin_id")
	g.AdminName = field.NewString(table, "admin_name")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")
	g.IsDelete = field.NewInt64(table, "is_delete")
	g.LastAdminName = field.NewString(table, "last_admin_name")

	g.fillFieldMap()

	return g
}

func (g *gameMatch) WithContext(ctx context.Context) IGameMatchDo {
	return g.gameMatchDo.WithContext(ctx)
}

func (g gameMatch) TableName() string { return g.gameMatchDo.TableName() }

func (g gameMatch) Alias() string { return g.gameMatchDo.Alias() }

func (g gameMatch) Columns(cols ...field.Expr) gen.Columns { return g.gameMatchDo.Columns(cols...) }

func (g *gameMatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameMatch) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 25)
	g.fieldMap["id"] = g.ID
	g.fieldMap["match_name"] = g.MatchName
	g.fieldMap["game_code"] = g.GameCode
	g.fieldMap["start_at"] = g.StartAt
	g.fieldMap["end_at"] = g.EndAt
	g.fieldMap["image"] = g.Image
	g.fieldMap["detail_image"] = g.DetailImage
	g.fieldMap["pc_detail_image"] = g.PcDetailImage
	g.fieldMap["bet_nums"] = g.BetNums
	g.fieldMap["bet_amount"] = g.BetAmount
	g.fieldMap["valid_bet_amount"] = g.ValidBetAmount
	g.fieldMap["net_amount"] = g.NetAmount
	g.fieldMap["entry_cond_status"] = g.EntryCondStatus
	g.fieldMap["cond_valid_bet_start_at"] = g.CondValidBetStartAt
	g.fieldMap["cond_valid_bet_end_at"] = g.CondValidBetEndAt
	g.fieldMap["cond_valid_bet_game_codes"] = g.CondValidBetGameCodes
	g.fieldMap["cond_valid_bet_amount"] = g.CondValidBetAmount
	g.fieldMap["is_enable"] = g.IsEnable
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["admin_id"] = g.AdminID
	g.fieldMap["admin_name"] = g.AdminName
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["last_admin_name"] = g.LastAdminName
}

func (g gameMatch) clone(db *gorm.DB) gameMatch {
	g.gameMatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameMatch) replaceDB(db *gorm.DB) gameMatch {
	g.gameMatchDo.ReplaceDB(db)
	return g
}

type gameMatchDo struct{ gen.DO }

type IGameMatchDo interface {
	gen.SubQuery
	Debug() IGameMatchDo
	WithContext(ctx context.Context) IGameMatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameMatchDo
	WriteDB() IGameMatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameMatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameMatchDo
	Not(conds ...gen.Condition) IGameMatchDo
	Or(conds ...gen.Condition) IGameMatchDo
	Select(conds ...field.Expr) IGameMatchDo
	Where(conds ...gen.Condition) IGameMatchDo
	Order(conds ...field.Expr) IGameMatchDo
	Distinct(cols ...field.Expr) IGameMatchDo
	Omit(cols ...field.Expr) IGameMatchDo
	Join(table schema.Tabler, on ...field.Expr) IGameMatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameMatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameMatchDo
	Group(cols ...field.Expr) IGameMatchDo
	Having(conds ...gen.Condition) IGameMatchDo
	Limit(limit int) IGameMatchDo
	Offset(offset int) IGameMatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameMatchDo
	Unscoped() IGameMatchDo
	Create(values ...*model.GameMatch) error
	CreateInBatches(values []*model.GameMatch, batchSize int) error
	Save(values ...*model.GameMatch) error
	First() (*model.GameMatch, error)
	Take() (*model.GameMatch, error)
	Last() (*model.GameMatch, error)
	Find() ([]*model.GameMatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameMatch, err error)
	FindInBatches(result *[]*model.GameMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameMatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameMatchDo
	Assign(attrs ...field.AssignExpr) IGameMatchDo
	Joins(fields ...field.RelationField) IGameMatchDo
	Preload(fields ...field.RelationField) IGameMatchDo
	FirstOrInit() (*model.GameMatch, error)
	FirstOrCreate() (*model.GameMatch, error)
	FindByPage(offset int, limit int) (result []*model.GameMatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameMatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameMatchDo) Debug() IGameMatchDo {
	return g.withDO(g.DO.Debug())
}

func (g gameMatchDo) WithContext(ctx context.Context) IGameMatchDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameMatchDo) ReadDB() IGameMatchDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameMatchDo) WriteDB() IGameMatchDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameMatchDo) Session(config *gorm.Session) IGameMatchDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameMatchDo) Clauses(conds ...clause.Expression) IGameMatchDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameMatchDo) Returning(value interface{}, columns ...string) IGameMatchDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameMatchDo) Not(conds ...gen.Condition) IGameMatchDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameMatchDo) Or(conds ...gen.Condition) IGameMatchDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameMatchDo) Select(conds ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameMatchDo) Where(conds ...gen.Condition) IGameMatchDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameMatchDo) Order(conds ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameMatchDo) Distinct(cols ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameMatchDo) Omit(cols ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameMatchDo) Join(table schema.Tabler, on ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameMatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameMatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameMatchDo) Group(cols ...field.Expr) IGameMatchDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameMatchDo) Having(conds ...gen.Condition) IGameMatchDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameMatchDo) Limit(limit int) IGameMatchDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameMatchDo) Offset(offset int) IGameMatchDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameMatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameMatchDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameMatchDo) Unscoped() IGameMatchDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameMatchDo) Create(values ...*model.GameMatch) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameMatchDo) CreateInBatches(values []*model.GameMatch, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameMatchDo) Save(values ...*model.GameMatch) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameMatchDo) First() (*model.GameMatch, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatch), nil
	}
}

func (g gameMatchDo) Take() (*model.GameMatch, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatch), nil
	}
}

func (g gameMatchDo) Last() (*model.GameMatch, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatch), nil
	}
}

func (g gameMatchDo) Find() ([]*model.GameMatch, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameMatch), err
}

func (g gameMatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameMatch, err error) {
	buf := make([]*model.GameMatch, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameMatchDo) FindInBatches(result *[]*model.GameMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameMatchDo) Attrs(attrs ...field.AssignExpr) IGameMatchDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameMatchDo) Assign(attrs ...field.AssignExpr) IGameMatchDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameMatchDo) Joins(fields ...field.RelationField) IGameMatchDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameMatchDo) Preload(fields ...field.RelationField) IGameMatchDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameMatchDo) FirstOrInit() (*model.GameMatch, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatch), nil
	}
}

func (g gameMatchDo) FirstOrCreate() (*model.GameMatch, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameMatch), nil
	}
}

func (g gameMatchDo) FindByPage(offset int, limit int) (result []*model.GameMatch, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameMatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameMatchDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameMatchDo) Delete(models ...*model.GameMatch) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameMatchDo) withDO(do gen.Dao) *gameMatchDo {
	g.DO = *do.(*gen.DO)
	return g
}
