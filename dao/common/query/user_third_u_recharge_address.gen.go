// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserThirdURechargeAddress(db *gorm.DB, opts ...gen.DOOption) userThirdURechargeAddress {
	_userThirdURechargeAddress := userThirdURechargeAddress{}

	_userThirdURechargeAddress.userThirdURechargeAddressDo.UseDB(db, opts...)
	_userThirdURechargeAddress.userThirdURechargeAddressDo.UseModel(&model.UserThirdURechargeAddress{})

	tableName := _userThirdURechargeAddress.userThirdURechargeAddressDo.TableName()
	_userThirdURechargeAddress.ALL = field.NewAsterisk(tableName)
	_userThirdURechargeAddress.ID = field.NewInt64(tableName, "id")
	_userThirdURechargeAddress.Username = field.NewString(tableName, "username")
	_userThirdURechargeAddress.UserID = field.NewInt64(tableName, "user_id")
	_userThirdURechargeAddress.Appid = field.NewInt64(tableName, "appid")
	_userThirdURechargeAddress.Bep20 = field.NewString(tableName, "bep20")
	_userThirdURechargeAddress.Erc20 = field.NewString(tableName, "erc20")
	_userThirdURechargeAddress.Trc20 = field.NewString(tableName, "trc20")
	_userThirdURechargeAddress.CreatedAt = field.NewField(tableName, "created_at")
	_userThirdURechargeAddress.UpdatedAt = field.NewField(tableName, "updated_at")

	_userThirdURechargeAddress.fillFieldMap()

	return _userThirdURechargeAddress
}

// userThirdURechargeAddress 会员3U充值地址信息
type userThirdURechargeAddress struct {
	userThirdURechargeAddressDo userThirdURechargeAddressDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String // 会员名称
	UserID    field.Int64  // 会员id
	Appid     field.Int64  // 商户appid
	Bep20     field.String // bep20为币安usdt地址
	Erc20     field.String // erc20为以太坊usdt地址
	Trc20     field.String // trc20为波场usdt地址
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userThirdURechargeAddress) Table(newTableName string) *userThirdURechargeAddress {
	u.userThirdURechargeAddressDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userThirdURechargeAddress) As(alias string) *userThirdURechargeAddress {
	u.userThirdURechargeAddressDo.DO = *(u.userThirdURechargeAddressDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userThirdURechargeAddress) updateTableName(table string) *userThirdURechargeAddress {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.UserID = field.NewInt64(table, "user_id")
	u.Appid = field.NewInt64(table, "appid")
	u.Bep20 = field.NewString(table, "bep20")
	u.Erc20 = field.NewString(table, "erc20")
	u.Trc20 = field.NewString(table, "trc20")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userThirdURechargeAddress) WithContext(ctx context.Context) IUserThirdURechargeAddressDo {
	return u.userThirdURechargeAddressDo.WithContext(ctx)
}

func (u userThirdURechargeAddress) TableName() string {
	return u.userThirdURechargeAddressDo.TableName()
}

func (u userThirdURechargeAddress) Alias() string { return u.userThirdURechargeAddressDo.Alias() }

func (u userThirdURechargeAddress) Columns(cols ...field.Expr) gen.Columns {
	return u.userThirdURechargeAddressDo.Columns(cols...)
}

func (u *userThirdURechargeAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userThirdURechargeAddress) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["appid"] = u.Appid
	u.fieldMap["bep20"] = u.Bep20
	u.fieldMap["erc20"] = u.Erc20
	u.fieldMap["trc20"] = u.Trc20
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userThirdURechargeAddress) clone(db *gorm.DB) userThirdURechargeAddress {
	u.userThirdURechargeAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userThirdURechargeAddress) replaceDB(db *gorm.DB) userThirdURechargeAddress {
	u.userThirdURechargeAddressDo.ReplaceDB(db)
	return u
}

type userThirdURechargeAddressDo struct{ gen.DO }

type IUserThirdURechargeAddressDo interface {
	gen.SubQuery
	Debug() IUserThirdURechargeAddressDo
	WithContext(ctx context.Context) IUserThirdURechargeAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserThirdURechargeAddressDo
	WriteDB() IUserThirdURechargeAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserThirdURechargeAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserThirdURechargeAddressDo
	Not(conds ...gen.Condition) IUserThirdURechargeAddressDo
	Or(conds ...gen.Condition) IUserThirdURechargeAddressDo
	Select(conds ...field.Expr) IUserThirdURechargeAddressDo
	Where(conds ...gen.Condition) IUserThirdURechargeAddressDo
	Order(conds ...field.Expr) IUserThirdURechargeAddressDo
	Distinct(cols ...field.Expr) IUserThirdURechargeAddressDo
	Omit(cols ...field.Expr) IUserThirdURechargeAddressDo
	Join(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo
	Group(cols ...field.Expr) IUserThirdURechargeAddressDo
	Having(conds ...gen.Condition) IUserThirdURechargeAddressDo
	Limit(limit int) IUserThirdURechargeAddressDo
	Offset(offset int) IUserThirdURechargeAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThirdURechargeAddressDo
	Unscoped() IUserThirdURechargeAddressDo
	Create(values ...*model.UserThirdURechargeAddress) error
	CreateInBatches(values []*model.UserThirdURechargeAddress, batchSize int) error
	Save(values ...*model.UserThirdURechargeAddress) error
	First() (*model.UserThirdURechargeAddress, error)
	Take() (*model.UserThirdURechargeAddress, error)
	Last() (*model.UserThirdURechargeAddress, error)
	Find() ([]*model.UserThirdURechargeAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserThirdURechargeAddress, err error)
	FindInBatches(result *[]*model.UserThirdURechargeAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserThirdURechargeAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserThirdURechargeAddressDo
	Assign(attrs ...field.AssignExpr) IUserThirdURechargeAddressDo
	Joins(fields ...field.RelationField) IUserThirdURechargeAddressDo
	Preload(fields ...field.RelationField) IUserThirdURechargeAddressDo
	FirstOrInit() (*model.UserThirdURechargeAddress, error)
	FirstOrCreate() (*model.UserThirdURechargeAddress, error)
	FindByPage(offset int, limit int) (result []*model.UserThirdURechargeAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserThirdURechargeAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userThirdURechargeAddressDo) Debug() IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Debug())
}

func (u userThirdURechargeAddressDo) WithContext(ctx context.Context) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userThirdURechargeAddressDo) ReadDB() IUserThirdURechargeAddressDo {
	return u.Clauses(dbresolver.Read)
}

func (u userThirdURechargeAddressDo) WriteDB() IUserThirdURechargeAddressDo {
	return u.Clauses(dbresolver.Write)
}

func (u userThirdURechargeAddressDo) Session(config *gorm.Session) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Session(config))
}

func (u userThirdURechargeAddressDo) Clauses(conds ...clause.Expression) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userThirdURechargeAddressDo) Returning(value interface{}, columns ...string) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userThirdURechargeAddressDo) Not(conds ...gen.Condition) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userThirdURechargeAddressDo) Or(conds ...gen.Condition) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userThirdURechargeAddressDo) Select(conds ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userThirdURechargeAddressDo) Where(conds ...gen.Condition) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userThirdURechargeAddressDo) Order(conds ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userThirdURechargeAddressDo) Distinct(cols ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userThirdURechargeAddressDo) Omit(cols ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userThirdURechargeAddressDo) Join(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userThirdURechargeAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userThirdURechargeAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userThirdURechargeAddressDo) Group(cols ...field.Expr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userThirdURechargeAddressDo) Having(conds ...gen.Condition) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userThirdURechargeAddressDo) Limit(limit int) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userThirdURechargeAddressDo) Offset(offset int) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userThirdURechargeAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userThirdURechargeAddressDo) Unscoped() IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userThirdURechargeAddressDo) Create(values ...*model.UserThirdURechargeAddress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userThirdURechargeAddressDo) CreateInBatches(values []*model.UserThirdURechargeAddress, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userThirdURechargeAddressDo) Save(values ...*model.UserThirdURechargeAddress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userThirdURechargeAddressDo) First() (*model.UserThirdURechargeAddress, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdURechargeAddress), nil
	}
}

func (u userThirdURechargeAddressDo) Take() (*model.UserThirdURechargeAddress, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdURechargeAddress), nil
	}
}

func (u userThirdURechargeAddressDo) Last() (*model.UserThirdURechargeAddress, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdURechargeAddress), nil
	}
}

func (u userThirdURechargeAddressDo) Find() ([]*model.UserThirdURechargeAddress, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserThirdURechargeAddress), err
}

func (u userThirdURechargeAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserThirdURechargeAddress, err error) {
	buf := make([]*model.UserThirdURechargeAddress, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userThirdURechargeAddressDo) FindInBatches(result *[]*model.UserThirdURechargeAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userThirdURechargeAddressDo) Attrs(attrs ...field.AssignExpr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userThirdURechargeAddressDo) Assign(attrs ...field.AssignExpr) IUserThirdURechargeAddressDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userThirdURechargeAddressDo) Joins(fields ...field.RelationField) IUserThirdURechargeAddressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userThirdURechargeAddressDo) Preload(fields ...field.RelationField) IUserThirdURechargeAddressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userThirdURechargeAddressDo) FirstOrInit() (*model.UserThirdURechargeAddress, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdURechargeAddress), nil
	}
}

func (u userThirdURechargeAddressDo) FirstOrCreate() (*model.UserThirdURechargeAddress, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserThirdURechargeAddress), nil
	}
}

func (u userThirdURechargeAddressDo) FindByPage(offset int, limit int) (result []*model.UserThirdURechargeAddress, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userThirdURechargeAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userThirdURechargeAddressDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userThirdURechargeAddressDo) Delete(models ...*model.UserThirdURechargeAddress) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userThirdURechargeAddressDo) withDO(do gen.Dao) *userThirdURechargeAddressDo {
	u.DO = *do.(*gen.DO)
	return u
}
