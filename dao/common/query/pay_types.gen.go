// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPayType(db *gorm.DB, opts ...gen.DOOption) payType {
	_payType := payType{}

	_payType.payTypeDo.UseDB(db, opts...)
	_payType.payTypeDo.UseModel(&model.PayType{})

	tableName := _payType.payTypeDo.TableName()
	_payType.ALL = field.NewAsterisk(tableName)
	_payType.ID = field.NewInt64(tableName, "id")
	_payType.EnName = field.NewString(tableName, "en_name")
	_payType.CnName = field.NewString(tableName, "cn_name")
	_payType.ImgPath = field.NewString(tableName, "img_path")
	_payType.ExRate = field.NewFloat64(tableName, "ex_rate")
	_payType.HeadNotice = field.NewString(tableName, "head_notice")
	_payType.Content = field.NewString(tableName, "content")
	_payType.IsRecommend = field.NewInt64(tableName, "is_recommend")
	_payType.Sort = field.NewInt64(tableName, "sort")
	_payType.IsThird = field.NewInt64(tableName, "is_third")
	_payType.IsVirtual = field.NewInt64(tableName, "is_virtual")
	_payType.IsOpen = field.NewInt64(tableName, "is_open")
	_payType.VipURL = field.NewString(tableName, "vip_url")
	_payType.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_payType.AdminUser = field.NewString(tableName, "admin_user")
	_payType.CreatedAt = field.NewField(tableName, "created_at")
	_payType.UpdatedAt = field.NewField(tableName, "updated_at")
	_payType.IsVip = field.NewInt64(tableName, "is_vip")
	_payType.YhDirectInlet = field.NewInt64(tableName, "yh_direct_inlet")
	_payType.YhConfig = field.NewString(tableName, "yh_config")
	_payType.Remark = field.NewString(tableName, "remark")
	_payType.UseNumbers = field.NewInt64(tableName, "use_numbers")
	_payType.FundsType = field.NewInt64(tableName, "funds_type")

	_payType.fillFieldMap()

	return _payType
}

type payType struct {
	payTypeDo payTypeDo

	ALL           field.Asterisk
	ID            field.Int64
	EnName        field.String  // 支付英文名
	CnName        field.String  // 支付英中文名
	ImgPath       field.String  // 图片路径
	ExRate        field.Float64 // 优惠汇率
	HeadNotice    field.String  // 支付头部说明
	Content       field.String  // 支付介绍
	IsRecommend   field.Int64   // 是否推荐 0:否;1:是
	Sort          field.Int64   // 排序
	IsThird       field.Int64   // 是否线上支付0:线下(银行卡);1:三方;2:极速;3:易汇直充,4:3U支付
	IsVirtual     field.Int64   // 是否虚拟货币0:否;1:是
	IsOpen        field.Int64   // 是否开启0:否;1:是
	VipURL        field.String  // vip地址
	IsDeleted     field.Int64   // 是否删除 0:否；1:是
	AdminUser     field.String  // 管理员
	CreatedAt     field.Field
	UpdatedAt     field.Field
	IsVip         field.Int64  // 是否vip充值 0否 1是
	YhDirectInlet field.Int64  // 1:打开易汇H5页面;2:跳转易汇下载页
	YhConfig      field.String // 易汇配置
	Remark        field.String // 备注
	UseNumbers    field.Int64  // 使用人数
	FundsType     field.Int64  // 资金类型：1 rmb，2 usdt 3钱包

	fieldMap map[string]field.Expr
}

func (p payType) Table(newTableName string) *payType {
	p.payTypeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payType) As(alias string) *payType {
	p.payTypeDo.DO = *(p.payTypeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payType) updateTableName(table string) *payType {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.EnName = field.NewString(table, "en_name")
	p.CnName = field.NewString(table, "cn_name")
	p.ImgPath = field.NewString(table, "img_path")
	p.ExRate = field.NewFloat64(table, "ex_rate")
	p.HeadNotice = field.NewString(table, "head_notice")
	p.Content = field.NewString(table, "content")
	p.IsRecommend = field.NewInt64(table, "is_recommend")
	p.Sort = field.NewInt64(table, "sort")
	p.IsThird = field.NewInt64(table, "is_third")
	p.IsVirtual = field.NewInt64(table, "is_virtual")
	p.IsOpen = field.NewInt64(table, "is_open")
	p.VipURL = field.NewString(table, "vip_url")
	p.IsDeleted = field.NewInt64(table, "is_deleted")
	p.AdminUser = field.NewString(table, "admin_user")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.IsVip = field.NewInt64(table, "is_vip")
	p.YhDirectInlet = field.NewInt64(table, "yh_direct_inlet")
	p.YhConfig = field.NewString(table, "yh_config")
	p.Remark = field.NewString(table, "remark")
	p.UseNumbers = field.NewInt64(table, "use_numbers")
	p.FundsType = field.NewInt64(table, "funds_type")

	p.fillFieldMap()

	return p
}

func (p *payType) WithContext(ctx context.Context) IPayTypeDo { return p.payTypeDo.WithContext(ctx) }

func (p payType) TableName() string { return p.payTypeDo.TableName() }

func (p payType) Alias() string { return p.payTypeDo.Alias() }

func (p payType) Columns(cols ...field.Expr) gen.Columns { return p.payTypeDo.Columns(cols...) }

func (p *payType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payType) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 23)
	p.fieldMap["id"] = p.ID
	p.fieldMap["en_name"] = p.EnName
	p.fieldMap["cn_name"] = p.CnName
	p.fieldMap["img_path"] = p.ImgPath
	p.fieldMap["ex_rate"] = p.ExRate
	p.fieldMap["head_notice"] = p.HeadNotice
	p.fieldMap["content"] = p.Content
	p.fieldMap["is_recommend"] = p.IsRecommend
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["is_third"] = p.IsThird
	p.fieldMap["is_virtual"] = p.IsVirtual
	p.fieldMap["is_open"] = p.IsOpen
	p.fieldMap["vip_url"] = p.VipURL
	p.fieldMap["is_deleted"] = p.IsDeleted
	p.fieldMap["admin_user"] = p.AdminUser
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_vip"] = p.IsVip
	p.fieldMap["yh_direct_inlet"] = p.YhDirectInlet
	p.fieldMap["yh_config"] = p.YhConfig
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["use_numbers"] = p.UseNumbers
	p.fieldMap["funds_type"] = p.FundsType
}

func (p payType) clone(db *gorm.DB) payType {
	p.payTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payType) replaceDB(db *gorm.DB) payType {
	p.payTypeDo.ReplaceDB(db)
	return p
}

type payTypeDo struct{ gen.DO }

type IPayTypeDo interface {
	gen.SubQuery
	Debug() IPayTypeDo
	WithContext(ctx context.Context) IPayTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPayTypeDo
	WriteDB() IPayTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPayTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPayTypeDo
	Not(conds ...gen.Condition) IPayTypeDo
	Or(conds ...gen.Condition) IPayTypeDo
	Select(conds ...field.Expr) IPayTypeDo
	Where(conds ...gen.Condition) IPayTypeDo
	Order(conds ...field.Expr) IPayTypeDo
	Distinct(cols ...field.Expr) IPayTypeDo
	Omit(cols ...field.Expr) IPayTypeDo
	Join(table schema.Tabler, on ...field.Expr) IPayTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPayTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPayTypeDo
	Group(cols ...field.Expr) IPayTypeDo
	Having(conds ...gen.Condition) IPayTypeDo
	Limit(limit int) IPayTypeDo
	Offset(offset int) IPayTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPayTypeDo
	Unscoped() IPayTypeDo
	Create(values ...*model.PayType) error
	CreateInBatches(values []*model.PayType, batchSize int) error
	Save(values ...*model.PayType) error
	First() (*model.PayType, error)
	Take() (*model.PayType, error)
	Last() (*model.PayType, error)
	Find() ([]*model.PayType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayType, err error)
	FindInBatches(result *[]*model.PayType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PayType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPayTypeDo
	Assign(attrs ...field.AssignExpr) IPayTypeDo
	Joins(fields ...field.RelationField) IPayTypeDo
	Preload(fields ...field.RelationField) IPayTypeDo
	FirstOrInit() (*model.PayType, error)
	FirstOrCreate() (*model.PayType, error)
	FindByPage(offset int, limit int) (result []*model.PayType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPayTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p payTypeDo) Debug() IPayTypeDo {
	return p.withDO(p.DO.Debug())
}

func (p payTypeDo) WithContext(ctx context.Context) IPayTypeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payTypeDo) ReadDB() IPayTypeDo {
	return p.Clauses(dbresolver.Read)
}

func (p payTypeDo) WriteDB() IPayTypeDo {
	return p.Clauses(dbresolver.Write)
}

func (p payTypeDo) Session(config *gorm.Session) IPayTypeDo {
	return p.withDO(p.DO.Session(config))
}

func (p payTypeDo) Clauses(conds ...clause.Expression) IPayTypeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payTypeDo) Returning(value interface{}, columns ...string) IPayTypeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payTypeDo) Not(conds ...gen.Condition) IPayTypeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payTypeDo) Or(conds ...gen.Condition) IPayTypeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payTypeDo) Select(conds ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payTypeDo) Where(conds ...gen.Condition) IPayTypeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payTypeDo) Order(conds ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payTypeDo) Distinct(cols ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payTypeDo) Omit(cols ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payTypeDo) Join(table schema.Tabler, on ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payTypeDo) Group(cols ...field.Expr) IPayTypeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payTypeDo) Having(conds ...gen.Condition) IPayTypeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payTypeDo) Limit(limit int) IPayTypeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payTypeDo) Offset(offset int) IPayTypeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPayTypeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payTypeDo) Unscoped() IPayTypeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payTypeDo) Create(values ...*model.PayType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payTypeDo) CreateInBatches(values []*model.PayType, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payTypeDo) Save(values ...*model.PayType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payTypeDo) First() (*model.PayType, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayType), nil
	}
}

func (p payTypeDo) Take() (*model.PayType, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayType), nil
	}
}

func (p payTypeDo) Last() (*model.PayType, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayType), nil
	}
}

func (p payTypeDo) Find() ([]*model.PayType, error) {
	result, err := p.DO.Find()
	return result.([]*model.PayType), err
}

func (p payTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PayType, err error) {
	buf := make([]*model.PayType, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payTypeDo) FindInBatches(result *[]*model.PayType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payTypeDo) Attrs(attrs ...field.AssignExpr) IPayTypeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payTypeDo) Assign(attrs ...field.AssignExpr) IPayTypeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payTypeDo) Joins(fields ...field.RelationField) IPayTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payTypeDo) Preload(fields ...field.RelationField) IPayTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payTypeDo) FirstOrInit() (*model.PayType, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayType), nil
	}
}

func (p payTypeDo) FirstOrCreate() (*model.PayType, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PayType), nil
	}
}

func (p payTypeDo) FindByPage(offset int, limit int) (result []*model.PayType, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payTypeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payTypeDo) Delete(models ...*model.PayType) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payTypeDo) withDO(do gen.Dao) *payTypeDo {
	p.DO = *do.(*gen.DO)
	return p
}
