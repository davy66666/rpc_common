// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTournamentRank(db *gorm.DB, opts ...gen.DOOption) tournamentRank {
	_tournamentRank := tournamentRank{}

	_tournamentRank.tournamentRankDo.UseDB(db, opts...)
	_tournamentRank.tournamentRankDo.UseModel(&model.TournamentRank{})

	tableName := _tournamentRank.tournamentRankDo.TableName()
	_tournamentRank.ALL = field.NewAsterisk(tableName)
	_tournamentRank.ID = field.NewInt64(tableName, "id")
	_tournamentRank.GameName = field.NewString(tableName, "game_name")
	_tournamentRank.Rank = field.NewString(tableName, "rank")
	_tournamentRank.UserAccount = field.NewString(tableName, "user_account")
	_tournamentRank.Bonus = field.NewString(tableName, "bonus")
	_tournamentRank.Remark = field.NewString(tableName, "remark")
	_tournamentRank.CreatedAt = field.NewField(tableName, "created_at")
	_tournamentRank.UpdatedAt = field.NewField(tableName, "updated_at")
	_tournamentRank.OpUser = field.NewString(tableName, "op_user")

	_tournamentRank.fillFieldMap()

	return _tournamentRank
}

// tournamentRank 争霸赛排名
type tournamentRank struct {
	tournamentRankDo tournamentRankDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	GameName    field.String // 比赛名称
	Rank        field.String // 排名
	UserAccount field.String // 用户账号
	Bonus       field.String // 奖金
	Remark      field.String // 备注
	CreatedAt   field.Field  // 创建时间
	UpdatedAt   field.Field  // 更新时间
	OpUser      field.String // 操作人

	fieldMap map[string]field.Expr
}

func (t tournamentRank) Table(newTableName string) *tournamentRank {
	t.tournamentRankDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tournamentRank) As(alias string) *tournamentRank {
	t.tournamentRankDo.DO = *(t.tournamentRankDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tournamentRank) updateTableName(table string) *tournamentRank {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.GameName = field.NewString(table, "game_name")
	t.Rank = field.NewString(table, "rank")
	t.UserAccount = field.NewString(table, "user_account")
	t.Bonus = field.NewString(table, "bonus")
	t.Remark = field.NewString(table, "remark")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")
	t.OpUser = field.NewString(table, "op_user")

	t.fillFieldMap()

	return t
}

func (t *tournamentRank) WithContext(ctx context.Context) ITournamentRankDo {
	return t.tournamentRankDo.WithContext(ctx)
}

func (t tournamentRank) TableName() string { return t.tournamentRankDo.TableName() }

func (t tournamentRank) Alias() string { return t.tournamentRankDo.Alias() }

func (t tournamentRank) Columns(cols ...field.Expr) gen.Columns {
	return t.tournamentRankDo.Columns(cols...)
}

func (t *tournamentRank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tournamentRank) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["game_name"] = t.GameName
	t.fieldMap["rank"] = t.Rank
	t.fieldMap["user_account"] = t.UserAccount
	t.fieldMap["bonus"] = t.Bonus
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["op_user"] = t.OpUser
}

func (t tournamentRank) clone(db *gorm.DB) tournamentRank {
	t.tournamentRankDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tournamentRank) replaceDB(db *gorm.DB) tournamentRank {
	t.tournamentRankDo.ReplaceDB(db)
	return t
}

type tournamentRankDo struct{ gen.DO }

type ITournamentRankDo interface {
	gen.SubQuery
	Debug() ITournamentRankDo
	WithContext(ctx context.Context) ITournamentRankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITournamentRankDo
	WriteDB() ITournamentRankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITournamentRankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITournamentRankDo
	Not(conds ...gen.Condition) ITournamentRankDo
	Or(conds ...gen.Condition) ITournamentRankDo
	Select(conds ...field.Expr) ITournamentRankDo
	Where(conds ...gen.Condition) ITournamentRankDo
	Order(conds ...field.Expr) ITournamentRankDo
	Distinct(cols ...field.Expr) ITournamentRankDo
	Omit(cols ...field.Expr) ITournamentRankDo
	Join(table schema.Tabler, on ...field.Expr) ITournamentRankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITournamentRankDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITournamentRankDo
	Group(cols ...field.Expr) ITournamentRankDo
	Having(conds ...gen.Condition) ITournamentRankDo
	Limit(limit int) ITournamentRankDo
	Offset(offset int) ITournamentRankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITournamentRankDo
	Unscoped() ITournamentRankDo
	Create(values ...*model.TournamentRank) error
	CreateInBatches(values []*model.TournamentRank, batchSize int) error
	Save(values ...*model.TournamentRank) error
	First() (*model.TournamentRank, error)
	Take() (*model.TournamentRank, error)
	Last() (*model.TournamentRank, error)
	Find() ([]*model.TournamentRank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TournamentRank, err error)
	FindInBatches(result *[]*model.TournamentRank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TournamentRank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITournamentRankDo
	Assign(attrs ...field.AssignExpr) ITournamentRankDo
	Joins(fields ...field.RelationField) ITournamentRankDo
	Preload(fields ...field.RelationField) ITournamentRankDo
	FirstOrInit() (*model.TournamentRank, error)
	FirstOrCreate() (*model.TournamentRank, error)
	FindByPage(offset int, limit int) (result []*model.TournamentRank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITournamentRankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tournamentRankDo) Debug() ITournamentRankDo {
	return t.withDO(t.DO.Debug())
}

func (t tournamentRankDo) WithContext(ctx context.Context) ITournamentRankDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tournamentRankDo) ReadDB() ITournamentRankDo {
	return t.Clauses(dbresolver.Read)
}

func (t tournamentRankDo) WriteDB() ITournamentRankDo {
	return t.Clauses(dbresolver.Write)
}

func (t tournamentRankDo) Session(config *gorm.Session) ITournamentRankDo {
	return t.withDO(t.DO.Session(config))
}

func (t tournamentRankDo) Clauses(conds ...clause.Expression) ITournamentRankDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tournamentRankDo) Returning(value interface{}, columns ...string) ITournamentRankDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tournamentRankDo) Not(conds ...gen.Condition) ITournamentRankDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tournamentRankDo) Or(conds ...gen.Condition) ITournamentRankDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tournamentRankDo) Select(conds ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tournamentRankDo) Where(conds ...gen.Condition) ITournamentRankDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tournamentRankDo) Order(conds ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tournamentRankDo) Distinct(cols ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tournamentRankDo) Omit(cols ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tournamentRankDo) Join(table schema.Tabler, on ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tournamentRankDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tournamentRankDo) RightJoin(table schema.Tabler, on ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tournamentRankDo) Group(cols ...field.Expr) ITournamentRankDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tournamentRankDo) Having(conds ...gen.Condition) ITournamentRankDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tournamentRankDo) Limit(limit int) ITournamentRankDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tournamentRankDo) Offset(offset int) ITournamentRankDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tournamentRankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITournamentRankDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tournamentRankDo) Unscoped() ITournamentRankDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tournamentRankDo) Create(values ...*model.TournamentRank) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tournamentRankDo) CreateInBatches(values []*model.TournamentRank, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tournamentRankDo) Save(values ...*model.TournamentRank) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tournamentRankDo) First() (*model.TournamentRank, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TournamentRank), nil
	}
}

func (t tournamentRankDo) Take() (*model.TournamentRank, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TournamentRank), nil
	}
}

func (t tournamentRankDo) Last() (*model.TournamentRank, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TournamentRank), nil
	}
}

func (t tournamentRankDo) Find() ([]*model.TournamentRank, error) {
	result, err := t.DO.Find()
	return result.([]*model.TournamentRank), err
}

func (t tournamentRankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TournamentRank, err error) {
	buf := make([]*model.TournamentRank, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tournamentRankDo) FindInBatches(result *[]*model.TournamentRank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tournamentRankDo) Attrs(attrs ...field.AssignExpr) ITournamentRankDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tournamentRankDo) Assign(attrs ...field.AssignExpr) ITournamentRankDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tournamentRankDo) Joins(fields ...field.RelationField) ITournamentRankDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tournamentRankDo) Preload(fields ...field.RelationField) ITournamentRankDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tournamentRankDo) FirstOrInit() (*model.TournamentRank, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TournamentRank), nil
	}
}

func (t tournamentRankDo) FirstOrCreate() (*model.TournamentRank, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TournamentRank), nil
	}
}

func (t tournamentRankDo) FindByPage(offset int, limit int) (result []*model.TournamentRank, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tournamentRankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tournamentRankDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tournamentRankDo) Delete(models ...*model.TournamentRank) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tournamentRankDo) withDO(do gen.Dao) *tournamentRankDo {
	t.DO = *do.(*gen.DO)
	return t
}
