// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentUpdateParentLog(db *gorm.DB, opts ...gen.DOOption) agentUpdateParentLog {
	_agentUpdateParentLog := agentUpdateParentLog{}

	_agentUpdateParentLog.agentUpdateParentLogDo.UseDB(db, opts...)
	_agentUpdateParentLog.agentUpdateParentLogDo.UseModel(&model.AgentUpdateParentLog{})

	tableName := _agentUpdateParentLog.agentUpdateParentLogDo.TableName()
	_agentUpdateParentLog.ALL = field.NewAsterisk(tableName)
	_agentUpdateParentLog.ID = field.NewInt64(tableName, "id")
	_agentUpdateParentLog.AgentName = field.NewString(tableName, "agent_name")
	_agentUpdateParentLog.AgentID = field.NewInt64(tableName, "agent_id")
	_agentUpdateParentLog.OldParentName = field.NewString(tableName, "old_parent_name")
	_agentUpdateParentLog.NewParentName = field.NewString(tableName, "new_parent_name")
	_agentUpdateParentLog.Remark = field.NewString(tableName, "remark")
	_agentUpdateParentLog.AdminName = field.NewString(tableName, "admin_name")
	_agentUpdateParentLog.CreatedAt = field.NewField(tableName, "created_at")
	_agentUpdateParentLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentUpdateParentLog.fillFieldMap()

	return _agentUpdateParentLog
}

type agentUpdateParentLog struct {
	agentUpdateParentLogDo agentUpdateParentLogDo

	ALL           field.Asterisk
	ID            field.Int64
	AgentName     field.String // 代理名称
	AgentID       field.Int64  // 代理id
	OldParentName field.String // 旧代理
	NewParentName field.String // 新代理
	Remark        field.String // 备注
	AdminName     field.String // 操作管理员
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a agentUpdateParentLog) Table(newTableName string) *agentUpdateParentLog {
	a.agentUpdateParentLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentUpdateParentLog) As(alias string) *agentUpdateParentLog {
	a.agentUpdateParentLogDo.DO = *(a.agentUpdateParentLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentUpdateParentLog) updateTableName(table string) *agentUpdateParentLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentName = field.NewString(table, "agent_name")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.OldParentName = field.NewString(table, "old_parent_name")
	a.NewParentName = field.NewString(table, "new_parent_name")
	a.Remark = field.NewString(table, "remark")
	a.AdminName = field.NewString(table, "admin_name")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentUpdateParentLog) WithContext(ctx context.Context) IAgentUpdateParentLogDo {
	return a.agentUpdateParentLogDo.WithContext(ctx)
}

func (a agentUpdateParentLog) TableName() string { return a.agentUpdateParentLogDo.TableName() }

func (a agentUpdateParentLog) Alias() string { return a.agentUpdateParentLogDo.Alias() }

func (a agentUpdateParentLog) Columns(cols ...field.Expr) gen.Columns {
	return a.agentUpdateParentLogDo.Columns(cols...)
}

func (a *agentUpdateParentLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentUpdateParentLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["old_parent_name"] = a.OldParentName
	a.fieldMap["new_parent_name"] = a.NewParentName
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentUpdateParentLog) clone(db *gorm.DB) agentUpdateParentLog {
	a.agentUpdateParentLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentUpdateParentLog) replaceDB(db *gorm.DB) agentUpdateParentLog {
	a.agentUpdateParentLogDo.ReplaceDB(db)
	return a
}

type agentUpdateParentLogDo struct{ gen.DO }

type IAgentUpdateParentLogDo interface {
	gen.SubQuery
	Debug() IAgentUpdateParentLogDo
	WithContext(ctx context.Context) IAgentUpdateParentLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentUpdateParentLogDo
	WriteDB() IAgentUpdateParentLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentUpdateParentLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentUpdateParentLogDo
	Not(conds ...gen.Condition) IAgentUpdateParentLogDo
	Or(conds ...gen.Condition) IAgentUpdateParentLogDo
	Select(conds ...field.Expr) IAgentUpdateParentLogDo
	Where(conds ...gen.Condition) IAgentUpdateParentLogDo
	Order(conds ...field.Expr) IAgentUpdateParentLogDo
	Distinct(cols ...field.Expr) IAgentUpdateParentLogDo
	Omit(cols ...field.Expr) IAgentUpdateParentLogDo
	Join(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo
	Group(cols ...field.Expr) IAgentUpdateParentLogDo
	Having(conds ...gen.Condition) IAgentUpdateParentLogDo
	Limit(limit int) IAgentUpdateParentLogDo
	Offset(offset int) IAgentUpdateParentLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUpdateParentLogDo
	Unscoped() IAgentUpdateParentLogDo
	Create(values ...*model.AgentUpdateParentLog) error
	CreateInBatches(values []*model.AgentUpdateParentLog, batchSize int) error
	Save(values ...*model.AgentUpdateParentLog) error
	First() (*model.AgentUpdateParentLog, error)
	Take() (*model.AgentUpdateParentLog, error)
	Last() (*model.AgentUpdateParentLog, error)
	Find() ([]*model.AgentUpdateParentLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUpdateParentLog, err error)
	FindInBatches(result *[]*model.AgentUpdateParentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentUpdateParentLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentUpdateParentLogDo
	Assign(attrs ...field.AssignExpr) IAgentUpdateParentLogDo
	Joins(fields ...field.RelationField) IAgentUpdateParentLogDo
	Preload(fields ...field.RelationField) IAgentUpdateParentLogDo
	FirstOrInit() (*model.AgentUpdateParentLog, error)
	FirstOrCreate() (*model.AgentUpdateParentLog, error)
	FindByPage(offset int, limit int) (result []*model.AgentUpdateParentLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentUpdateParentLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentUpdateParentLogDo) Debug() IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Debug())
}

func (a agentUpdateParentLogDo) WithContext(ctx context.Context) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentUpdateParentLogDo) ReadDB() IAgentUpdateParentLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentUpdateParentLogDo) WriteDB() IAgentUpdateParentLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentUpdateParentLogDo) Session(config *gorm.Session) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentUpdateParentLogDo) Clauses(conds ...clause.Expression) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentUpdateParentLogDo) Returning(value interface{}, columns ...string) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentUpdateParentLogDo) Not(conds ...gen.Condition) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentUpdateParentLogDo) Or(conds ...gen.Condition) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentUpdateParentLogDo) Select(conds ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentUpdateParentLogDo) Where(conds ...gen.Condition) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentUpdateParentLogDo) Order(conds ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentUpdateParentLogDo) Distinct(cols ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentUpdateParentLogDo) Omit(cols ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentUpdateParentLogDo) Join(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentUpdateParentLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentUpdateParentLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentUpdateParentLogDo) Group(cols ...field.Expr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentUpdateParentLogDo) Having(conds ...gen.Condition) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentUpdateParentLogDo) Limit(limit int) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentUpdateParentLogDo) Offset(offset int) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentUpdateParentLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentUpdateParentLogDo) Unscoped() IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentUpdateParentLogDo) Create(values ...*model.AgentUpdateParentLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentUpdateParentLogDo) CreateInBatches(values []*model.AgentUpdateParentLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentUpdateParentLogDo) Save(values ...*model.AgentUpdateParentLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentUpdateParentLogDo) First() (*model.AgentUpdateParentLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUpdateParentLog), nil
	}
}

func (a agentUpdateParentLogDo) Take() (*model.AgentUpdateParentLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUpdateParentLog), nil
	}
}

func (a agentUpdateParentLogDo) Last() (*model.AgentUpdateParentLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUpdateParentLog), nil
	}
}

func (a agentUpdateParentLogDo) Find() ([]*model.AgentUpdateParentLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentUpdateParentLog), err
}

func (a agentUpdateParentLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUpdateParentLog, err error) {
	buf := make([]*model.AgentUpdateParentLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentUpdateParentLogDo) FindInBatches(result *[]*model.AgentUpdateParentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentUpdateParentLogDo) Attrs(attrs ...field.AssignExpr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentUpdateParentLogDo) Assign(attrs ...field.AssignExpr) IAgentUpdateParentLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentUpdateParentLogDo) Joins(fields ...field.RelationField) IAgentUpdateParentLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentUpdateParentLogDo) Preload(fields ...field.RelationField) IAgentUpdateParentLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentUpdateParentLogDo) FirstOrInit() (*model.AgentUpdateParentLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUpdateParentLog), nil
	}
}

func (a agentUpdateParentLogDo) FirstOrCreate() (*model.AgentUpdateParentLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUpdateParentLog), nil
	}
}

func (a agentUpdateParentLogDo) FindByPage(offset int, limit int) (result []*model.AgentUpdateParentLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentUpdateParentLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentUpdateParentLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentUpdateParentLogDo) Delete(models ...*model.AgentUpdateParentLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentUpdateParentLogDo) withDO(do gen.Dao) *agentUpdateParentLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
