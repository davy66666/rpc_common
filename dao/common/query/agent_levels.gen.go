// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentLevel(db *gorm.DB, opts ...gen.DOOption) agentLevel {
	_agentLevel := agentLevel{}

	_agentLevel.agentLevelDo.UseDB(db, opts...)
	_agentLevel.agentLevelDo.UseModel(&model.AgentLevel{})

	tableName := _agentLevel.agentLevelDo.TableName()
	_agentLevel.ALL = field.NewAsterisk(tableName)
	_agentLevel.ID = field.NewInt64(tableName, "id")
	_agentLevel.AgentLevel = field.NewInt64(tableName, "agent_level")
	_agentLevel.CnName = field.NewString(tableName, "cn_name")
	_agentLevel.Remark = field.NewString(tableName, "remark")
	_agentLevel.YongJin = field.NewString(tableName, "yong_jin")
	_agentLevel.AdminName = field.NewString(tableName, "admin_name")
	_agentLevel.IsOpen = field.NewInt64(tableName, "is_open")
	_agentLevel.CreatedAt = field.NewField(tableName, "created_at")
	_agentLevel.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentLevel.StartMoney = field.NewInt64(tableName, "start_money")
	_agentLevel.EndMoney = field.NewInt64(tableName, "end_money")

	_agentLevel.fillFieldMap()

	return _agentLevel
}

// agentLevel api比例
type agentLevel struct {
	agentLevelDo agentLevelDo

	ALL        field.Asterisk
	ID         field.Int64
	AgentLevel field.Int64  // 代理层级 返佣用
	CnName     field.String // 层级名称中文名
	Remark     field.String // 备注
	YongJin    field.String // 返佣配置json格式{game_code:百分比数字}(内容数据为百分比数字，使用时需要除100)
	AdminName  field.String // 操作管理员
	IsOpen     field.Int64  // 是否启用
	CreatedAt  field.Field
	UpdatedAt  field.Field
	StartMoney field.Int64 // 起始金额
	EndMoney   field.Int64 // 结束金额

	fieldMap map[string]field.Expr
}

func (a agentLevel) Table(newTableName string) *agentLevel {
	a.agentLevelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentLevel) As(alias string) *agentLevel {
	a.agentLevelDo.DO = *(a.agentLevelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentLevel) updateTableName(table string) *agentLevel {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentLevel = field.NewInt64(table, "agent_level")
	a.CnName = field.NewString(table, "cn_name")
	a.Remark = field.NewString(table, "remark")
	a.YongJin = field.NewString(table, "yong_jin")
	a.AdminName = field.NewString(table, "admin_name")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.StartMoney = field.NewInt64(table, "start_money")
	a.EndMoney = field.NewInt64(table, "end_money")

	a.fillFieldMap()

	return a
}

func (a *agentLevel) WithContext(ctx context.Context) IAgentLevelDo {
	return a.agentLevelDo.WithContext(ctx)
}

func (a agentLevel) TableName() string { return a.agentLevelDo.TableName() }

func (a agentLevel) Alias() string { return a.agentLevelDo.Alias() }

func (a agentLevel) Columns(cols ...field.Expr) gen.Columns { return a.agentLevelDo.Columns(cols...) }

func (a *agentLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentLevel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_level"] = a.AgentLevel
	a.fieldMap["cn_name"] = a.CnName
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["yong_jin"] = a.YongJin
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["start_money"] = a.StartMoney
	a.fieldMap["end_money"] = a.EndMoney
}

func (a agentLevel) clone(db *gorm.DB) agentLevel {
	a.agentLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentLevel) replaceDB(db *gorm.DB) agentLevel {
	a.agentLevelDo.ReplaceDB(db)
	return a
}

type agentLevelDo struct{ gen.DO }

type IAgentLevelDo interface {
	gen.SubQuery
	Debug() IAgentLevelDo
	WithContext(ctx context.Context) IAgentLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentLevelDo
	WriteDB() IAgentLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentLevelDo
	Not(conds ...gen.Condition) IAgentLevelDo
	Or(conds ...gen.Condition) IAgentLevelDo
	Select(conds ...field.Expr) IAgentLevelDo
	Where(conds ...gen.Condition) IAgentLevelDo
	Order(conds ...field.Expr) IAgentLevelDo
	Distinct(cols ...field.Expr) IAgentLevelDo
	Omit(cols ...field.Expr) IAgentLevelDo
	Join(table schema.Tabler, on ...field.Expr) IAgentLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentLevelDo
	Group(cols ...field.Expr) IAgentLevelDo
	Having(conds ...gen.Condition) IAgentLevelDo
	Limit(limit int) IAgentLevelDo
	Offset(offset int) IAgentLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentLevelDo
	Unscoped() IAgentLevelDo
	Create(values ...*model.AgentLevel) error
	CreateInBatches(values []*model.AgentLevel, batchSize int) error
	Save(values ...*model.AgentLevel) error
	First() (*model.AgentLevel, error)
	Take() (*model.AgentLevel, error)
	Last() (*model.AgentLevel, error)
	Find() ([]*model.AgentLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentLevel, err error)
	FindInBatches(result *[]*model.AgentLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentLevelDo
	Assign(attrs ...field.AssignExpr) IAgentLevelDo
	Joins(fields ...field.RelationField) IAgentLevelDo
	Preload(fields ...field.RelationField) IAgentLevelDo
	FirstOrInit() (*model.AgentLevel, error)
	FirstOrCreate() (*model.AgentLevel, error)
	FindByPage(offset int, limit int) (result []*model.AgentLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentLevelDo) Debug() IAgentLevelDo {
	return a.withDO(a.DO.Debug())
}

func (a agentLevelDo) WithContext(ctx context.Context) IAgentLevelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentLevelDo) ReadDB() IAgentLevelDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentLevelDo) WriteDB() IAgentLevelDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentLevelDo) Session(config *gorm.Session) IAgentLevelDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentLevelDo) Clauses(conds ...clause.Expression) IAgentLevelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentLevelDo) Returning(value interface{}, columns ...string) IAgentLevelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentLevelDo) Not(conds ...gen.Condition) IAgentLevelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentLevelDo) Or(conds ...gen.Condition) IAgentLevelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentLevelDo) Select(conds ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentLevelDo) Where(conds ...gen.Condition) IAgentLevelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentLevelDo) Order(conds ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentLevelDo) Distinct(cols ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentLevelDo) Omit(cols ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentLevelDo) Join(table schema.Tabler, on ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentLevelDo) Group(cols ...field.Expr) IAgentLevelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentLevelDo) Having(conds ...gen.Condition) IAgentLevelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentLevelDo) Limit(limit int) IAgentLevelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentLevelDo) Offset(offset int) IAgentLevelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentLevelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentLevelDo) Unscoped() IAgentLevelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentLevelDo) Create(values ...*model.AgentLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentLevelDo) CreateInBatches(values []*model.AgentLevel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentLevelDo) Save(values ...*model.AgentLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentLevelDo) First() (*model.AgentLevel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentLevel), nil
	}
}

func (a agentLevelDo) Take() (*model.AgentLevel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentLevel), nil
	}
}

func (a agentLevelDo) Last() (*model.AgentLevel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentLevel), nil
	}
}

func (a agentLevelDo) Find() ([]*model.AgentLevel, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentLevel), err
}

func (a agentLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentLevel, err error) {
	buf := make([]*model.AgentLevel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentLevelDo) FindInBatches(result *[]*model.AgentLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentLevelDo) Attrs(attrs ...field.AssignExpr) IAgentLevelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentLevelDo) Assign(attrs ...field.AssignExpr) IAgentLevelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentLevelDo) Joins(fields ...field.RelationField) IAgentLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentLevelDo) Preload(fields ...field.RelationField) IAgentLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentLevelDo) FirstOrInit() (*model.AgentLevel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentLevel), nil
	}
}

func (a agentLevelDo) FirstOrCreate() (*model.AgentLevel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentLevel), nil
	}
}

func (a agentLevelDo) FindByPage(offset int, limit int) (result []*model.AgentLevel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentLevelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentLevelDo) Delete(models ...*model.AgentLevel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentLevelDo) withDO(do gen.Dao) *agentLevelDo {
	a.DO = *do.(*gen.DO)
	return a
}
