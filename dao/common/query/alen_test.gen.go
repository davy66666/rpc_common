// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAlenTest(db *gorm.DB, opts ...gen.DOOption) alenTest {
	_alenTest := alenTest{}

	_alenTest.alenTestDo.UseDB(db, opts...)
	_alenTest.alenTestDo.UseModel(&model.AlenTest{})

	tableName := _alenTest.alenTestDo.TableName()
	_alenTest.ALL = field.NewAsterisk(tableName)
	_alenTest.ID = field.NewInt64(tableName, "id")
	_alenTest.Val = field.NewString(tableName, "val")
	_alenTest.UpdatedAt = field.NewField(tableName, "updated_at")

	_alenTest.fillFieldMap()

	return _alenTest
}

type alenTest struct {
	alenTestDo alenTestDo

	ALL       field.Asterisk
	ID        field.Int64
	Val       field.String
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (a alenTest) Table(newTableName string) *alenTest {
	a.alenTestDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alenTest) As(alias string) *alenTest {
	a.alenTestDo.DO = *(a.alenTestDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alenTest) updateTableName(table string) *alenTest {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Val = field.NewString(table, "val")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *alenTest) WithContext(ctx context.Context) IAlenTestDo { return a.alenTestDo.WithContext(ctx) }

func (a alenTest) TableName() string { return a.alenTestDo.TableName() }

func (a alenTest) Alias() string { return a.alenTestDo.Alias() }

func (a alenTest) Columns(cols ...field.Expr) gen.Columns { return a.alenTestDo.Columns(cols...) }

func (a *alenTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alenTest) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["val"] = a.Val
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a alenTest) clone(db *gorm.DB) alenTest {
	a.alenTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alenTest) replaceDB(db *gorm.DB) alenTest {
	a.alenTestDo.ReplaceDB(db)
	return a
}

type alenTestDo struct{ gen.DO }

type IAlenTestDo interface {
	gen.SubQuery
	Debug() IAlenTestDo
	WithContext(ctx context.Context) IAlenTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlenTestDo
	WriteDB() IAlenTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlenTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlenTestDo
	Not(conds ...gen.Condition) IAlenTestDo
	Or(conds ...gen.Condition) IAlenTestDo
	Select(conds ...field.Expr) IAlenTestDo
	Where(conds ...gen.Condition) IAlenTestDo
	Order(conds ...field.Expr) IAlenTestDo
	Distinct(cols ...field.Expr) IAlenTestDo
	Omit(cols ...field.Expr) IAlenTestDo
	Join(table schema.Tabler, on ...field.Expr) IAlenTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlenTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlenTestDo
	Group(cols ...field.Expr) IAlenTestDo
	Having(conds ...gen.Condition) IAlenTestDo
	Limit(limit int) IAlenTestDo
	Offset(offset int) IAlenTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlenTestDo
	Unscoped() IAlenTestDo
	Create(values ...*model.AlenTest) error
	CreateInBatches(values []*model.AlenTest, batchSize int) error
	Save(values ...*model.AlenTest) error
	First() (*model.AlenTest, error)
	Take() (*model.AlenTest, error)
	Last() (*model.AlenTest, error)
	Find() ([]*model.AlenTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlenTest, err error)
	FindInBatches(result *[]*model.AlenTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlenTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlenTestDo
	Assign(attrs ...field.AssignExpr) IAlenTestDo
	Joins(fields ...field.RelationField) IAlenTestDo
	Preload(fields ...field.RelationField) IAlenTestDo
	FirstOrInit() (*model.AlenTest, error)
	FirstOrCreate() (*model.AlenTest, error)
	FindByPage(offset int, limit int) (result []*model.AlenTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlenTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alenTestDo) Debug() IAlenTestDo {
	return a.withDO(a.DO.Debug())
}

func (a alenTestDo) WithContext(ctx context.Context) IAlenTestDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alenTestDo) ReadDB() IAlenTestDo {
	return a.Clauses(dbresolver.Read)
}

func (a alenTestDo) WriteDB() IAlenTestDo {
	return a.Clauses(dbresolver.Write)
}

func (a alenTestDo) Session(config *gorm.Session) IAlenTestDo {
	return a.withDO(a.DO.Session(config))
}

func (a alenTestDo) Clauses(conds ...clause.Expression) IAlenTestDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alenTestDo) Returning(value interface{}, columns ...string) IAlenTestDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alenTestDo) Not(conds ...gen.Condition) IAlenTestDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alenTestDo) Or(conds ...gen.Condition) IAlenTestDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alenTestDo) Select(conds ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alenTestDo) Where(conds ...gen.Condition) IAlenTestDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alenTestDo) Order(conds ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alenTestDo) Distinct(cols ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alenTestDo) Omit(cols ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alenTestDo) Join(table schema.Tabler, on ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alenTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alenTestDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alenTestDo) Group(cols ...field.Expr) IAlenTestDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alenTestDo) Having(conds ...gen.Condition) IAlenTestDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alenTestDo) Limit(limit int) IAlenTestDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alenTestDo) Offset(offset int) IAlenTestDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alenTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlenTestDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alenTestDo) Unscoped() IAlenTestDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alenTestDo) Create(values ...*model.AlenTest) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alenTestDo) CreateInBatches(values []*model.AlenTest, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alenTestDo) Save(values ...*model.AlenTest) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alenTestDo) First() (*model.AlenTest, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlenTest), nil
	}
}

func (a alenTestDo) Take() (*model.AlenTest, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlenTest), nil
	}
}

func (a alenTestDo) Last() (*model.AlenTest, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlenTest), nil
	}
}

func (a alenTestDo) Find() ([]*model.AlenTest, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlenTest), err
}

func (a alenTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlenTest, err error) {
	buf := make([]*model.AlenTest, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alenTestDo) FindInBatches(result *[]*model.AlenTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alenTestDo) Attrs(attrs ...field.AssignExpr) IAlenTestDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alenTestDo) Assign(attrs ...field.AssignExpr) IAlenTestDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alenTestDo) Joins(fields ...field.RelationField) IAlenTestDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alenTestDo) Preload(fields ...field.RelationField) IAlenTestDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alenTestDo) FirstOrInit() (*model.AlenTest, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlenTest), nil
	}
}

func (a alenTestDo) FirstOrCreate() (*model.AlenTest, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlenTest), nil
	}
}

func (a alenTestDo) FindByPage(offset int, limit int) (result []*model.AlenTest, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alenTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alenTestDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alenTestDo) Delete(models ...*model.AlenTest) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alenTestDo) withDO(do gen.Dao) *alenTestDo {
	a.DO = *do.(*gen.DO)
	return a
}
