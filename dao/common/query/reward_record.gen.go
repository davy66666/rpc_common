// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newRewardRecord(db *gorm.DB, opts ...gen.DOOption) rewardRecord {
	_rewardRecord := rewardRecord{}

	_rewardRecord.rewardRecordDo.UseDB(db, opts...)
	_rewardRecord.rewardRecordDo.UseModel(&model.RewardRecord{})

	tableName := _rewardRecord.rewardRecordDo.TableName()
	_rewardRecord.ALL = field.NewAsterisk(tableName)
	_rewardRecord.ID = field.NewInt64(tableName, "id")
	_rewardRecord.CircleRecordID = field.NewInt64(tableName, "circle_record_id")
	_rewardRecord.UserID = field.NewInt64(tableName, "user_id")
	_rewardRecord.TeamID = field.NewInt64(tableName, "team_id")
	_rewardRecord.Username = field.NewString(tableName, "username")
	_rewardRecord.TeamName = field.NewString(tableName, "team_name")
	_rewardRecord.TeamInviteCode = field.NewString(tableName, "team_invite_code")
	_rewardRecord.TeamDeposit = field.NewFloat64(tableName, "team_deposit")
	_rewardRecord.TeamCoefficient = field.NewFloat64(tableName, "team_coefficient")
	_rewardRecord.TeamAmount = field.NewFloat64(tableName, "team_amount")
	_rewardRecord.MineDeposit = field.NewFloat64(tableName, "mine_deposit")
	_rewardRecord.Amount = field.NewFloat64(tableName, "amount")
	_rewardRecord.Status = field.NewInt64(tableName, "status")
	_rewardRecord.ReceiveAt = field.NewField(tableName, "receive_at")
	_rewardRecord.RegisterAt = field.NewField(tableName, "register_at")
	_rewardRecord.CreatedAt = field.NewField(tableName, "created_at")
	_rewardRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_rewardRecord.fillFieldMap()

	return _rewardRecord
}

// rewardRecord 领取记录
type rewardRecord struct {
	rewardRecordDo rewardRecordDo

	ALL             field.Asterisk
	ID              field.Int64
	CircleRecordID  field.Int64   // 周期id
	UserID          field.Int64   // 用户ID
	TeamID          field.Int64   // 队伍ID
	Username        field.String  // 用户名
	TeamName        field.String  // 队伍名称
	TeamInviteCode  field.String  // 队伍邀请码
	TeamDeposit     field.Float64 // 团队存款
	TeamCoefficient field.Float64 // 团队系数
	TeamAmount      field.Float64 // 团队奖励
	MineDeposit     field.Float64 // 我的存款
	Amount          field.Float64 // 领取金额
	Status          field.Int64   // 状态 0未领取 1已领取
	ReceiveAt       field.Field   // 领取时间
	RegisterAt      field.Field   // 注册时间
	CreatedAt       field.Field   // 创建时间
	UpdatedAt       field.Field   // 更新时间

	fieldMap map[string]field.Expr
}

func (r rewardRecord) Table(newTableName string) *rewardRecord {
	r.rewardRecordDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rewardRecord) As(alias string) *rewardRecord {
	r.rewardRecordDo.DO = *(r.rewardRecordDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rewardRecord) updateTableName(table string) *rewardRecord {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CircleRecordID = field.NewInt64(table, "circle_record_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.TeamID = field.NewInt64(table, "team_id")
	r.Username = field.NewString(table, "username")
	r.TeamName = field.NewString(table, "team_name")
	r.TeamInviteCode = field.NewString(table, "team_invite_code")
	r.TeamDeposit = field.NewFloat64(table, "team_deposit")
	r.TeamCoefficient = field.NewFloat64(table, "team_coefficient")
	r.TeamAmount = field.NewFloat64(table, "team_amount")
	r.MineDeposit = field.NewFloat64(table, "mine_deposit")
	r.Amount = field.NewFloat64(table, "amount")
	r.Status = field.NewInt64(table, "status")
	r.ReceiveAt = field.NewField(table, "receive_at")
	r.RegisterAt = field.NewField(table, "register_at")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *rewardRecord) WithContext(ctx context.Context) IRewardRecordDo {
	return r.rewardRecordDo.WithContext(ctx)
}

func (r rewardRecord) TableName() string { return r.rewardRecordDo.TableName() }

func (r rewardRecord) Alias() string { return r.rewardRecordDo.Alias() }

func (r rewardRecord) Columns(cols ...field.Expr) gen.Columns {
	return r.rewardRecordDo.Columns(cols...)
}

func (r *rewardRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rewardRecord) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 17)
	r.fieldMap["id"] = r.ID
	r.fieldMap["circle_record_id"] = r.CircleRecordID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["team_id"] = r.TeamID
	r.fieldMap["username"] = r.Username
	r.fieldMap["team_name"] = r.TeamName
	r.fieldMap["team_invite_code"] = r.TeamInviteCode
	r.fieldMap["team_deposit"] = r.TeamDeposit
	r.fieldMap["team_coefficient"] = r.TeamCoefficient
	r.fieldMap["team_amount"] = r.TeamAmount
	r.fieldMap["mine_deposit"] = r.MineDeposit
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["status"] = r.Status
	r.fieldMap["receive_at"] = r.ReceiveAt
	r.fieldMap["register_at"] = r.RegisterAt
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r rewardRecord) clone(db *gorm.DB) rewardRecord {
	r.rewardRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rewardRecord) replaceDB(db *gorm.DB) rewardRecord {
	r.rewardRecordDo.ReplaceDB(db)
	return r
}

type rewardRecordDo struct{ gen.DO }

type IRewardRecordDo interface {
	gen.SubQuery
	Debug() IRewardRecordDo
	WithContext(ctx context.Context) IRewardRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRewardRecordDo
	WriteDB() IRewardRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRewardRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRewardRecordDo
	Not(conds ...gen.Condition) IRewardRecordDo
	Or(conds ...gen.Condition) IRewardRecordDo
	Select(conds ...field.Expr) IRewardRecordDo
	Where(conds ...gen.Condition) IRewardRecordDo
	Order(conds ...field.Expr) IRewardRecordDo
	Distinct(cols ...field.Expr) IRewardRecordDo
	Omit(cols ...field.Expr) IRewardRecordDo
	Join(table schema.Tabler, on ...field.Expr) IRewardRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRewardRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRewardRecordDo
	Group(cols ...field.Expr) IRewardRecordDo
	Having(conds ...gen.Condition) IRewardRecordDo
	Limit(limit int) IRewardRecordDo
	Offset(offset int) IRewardRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardRecordDo
	Unscoped() IRewardRecordDo
	Create(values ...*model.RewardRecord) error
	CreateInBatches(values []*model.RewardRecord, batchSize int) error
	Save(values ...*model.RewardRecord) error
	First() (*model.RewardRecord, error)
	Take() (*model.RewardRecord, error)
	Last() (*model.RewardRecord, error)
	Find() ([]*model.RewardRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RewardRecord, err error)
	FindInBatches(result *[]*model.RewardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RewardRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRewardRecordDo
	Assign(attrs ...field.AssignExpr) IRewardRecordDo
	Joins(fields ...field.RelationField) IRewardRecordDo
	Preload(fields ...field.RelationField) IRewardRecordDo
	FirstOrInit() (*model.RewardRecord, error)
	FirstOrCreate() (*model.RewardRecord, error)
	FindByPage(offset int, limit int) (result []*model.RewardRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRewardRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rewardRecordDo) Debug() IRewardRecordDo {
	return r.withDO(r.DO.Debug())
}

func (r rewardRecordDo) WithContext(ctx context.Context) IRewardRecordDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rewardRecordDo) ReadDB() IRewardRecordDo {
	return r.Clauses(dbresolver.Read)
}

func (r rewardRecordDo) WriteDB() IRewardRecordDo {
	return r.Clauses(dbresolver.Write)
}

func (r rewardRecordDo) Session(config *gorm.Session) IRewardRecordDo {
	return r.withDO(r.DO.Session(config))
}

func (r rewardRecordDo) Clauses(conds ...clause.Expression) IRewardRecordDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rewardRecordDo) Returning(value interface{}, columns ...string) IRewardRecordDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rewardRecordDo) Not(conds ...gen.Condition) IRewardRecordDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rewardRecordDo) Or(conds ...gen.Condition) IRewardRecordDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rewardRecordDo) Select(conds ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rewardRecordDo) Where(conds ...gen.Condition) IRewardRecordDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rewardRecordDo) Order(conds ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rewardRecordDo) Distinct(cols ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rewardRecordDo) Omit(cols ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rewardRecordDo) Join(table schema.Tabler, on ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rewardRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rewardRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rewardRecordDo) Group(cols ...field.Expr) IRewardRecordDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rewardRecordDo) Having(conds ...gen.Condition) IRewardRecordDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rewardRecordDo) Limit(limit int) IRewardRecordDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rewardRecordDo) Offset(offset int) IRewardRecordDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rewardRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardRecordDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rewardRecordDo) Unscoped() IRewardRecordDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rewardRecordDo) Create(values ...*model.RewardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rewardRecordDo) CreateInBatches(values []*model.RewardRecord, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rewardRecordDo) Save(values ...*model.RewardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rewardRecordDo) First() (*model.RewardRecord, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecord), nil
	}
}

func (r rewardRecordDo) Take() (*model.RewardRecord, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecord), nil
	}
}

func (r rewardRecordDo) Last() (*model.RewardRecord, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecord), nil
	}
}

func (r rewardRecordDo) Find() ([]*model.RewardRecord, error) {
	result, err := r.DO.Find()
	return result.([]*model.RewardRecord), err
}

func (r rewardRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RewardRecord, err error) {
	buf := make([]*model.RewardRecord, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rewardRecordDo) FindInBatches(result *[]*model.RewardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rewardRecordDo) Attrs(attrs ...field.AssignExpr) IRewardRecordDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rewardRecordDo) Assign(attrs ...field.AssignExpr) IRewardRecordDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rewardRecordDo) Joins(fields ...field.RelationField) IRewardRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rewardRecordDo) Preload(fields ...field.RelationField) IRewardRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rewardRecordDo) FirstOrInit() (*model.RewardRecord, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecord), nil
	}
}

func (r rewardRecordDo) FirstOrCreate() (*model.RewardRecord, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RewardRecord), nil
	}
}

func (r rewardRecordDo) FindByPage(offset int, limit int) (result []*model.RewardRecord, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rewardRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rewardRecordDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rewardRecordDo) Delete(models ...*model.RewardRecord) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rewardRecordDo) withDO(do gen.Dao) *rewardRecordDo {
	r.DO = *do.(*gen.DO)
	return r
}
