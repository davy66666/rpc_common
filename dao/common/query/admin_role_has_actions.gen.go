// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAdminRoleHasAction(db *gorm.DB, opts ...gen.DOOption) adminRoleHasAction {
	_adminRoleHasAction := adminRoleHasAction{}

	_adminRoleHasAction.adminRoleHasActionDo.UseDB(db, opts...)
	_adminRoleHasAction.adminRoleHasActionDo.UseModel(&model.AdminRoleHasAction{})

	tableName := _adminRoleHasAction.adminRoleHasActionDo.TableName()
	_adminRoleHasAction.ALL = field.NewAsterisk(tableName)
	_adminRoleHasAction.ID = field.NewInt64(tableName, "id")
	_adminRoleHasAction.AdminRoleID = field.NewInt64(tableName, "admin_role_id")
	_adminRoleHasAction.ActionID = field.NewInt64(tableName, "action_id")
	_adminRoleHasAction.CreatedAt = field.NewField(tableName, "created_at")
	_adminRoleHasAction.UpdatedAt = field.NewField(tableName, "updated_at")

	_adminRoleHasAction.fillFieldMap()

	return _adminRoleHasAction
}

type adminRoleHasAction struct {
	adminRoleHasActionDo adminRoleHasActionDo

	ALL         field.Asterisk
	ID          field.Int64
	AdminRoleID field.Int64
	ActionID    field.Int64
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a adminRoleHasAction) Table(newTableName string) *adminRoleHasAction {
	a.adminRoleHasActionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminRoleHasAction) As(alias string) *adminRoleHasAction {
	a.adminRoleHasActionDo.DO = *(a.adminRoleHasActionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminRoleHasAction) updateTableName(table string) *adminRoleHasAction {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminRoleID = field.NewInt64(table, "admin_role_id")
	a.ActionID = field.NewInt64(table, "action_id")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminRoleHasAction) WithContext(ctx context.Context) IAdminRoleHasActionDo {
	return a.adminRoleHasActionDo.WithContext(ctx)
}

func (a adminRoleHasAction) TableName() string { return a.adminRoleHasActionDo.TableName() }

func (a adminRoleHasAction) Alias() string { return a.adminRoleHasActionDo.Alias() }

func (a adminRoleHasAction) Columns(cols ...field.Expr) gen.Columns {
	return a.adminRoleHasActionDo.Columns(cols...)
}

func (a *adminRoleHasAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminRoleHasAction) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_role_id"] = a.AdminRoleID
	a.fieldMap["action_id"] = a.ActionID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminRoleHasAction) clone(db *gorm.DB) adminRoleHasAction {
	a.adminRoleHasActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminRoleHasAction) replaceDB(db *gorm.DB) adminRoleHasAction {
	a.adminRoleHasActionDo.ReplaceDB(db)
	return a
}

type adminRoleHasActionDo struct{ gen.DO }

type IAdminRoleHasActionDo interface {
	gen.SubQuery
	Debug() IAdminRoleHasActionDo
	WithContext(ctx context.Context) IAdminRoleHasActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminRoleHasActionDo
	WriteDB() IAdminRoleHasActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminRoleHasActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminRoleHasActionDo
	Not(conds ...gen.Condition) IAdminRoleHasActionDo
	Or(conds ...gen.Condition) IAdminRoleHasActionDo
	Select(conds ...field.Expr) IAdminRoleHasActionDo
	Where(conds ...gen.Condition) IAdminRoleHasActionDo
	Order(conds ...field.Expr) IAdminRoleHasActionDo
	Distinct(cols ...field.Expr) IAdminRoleHasActionDo
	Omit(cols ...field.Expr) IAdminRoleHasActionDo
	Join(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo
	Group(cols ...field.Expr) IAdminRoleHasActionDo
	Having(conds ...gen.Condition) IAdminRoleHasActionDo
	Limit(limit int) IAdminRoleHasActionDo
	Offset(offset int) IAdminRoleHasActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleHasActionDo
	Unscoped() IAdminRoleHasActionDo
	Create(values ...*model.AdminRoleHasAction) error
	CreateInBatches(values []*model.AdminRoleHasAction, batchSize int) error
	Save(values ...*model.AdminRoleHasAction) error
	First() (*model.AdminRoleHasAction, error)
	Take() (*model.AdminRoleHasAction, error)
	Last() (*model.AdminRoleHasAction, error)
	Find() ([]*model.AdminRoleHasAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleHasAction, err error)
	FindInBatches(result *[]*model.AdminRoleHasAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminRoleHasAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminRoleHasActionDo
	Assign(attrs ...field.AssignExpr) IAdminRoleHasActionDo
	Joins(fields ...field.RelationField) IAdminRoleHasActionDo
	Preload(fields ...field.RelationField) IAdminRoleHasActionDo
	FirstOrInit() (*model.AdminRoleHasAction, error)
	FirstOrCreate() (*model.AdminRoleHasAction, error)
	FindByPage(offset int, limit int) (result []*model.AdminRoleHasAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminRoleHasActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminRoleHasActionDo) Debug() IAdminRoleHasActionDo {
	return a.withDO(a.DO.Debug())
}

func (a adminRoleHasActionDo) WithContext(ctx context.Context) IAdminRoleHasActionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminRoleHasActionDo) ReadDB() IAdminRoleHasActionDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminRoleHasActionDo) WriteDB() IAdminRoleHasActionDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminRoleHasActionDo) Session(config *gorm.Session) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminRoleHasActionDo) Clauses(conds ...clause.Expression) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminRoleHasActionDo) Returning(value interface{}, columns ...string) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminRoleHasActionDo) Not(conds ...gen.Condition) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminRoleHasActionDo) Or(conds ...gen.Condition) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminRoleHasActionDo) Select(conds ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminRoleHasActionDo) Where(conds ...gen.Condition) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminRoleHasActionDo) Order(conds ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminRoleHasActionDo) Distinct(cols ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminRoleHasActionDo) Omit(cols ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminRoleHasActionDo) Join(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminRoleHasActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminRoleHasActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminRoleHasActionDo) Group(cols ...field.Expr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminRoleHasActionDo) Having(conds ...gen.Condition) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminRoleHasActionDo) Limit(limit int) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminRoleHasActionDo) Offset(offset int) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminRoleHasActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminRoleHasActionDo) Unscoped() IAdminRoleHasActionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminRoleHasActionDo) Create(values ...*model.AdminRoleHasAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminRoleHasActionDo) CreateInBatches(values []*model.AdminRoleHasAction, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminRoleHasActionDo) Save(values ...*model.AdminRoleHasAction) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminRoleHasActionDo) First() (*model.AdminRoleHasAction, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleHasAction), nil
	}
}

func (a adminRoleHasActionDo) Take() (*model.AdminRoleHasAction, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleHasAction), nil
	}
}

func (a adminRoleHasActionDo) Last() (*model.AdminRoleHasAction, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleHasAction), nil
	}
}

func (a adminRoleHasActionDo) Find() ([]*model.AdminRoleHasAction, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminRoleHasAction), err
}

func (a adminRoleHasActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminRoleHasAction, err error) {
	buf := make([]*model.AdminRoleHasAction, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminRoleHasActionDo) FindInBatches(result *[]*model.AdminRoleHasAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminRoleHasActionDo) Attrs(attrs ...field.AssignExpr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminRoleHasActionDo) Assign(attrs ...field.AssignExpr) IAdminRoleHasActionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminRoleHasActionDo) Joins(fields ...field.RelationField) IAdminRoleHasActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminRoleHasActionDo) Preload(fields ...field.RelationField) IAdminRoleHasActionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminRoleHasActionDo) FirstOrInit() (*model.AdminRoleHasAction, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleHasAction), nil
	}
}

func (a adminRoleHasActionDo) FirstOrCreate() (*model.AdminRoleHasAction, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminRoleHasAction), nil
	}
}

func (a adminRoleHasActionDo) FindByPage(offset int, limit int) (result []*model.AdminRoleHasAction, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminRoleHasActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminRoleHasActionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminRoleHasActionDo) Delete(models ...*model.AdminRoleHasAction) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminRoleHasActionDo) withDO(do gen.Dao) *adminRoleHasActionDo {
	a.DO = *do.(*gen.DO)
	return a
}
