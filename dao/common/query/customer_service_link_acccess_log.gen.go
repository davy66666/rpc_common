// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newCustomerServiceLinkAcccessLog(db *gorm.DB, opts ...gen.DOOption) customerServiceLinkAcccessLog {
	_customerServiceLinkAcccessLog := customerServiceLinkAcccessLog{}

	_customerServiceLinkAcccessLog.customerServiceLinkAcccessLogDo.UseDB(db, opts...)
	_customerServiceLinkAcccessLog.customerServiceLinkAcccessLogDo.UseModel(&model.CustomerServiceLinkAcccessLog{})

	tableName := _customerServiceLinkAcccessLog.customerServiceLinkAcccessLogDo.TableName()
	_customerServiceLinkAcccessLog.ALL = field.NewAsterisk(tableName)
	_customerServiceLinkAcccessLog.ID = field.NewInt64(tableName, "id")
	_customerServiceLinkAcccessLog.CustomerServiceLinkID = field.NewInt64(tableName, "customer_service_link_id")
	_customerServiceLinkAcccessLog.IsAccessSuccess = field.NewInt64(tableName, "is_access_success")
	_customerServiceLinkAcccessLog.Plat = field.NewInt64(tableName, "plat")
	_customerServiceLinkAcccessLog.CreatedAt = field.NewField(tableName, "created_at")
	_customerServiceLinkAcccessLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_customerServiceLinkAcccessLog.fillFieldMap()

	return _customerServiceLinkAcccessLog
}

// customerServiceLinkAcccessLog 在綫客服訪問鏈接表
type customerServiceLinkAcccessLog struct {
	customerServiceLinkAcccessLogDo customerServiceLinkAcccessLogDo

	ALL                   field.Asterisk
	ID                    field.Int64 // 主鍵
	CustomerServiceLinkID field.Int64 // 客服鏈接id
	IsAccessSuccess       field.Int64 // 是否訪問1是0否
	Plat                  field.Int64 // 平臺
	CreatedAt             field.Field // 創建時間
	UpdatedAt             field.Field // 更新時間

	fieldMap map[string]field.Expr
}

func (c customerServiceLinkAcccessLog) Table(newTableName string) *customerServiceLinkAcccessLog {
	c.customerServiceLinkAcccessLogDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerServiceLinkAcccessLog) As(alias string) *customerServiceLinkAcccessLog {
	c.customerServiceLinkAcccessLogDo.DO = *(c.customerServiceLinkAcccessLogDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerServiceLinkAcccessLog) updateTableName(table string) *customerServiceLinkAcccessLog {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CustomerServiceLinkID = field.NewInt64(table, "customer_service_link_id")
	c.IsAccessSuccess = field.NewInt64(table, "is_access_success")
	c.Plat = field.NewInt64(table, "plat")
	c.CreatedAt = field.NewField(table, "created_at")
	c.UpdatedAt = field.NewField(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *customerServiceLinkAcccessLog) WithContext(ctx context.Context) ICustomerServiceLinkAcccessLogDo {
	return c.customerServiceLinkAcccessLogDo.WithContext(ctx)
}

func (c customerServiceLinkAcccessLog) TableName() string {
	return c.customerServiceLinkAcccessLogDo.TableName()
}

func (c customerServiceLinkAcccessLog) Alias() string {
	return c.customerServiceLinkAcccessLogDo.Alias()
}

func (c customerServiceLinkAcccessLog) Columns(cols ...field.Expr) gen.Columns {
	return c.customerServiceLinkAcccessLogDo.Columns(cols...)
}

func (c *customerServiceLinkAcccessLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerServiceLinkAcccessLog) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["customer_service_link_id"] = c.CustomerServiceLinkID
	c.fieldMap["is_access_success"] = c.IsAccessSuccess
	c.fieldMap["plat"] = c.Plat
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c customerServiceLinkAcccessLog) clone(db *gorm.DB) customerServiceLinkAcccessLog {
	c.customerServiceLinkAcccessLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerServiceLinkAcccessLog) replaceDB(db *gorm.DB) customerServiceLinkAcccessLog {
	c.customerServiceLinkAcccessLogDo.ReplaceDB(db)
	return c
}

type customerServiceLinkAcccessLogDo struct{ gen.DO }

type ICustomerServiceLinkAcccessLogDo interface {
	gen.SubQuery
	Debug() ICustomerServiceLinkAcccessLogDo
	WithContext(ctx context.Context) ICustomerServiceLinkAcccessLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerServiceLinkAcccessLogDo
	WriteDB() ICustomerServiceLinkAcccessLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerServiceLinkAcccessLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerServiceLinkAcccessLogDo
	Not(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo
	Or(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo
	Select(conds ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Where(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo
	Order(conds ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Distinct(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Omit(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Group(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo
	Having(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo
	Limit(limit int) ICustomerServiceLinkAcccessLogDo
	Offset(offset int) ICustomerServiceLinkAcccessLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerServiceLinkAcccessLogDo
	Unscoped() ICustomerServiceLinkAcccessLogDo
	Create(values ...*model.CustomerServiceLinkAcccessLog) error
	CreateInBatches(values []*model.CustomerServiceLinkAcccessLog, batchSize int) error
	Save(values ...*model.CustomerServiceLinkAcccessLog) error
	First() (*model.CustomerServiceLinkAcccessLog, error)
	Take() (*model.CustomerServiceLinkAcccessLog, error)
	Last() (*model.CustomerServiceLinkAcccessLog, error)
	Find() ([]*model.CustomerServiceLinkAcccessLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerServiceLinkAcccessLog, err error)
	FindInBatches(result *[]*model.CustomerServiceLinkAcccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerServiceLinkAcccessLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerServiceLinkAcccessLogDo
	Assign(attrs ...field.AssignExpr) ICustomerServiceLinkAcccessLogDo
	Joins(fields ...field.RelationField) ICustomerServiceLinkAcccessLogDo
	Preload(fields ...field.RelationField) ICustomerServiceLinkAcccessLogDo
	FirstOrInit() (*model.CustomerServiceLinkAcccessLog, error)
	FirstOrCreate() (*model.CustomerServiceLinkAcccessLog, error)
	FindByPage(offset int, limit int) (result []*model.CustomerServiceLinkAcccessLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerServiceLinkAcccessLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerServiceLinkAcccessLogDo) Debug() ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Debug())
}

func (c customerServiceLinkAcccessLogDo) WithContext(ctx context.Context) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerServiceLinkAcccessLogDo) ReadDB() ICustomerServiceLinkAcccessLogDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerServiceLinkAcccessLogDo) WriteDB() ICustomerServiceLinkAcccessLogDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerServiceLinkAcccessLogDo) Session(config *gorm.Session) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerServiceLinkAcccessLogDo) Clauses(conds ...clause.Expression) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerServiceLinkAcccessLogDo) Returning(value interface{}, columns ...string) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerServiceLinkAcccessLogDo) Not(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerServiceLinkAcccessLogDo) Or(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerServiceLinkAcccessLogDo) Select(conds ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerServiceLinkAcccessLogDo) Where(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerServiceLinkAcccessLogDo) Order(conds ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerServiceLinkAcccessLogDo) Distinct(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerServiceLinkAcccessLogDo) Omit(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerServiceLinkAcccessLogDo) Join(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerServiceLinkAcccessLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerServiceLinkAcccessLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerServiceLinkAcccessLogDo) Group(cols ...field.Expr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerServiceLinkAcccessLogDo) Having(conds ...gen.Condition) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerServiceLinkAcccessLogDo) Limit(limit int) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerServiceLinkAcccessLogDo) Offset(offset int) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerServiceLinkAcccessLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerServiceLinkAcccessLogDo) Unscoped() ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerServiceLinkAcccessLogDo) Create(values ...*model.CustomerServiceLinkAcccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerServiceLinkAcccessLogDo) CreateInBatches(values []*model.CustomerServiceLinkAcccessLog, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerServiceLinkAcccessLogDo) Save(values ...*model.CustomerServiceLinkAcccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerServiceLinkAcccessLogDo) First() (*model.CustomerServiceLinkAcccessLog, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceLinkAcccessLog), nil
	}
}

func (c customerServiceLinkAcccessLogDo) Take() (*model.CustomerServiceLinkAcccessLog, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceLinkAcccessLog), nil
	}
}

func (c customerServiceLinkAcccessLogDo) Last() (*model.CustomerServiceLinkAcccessLog, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceLinkAcccessLog), nil
	}
}

func (c customerServiceLinkAcccessLogDo) Find() ([]*model.CustomerServiceLinkAcccessLog, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerServiceLinkAcccessLog), err
}

func (c customerServiceLinkAcccessLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerServiceLinkAcccessLog, err error) {
	buf := make([]*model.CustomerServiceLinkAcccessLog, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerServiceLinkAcccessLogDo) FindInBatches(result *[]*model.CustomerServiceLinkAcccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerServiceLinkAcccessLogDo) Attrs(attrs ...field.AssignExpr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerServiceLinkAcccessLogDo) Assign(attrs ...field.AssignExpr) ICustomerServiceLinkAcccessLogDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerServiceLinkAcccessLogDo) Joins(fields ...field.RelationField) ICustomerServiceLinkAcccessLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerServiceLinkAcccessLogDo) Preload(fields ...field.RelationField) ICustomerServiceLinkAcccessLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerServiceLinkAcccessLogDo) FirstOrInit() (*model.CustomerServiceLinkAcccessLog, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceLinkAcccessLog), nil
	}
}

func (c customerServiceLinkAcccessLogDo) FirstOrCreate() (*model.CustomerServiceLinkAcccessLog, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerServiceLinkAcccessLog), nil
	}
}

func (c customerServiceLinkAcccessLogDo) FindByPage(offset int, limit int) (result []*model.CustomerServiceLinkAcccessLog, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerServiceLinkAcccessLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerServiceLinkAcccessLogDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerServiceLinkAcccessLogDo) Delete(models ...*model.CustomerServiceLinkAcccessLog) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerServiceLinkAcccessLogDo) withDO(do gen.Dao) *customerServiceLinkAcccessLogDo {
	c.DO = *do.(*gen.DO)
	return c
}
