// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newTransactionsCopy1(db *gorm.DB, opts ...gen.DOOption) transactionsCopy1 {
	_transactionsCopy1 := transactionsCopy1{}

	_transactionsCopy1.transactionsCopy1Do.UseDB(db, opts...)
	_transactionsCopy1.transactionsCopy1Do.UseModel(&model.TransactionsCopy1{})

	tableName := _transactionsCopy1.transactionsCopy1Do.TableName()
	_transactionsCopy1.ALL = field.NewAsterisk(tableName)
	_transactionsCopy1.ID = field.NewInt64(tableName, "id")
	_transactionsCopy1.UserID = field.NewInt64(tableName, "user_id")
	_transactionsCopy1.Username = field.NewString(tableName, "username")
	_transactionsCopy1.IsTester = field.NewInt64(tableName, "is_tester")
	_transactionsCopy1.ParentID = field.NewInt64(tableName, "parent_id")
	_transactionsCopy1.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_transactionsCopy1.Amount = field.NewFloat64(tableName, "amount")
	_transactionsCopy1.TransFatherID = field.NewInt64(tableName, "trans_father_id")
	_transactionsCopy1.TransTypesID = field.NewInt64(tableName, "trans_types_id")
	_transactionsCopy1.TransTypesCnTitle = field.NewString(tableName, "trans_types_cn_title")
	_transactionsCopy1.TransTypesEnTitle = field.NewString(tableName, "trans_types_en_title")
	_transactionsCopy1.IsIncome = field.NewInt64(tableName, "is_income")
	_transactionsCopy1.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_transactionsCopy1.Money = field.NewFloat64(tableName, "money")
	_transactionsCopy1.GameCode = field.NewString(tableName, "game_code")
	_transactionsCopy1.Issue = field.NewString(tableName, "issue")
	_transactionsCopy1.GameName = field.NewString(tableName, "game_name")
	_transactionsCopy1.BillID = field.NewString(tableName, "bill_id")
	_transactionsCopy1.AdminID = field.NewInt64(tableName, "admin_id")
	_transactionsCopy1.Adminname = field.NewString(tableName, "adminname")
	_transactionsCopy1.IP = field.NewString(tableName, "ip")
	_transactionsCopy1.Status = field.NewInt64(tableName, "status")
	_transactionsCopy1.AppPlat = field.NewInt64(tableName, "app_plat")
	_transactionsCopy1.Remark = field.NewString(tableName, "remark")
	_transactionsCopy1.PayType = field.NewString(tableName, "pay_type")
	_transactionsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_transactionsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_transactionsCopy1.Description = field.NewString(tableName, "description")

	_transactionsCopy1.fillFieldMap()

	return _transactionsCopy1
}

type transactionsCopy1 struct {
	transactionsCopy1Do transactionsCopy1Do

	ALL               field.Asterisk
	ID                field.Int64
	UserID            field.Int64
	Username          field.String
	IsTester          field.Int64
	ParentID          field.Int64 // 上级id
	ForefatherIds     field.String
	Amount            field.Float64 // 用户当前交易金额
	TransFatherID     field.Int64   // 账变类型父类
	TransTypesID      field.Int64
	TransTypesCnTitle field.String
	TransTypesEnTitle field.String
	IsIncome          field.Int64 // 是否入款
	BeforeMoney       field.Float64
	Money             field.Float64 // 交易后金额
	GameCode          field.String  // 游戏game
	Issue             field.String
	GameName          field.String // 具体玩法
	BillID            field.String
	AdminID           field.Int64
	Adminname         field.String
	IP                field.String
	Status            field.Int64  // 状态：0已删除,1:成功
	AppPlat           field.Int64  // 1：综合 2：体育
	Remark            field.String // 备注
	PayType           field.String // 支付类型
	CreatedAt         field.Field  // 交易时间
	UpdatedAt         field.Field
	Description       field.String // 转账说明

	fieldMap map[string]field.Expr
}

func (t transactionsCopy1) Table(newTableName string) *transactionsCopy1 {
	t.transactionsCopy1Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionsCopy1) As(alias string) *transactionsCopy1 {
	t.transactionsCopy1Do.DO = *(t.transactionsCopy1Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionsCopy1) updateTableName(table string) *transactionsCopy1 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UserID = field.NewInt64(table, "user_id")
	t.Username = field.NewString(table, "username")
	t.IsTester = field.NewInt64(table, "is_tester")
	t.ParentID = field.NewInt64(table, "parent_id")
	t.ForefatherIds = field.NewString(table, "forefather_ids")
	t.Amount = field.NewFloat64(table, "amount")
	t.TransFatherID = field.NewInt64(table, "trans_father_id")
	t.TransTypesID = field.NewInt64(table, "trans_types_id")
	t.TransTypesCnTitle = field.NewString(table, "trans_types_cn_title")
	t.TransTypesEnTitle = field.NewString(table, "trans_types_en_title")
	t.IsIncome = field.NewInt64(table, "is_income")
	t.BeforeMoney = field.NewFloat64(table, "before_money")
	t.Money = field.NewFloat64(table, "money")
	t.GameCode = field.NewString(table, "game_code")
	t.Issue = field.NewString(table, "issue")
	t.GameName = field.NewString(table, "game_name")
	t.BillID = field.NewString(table, "bill_id")
	t.AdminID = field.NewInt64(table, "admin_id")
	t.Adminname = field.NewString(table, "adminname")
	t.IP = field.NewString(table, "ip")
	t.Status = field.NewInt64(table, "status")
	t.AppPlat = field.NewInt64(table, "app_plat")
	t.Remark = field.NewString(table, "remark")
	t.PayType = field.NewString(table, "pay_type")
	t.CreatedAt = field.NewField(table, "created_at")
	t.UpdatedAt = field.NewField(table, "updated_at")
	t.Description = field.NewString(table, "description")

	t.fillFieldMap()

	return t
}

func (t *transactionsCopy1) WithContext(ctx context.Context) ITransactionsCopy1Do {
	return t.transactionsCopy1Do.WithContext(ctx)
}

func (t transactionsCopy1) TableName() string { return t.transactionsCopy1Do.TableName() }

func (t transactionsCopy1) Alias() string { return t.transactionsCopy1Do.Alias() }

func (t transactionsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return t.transactionsCopy1Do.Columns(cols...)
}

func (t *transactionsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionsCopy1) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 28)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["username"] = t.Username
	t.fieldMap["is_tester"] = t.IsTester
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["forefather_ids"] = t.ForefatherIds
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["trans_father_id"] = t.TransFatherID
	t.fieldMap["trans_types_id"] = t.TransTypesID
	t.fieldMap["trans_types_cn_title"] = t.TransTypesCnTitle
	t.fieldMap["trans_types_en_title"] = t.TransTypesEnTitle
	t.fieldMap["is_income"] = t.IsIncome
	t.fieldMap["before_money"] = t.BeforeMoney
	t.fieldMap["money"] = t.Money
	t.fieldMap["game_code"] = t.GameCode
	t.fieldMap["issue"] = t.Issue
	t.fieldMap["game_name"] = t.GameName
	t.fieldMap["bill_id"] = t.BillID
	t.fieldMap["admin_id"] = t.AdminID
	t.fieldMap["adminname"] = t.Adminname
	t.fieldMap["ip"] = t.IP
	t.fieldMap["status"] = t.Status
	t.fieldMap["app_plat"] = t.AppPlat
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["pay_type"] = t.PayType
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["description"] = t.Description
}

func (t transactionsCopy1) clone(db *gorm.DB) transactionsCopy1 {
	t.transactionsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionsCopy1) replaceDB(db *gorm.DB) transactionsCopy1 {
	t.transactionsCopy1Do.ReplaceDB(db)
	return t
}

type transactionsCopy1Do struct{ gen.DO }

type ITransactionsCopy1Do interface {
	gen.SubQuery
	Debug() ITransactionsCopy1Do
	WithContext(ctx context.Context) ITransactionsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionsCopy1Do
	WriteDB() ITransactionsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionsCopy1Do
	Not(conds ...gen.Condition) ITransactionsCopy1Do
	Or(conds ...gen.Condition) ITransactionsCopy1Do
	Select(conds ...field.Expr) ITransactionsCopy1Do
	Where(conds ...gen.Condition) ITransactionsCopy1Do
	Order(conds ...field.Expr) ITransactionsCopy1Do
	Distinct(cols ...field.Expr) ITransactionsCopy1Do
	Omit(cols ...field.Expr) ITransactionsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do
	Group(cols ...field.Expr) ITransactionsCopy1Do
	Having(conds ...gen.Condition) ITransactionsCopy1Do
	Limit(limit int) ITransactionsCopy1Do
	Offset(offset int) ITransactionsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionsCopy1Do
	Unscoped() ITransactionsCopy1Do
	Create(values ...*model.TransactionsCopy1) error
	CreateInBatches(values []*model.TransactionsCopy1, batchSize int) error
	Save(values ...*model.TransactionsCopy1) error
	First() (*model.TransactionsCopy1, error)
	Take() (*model.TransactionsCopy1, error)
	Last() (*model.TransactionsCopy1, error)
	Find() ([]*model.TransactionsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionsCopy1, err error)
	FindInBatches(result *[]*model.TransactionsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionsCopy1Do
	Assign(attrs ...field.AssignExpr) ITransactionsCopy1Do
	Joins(fields ...field.RelationField) ITransactionsCopy1Do
	Preload(fields ...field.RelationField) ITransactionsCopy1Do
	FirstOrInit() (*model.TransactionsCopy1, error)
	FirstOrCreate() (*model.TransactionsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.TransactionsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionsCopy1Do) Debug() ITransactionsCopy1Do {
	return t.withDO(t.DO.Debug())
}

func (t transactionsCopy1Do) WithContext(ctx context.Context) ITransactionsCopy1Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionsCopy1Do) ReadDB() ITransactionsCopy1Do {
	return t.Clauses(dbresolver.Read)
}

func (t transactionsCopy1Do) WriteDB() ITransactionsCopy1Do {
	return t.Clauses(dbresolver.Write)
}

func (t transactionsCopy1Do) Session(config *gorm.Session) ITransactionsCopy1Do {
	return t.withDO(t.DO.Session(config))
}

func (t transactionsCopy1Do) Clauses(conds ...clause.Expression) ITransactionsCopy1Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionsCopy1Do) Returning(value interface{}, columns ...string) ITransactionsCopy1Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionsCopy1Do) Not(conds ...gen.Condition) ITransactionsCopy1Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionsCopy1Do) Or(conds ...gen.Condition) ITransactionsCopy1Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionsCopy1Do) Select(conds ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionsCopy1Do) Where(conds ...gen.Condition) ITransactionsCopy1Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionsCopy1Do) Order(conds ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionsCopy1Do) Distinct(cols ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionsCopy1Do) Omit(cols ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionsCopy1Do) Join(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionsCopy1Do) Group(cols ...field.Expr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionsCopy1Do) Having(conds ...gen.Condition) ITransactionsCopy1Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionsCopy1Do) Limit(limit int) ITransactionsCopy1Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionsCopy1Do) Offset(offset int) ITransactionsCopy1Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionsCopy1Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionsCopy1Do) Unscoped() ITransactionsCopy1Do {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionsCopy1Do) Create(values ...*model.TransactionsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionsCopy1Do) CreateInBatches(values []*model.TransactionsCopy1, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionsCopy1Do) Save(values ...*model.TransactionsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionsCopy1Do) First() (*model.TransactionsCopy1, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy1), nil
	}
}

func (t transactionsCopy1Do) Take() (*model.TransactionsCopy1, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy1), nil
	}
}

func (t transactionsCopy1Do) Last() (*model.TransactionsCopy1, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy1), nil
	}
}

func (t transactionsCopy1Do) Find() ([]*model.TransactionsCopy1, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionsCopy1), err
}

func (t transactionsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionsCopy1, err error) {
	buf := make([]*model.TransactionsCopy1, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionsCopy1Do) FindInBatches(result *[]*model.TransactionsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionsCopy1Do) Attrs(attrs ...field.AssignExpr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionsCopy1Do) Assign(attrs ...field.AssignExpr) ITransactionsCopy1Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionsCopy1Do) Joins(fields ...field.RelationField) ITransactionsCopy1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionsCopy1Do) Preload(fields ...field.RelationField) ITransactionsCopy1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionsCopy1Do) FirstOrInit() (*model.TransactionsCopy1, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy1), nil
	}
}

func (t transactionsCopy1Do) FirstOrCreate() (*model.TransactionsCopy1, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionsCopy1), nil
	}
}

func (t transactionsCopy1Do) FindByPage(offset int, limit int) (result []*model.TransactionsCopy1, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionsCopy1Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionsCopy1Do) Delete(models ...*model.TransactionsCopy1) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionsCopy1Do) withDO(do gen.Dao) *transactionsCopy1Do {
	t.DO = *do.(*gen.DO)
	return t
}
