// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLiveRedPacketRecord(db *gorm.DB, opts ...gen.DOOption) liveRedPacketRecord {
	_liveRedPacketRecord := liveRedPacketRecord{}

	_liveRedPacketRecord.liveRedPacketRecordDo.UseDB(db, opts...)
	_liveRedPacketRecord.liveRedPacketRecordDo.UseModel(&model.LiveRedPacketRecord{})

	tableName := _liveRedPacketRecord.liveRedPacketRecordDo.TableName()
	_liveRedPacketRecord.ALL = field.NewAsterisk(tableName)
	_liveRedPacketRecord.ID = field.NewInt64(tableName, "id")
	_liveRedPacketRecord.PacketID = field.NewInt64(tableName, "packet_id")
	_liveRedPacketRecord.UserID = field.NewInt64(tableName, "user_id")
	_liveRedPacketRecord.Username = field.NewString(tableName, "username")
	_liveRedPacketRecord.Amount = field.NewFloat64(tableName, "amount")
	_liveRedPacketRecord.CreatedAt = field.NewField(tableName, "created_at")
	_liveRedPacketRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_liveRedPacketRecord.fillFieldMap()

	return _liveRedPacketRecord
}

// liveRedPacketRecord 红包领取记录表
type liveRedPacketRecord struct {
	liveRedPacketRecordDo liveRedPacketRecordDo

	ALL       field.Asterisk
	ID        field.Int64
	PacketID  field.Int64   // 红包id
	UserID    field.Int64   // 用户id
	Username  field.String  // 用户名
	Amount    field.Float64 // 领取红包金额
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (l liveRedPacketRecord) Table(newTableName string) *liveRedPacketRecord {
	l.liveRedPacketRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveRedPacketRecord) As(alias string) *liveRedPacketRecord {
	l.liveRedPacketRecordDo.DO = *(l.liveRedPacketRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveRedPacketRecord) updateTableName(table string) *liveRedPacketRecord {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.PacketID = field.NewInt64(table, "packet_id")
	l.UserID = field.NewInt64(table, "user_id")
	l.Username = field.NewString(table, "username")
	l.Amount = field.NewFloat64(table, "amount")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *liveRedPacketRecord) WithContext(ctx context.Context) ILiveRedPacketRecordDo {
	return l.liveRedPacketRecordDo.WithContext(ctx)
}

func (l liveRedPacketRecord) TableName() string { return l.liveRedPacketRecordDo.TableName() }

func (l liveRedPacketRecord) Alias() string { return l.liveRedPacketRecordDo.Alias() }

func (l liveRedPacketRecord) Columns(cols ...field.Expr) gen.Columns {
	return l.liveRedPacketRecordDo.Columns(cols...)
}

func (l *liveRedPacketRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveRedPacketRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["packet_id"] = l.PacketID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["username"] = l.Username
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l liveRedPacketRecord) clone(db *gorm.DB) liveRedPacketRecord {
	l.liveRedPacketRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveRedPacketRecord) replaceDB(db *gorm.DB) liveRedPacketRecord {
	l.liveRedPacketRecordDo.ReplaceDB(db)
	return l
}

type liveRedPacketRecordDo struct{ gen.DO }

type ILiveRedPacketRecordDo interface {
	gen.SubQuery
	Debug() ILiveRedPacketRecordDo
	WithContext(ctx context.Context) ILiveRedPacketRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveRedPacketRecordDo
	WriteDB() ILiveRedPacketRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveRedPacketRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveRedPacketRecordDo
	Not(conds ...gen.Condition) ILiveRedPacketRecordDo
	Or(conds ...gen.Condition) ILiveRedPacketRecordDo
	Select(conds ...field.Expr) ILiveRedPacketRecordDo
	Where(conds ...gen.Condition) ILiveRedPacketRecordDo
	Order(conds ...field.Expr) ILiveRedPacketRecordDo
	Distinct(cols ...field.Expr) ILiveRedPacketRecordDo
	Omit(cols ...field.Expr) ILiveRedPacketRecordDo
	Join(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo
	Group(cols ...field.Expr) ILiveRedPacketRecordDo
	Having(conds ...gen.Condition) ILiveRedPacketRecordDo
	Limit(limit int) ILiveRedPacketRecordDo
	Offset(offset int) ILiveRedPacketRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRedPacketRecordDo
	Unscoped() ILiveRedPacketRecordDo
	Create(values ...*model.LiveRedPacketRecord) error
	CreateInBatches(values []*model.LiveRedPacketRecord, batchSize int) error
	Save(values ...*model.LiveRedPacketRecord) error
	First() (*model.LiveRedPacketRecord, error)
	Take() (*model.LiveRedPacketRecord, error)
	Last() (*model.LiveRedPacketRecord, error)
	Find() ([]*model.LiveRedPacketRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRedPacketRecord, err error)
	FindInBatches(result *[]*model.LiveRedPacketRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveRedPacketRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveRedPacketRecordDo
	Assign(attrs ...field.AssignExpr) ILiveRedPacketRecordDo
	Joins(fields ...field.RelationField) ILiveRedPacketRecordDo
	Preload(fields ...field.RelationField) ILiveRedPacketRecordDo
	FirstOrInit() (*model.LiveRedPacketRecord, error)
	FirstOrCreate() (*model.LiveRedPacketRecord, error)
	FindByPage(offset int, limit int) (result []*model.LiveRedPacketRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveRedPacketRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveRedPacketRecordDo) Debug() ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l liveRedPacketRecordDo) WithContext(ctx context.Context) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveRedPacketRecordDo) ReadDB() ILiveRedPacketRecordDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveRedPacketRecordDo) WriteDB() ILiveRedPacketRecordDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveRedPacketRecordDo) Session(config *gorm.Session) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveRedPacketRecordDo) Clauses(conds ...clause.Expression) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveRedPacketRecordDo) Returning(value interface{}, columns ...string) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveRedPacketRecordDo) Not(conds ...gen.Condition) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveRedPacketRecordDo) Or(conds ...gen.Condition) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveRedPacketRecordDo) Select(conds ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveRedPacketRecordDo) Where(conds ...gen.Condition) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveRedPacketRecordDo) Order(conds ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveRedPacketRecordDo) Distinct(cols ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveRedPacketRecordDo) Omit(cols ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveRedPacketRecordDo) Join(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveRedPacketRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveRedPacketRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveRedPacketRecordDo) Group(cols ...field.Expr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveRedPacketRecordDo) Having(conds ...gen.Condition) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveRedPacketRecordDo) Limit(limit int) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveRedPacketRecordDo) Offset(offset int) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveRedPacketRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveRedPacketRecordDo) Unscoped() ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveRedPacketRecordDo) Create(values ...*model.LiveRedPacketRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveRedPacketRecordDo) CreateInBatches(values []*model.LiveRedPacketRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveRedPacketRecordDo) Save(values ...*model.LiveRedPacketRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveRedPacketRecordDo) First() (*model.LiveRedPacketRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacketRecord), nil
	}
}

func (l liveRedPacketRecordDo) Take() (*model.LiveRedPacketRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacketRecord), nil
	}
}

func (l liveRedPacketRecordDo) Last() (*model.LiveRedPacketRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacketRecord), nil
	}
}

func (l liveRedPacketRecordDo) Find() ([]*model.LiveRedPacketRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveRedPacketRecord), err
}

func (l liveRedPacketRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRedPacketRecord, err error) {
	buf := make([]*model.LiveRedPacketRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveRedPacketRecordDo) FindInBatches(result *[]*model.LiveRedPacketRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveRedPacketRecordDo) Attrs(attrs ...field.AssignExpr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveRedPacketRecordDo) Assign(attrs ...field.AssignExpr) ILiveRedPacketRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveRedPacketRecordDo) Joins(fields ...field.RelationField) ILiveRedPacketRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveRedPacketRecordDo) Preload(fields ...field.RelationField) ILiveRedPacketRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveRedPacketRecordDo) FirstOrInit() (*model.LiveRedPacketRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacketRecord), nil
	}
}

func (l liveRedPacketRecordDo) FirstOrCreate() (*model.LiveRedPacketRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacketRecord), nil
	}
}

func (l liveRedPacketRecordDo) FindByPage(offset int, limit int) (result []*model.LiveRedPacketRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveRedPacketRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveRedPacketRecordDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveRedPacketRecordDo) Delete(models ...*model.LiveRedPacketRecord) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveRedPacketRecordDo) withDO(do gen.Dao) *liveRedPacketRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
