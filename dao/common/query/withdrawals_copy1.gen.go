// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newWithdrawalsCopy1(db *gorm.DB, opts ...gen.DOOption) withdrawalsCopy1 {
	_withdrawalsCopy1 := withdrawalsCopy1{}

	_withdrawalsCopy1.withdrawalsCopy1Do.UseDB(db, opts...)
	_withdrawalsCopy1.withdrawalsCopy1Do.UseModel(&model.WithdrawalsCopy1{})

	tableName := _withdrawalsCopy1.withdrawalsCopy1Do.TableName()
	_withdrawalsCopy1.ALL = field.NewAsterisk(tableName)
	_withdrawalsCopy1.ID = field.NewInt64(tableName, "id")
	_withdrawalsCopy1.BillNo = field.NewString(tableName, "bill_no")
	_withdrawalsCopy1.UserID = field.NewInt64(tableName, "user_id")
	_withdrawalsCopy1.Username = field.NewString(tableName, "username")
	_withdrawalsCopy1.ParentID = field.NewInt64(tableName, "parent_id")
	_withdrawalsCopy1.ParentName = field.NewString(tableName, "parent_name")
	_withdrawalsCopy1.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_withdrawalsCopy1.IsTester = field.NewInt64(tableName, "is_tester")
	_withdrawalsCopy1.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_withdrawalsCopy1.Amount = field.NewFloat64(tableName, "amount")
	_withdrawalsCopy1.Money = field.NewFloat64(tableName, "money")
	_withdrawalsCopy1.PayID = field.NewInt64(tableName, "pay_id")
	_withdrawalsCopy1.CardID = field.NewString(tableName, "card_id")
	_withdrawalsCopy1.PayName = field.NewString(tableName, "pay_name")
	_withdrawalsCopy1.RealName = field.NewString(tableName, "real_name")
	_withdrawalsCopy1.Status = field.NewInt64(tableName, "status")
	_withdrawalsCopy1.PayMode = field.NewInt64(tableName, "pay_mode")
	_withdrawalsCopy1.AutoOrderID = field.NewString(tableName, "auto_order_id")
	_withdrawalsCopy1.WithdrawalChannelType = field.NewInt64(tableName, "withdrawal_channel_type")
	_withdrawalsCopy1.WithdrawalChannelSubID = field.NewInt64(tableName, "withdrawal_channel_sub_id")
	_withdrawalsCopy1.BankType = field.NewInt64(tableName, "bank_type")
	_withdrawalsCopy1.ExRate = field.NewFloat64(tableName, "ex_rate")
	_withdrawalsCopy1.ExMoney = field.NewFloat64(tableName, "ex_money")
	_withdrawalsCopy1.Description = field.NewString(tableName, "description")
	_withdrawalsCopy1.CheckTime = field.NewField(tableName, "check_time")
	_withdrawalsCopy1.AdminID = field.NewInt64(tableName, "admin_id")
	_withdrawalsCopy1.AdminName = field.NewString(tableName, "admin_name")
	_withdrawalsCopy1.OperatorID = field.NewInt64(tableName, "operator_id")
	_withdrawalsCopy1.OperatorName = field.NewString(tableName, "operator_name")
	_withdrawalsCopy1.DealTime = field.NewField(tableName, "deal_time")
	_withdrawalsCopy1.IP = field.NewString(tableName, "ip")
	_withdrawalsCopy1.PayLevel = field.NewString(tableName, "pay_level")
	_withdrawalsCopy1.OtherFee = field.NewFloat64(tableName, "other_fee")
	_withdrawalsCopy1.HandlingFee = field.NewFloat64(tableName, "handling_fee")
	_withdrawalsCopy1.HandlingFeeRate = field.NewFloat64(tableName, "handling_fee_rate")
	_withdrawalsCopy1.GiftMoneyRate = field.NewFloat64(tableName, "gift_money_rate")
	_withdrawalsCopy1.GiftMoney = field.NewFloat64(tableName, "gift_money")
	_withdrawalsCopy1.Remark = field.NewString(tableName, "remark")
	_withdrawalsCopy1.UserRemark = field.NewString(tableName, "user_remark")
	_withdrawalsCopy1.VerifyRemark = field.NewString(tableName, "verify_remark")
	_withdrawalsCopy1.LockMoneyBefore = field.NewFloat64(tableName, "lock_money_before")
	_withdrawalsCopy1.LockMoneyAfter = field.NewFloat64(tableName, "lock_money_after")
	_withdrawalsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_withdrawalsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_withdrawalsCopy1.FinishedTime = field.NewField(tableName, "finished_time")
	_withdrawalsCopy1.TotalCount = field.NewInt64(tableName, "total_count")
	_withdrawalsCopy1.DailyCount = field.NewInt64(tableName, "daily_count")
	_withdrawalsCopy1.DoingAdminName = field.NewString(tableName, "doing_admin_name")
	_withdrawalsCopy1.DoingAdminID = field.NewInt64(tableName, "doing_admin_id")
	_withdrawalsCopy1.DoingCheckTime = field.NewField(tableName, "doing_check_time")
	_withdrawalsCopy1.IsManual = field.NewInt64(tableName, "is_manual")
	_withdrawalsCopy1.CallbackURL = field.NewString(tableName, "callback_url")
	_withdrawalsCopy1.CallbackParams = field.NewString(tableName, "callback_params")
	_withdrawalsCopy1.WithdrawType = field.NewInt64(tableName, "withdraw_type")
	_withdrawalsCopy1.Is3U = field.NewInt64(tableName, "is_3u")
	_withdrawalsCopy1.FirstRemarkAt = field.NewField(tableName, "first_remark_at")
	_withdrawalsCopy1.TransactionID = field.NewInt64(tableName, "transaction_id")
	_withdrawalsCopy1.FirstRemarkAdminName = field.NewString(tableName, "first_remark_admin_name")
	_withdrawalsCopy1.LastRemarkAdminName = field.NewString(tableName, "last_remark_admin_name")
	_withdrawalsCopy1.LastRemarkAt = field.NewField(tableName, "last_remark_at")
	_withdrawalsCopy1.VirtualNetworkVal = field.NewString(tableName, "virtual_network_val")
	_withdrawalsCopy1.AutoWithdrawalID = field.NewInt64(tableName, "auto_withdrawal_id")
	_withdrawalsCopy1.VerifyPeriod = field.NewInt64(tableName, "verify_period")
	_withdrawalsCopy1.YhWalletAddress = field.NewString(tableName, "yh_wallet_address")
	_withdrawalsCopy1.ThirdMerchantName = field.NewString(tableName, "third_merchant_name")
	_withdrawalsCopy1.MerchantNum = field.NewString(tableName, "merchant_num")
	_withdrawalsCopy1.ThirdTrackNum = field.NewString(tableName, "third_track_num")
	_withdrawalsCopy1.AutoRiskStatus = field.NewInt64(tableName, "auto_risk_status")
	_withdrawalsCopy1.AutoRiskAt = field.NewField(tableName, "auto_risk_at")
	_withdrawalsCopy1.AutoRiskIsPass = field.NewInt64(tableName, "auto_risk_is_pass")
	_withdrawalsCopy1.AutoRiskRemark = field.NewString(tableName, "auto_risk_remark")
	_withdrawalsCopy1.ManualRiskStatus = field.NewInt64(tableName, "manual_risk_status")
	_withdrawalsCopy1.ManualRiskAt = field.NewField(tableName, "manual_risk_at")
	_withdrawalsCopy1.ManualRiskRemark = field.NewString(tableName, "manual_risk_remark")
	_withdrawalsCopy1.ManualRiskAdminName = field.NewString(tableName, "manual_risk_admin_name")
	_withdrawalsCopy1.RiskDoingAdminName = field.NewString(tableName, "risk_doing_admin_name")
	_withdrawalsCopy1.RiskDoingCheckTime = field.NewField(tableName, "risk_doing_check_time")
	_withdrawalsCopy1.FundsType = field.NewInt64(tableName, "funds_type")

	_withdrawalsCopy1.fillFieldMap()

	return _withdrawalsCopy1
}

// withdrawalsCopy1 出款订单表
type withdrawalsCopy1 struct {
	withdrawalsCopy1Do withdrawalsCopy1Do

	ALL                    field.Asterisk
	ID                     field.Int64
	BillNo                 field.String  // 平台订单号
	UserID                 field.Int64   // 用户id
	Username               field.String  // 用户名
	ParentID               field.Int64   // 用户id
	ParentName             field.String  // 直属上级
	ForefatherIds          field.String  // 用户的所有上级以逗号分隔
	IsTester               field.Int64   // 0:非测试;1:测试账号
	BeforeMoney            field.Float64 // 交易前金额
	Amount                 field.Float64 // 交易金额
	Money                  field.Float64 // 交易后金额
	PayID                  field.Int64   // 具体的用户info中的id
	CardID                 field.String  // 支付卡号或者虚拟货币地址
	PayName                field.String  // 支付类型银行卡或者虚拟货币名称
	RealName               field.String  // 持卡姓名
	Status                 field.Int64   // 状态：0未处理（默认）,1:审核中,2充值成功,3:失败,4:已撤销,5:已拒绝
	PayMode                field.Int64   // 是否自动出款 0:人工 1:api 2:备用金
	AutoOrderID            field.String  // 自动出款订单id
	WithdrawalChannelType  field.Int64   // 提款通道类型值
	WithdrawalChannelSubID field.Int64   // 提款子通道id
	BankType               field.Int64   // 1:银行卡, 2:数字钱包
	ExRate                 field.Float64 // 汇率
	ExMoney                field.Float64 // 转换金额
	Description            field.String  // 附言
	CheckTime              field.Field   // 审核时间
	AdminID                field.Int64   // 审核人id
	AdminName              field.String  // 审核人
	OperatorID             field.Int64   // 操作人id
	OperatorName           field.String  // 操作人
	DealTime               field.Field   // 操作人处理时间
	IP                     field.String  // 取款人ip
	PayLevel               field.String  // 支付类别 多个以逗号分隔
	OtherFee               field.Float64 // 行政费
	HandlingFee            field.Float64 // 手续费(%)
	HandlingFeeRate        field.Float64 // 手续费比例
	GiftMoneyRate          field.Float64 // 优惠比例(%)
	GiftMoney              field.Float64 // 赠送的优惠金额
	Remark                 field.String  // 内部备注
	UserRemark             field.String  // 会员备注
	VerifyRemark           field.String  // 审核备注
	LockMoneyBefore        field.Float64 // 交易前冻结金额
	LockMoneyAfter         field.Float64 // 交易后冻结金额
	CreatedAt              field.Field
	UpdatedAt              field.Field
	FinishedTime           field.Field  // 订单完成时间
	TotalCount             field.Int64  // 总计统计次数
	DailyCount             field.Int64  // 每日统计次数
	DoingAdminName         field.String // 正审核人
	DoingAdminID           field.Int64  // 正审核人id
	DoingCheckTime         field.Field  // 正审核时间
	IsManual               field.Int64  // 是否是手动 0:自动 1:手动
	CallbackURL            field.String // 回调地址
	CallbackParams         field.String // 回调参数
	WithdrawType           field.Int64  // 1:bank, 2:USDT, 3:购宝, 4:GOPAY
	Is3U                   field.Int64  // 是否3u, 0:否, 1:是
	FirstRemarkAt          field.Field  // 第一次备注时间
	TransactionID          field.Int64  // 手动帐变id
	FirstRemarkAdminName   field.String // 一审核管理员
	LastRemarkAdminName    field.String // 终审核管理员
	LastRemarkAt           field.Field  // 终审时间
	VirtualNetworkVal      field.String // 虚拟货币网络类型
	AutoWithdrawalID       field.Int64  // 自动出款id
	VerifyPeriod           field.Int64  // 审核时间(出款时间-提款时间, 单位:秒)
	YhWalletAddress        field.String // 易汇錢包地址
	ThirdMerchantName      field.String // 三方商户名称
	MerchantNum            field.String // 商户编号
	ThirdTrackNum          field.String // 三方单号
	AutoRiskStatus         field.Int64  // 自动风控状态 1：未进行 2：进行中 3：成功 4：失败
	AutoRiskAt             field.Field  // 自动风控时间
	AutoRiskIsPass         field.Int64  // 自动风控是否通过 0：不通过 1：通过
	AutoRiskRemark         field.String // 自动风控备注
	ManualRiskStatus       field.Int64  // 风控审核状态 1：待审核 2：通过 3：拒绝
	ManualRiskAt           field.Field  // 风控审核时间
	ManualRiskRemark       field.String // 风控审核备注
	ManualRiskAdminName    field.String // 风控审核管理员
	RiskDoingAdminName     field.String // 风控正审管理员
	RiskDoingCheckTime     field.Field  // 风控正审时间
	FundsType              field.Int64  // 资金类型：1 rmb，2 usdt 3钱包

	fieldMap map[string]field.Expr
}

func (w withdrawalsCopy1) Table(newTableName string) *withdrawalsCopy1 {
	w.withdrawalsCopy1Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w withdrawalsCopy1) As(alias string) *withdrawalsCopy1 {
	w.withdrawalsCopy1Do.DO = *(w.withdrawalsCopy1Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *withdrawalsCopy1) updateTableName(table string) *withdrawalsCopy1 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.BillNo = field.NewString(table, "bill_no")
	w.UserID = field.NewInt64(table, "user_id")
	w.Username = field.NewString(table, "username")
	w.ParentID = field.NewInt64(table, "parent_id")
	w.ParentName = field.NewString(table, "parent_name")
	w.ForefatherIds = field.NewString(table, "forefather_ids")
	w.IsTester = field.NewInt64(table, "is_tester")
	w.BeforeMoney = field.NewFloat64(table, "before_money")
	w.Amount = field.NewFloat64(table, "amount")
	w.Money = field.NewFloat64(table, "money")
	w.PayID = field.NewInt64(table, "pay_id")
	w.CardID = field.NewString(table, "card_id")
	w.PayName = field.NewString(table, "pay_name")
	w.RealName = field.NewString(table, "real_name")
	w.Status = field.NewInt64(table, "status")
	w.PayMode = field.NewInt64(table, "pay_mode")
	w.AutoOrderID = field.NewString(table, "auto_order_id")
	w.WithdrawalChannelType = field.NewInt64(table, "withdrawal_channel_type")
	w.WithdrawalChannelSubID = field.NewInt64(table, "withdrawal_channel_sub_id")
	w.BankType = field.NewInt64(table, "bank_type")
	w.ExRate = field.NewFloat64(table, "ex_rate")
	w.ExMoney = field.NewFloat64(table, "ex_money")
	w.Description = field.NewString(table, "description")
	w.CheckTime = field.NewField(table, "check_time")
	w.AdminID = field.NewInt64(table, "admin_id")
	w.AdminName = field.NewString(table, "admin_name")
	w.OperatorID = field.NewInt64(table, "operator_id")
	w.OperatorName = field.NewString(table, "operator_name")
	w.DealTime = field.NewField(table, "deal_time")
	w.IP = field.NewString(table, "ip")
	w.PayLevel = field.NewString(table, "pay_level")
	w.OtherFee = field.NewFloat64(table, "other_fee")
	w.HandlingFee = field.NewFloat64(table, "handling_fee")
	w.HandlingFeeRate = field.NewFloat64(table, "handling_fee_rate")
	w.GiftMoneyRate = field.NewFloat64(table, "gift_money_rate")
	w.GiftMoney = field.NewFloat64(table, "gift_money")
	w.Remark = field.NewString(table, "remark")
	w.UserRemark = field.NewString(table, "user_remark")
	w.VerifyRemark = field.NewString(table, "verify_remark")
	w.LockMoneyBefore = field.NewFloat64(table, "lock_money_before")
	w.LockMoneyAfter = field.NewFloat64(table, "lock_money_after")
	w.CreatedAt = field.NewField(table, "created_at")
	w.UpdatedAt = field.NewField(table, "updated_at")
	w.FinishedTime = field.NewField(table, "finished_time")
	w.TotalCount = field.NewInt64(table, "total_count")
	w.DailyCount = field.NewInt64(table, "daily_count")
	w.DoingAdminName = field.NewString(table, "doing_admin_name")
	w.DoingAdminID = field.NewInt64(table, "doing_admin_id")
	w.DoingCheckTime = field.NewField(table, "doing_check_time")
	w.IsManual = field.NewInt64(table, "is_manual")
	w.CallbackURL = field.NewString(table, "callback_url")
	w.CallbackParams = field.NewString(table, "callback_params")
	w.WithdrawType = field.NewInt64(table, "withdraw_type")
	w.Is3U = field.NewInt64(table, "is_3u")
	w.FirstRemarkAt = field.NewField(table, "first_remark_at")
	w.TransactionID = field.NewInt64(table, "transaction_id")
	w.FirstRemarkAdminName = field.NewString(table, "first_remark_admin_name")
	w.LastRemarkAdminName = field.NewString(table, "last_remark_admin_name")
	w.LastRemarkAt = field.NewField(table, "last_remark_at")
	w.VirtualNetworkVal = field.NewString(table, "virtual_network_val")
	w.AutoWithdrawalID = field.NewInt64(table, "auto_withdrawal_id")
	w.VerifyPeriod = field.NewInt64(table, "verify_period")
	w.YhWalletAddress = field.NewString(table, "yh_wallet_address")
	w.ThirdMerchantName = field.NewString(table, "third_merchant_name")
	w.MerchantNum = field.NewString(table, "merchant_num")
	w.ThirdTrackNum = field.NewString(table, "third_track_num")
	w.AutoRiskStatus = field.NewInt64(table, "auto_risk_status")
	w.AutoRiskAt = field.NewField(table, "auto_risk_at")
	w.AutoRiskIsPass = field.NewInt64(table, "auto_risk_is_pass")
	w.AutoRiskRemark = field.NewString(table, "auto_risk_remark")
	w.ManualRiskStatus = field.NewInt64(table, "manual_risk_status")
	w.ManualRiskAt = field.NewField(table, "manual_risk_at")
	w.ManualRiskRemark = field.NewString(table, "manual_risk_remark")
	w.ManualRiskAdminName = field.NewString(table, "manual_risk_admin_name")
	w.RiskDoingAdminName = field.NewString(table, "risk_doing_admin_name")
	w.RiskDoingCheckTime = field.NewField(table, "risk_doing_check_time")
	w.FundsType = field.NewInt64(table, "funds_type")

	w.fillFieldMap()

	return w
}

func (w *withdrawalsCopy1) WithContext(ctx context.Context) IWithdrawalsCopy1Do {
	return w.withdrawalsCopy1Do.WithContext(ctx)
}

func (w withdrawalsCopy1) TableName() string { return w.withdrawalsCopy1Do.TableName() }

func (w withdrawalsCopy1) Alias() string { return w.withdrawalsCopy1Do.Alias() }

func (w withdrawalsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return w.withdrawalsCopy1Do.Columns(cols...)
}

func (w *withdrawalsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *withdrawalsCopy1) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 78)
	w.fieldMap["id"] = w.ID
	w.fieldMap["bill_no"] = w.BillNo
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["username"] = w.Username
	w.fieldMap["parent_id"] = w.ParentID
	w.fieldMap["parent_name"] = w.ParentName
	w.fieldMap["forefather_ids"] = w.ForefatherIds
	w.fieldMap["is_tester"] = w.IsTester
	w.fieldMap["before_money"] = w.BeforeMoney
	w.fieldMap["amount"] = w.Amount
	w.fieldMap["money"] = w.Money
	w.fieldMap["pay_id"] = w.PayID
	w.fieldMap["card_id"] = w.CardID
	w.fieldMap["pay_name"] = w.PayName
	w.fieldMap["real_name"] = w.RealName
	w.fieldMap["status"] = w.Status
	w.fieldMap["pay_mode"] = w.PayMode
	w.fieldMap["auto_order_id"] = w.AutoOrderID
	w.fieldMap["withdrawal_channel_type"] = w.WithdrawalChannelType
	w.fieldMap["withdrawal_channel_sub_id"] = w.WithdrawalChannelSubID
	w.fieldMap["bank_type"] = w.BankType
	w.fieldMap["ex_rate"] = w.ExRate
	w.fieldMap["ex_money"] = w.ExMoney
	w.fieldMap["description"] = w.Description
	w.fieldMap["check_time"] = w.CheckTime
	w.fieldMap["admin_id"] = w.AdminID
	w.fieldMap["admin_name"] = w.AdminName
	w.fieldMap["operator_id"] = w.OperatorID
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["deal_time"] = w.DealTime
	w.fieldMap["ip"] = w.IP
	w.fieldMap["pay_level"] = w.PayLevel
	w.fieldMap["other_fee"] = w.OtherFee
	w.fieldMap["handling_fee"] = w.HandlingFee
	w.fieldMap["handling_fee_rate"] = w.HandlingFeeRate
	w.fieldMap["gift_money_rate"] = w.GiftMoneyRate
	w.fieldMap["gift_money"] = w.GiftMoney
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["user_remark"] = w.UserRemark
	w.fieldMap["verify_remark"] = w.VerifyRemark
	w.fieldMap["lock_money_before"] = w.LockMoneyBefore
	w.fieldMap["lock_money_after"] = w.LockMoneyAfter
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["finished_time"] = w.FinishedTime
	w.fieldMap["total_count"] = w.TotalCount
	w.fieldMap["daily_count"] = w.DailyCount
	w.fieldMap["doing_admin_name"] = w.DoingAdminName
	w.fieldMap["doing_admin_id"] = w.DoingAdminID
	w.fieldMap["doing_check_time"] = w.DoingCheckTime
	w.fieldMap["is_manual"] = w.IsManual
	w.fieldMap["callback_url"] = w.CallbackURL
	w.fieldMap["callback_params"] = w.CallbackParams
	w.fieldMap["withdraw_type"] = w.WithdrawType
	w.fieldMap["is_3u"] = w.Is3U
	w.fieldMap["first_remark_at"] = w.FirstRemarkAt
	w.fieldMap["transaction_id"] = w.TransactionID
	w.fieldMap["first_remark_admin_name"] = w.FirstRemarkAdminName
	w.fieldMap["last_remark_admin_name"] = w.LastRemarkAdminName
	w.fieldMap["last_remark_at"] = w.LastRemarkAt
	w.fieldMap["virtual_network_val"] = w.VirtualNetworkVal
	w.fieldMap["auto_withdrawal_id"] = w.AutoWithdrawalID
	w.fieldMap["verify_period"] = w.VerifyPeriod
	w.fieldMap["yh_wallet_address"] = w.YhWalletAddress
	w.fieldMap["third_merchant_name"] = w.ThirdMerchantName
	w.fieldMap["merchant_num"] = w.MerchantNum
	w.fieldMap["third_track_num"] = w.ThirdTrackNum
	w.fieldMap["auto_risk_status"] = w.AutoRiskStatus
	w.fieldMap["auto_risk_at"] = w.AutoRiskAt
	w.fieldMap["auto_risk_is_pass"] = w.AutoRiskIsPass
	w.fieldMap["auto_risk_remark"] = w.AutoRiskRemark
	w.fieldMap["manual_risk_status"] = w.ManualRiskStatus
	w.fieldMap["manual_risk_at"] = w.ManualRiskAt
	w.fieldMap["manual_risk_remark"] = w.ManualRiskRemark
	w.fieldMap["manual_risk_admin_name"] = w.ManualRiskAdminName
	w.fieldMap["risk_doing_admin_name"] = w.RiskDoingAdminName
	w.fieldMap["risk_doing_check_time"] = w.RiskDoingCheckTime
	w.fieldMap["funds_type"] = w.FundsType
}

func (w withdrawalsCopy1) clone(db *gorm.DB) withdrawalsCopy1 {
	w.withdrawalsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w withdrawalsCopy1) replaceDB(db *gorm.DB) withdrawalsCopy1 {
	w.withdrawalsCopy1Do.ReplaceDB(db)
	return w
}

type withdrawalsCopy1Do struct{ gen.DO }

type IWithdrawalsCopy1Do interface {
	gen.SubQuery
	Debug() IWithdrawalsCopy1Do
	WithContext(ctx context.Context) IWithdrawalsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWithdrawalsCopy1Do
	WriteDB() IWithdrawalsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWithdrawalsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWithdrawalsCopy1Do
	Not(conds ...gen.Condition) IWithdrawalsCopy1Do
	Or(conds ...gen.Condition) IWithdrawalsCopy1Do
	Select(conds ...field.Expr) IWithdrawalsCopy1Do
	Where(conds ...gen.Condition) IWithdrawalsCopy1Do
	Order(conds ...field.Expr) IWithdrawalsCopy1Do
	Distinct(cols ...field.Expr) IWithdrawalsCopy1Do
	Omit(cols ...field.Expr) IWithdrawalsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do
	Group(cols ...field.Expr) IWithdrawalsCopy1Do
	Having(conds ...gen.Condition) IWithdrawalsCopy1Do
	Limit(limit int) IWithdrawalsCopy1Do
	Offset(offset int) IWithdrawalsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalsCopy1Do
	Unscoped() IWithdrawalsCopy1Do
	Create(values ...*model.WithdrawalsCopy1) error
	CreateInBatches(values []*model.WithdrawalsCopy1, batchSize int) error
	Save(values ...*model.WithdrawalsCopy1) error
	First() (*model.WithdrawalsCopy1, error)
	Take() (*model.WithdrawalsCopy1, error)
	Last() (*model.WithdrawalsCopy1, error)
	Find() ([]*model.WithdrawalsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalsCopy1, err error)
	FindInBatches(result *[]*model.WithdrawalsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WithdrawalsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWithdrawalsCopy1Do
	Assign(attrs ...field.AssignExpr) IWithdrawalsCopy1Do
	Joins(fields ...field.RelationField) IWithdrawalsCopy1Do
	Preload(fields ...field.RelationField) IWithdrawalsCopy1Do
	FirstOrInit() (*model.WithdrawalsCopy1, error)
	FirstOrCreate() (*model.WithdrawalsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.WithdrawalsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWithdrawalsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w withdrawalsCopy1Do) Debug() IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Debug())
}

func (w withdrawalsCopy1Do) WithContext(ctx context.Context) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w withdrawalsCopy1Do) ReadDB() IWithdrawalsCopy1Do {
	return w.Clauses(dbresolver.Read)
}

func (w withdrawalsCopy1Do) WriteDB() IWithdrawalsCopy1Do {
	return w.Clauses(dbresolver.Write)
}

func (w withdrawalsCopy1Do) Session(config *gorm.Session) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Session(config))
}

func (w withdrawalsCopy1Do) Clauses(conds ...clause.Expression) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w withdrawalsCopy1Do) Returning(value interface{}, columns ...string) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w withdrawalsCopy1Do) Not(conds ...gen.Condition) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w withdrawalsCopy1Do) Or(conds ...gen.Condition) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w withdrawalsCopy1Do) Select(conds ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w withdrawalsCopy1Do) Where(conds ...gen.Condition) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w withdrawalsCopy1Do) Order(conds ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w withdrawalsCopy1Do) Distinct(cols ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w withdrawalsCopy1Do) Omit(cols ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w withdrawalsCopy1Do) Join(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w withdrawalsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w withdrawalsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w withdrawalsCopy1Do) Group(cols ...field.Expr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w withdrawalsCopy1Do) Having(conds ...gen.Condition) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w withdrawalsCopy1Do) Limit(limit int) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w withdrawalsCopy1Do) Offset(offset int) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w withdrawalsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w withdrawalsCopy1Do) Unscoped() IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Unscoped())
}

func (w withdrawalsCopy1Do) Create(values ...*model.WithdrawalsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w withdrawalsCopy1Do) CreateInBatches(values []*model.WithdrawalsCopy1, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w withdrawalsCopy1Do) Save(values ...*model.WithdrawalsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w withdrawalsCopy1Do) First() (*model.WithdrawalsCopy1, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalsCopy1), nil
	}
}

func (w withdrawalsCopy1Do) Take() (*model.WithdrawalsCopy1, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalsCopy1), nil
	}
}

func (w withdrawalsCopy1Do) Last() (*model.WithdrawalsCopy1, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalsCopy1), nil
	}
}

func (w withdrawalsCopy1Do) Find() ([]*model.WithdrawalsCopy1, error) {
	result, err := w.DO.Find()
	return result.([]*model.WithdrawalsCopy1), err
}

func (w withdrawalsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WithdrawalsCopy1, err error) {
	buf := make([]*model.WithdrawalsCopy1, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w withdrawalsCopy1Do) FindInBatches(result *[]*model.WithdrawalsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w withdrawalsCopy1Do) Attrs(attrs ...field.AssignExpr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w withdrawalsCopy1Do) Assign(attrs ...field.AssignExpr) IWithdrawalsCopy1Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w withdrawalsCopy1Do) Joins(fields ...field.RelationField) IWithdrawalsCopy1Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w withdrawalsCopy1Do) Preload(fields ...field.RelationField) IWithdrawalsCopy1Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w withdrawalsCopy1Do) FirstOrInit() (*model.WithdrawalsCopy1, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalsCopy1), nil
	}
}

func (w withdrawalsCopy1Do) FirstOrCreate() (*model.WithdrawalsCopy1, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WithdrawalsCopy1), nil
	}
}

func (w withdrawalsCopy1Do) FindByPage(offset int, limit int) (result []*model.WithdrawalsCopy1, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w withdrawalsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w withdrawalsCopy1Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w withdrawalsCopy1Do) Delete(models ...*model.WithdrawalsCopy1) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *withdrawalsCopy1Do) withDO(do gen.Dao) *withdrawalsCopy1Do {
	w.DO = *do.(*gen.DO)
	return w
}
