// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserLevelVipsReward(db *gorm.DB, opts ...gen.DOOption) userLevelVipsReward {
	_userLevelVipsReward := userLevelVipsReward{}

	_userLevelVipsReward.userLevelVipsRewardDo.UseDB(db, opts...)
	_userLevelVipsReward.userLevelVipsRewardDo.UseModel(&model.UserLevelVipsReward{})

	tableName := _userLevelVipsReward.userLevelVipsRewardDo.TableName()
	_userLevelVipsReward.ALL = field.NewAsterisk(tableName)
	_userLevelVipsReward.ID = field.NewInt64(tableName, "id")
	_userLevelVipsReward.UserLevelID = field.NewInt64(tableName, "user_level_id")
	_userLevelVipsReward.UserVipsRewardID = field.NewInt64(tableName, "user_vips_reward_id")
	_userLevelVipsReward.IsOpen = field.NewInt64(tableName, "is_open")
	_userLevelVipsReward.CreatedAt = field.NewField(tableName, "created_at")
	_userLevelVipsReward.UpdatedAt = field.NewField(tableName, "updated_at")

	_userLevelVipsReward.fillFieldMap()

	return _userLevelVipsReward
}

// userLevelVipsReward vip级别与奖品对应表
type userLevelVipsReward struct {
	userLevelVipsRewardDo userLevelVipsRewardDo

	ALL              field.Asterisk
	ID               field.Int64
	UserLevelID      field.Int64 // user_levels 的id
	UserVipsRewardID field.Int64 // user_vips_rewards 的id
	IsOpen           field.Int64 // 是否开启0:否;1:是
	CreatedAt        field.Field
	UpdatedAt        field.Field

	fieldMap map[string]field.Expr
}

func (u userLevelVipsReward) Table(newTableName string) *userLevelVipsReward {
	u.userLevelVipsRewardDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLevelVipsReward) As(alias string) *userLevelVipsReward {
	u.userLevelVipsRewardDo.DO = *(u.userLevelVipsRewardDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLevelVipsReward) updateTableName(table string) *userLevelVipsReward {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserLevelID = field.NewInt64(table, "user_level_id")
	u.UserVipsRewardID = field.NewInt64(table, "user_vips_reward_id")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userLevelVipsReward) WithContext(ctx context.Context) IUserLevelVipsRewardDo {
	return u.userLevelVipsRewardDo.WithContext(ctx)
}

func (u userLevelVipsReward) TableName() string { return u.userLevelVipsRewardDo.TableName() }

func (u userLevelVipsReward) Alias() string { return u.userLevelVipsRewardDo.Alias() }

func (u userLevelVipsReward) Columns(cols ...field.Expr) gen.Columns {
	return u.userLevelVipsRewardDo.Columns(cols...)
}

func (u *userLevelVipsReward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLevelVipsReward) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_level_id"] = u.UserLevelID
	u.fieldMap["user_vips_reward_id"] = u.UserVipsRewardID
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userLevelVipsReward) clone(db *gorm.DB) userLevelVipsReward {
	u.userLevelVipsRewardDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLevelVipsReward) replaceDB(db *gorm.DB) userLevelVipsReward {
	u.userLevelVipsRewardDo.ReplaceDB(db)
	return u
}

type userLevelVipsRewardDo struct{ gen.DO }

type IUserLevelVipsRewardDo interface {
	gen.SubQuery
	Debug() IUserLevelVipsRewardDo
	WithContext(ctx context.Context) IUserLevelVipsRewardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLevelVipsRewardDo
	WriteDB() IUserLevelVipsRewardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLevelVipsRewardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLevelVipsRewardDo
	Not(conds ...gen.Condition) IUserLevelVipsRewardDo
	Or(conds ...gen.Condition) IUserLevelVipsRewardDo
	Select(conds ...field.Expr) IUserLevelVipsRewardDo
	Where(conds ...gen.Condition) IUserLevelVipsRewardDo
	Order(conds ...field.Expr) IUserLevelVipsRewardDo
	Distinct(cols ...field.Expr) IUserLevelVipsRewardDo
	Omit(cols ...field.Expr) IUserLevelVipsRewardDo
	Join(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo
	Group(cols ...field.Expr) IUserLevelVipsRewardDo
	Having(conds ...gen.Condition) IUserLevelVipsRewardDo
	Limit(limit int) IUserLevelVipsRewardDo
	Offset(offset int) IUserLevelVipsRewardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLevelVipsRewardDo
	Unscoped() IUserLevelVipsRewardDo
	Create(values ...*model.UserLevelVipsReward) error
	CreateInBatches(values []*model.UserLevelVipsReward, batchSize int) error
	Save(values ...*model.UserLevelVipsReward) error
	First() (*model.UserLevelVipsReward, error)
	Take() (*model.UserLevelVipsReward, error)
	Last() (*model.UserLevelVipsReward, error)
	Find() ([]*model.UserLevelVipsReward, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLevelVipsReward, err error)
	FindInBatches(result *[]*model.UserLevelVipsReward, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLevelVipsReward) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLevelVipsRewardDo
	Assign(attrs ...field.AssignExpr) IUserLevelVipsRewardDo
	Joins(fields ...field.RelationField) IUserLevelVipsRewardDo
	Preload(fields ...field.RelationField) IUserLevelVipsRewardDo
	FirstOrInit() (*model.UserLevelVipsReward, error)
	FirstOrCreate() (*model.UserLevelVipsReward, error)
	FindByPage(offset int, limit int) (result []*model.UserLevelVipsReward, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLevelVipsRewardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLevelVipsRewardDo) Debug() IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Debug())
}

func (u userLevelVipsRewardDo) WithContext(ctx context.Context) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLevelVipsRewardDo) ReadDB() IUserLevelVipsRewardDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLevelVipsRewardDo) WriteDB() IUserLevelVipsRewardDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLevelVipsRewardDo) Session(config *gorm.Session) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLevelVipsRewardDo) Clauses(conds ...clause.Expression) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLevelVipsRewardDo) Returning(value interface{}, columns ...string) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLevelVipsRewardDo) Not(conds ...gen.Condition) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLevelVipsRewardDo) Or(conds ...gen.Condition) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLevelVipsRewardDo) Select(conds ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLevelVipsRewardDo) Where(conds ...gen.Condition) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLevelVipsRewardDo) Order(conds ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLevelVipsRewardDo) Distinct(cols ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLevelVipsRewardDo) Omit(cols ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLevelVipsRewardDo) Join(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLevelVipsRewardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLevelVipsRewardDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLevelVipsRewardDo) Group(cols ...field.Expr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLevelVipsRewardDo) Having(conds ...gen.Condition) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLevelVipsRewardDo) Limit(limit int) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLevelVipsRewardDo) Offset(offset int) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLevelVipsRewardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLevelVipsRewardDo) Unscoped() IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLevelVipsRewardDo) Create(values ...*model.UserLevelVipsReward) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLevelVipsRewardDo) CreateInBatches(values []*model.UserLevelVipsReward, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLevelVipsRewardDo) Save(values ...*model.UserLevelVipsReward) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLevelVipsRewardDo) First() (*model.UserLevelVipsReward, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVipsReward), nil
	}
}

func (u userLevelVipsRewardDo) Take() (*model.UserLevelVipsReward, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVipsReward), nil
	}
}

func (u userLevelVipsRewardDo) Last() (*model.UserLevelVipsReward, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVipsReward), nil
	}
}

func (u userLevelVipsRewardDo) Find() ([]*model.UserLevelVipsReward, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLevelVipsReward), err
}

func (u userLevelVipsRewardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLevelVipsReward, err error) {
	buf := make([]*model.UserLevelVipsReward, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLevelVipsRewardDo) FindInBatches(result *[]*model.UserLevelVipsReward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLevelVipsRewardDo) Attrs(attrs ...field.AssignExpr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLevelVipsRewardDo) Assign(attrs ...field.AssignExpr) IUserLevelVipsRewardDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLevelVipsRewardDo) Joins(fields ...field.RelationField) IUserLevelVipsRewardDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLevelVipsRewardDo) Preload(fields ...field.RelationField) IUserLevelVipsRewardDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLevelVipsRewardDo) FirstOrInit() (*model.UserLevelVipsReward, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVipsReward), nil
	}
}

func (u userLevelVipsRewardDo) FirstOrCreate() (*model.UserLevelVipsReward, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevelVipsReward), nil
	}
}

func (u userLevelVipsRewardDo) FindByPage(offset int, limit int) (result []*model.UserLevelVipsReward, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLevelVipsRewardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLevelVipsRewardDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLevelVipsRewardDo) Delete(models ...*model.UserLevelVipsReward) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLevelVipsRewardDo) withDO(do gen.Dao) *userLevelVipsRewardDo {
	u.DO = *do.(*gen.DO)
	return u
}
