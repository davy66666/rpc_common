// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newPromotionUserRewardsCopy1(db *gorm.DB, opts ...gen.DOOption) promotionUserRewardsCopy1 {
	_promotionUserRewardsCopy1 := promotionUserRewardsCopy1{}

	_promotionUserRewardsCopy1.promotionUserRewardsCopy1Do.UseDB(db, opts...)
	_promotionUserRewardsCopy1.promotionUserRewardsCopy1Do.UseModel(&model.PromotionUserRewardsCopy1{})

	tableName := _promotionUserRewardsCopy1.promotionUserRewardsCopy1Do.TableName()
	_promotionUserRewardsCopy1.ALL = field.NewAsterisk(tableName)
	_promotionUserRewardsCopy1.ID = field.NewInt64(tableName, "id")
	_promotionUserRewardsCopy1.PromotionID = field.NewInt64(tableName, "promotion_id")
	_promotionUserRewardsCopy1.StartDate = field.NewTime(tableName, "start_date")
	_promotionUserRewardsCopy1.EndDate = field.NewTime(tableName, "end_date")
	_promotionUserRewardsCopy1.UserID = field.NewInt64(tableName, "user_id")
	_promotionUserRewardsCopy1.Username = field.NewString(tableName, "username")
	_promotionUserRewardsCopy1.ParentID = field.NewInt64(tableName, "parent_id")
	_promotionUserRewardsCopy1.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_promotionUserRewardsCopy1.Config = field.NewString(tableName, "config")
	_promotionUserRewardsCopy1.CalData = field.NewString(tableName, "cal_data")
	_promotionUserRewardsCopy1.AuditedAt = field.NewField(tableName, "audited_at")
	_promotionUserRewardsCopy1.AuditedAdminName = field.NewString(tableName, "audited_admin_name")
	_promotionUserRewardsCopy1.ClaimedAt = field.NewField(tableName, "claimed_at")
	_promotionUserRewardsCopy1.SentAt = field.NewField(tableName, "sent_at")
	_promotionUserRewardsCopy1.Prize = field.NewFloat64(tableName, "prize")
	_promotionUserRewardsCopy1.IsCal = field.NewInt64(tableName, "is_cal")
	_promotionUserRewardsCopy1.Status = field.NewInt64(tableName, "status")
	_promotionUserRewardsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_promotionUserRewardsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_promotionUserRewardsCopy1.Type = field.NewInt64(tableName, "type")
	_promotionUserRewardsCopy1.SubType = field.NewInt64(tableName, "sub_type")
	_promotionUserRewardsCopy1.RealName = field.NewString(tableName, "real_name")
	_promotionUserRewardsCopy1.SendScheme = field.NewString(tableName, "send_scheme")
	_promotionUserRewardsCopy1.IsEnter = field.NewInt64(tableName, "is_enter")
	_promotionUserRewardsCopy1.ClaimExpireDate = field.NewTime(tableName, "claim_expire_date")
	_promotionUserRewardsCopy1.ExcludeSubType = field.NewString(tableName, "exclude_sub_type")
	_promotionUserRewardsCopy1.Remark = field.NewString(tableName, "remark")
	_promotionUserRewardsCopy1.RiskStatus = field.NewInt64(tableName, "risk_status")
	_promotionUserRewardsCopy1.RiskAt = field.NewField(tableName, "risk_at")
	_promotionUserRewardsCopy1.RiskIsPass = field.NewInt64(tableName, "risk_is_pass")
	_promotionUserRewardsCopy1.RiskRemark = field.NewString(tableName, "risk_remark")

	_promotionUserRewardsCopy1.fillFieldMap()

	return _promotionUserRewardsCopy1
}

type promotionUserRewardsCopy1 struct {
	promotionUserRewardsCopy1Do promotionUserRewardsCopy1Do

	ALL              field.Asterisk
	ID               field.Int64
	PromotionID      field.Int64   // 优惠id
	StartDate        field.Time    // 周期开始时间
	EndDate          field.Time    // 周期结束时间
	UserID           field.Int64   // 会员id
	Username         field.String  // 会员名称
	ParentID         field.Int64   // 上级id
	ForefatherIds    field.String  // 代理树
	Config           field.String  // 计算时的条件记录，方便查询
	CalData          field.String  // 计算数据
	AuditedAt        field.Field   // 审核时间
	AuditedAdminName field.String  // 审核管理员
	ClaimedAt        field.Field   // 领取时间
	SentAt           field.Field   // 派发时间
	Prize            field.Float64 // 奖励
	IsCal            field.Int64   // 是否计算 0：未计算 1：已计算
	Status           field.Int64   // 状态 1:待审核 2:待领取 3:待派发 4:成功 5:拒绝
	CreatedAt        field.Field
	UpdatedAt        field.Field
	Type             field.Int64  // 优惠大类
	SubType          field.Int64  // 优惠小类
	RealName         field.String // 会员真实姓名
	SendScheme       field.String // 派发计划
	IsEnter          field.Int64  // 是否是报名 1:是 0:否
	ClaimExpireDate  field.Time   // 领取的有效期
	ExcludeSubType   field.String // 排除活动类型
	Remark           field.String // 审核备注
	RiskStatus       field.Int64  // 风控状态 1：未进行 2：进行中 3：成功 4：失败
	RiskAt           field.Field  // 风控时间
	RiskIsPass       field.Int64  // 风控是否通过 0：不通过 1：通过
	RiskRemark       field.String // 风控备注

	fieldMap map[string]field.Expr
}

func (p promotionUserRewardsCopy1) Table(newTableName string) *promotionUserRewardsCopy1 {
	p.promotionUserRewardsCopy1Do.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotionUserRewardsCopy1) As(alias string) *promotionUserRewardsCopy1 {
	p.promotionUserRewardsCopy1Do.DO = *(p.promotionUserRewardsCopy1Do.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotionUserRewardsCopy1) updateTableName(table string) *promotionUserRewardsCopy1 {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PromotionID = field.NewInt64(table, "promotion_id")
	p.StartDate = field.NewTime(table, "start_date")
	p.EndDate = field.NewTime(table, "end_date")
	p.UserID = field.NewInt64(table, "user_id")
	p.Username = field.NewString(table, "username")
	p.ParentID = field.NewInt64(table, "parent_id")
	p.ForefatherIds = field.NewString(table, "forefather_ids")
	p.Config = field.NewString(table, "config")
	p.CalData = field.NewString(table, "cal_data")
	p.AuditedAt = field.NewField(table, "audited_at")
	p.AuditedAdminName = field.NewString(table, "audited_admin_name")
	p.ClaimedAt = field.NewField(table, "claimed_at")
	p.SentAt = field.NewField(table, "sent_at")
	p.Prize = field.NewFloat64(table, "prize")
	p.IsCal = field.NewInt64(table, "is_cal")
	p.Status = field.NewInt64(table, "status")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")
	p.Type = field.NewInt64(table, "type")
	p.SubType = field.NewInt64(table, "sub_type")
	p.RealName = field.NewString(table, "real_name")
	p.SendScheme = field.NewString(table, "send_scheme")
	p.IsEnter = field.NewInt64(table, "is_enter")
	p.ClaimExpireDate = field.NewTime(table, "claim_expire_date")
	p.ExcludeSubType = field.NewString(table, "exclude_sub_type")
	p.Remark = field.NewString(table, "remark")
	p.RiskStatus = field.NewInt64(table, "risk_status")
	p.RiskAt = field.NewField(table, "risk_at")
	p.RiskIsPass = field.NewInt64(table, "risk_is_pass")
	p.RiskRemark = field.NewString(table, "risk_remark")

	p.fillFieldMap()

	return p
}

func (p *promotionUserRewardsCopy1) WithContext(ctx context.Context) IPromotionUserRewardsCopy1Do {
	return p.promotionUserRewardsCopy1Do.WithContext(ctx)
}

func (p promotionUserRewardsCopy1) TableName() string {
	return p.promotionUserRewardsCopy1Do.TableName()
}

func (p promotionUserRewardsCopy1) Alias() string { return p.promotionUserRewardsCopy1Do.Alias() }

func (p promotionUserRewardsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return p.promotionUserRewardsCopy1Do.Columns(cols...)
}

func (p *promotionUserRewardsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotionUserRewardsCopy1) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 31)
	p.fieldMap["id"] = p.ID
	p.fieldMap["promotion_id"] = p.PromotionID
	p.fieldMap["start_date"] = p.StartDate
	p.fieldMap["end_date"] = p.EndDate
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["username"] = p.Username
	p.fieldMap["parent_id"] = p.ParentID
	p.fieldMap["forefather_ids"] = p.ForefatherIds
	p.fieldMap["config"] = p.Config
	p.fieldMap["cal_data"] = p.CalData
	p.fieldMap["audited_at"] = p.AuditedAt
	p.fieldMap["audited_admin_name"] = p.AuditedAdminName
	p.fieldMap["claimed_at"] = p.ClaimedAt
	p.fieldMap["sent_at"] = p.SentAt
	p.fieldMap["prize"] = p.Prize
	p.fieldMap["is_cal"] = p.IsCal
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["type"] = p.Type
	p.fieldMap["sub_type"] = p.SubType
	p.fieldMap["real_name"] = p.RealName
	p.fieldMap["send_scheme"] = p.SendScheme
	p.fieldMap["is_enter"] = p.IsEnter
	p.fieldMap["claim_expire_date"] = p.ClaimExpireDate
	p.fieldMap["exclude_sub_type"] = p.ExcludeSubType
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["risk_status"] = p.RiskStatus
	p.fieldMap["risk_at"] = p.RiskAt
	p.fieldMap["risk_is_pass"] = p.RiskIsPass
	p.fieldMap["risk_remark"] = p.RiskRemark
}

func (p promotionUserRewardsCopy1) clone(db *gorm.DB) promotionUserRewardsCopy1 {
	p.promotionUserRewardsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotionUserRewardsCopy1) replaceDB(db *gorm.DB) promotionUserRewardsCopy1 {
	p.promotionUserRewardsCopy1Do.ReplaceDB(db)
	return p
}

type promotionUserRewardsCopy1Do struct{ gen.DO }

type IPromotionUserRewardsCopy1Do interface {
	gen.SubQuery
	Debug() IPromotionUserRewardsCopy1Do
	WithContext(ctx context.Context) IPromotionUserRewardsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionUserRewardsCopy1Do
	WriteDB() IPromotionUserRewardsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionUserRewardsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionUserRewardsCopy1Do
	Not(conds ...gen.Condition) IPromotionUserRewardsCopy1Do
	Or(conds ...gen.Condition) IPromotionUserRewardsCopy1Do
	Select(conds ...field.Expr) IPromotionUserRewardsCopy1Do
	Where(conds ...gen.Condition) IPromotionUserRewardsCopy1Do
	Order(conds ...field.Expr) IPromotionUserRewardsCopy1Do
	Distinct(cols ...field.Expr) IPromotionUserRewardsCopy1Do
	Omit(cols ...field.Expr) IPromotionUserRewardsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do
	Group(cols ...field.Expr) IPromotionUserRewardsCopy1Do
	Having(conds ...gen.Condition) IPromotionUserRewardsCopy1Do
	Limit(limit int) IPromotionUserRewardsCopy1Do
	Offset(offset int) IPromotionUserRewardsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionUserRewardsCopy1Do
	Unscoped() IPromotionUserRewardsCopy1Do
	Create(values ...*model.PromotionUserRewardsCopy1) error
	CreateInBatches(values []*model.PromotionUserRewardsCopy1, batchSize int) error
	Save(values ...*model.PromotionUserRewardsCopy1) error
	First() (*model.PromotionUserRewardsCopy1, error)
	Take() (*model.PromotionUserRewardsCopy1, error)
	Last() (*model.PromotionUserRewardsCopy1, error)
	Find() ([]*model.PromotionUserRewardsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromotionUserRewardsCopy1, err error)
	FindInBatches(result *[]*model.PromotionUserRewardsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromotionUserRewardsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionUserRewardsCopy1Do
	Assign(attrs ...field.AssignExpr) IPromotionUserRewardsCopy1Do
	Joins(fields ...field.RelationField) IPromotionUserRewardsCopy1Do
	Preload(fields ...field.RelationField) IPromotionUserRewardsCopy1Do
	FirstOrInit() (*model.PromotionUserRewardsCopy1, error)
	FirstOrCreate() (*model.PromotionUserRewardsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.PromotionUserRewardsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionUserRewardsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionUserRewardsCopy1Do) Debug() IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Debug())
}

func (p promotionUserRewardsCopy1Do) WithContext(ctx context.Context) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionUserRewardsCopy1Do) ReadDB() IPromotionUserRewardsCopy1Do {
	return p.Clauses(dbresolver.Read)
}

func (p promotionUserRewardsCopy1Do) WriteDB() IPromotionUserRewardsCopy1Do {
	return p.Clauses(dbresolver.Write)
}

func (p promotionUserRewardsCopy1Do) Session(config *gorm.Session) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Session(config))
}

func (p promotionUserRewardsCopy1Do) Clauses(conds ...clause.Expression) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionUserRewardsCopy1Do) Returning(value interface{}, columns ...string) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionUserRewardsCopy1Do) Not(conds ...gen.Condition) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionUserRewardsCopy1Do) Or(conds ...gen.Condition) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionUserRewardsCopy1Do) Select(conds ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionUserRewardsCopy1Do) Where(conds ...gen.Condition) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionUserRewardsCopy1Do) Order(conds ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionUserRewardsCopy1Do) Distinct(cols ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionUserRewardsCopy1Do) Omit(cols ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionUserRewardsCopy1Do) Join(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionUserRewardsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionUserRewardsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionUserRewardsCopy1Do) Group(cols ...field.Expr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionUserRewardsCopy1Do) Having(conds ...gen.Condition) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionUserRewardsCopy1Do) Limit(limit int) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionUserRewardsCopy1Do) Offset(offset int) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionUserRewardsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionUserRewardsCopy1Do) Unscoped() IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionUserRewardsCopy1Do) Create(values ...*model.PromotionUserRewardsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionUserRewardsCopy1Do) CreateInBatches(values []*model.PromotionUserRewardsCopy1, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionUserRewardsCopy1Do) Save(values ...*model.PromotionUserRewardsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionUserRewardsCopy1Do) First() (*model.PromotionUserRewardsCopy1, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionUserRewardsCopy1), nil
	}
}

func (p promotionUserRewardsCopy1Do) Take() (*model.PromotionUserRewardsCopy1, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionUserRewardsCopy1), nil
	}
}

func (p promotionUserRewardsCopy1Do) Last() (*model.PromotionUserRewardsCopy1, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionUserRewardsCopy1), nil
	}
}

func (p promotionUserRewardsCopy1Do) Find() ([]*model.PromotionUserRewardsCopy1, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromotionUserRewardsCopy1), err
}

func (p promotionUserRewardsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromotionUserRewardsCopy1, err error) {
	buf := make([]*model.PromotionUserRewardsCopy1, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionUserRewardsCopy1Do) FindInBatches(result *[]*model.PromotionUserRewardsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionUserRewardsCopy1Do) Attrs(attrs ...field.AssignExpr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionUserRewardsCopy1Do) Assign(attrs ...field.AssignExpr) IPromotionUserRewardsCopy1Do {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionUserRewardsCopy1Do) Joins(fields ...field.RelationField) IPromotionUserRewardsCopy1Do {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionUserRewardsCopy1Do) Preload(fields ...field.RelationField) IPromotionUserRewardsCopy1Do {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionUserRewardsCopy1Do) FirstOrInit() (*model.PromotionUserRewardsCopy1, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionUserRewardsCopy1), nil
	}
}

func (p promotionUserRewardsCopy1Do) FirstOrCreate() (*model.PromotionUserRewardsCopy1, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionUserRewardsCopy1), nil
	}
}

func (p promotionUserRewardsCopy1Do) FindByPage(offset int, limit int) (result []*model.PromotionUserRewardsCopy1, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionUserRewardsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionUserRewardsCopy1Do) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionUserRewardsCopy1Do) Delete(models ...*model.PromotionUserRewardsCopy1) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionUserRewardsCopy1Do) withDO(do gen.Dao) *promotionUserRewardsCopy1Do {
	p.DO = *do.(*gen.DO)
	return p
}
