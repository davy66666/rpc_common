// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newMessageRemoveRecord(db *gorm.DB, opts ...gen.DOOption) messageRemoveRecord {
	_messageRemoveRecord := messageRemoveRecord{}

	_messageRemoveRecord.messageRemoveRecordDo.UseDB(db, opts...)
	_messageRemoveRecord.messageRemoveRecordDo.UseModel(&model.MessageRemoveRecord{})

	tableName := _messageRemoveRecord.messageRemoveRecordDo.TableName()
	_messageRemoveRecord.ALL = field.NewAsterisk(tableName)
	_messageRemoveRecord.ID = field.NewInt64(tableName, "id")
	_messageRemoveRecord.MsgID = field.NewInt64(tableName, "msg_id")
	_messageRemoveRecord.MsgTypeID = field.NewInt64(tableName, "msg_type_id")
	_messageRemoveRecord.UserID = field.NewInt64(tableName, "user_id")
	_messageRemoveRecord.CreatedAt = field.NewField(tableName, "created_at")
	_messageRemoveRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_messageRemoveRecord.fillFieldMap()

	return _messageRemoveRecord
}

// messageRemoveRecord 消息删除记录表
type messageRemoveRecord struct {
	messageRemoveRecordDo messageRemoveRecordDo

	ALL       field.Asterisk
	ID        field.Int64
	MsgID     field.Int64 // 消息id
	MsgTypeID field.Int64 // 消息类型id
	UserID    field.Int64 // 用户id
	CreatedAt field.Field // 创建时间
	UpdatedAt field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (m messageRemoveRecord) Table(newTableName string) *messageRemoveRecord {
	m.messageRemoveRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageRemoveRecord) As(alias string) *messageRemoveRecord {
	m.messageRemoveRecordDo.DO = *(m.messageRemoveRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageRemoveRecord) updateTableName(table string) *messageRemoveRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MsgID = field.NewInt64(table, "msg_id")
	m.MsgTypeID = field.NewInt64(table, "msg_type_id")
	m.UserID = field.NewInt64(table, "user_id")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *messageRemoveRecord) WithContext(ctx context.Context) IMessageRemoveRecordDo {
	return m.messageRemoveRecordDo.WithContext(ctx)
}

func (m messageRemoveRecord) TableName() string { return m.messageRemoveRecordDo.TableName() }

func (m messageRemoveRecord) Alias() string { return m.messageRemoveRecordDo.Alias() }

func (m messageRemoveRecord) Columns(cols ...field.Expr) gen.Columns {
	return m.messageRemoveRecordDo.Columns(cols...)
}

func (m *messageRemoveRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageRemoveRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["msg_id"] = m.MsgID
	m.fieldMap["msg_type_id"] = m.MsgTypeID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m messageRemoveRecord) clone(db *gorm.DB) messageRemoveRecord {
	m.messageRemoveRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageRemoveRecord) replaceDB(db *gorm.DB) messageRemoveRecord {
	m.messageRemoveRecordDo.ReplaceDB(db)
	return m
}

type messageRemoveRecordDo struct{ gen.DO }

type IMessageRemoveRecordDo interface {
	gen.SubQuery
	Debug() IMessageRemoveRecordDo
	WithContext(ctx context.Context) IMessageRemoveRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageRemoveRecordDo
	WriteDB() IMessageRemoveRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageRemoveRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageRemoveRecordDo
	Not(conds ...gen.Condition) IMessageRemoveRecordDo
	Or(conds ...gen.Condition) IMessageRemoveRecordDo
	Select(conds ...field.Expr) IMessageRemoveRecordDo
	Where(conds ...gen.Condition) IMessageRemoveRecordDo
	Order(conds ...field.Expr) IMessageRemoveRecordDo
	Distinct(cols ...field.Expr) IMessageRemoveRecordDo
	Omit(cols ...field.Expr) IMessageRemoveRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo
	Group(cols ...field.Expr) IMessageRemoveRecordDo
	Having(conds ...gen.Condition) IMessageRemoveRecordDo
	Limit(limit int) IMessageRemoveRecordDo
	Offset(offset int) IMessageRemoveRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageRemoveRecordDo
	Unscoped() IMessageRemoveRecordDo
	Create(values ...*model.MessageRemoveRecord) error
	CreateInBatches(values []*model.MessageRemoveRecord, batchSize int) error
	Save(values ...*model.MessageRemoveRecord) error
	First() (*model.MessageRemoveRecord, error)
	Take() (*model.MessageRemoveRecord, error)
	Last() (*model.MessageRemoveRecord, error)
	Find() ([]*model.MessageRemoveRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageRemoveRecord, err error)
	FindInBatches(result *[]*model.MessageRemoveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageRemoveRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageRemoveRecordDo
	Assign(attrs ...field.AssignExpr) IMessageRemoveRecordDo
	Joins(fields ...field.RelationField) IMessageRemoveRecordDo
	Preload(fields ...field.RelationField) IMessageRemoveRecordDo
	FirstOrInit() (*model.MessageRemoveRecord, error)
	FirstOrCreate() (*model.MessageRemoveRecord, error)
	FindByPage(offset int, limit int) (result []*model.MessageRemoveRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageRemoveRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageRemoveRecordDo) Debug() IMessageRemoveRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m messageRemoveRecordDo) WithContext(ctx context.Context) IMessageRemoveRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageRemoveRecordDo) ReadDB() IMessageRemoveRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageRemoveRecordDo) WriteDB() IMessageRemoveRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageRemoveRecordDo) Session(config *gorm.Session) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageRemoveRecordDo) Clauses(conds ...clause.Expression) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageRemoveRecordDo) Returning(value interface{}, columns ...string) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageRemoveRecordDo) Not(conds ...gen.Condition) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageRemoveRecordDo) Or(conds ...gen.Condition) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageRemoveRecordDo) Select(conds ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageRemoveRecordDo) Where(conds ...gen.Condition) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageRemoveRecordDo) Order(conds ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageRemoveRecordDo) Distinct(cols ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageRemoveRecordDo) Omit(cols ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageRemoveRecordDo) Join(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageRemoveRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageRemoveRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageRemoveRecordDo) Group(cols ...field.Expr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageRemoveRecordDo) Having(conds ...gen.Condition) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageRemoveRecordDo) Limit(limit int) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageRemoveRecordDo) Offset(offset int) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageRemoveRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageRemoveRecordDo) Unscoped() IMessageRemoveRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageRemoveRecordDo) Create(values ...*model.MessageRemoveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageRemoveRecordDo) CreateInBatches(values []*model.MessageRemoveRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageRemoveRecordDo) Save(values ...*model.MessageRemoveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageRemoveRecordDo) First() (*model.MessageRemoveRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageRemoveRecord), nil
	}
}

func (m messageRemoveRecordDo) Take() (*model.MessageRemoveRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageRemoveRecord), nil
	}
}

func (m messageRemoveRecordDo) Last() (*model.MessageRemoveRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageRemoveRecord), nil
	}
}

func (m messageRemoveRecordDo) Find() ([]*model.MessageRemoveRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageRemoveRecord), err
}

func (m messageRemoveRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageRemoveRecord, err error) {
	buf := make([]*model.MessageRemoveRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageRemoveRecordDo) FindInBatches(result *[]*model.MessageRemoveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageRemoveRecordDo) Attrs(attrs ...field.AssignExpr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageRemoveRecordDo) Assign(attrs ...field.AssignExpr) IMessageRemoveRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageRemoveRecordDo) Joins(fields ...field.RelationField) IMessageRemoveRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageRemoveRecordDo) Preload(fields ...field.RelationField) IMessageRemoveRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageRemoveRecordDo) FirstOrInit() (*model.MessageRemoveRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageRemoveRecord), nil
	}
}

func (m messageRemoveRecordDo) FirstOrCreate() (*model.MessageRemoveRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageRemoveRecord), nil
	}
}

func (m messageRemoveRecordDo) FindByPage(offset int, limit int) (result []*model.MessageRemoveRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageRemoveRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageRemoveRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageRemoveRecordDo) Delete(models ...*model.MessageRemoveRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageRemoveRecordDo) withDO(do gen.Dao) *messageRemoveRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
