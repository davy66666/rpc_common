// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivityConfig(db *gorm.DB, opts ...gen.DOOption) activityConfig {
	_activityConfig := activityConfig{}

	_activityConfig.activityConfigDo.UseDB(db, opts...)
	_activityConfig.activityConfigDo.UseModel(&model.ActivityConfig{})

	tableName := _activityConfig.activityConfigDo.TableName()
	_activityConfig.ALL = field.NewAsterisk(tableName)
	_activityConfig.ID = field.NewInt64(tableName, "id")
	_activityConfig.ActivityType = field.NewString(tableName, "activity_type")
	_activityConfig.Title = field.NewString(tableName, "title")
	_activityConfig.Description = field.NewString(tableName, "description")
	_activityConfig.Content = field.NewString(tableName, "content")
	_activityConfig.MinMoney = field.NewFloat64(tableName, "min_money")
	_activityConfig.StartTime = field.NewField(tableName, "start_time")
	_activityConfig.EndTime = field.NewField(tableName, "end_time")
	_activityConfig.AdminUser = field.NewString(tableName, "admin_user")
	_activityConfig.SeriesIds = field.NewString(tableName, "series_ids")
	_activityConfig.Conditions = field.NewString(tableName, "conditions")
	_activityConfig.Remark = field.NewString(tableName, "remark")
	_activityConfig.Plat = field.NewString(tableName, "plat")
	_activityConfig.Status = field.NewInt64(tableName, "status")
	_activityConfig.CreatedAt = field.NewField(tableName, "created_at")
	_activityConfig.UpdatedAt = field.NewField(tableName, "updated_at")

	_activityConfig.fillFieldMap()

	return _activityConfig
}

// activityConfig 活动配置表 单个的活动 需要业务逻辑的 单独处理
type activityConfig struct {
	activityConfigDo activityConfigDo

	ALL          field.Asterisk
	ID           field.Int64
	ActivityType field.String  // 活动类型编码：['rp': 抢红包]
	Title        field.String  // 活动标题
	Description  field.String  // 活动简介
	Content      field.String  // 活动详情
	MinMoney     field.Float64 // 抢红包最低投注额
	StartTime    field.Field   // 活动开始时间
	EndTime      field.Field   // 活动结束时间
	AdminUser    field.String  // 后台管理员 活动编辑者
	SeriesIds    field.String  // 游戏系列id series表id
	Conditions   field.String  // 活动条件
	Remark       field.String  // 备注
	Plat         field.String  // 终端1:h5;2:pc
	Status       field.Int64   // 是否启用：[0: 否 1: 是 ]
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (a activityConfig) Table(newTableName string) *activityConfig {
	a.activityConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityConfig) As(alias string) *activityConfig {
	a.activityConfigDo.DO = *(a.activityConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityConfig) updateTableName(table string) *activityConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityType = field.NewString(table, "activity_type")
	a.Title = field.NewString(table, "title")
	a.Description = field.NewString(table, "description")
	a.Content = field.NewString(table, "content")
	a.MinMoney = field.NewFloat64(table, "min_money")
	a.StartTime = field.NewField(table, "start_time")
	a.EndTime = field.NewField(table, "end_time")
	a.AdminUser = field.NewString(table, "admin_user")
	a.SeriesIds = field.NewString(table, "series_ids")
	a.Conditions = field.NewString(table, "conditions")
	a.Remark = field.NewString(table, "remark")
	a.Plat = field.NewString(table, "plat")
	a.Status = field.NewInt64(table, "status")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activityConfig) WithContext(ctx context.Context) IActivityConfigDo {
	return a.activityConfigDo.WithContext(ctx)
}

func (a activityConfig) TableName() string { return a.activityConfigDo.TableName() }

func (a activityConfig) Alias() string { return a.activityConfigDo.Alias() }

func (a activityConfig) Columns(cols ...field.Expr) gen.Columns {
	return a.activityConfigDo.Columns(cols...)
}

func (a *activityConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_type"] = a.ActivityType
	a.fieldMap["title"] = a.Title
	a.fieldMap["description"] = a.Description
	a.fieldMap["content"] = a.Content
	a.fieldMap["min_money"] = a.MinMoney
	a.fieldMap["start_time"] = a.StartTime
	a.fieldMap["end_time"] = a.EndTime
	a.fieldMap["admin_user"] = a.AdminUser
	a.fieldMap["series_ids"] = a.SeriesIds
	a.fieldMap["conditions"] = a.Conditions
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activityConfig) clone(db *gorm.DB) activityConfig {
	a.activityConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityConfig) replaceDB(db *gorm.DB) activityConfig {
	a.activityConfigDo.ReplaceDB(db)
	return a
}

type activityConfigDo struct{ gen.DO }

type IActivityConfigDo interface {
	gen.SubQuery
	Debug() IActivityConfigDo
	WithContext(ctx context.Context) IActivityConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityConfigDo
	WriteDB() IActivityConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityConfigDo
	Not(conds ...gen.Condition) IActivityConfigDo
	Or(conds ...gen.Condition) IActivityConfigDo
	Select(conds ...field.Expr) IActivityConfigDo
	Where(conds ...gen.Condition) IActivityConfigDo
	Order(conds ...field.Expr) IActivityConfigDo
	Distinct(cols ...field.Expr) IActivityConfigDo
	Omit(cols ...field.Expr) IActivityConfigDo
	Join(table schema.Tabler, on ...field.Expr) IActivityConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityConfigDo
	Group(cols ...field.Expr) IActivityConfigDo
	Having(conds ...gen.Condition) IActivityConfigDo
	Limit(limit int) IActivityConfigDo
	Offset(offset int) IActivityConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityConfigDo
	Unscoped() IActivityConfigDo
	Create(values ...*model.ActivityConfig) error
	CreateInBatches(values []*model.ActivityConfig, batchSize int) error
	Save(values ...*model.ActivityConfig) error
	First() (*model.ActivityConfig, error)
	Take() (*model.ActivityConfig, error)
	Last() (*model.ActivityConfig, error)
	Find() ([]*model.ActivityConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityConfig, err error)
	FindInBatches(result *[]*model.ActivityConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityConfigDo
	Assign(attrs ...field.AssignExpr) IActivityConfigDo
	Joins(fields ...field.RelationField) IActivityConfigDo
	Preload(fields ...field.RelationField) IActivityConfigDo
	FirstOrInit() (*model.ActivityConfig, error)
	FirstOrCreate() (*model.ActivityConfig, error)
	FindByPage(offset int, limit int) (result []*model.ActivityConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityConfigDo) Debug() IActivityConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a activityConfigDo) WithContext(ctx context.Context) IActivityConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityConfigDo) ReadDB() IActivityConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityConfigDo) WriteDB() IActivityConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityConfigDo) Session(config *gorm.Session) IActivityConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityConfigDo) Clauses(conds ...clause.Expression) IActivityConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityConfigDo) Returning(value interface{}, columns ...string) IActivityConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityConfigDo) Not(conds ...gen.Condition) IActivityConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityConfigDo) Or(conds ...gen.Condition) IActivityConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityConfigDo) Select(conds ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityConfigDo) Where(conds ...gen.Condition) IActivityConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityConfigDo) Order(conds ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityConfigDo) Distinct(cols ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityConfigDo) Omit(cols ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityConfigDo) Join(table schema.Tabler, on ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityConfigDo) Group(cols ...field.Expr) IActivityConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityConfigDo) Having(conds ...gen.Condition) IActivityConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityConfigDo) Limit(limit int) IActivityConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityConfigDo) Offset(offset int) IActivityConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityConfigDo) Unscoped() IActivityConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityConfigDo) Create(values ...*model.ActivityConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityConfigDo) CreateInBatches(values []*model.ActivityConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityConfigDo) Save(values ...*model.ActivityConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityConfigDo) First() (*model.ActivityConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConfig), nil
	}
}

func (a activityConfigDo) Take() (*model.ActivityConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConfig), nil
	}
}

func (a activityConfigDo) Last() (*model.ActivityConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConfig), nil
	}
}

func (a activityConfigDo) Find() ([]*model.ActivityConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityConfig), err
}

func (a activityConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityConfig, err error) {
	buf := make([]*model.ActivityConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityConfigDo) FindInBatches(result *[]*model.ActivityConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityConfigDo) Attrs(attrs ...field.AssignExpr) IActivityConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityConfigDo) Assign(attrs ...field.AssignExpr) IActivityConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityConfigDo) Joins(fields ...field.RelationField) IActivityConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityConfigDo) Preload(fields ...field.RelationField) IActivityConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityConfigDo) FirstOrInit() (*model.ActivityConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConfig), nil
	}
}

func (a activityConfigDo) FirstOrCreate() (*model.ActivityConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConfig), nil
	}
}

func (a activityConfigDo) FindByPage(offset int, limit int) (result []*model.ActivityConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityConfigDo) Delete(models ...*model.ActivityConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityConfigDo) withDO(do gen.Dao) *activityConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
