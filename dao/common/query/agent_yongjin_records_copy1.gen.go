// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentYongjinRecordsCopy1(db *gorm.DB, opts ...gen.DOOption) agentYongjinRecordsCopy1 {
	_agentYongjinRecordsCopy1 := agentYongjinRecordsCopy1{}

	_agentYongjinRecordsCopy1.agentYongjinRecordsCopy1Do.UseDB(db, opts...)
	_agentYongjinRecordsCopy1.agentYongjinRecordsCopy1Do.UseModel(&model.AgentYongjinRecordsCopy1{})

	tableName := _agentYongjinRecordsCopy1.agentYongjinRecordsCopy1Do.TableName()
	_agentYongjinRecordsCopy1.ALL = field.NewAsterisk(tableName)
	_agentYongjinRecordsCopy1.ID = field.NewInt64(tableName, "id")
	_agentYongjinRecordsCopy1.DateAt = field.NewString(tableName, "date_at")
	_agentYongjinRecordsCopy1.AgentID = field.NewInt64(tableName, "agent_id")
	_agentYongjinRecordsCopy1.AgentName = field.NewString(tableName, "agent_name")
	_agentYongjinRecordsCopy1.ParentID = field.NewInt64(tableName, "parent_id")
	_agentYongjinRecordsCopy1.ParentName = field.NewString(tableName, "parent_name")
	_agentYongjinRecordsCopy1.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentYongjinRecordsCopy1.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_agentYongjinRecordsCopy1.Money = field.NewFloat64(tableName, "money")
	_agentYongjinRecordsCopy1.Gift = field.NewFloat64(tableName, "gift")
	_agentYongjinRecordsCopy1.Promotion = field.NewFloat64(tableName, "promotion")
	_agentYongjinRecordsCopy1.VendorFee = field.NewFloat64(tableName, "vendor_fee")
	_agentYongjinRecordsCopy1.NetAmount = field.NewFloat64(tableName, "net_amount")
	_agentYongjinRecordsCopy1.TotalFanshui = field.NewFloat64(tableName, "total_fanshui")
	_agentYongjinRecordsCopy1.SelfYongJin = field.NewFloat64(tableName, "self_yong_jin")
	_agentYongjinRecordsCopy1.SelfOriginYongJin = field.NewFloat64(tableName, "self_origin_yong_jin")
	_agentYongjinRecordsCopy1.ParentYongJin = field.NewFloat64(tableName, "parent_yong_jin")
	_agentYongjinRecordsCopy1.ParentOriginYongJin = field.NewFloat64(tableName, "parent_origin_yong_jin")
	_agentYongjinRecordsCopy1.RechargeMoney = field.NewFloat64(tableName, "recharge_money")
	_agentYongjinRecordsCopy1.WithdrawalMoney = field.NewFloat64(tableName, "withdrawal_money")
	_agentYongjinRecordsCopy1.Status = field.NewInt64(tableName, "status")
	_agentYongjinRecordsCopy1.AgentType = field.NewInt64(tableName, "agent_type")
	_agentYongjinRecordsCopy1.Description = field.NewString(tableName, "description")
	_agentYongjinRecordsCopy1.CheckTime = field.NewField(tableName, "check_time")
	_agentYongjinRecordsCopy1.AdminID = field.NewInt64(tableName, "admin_id")
	_agentYongjinRecordsCopy1.AdminName = field.NewString(tableName, "admin_name")
	_agentYongjinRecordsCopy1.IP = field.NewString(tableName, "ip")
	_agentYongjinRecordsCopy1.IsManual = field.NewInt64(tableName, "is_manual")
	_agentYongjinRecordsCopy1.GameBetMoney = field.NewString(tableName, "game_bet_money")
	_agentYongjinRecordsCopy1.UpdateTimes = field.NewInt64(tableName, "update_times")
	_agentYongjinRecordsCopy1.OriginYongJinRate = field.NewFloat64(tableName, "origin_yong_jin_rate")
	_agentYongjinRecordsCopy1.SelfYongJinRate = field.NewFloat64(tableName, "self_yong_jin_rate")
	_agentYongjinRecordsCopy1.IsJisuan = field.NewInt64(tableName, "is_jisuan")
	_agentYongjinRecordsCopy1.IsTester = field.NewInt64(tableName, "is_tester")
	_agentYongjinRecordsCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_agentYongjinRecordsCopy1.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentYongjinRecordsCopy1.AgentGift = field.NewFloat64(tableName, "agent_gift")
	_agentYongjinRecordsCopy1.RechargeFee = field.NewFloat64(tableName, "recharge_fee")
	_agentYongjinRecordsCopy1.WithdrawalFee = field.NewFloat64(tableName, "withdrawal_fee")

	_agentYongjinRecordsCopy1.fillFieldMap()

	return _agentYongjinRecordsCopy1
}

// agentYongjinRecordsCopy1 股东,代理佣金记录表
type agentYongjinRecordsCopy1 struct {
	agentYongjinRecordsCopy1Do agentYongjinRecordsCopy1Do

	ALL                 field.Asterisk
	ID                  field.Int64
	DateAt              field.String  // 统计时间
	AgentID             field.Int64   // 代理id
	AgentName           field.String  // 代理账号
	ParentID            field.Int64   // 直属上级id
	ParentName          field.String  // 直属上级
	ForefatherIds       field.String  // 上级树,多个以逗号隔开
	BeforeMoney         field.Float64 // 交易前金额
	Money               field.Float64 // 交易后金额
	Gift                field.Float64 // 下级所有会员彩金
	Promotion           field.Float64 // 下级所有会员优惠
	VendorFee           field.Float64 // 下级所有会员场馆费
	NetAmount           field.Float64 // 下级所有会员输赢金额
	TotalFanshui        field.Float64 // 下级所有会员返水
	SelfYongJin         field.Float64 // 代理自己佣金
	SelfOriginYongJin   field.Float64 // 代理自己原始应得佣金
	ParentYongJin       field.Float64 // 直属上级级返佣百分比1%
	ParentOriginYongJin field.Float64 // 直属上级原始应得佣金
	RechargeMoney       field.Float64 // 下级所有会员充值金额
	WithdrawalMoney     field.Float64 // 下级所有会员取款金额
	Status              field.Int64   // 状态：0未处理（默认）,1:返佣中,2:返佣成功,3:返佣失败
	AgentType           field.Int64   // 代理状态：0: 会员,1:股东;2:总代理; 3: 代理;
	Description         field.String  // 附言
	CheckTime           field.Field   // 审核时间
	AdminID             field.Int64   // 操作人id
	AdminName           field.String  // 操作人
	IP                  field.String  // 操作者ip
	IsManual            field.Int64   // 是否手动入款0:否；1：是
	GameBetMoney        field.String  // 游戏下的具体分类{game_code:输赢金额，多个以逗号分隔}
	UpdateTimes         field.Int64   // 更新次数
	OriginYongJinRate   field.Float64 // 自己应得佣金返佣比例 所有下级和
	SelfYongJinRate     field.Float64 // 平台分配给代理的佣金比例
	IsJisuan            field.Int64   // 0:为计算佣金;1:已经计算佣金
	IsTester            field.Int64   // 0:非测试;1:测试账号
	CreatedAt           field.Field
	UpdatedAt           field.Field
	AgentGift           field.Float64 // 代理代存
	RechargeFee         field.Float64 // 充值手续费
	WithdrawalFee       field.Float64 // 提现手续费

	fieldMap map[string]field.Expr
}

func (a agentYongjinRecordsCopy1) Table(newTableName string) *agentYongjinRecordsCopy1 {
	a.agentYongjinRecordsCopy1Do.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentYongjinRecordsCopy1) As(alias string) *agentYongjinRecordsCopy1 {
	a.agentYongjinRecordsCopy1Do.DO = *(a.agentYongjinRecordsCopy1Do.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentYongjinRecordsCopy1) updateTableName(table string) *agentYongjinRecordsCopy1 {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.DateAt = field.NewString(table, "date_at")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.BeforeMoney = field.NewFloat64(table, "before_money")
	a.Money = field.NewFloat64(table, "money")
	a.Gift = field.NewFloat64(table, "gift")
	a.Promotion = field.NewFloat64(table, "promotion")
	a.VendorFee = field.NewFloat64(table, "vendor_fee")
	a.NetAmount = field.NewFloat64(table, "net_amount")
	a.TotalFanshui = field.NewFloat64(table, "total_fanshui")
	a.SelfYongJin = field.NewFloat64(table, "self_yong_jin")
	a.SelfOriginYongJin = field.NewFloat64(table, "self_origin_yong_jin")
	a.ParentYongJin = field.NewFloat64(table, "parent_yong_jin")
	a.ParentOriginYongJin = field.NewFloat64(table, "parent_origin_yong_jin")
	a.RechargeMoney = field.NewFloat64(table, "recharge_money")
	a.WithdrawalMoney = field.NewFloat64(table, "withdrawal_money")
	a.Status = field.NewInt64(table, "status")
	a.AgentType = field.NewInt64(table, "agent_type")
	a.Description = field.NewString(table, "description")
	a.CheckTime = field.NewField(table, "check_time")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.AdminName = field.NewString(table, "admin_name")
	a.IP = field.NewString(table, "ip")
	a.IsManual = field.NewInt64(table, "is_manual")
	a.GameBetMoney = field.NewString(table, "game_bet_money")
	a.UpdateTimes = field.NewInt64(table, "update_times")
	a.OriginYongJinRate = field.NewFloat64(table, "origin_yong_jin_rate")
	a.SelfYongJinRate = field.NewFloat64(table, "self_yong_jin_rate")
	a.IsJisuan = field.NewInt64(table, "is_jisuan")
	a.IsTester = field.NewInt64(table, "is_tester")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.AgentGift = field.NewFloat64(table, "agent_gift")
	a.RechargeFee = field.NewFloat64(table, "recharge_fee")
	a.WithdrawalFee = field.NewFloat64(table, "withdrawal_fee")

	a.fillFieldMap()

	return a
}

func (a *agentYongjinRecordsCopy1) WithContext(ctx context.Context) IAgentYongjinRecordsCopy1Do {
	return a.agentYongjinRecordsCopy1Do.WithContext(ctx)
}

func (a agentYongjinRecordsCopy1) TableName() string { return a.agentYongjinRecordsCopy1Do.TableName() }

func (a agentYongjinRecordsCopy1) Alias() string { return a.agentYongjinRecordsCopy1Do.Alias() }

func (a agentYongjinRecordsCopy1) Columns(cols ...field.Expr) gen.Columns {
	return a.agentYongjinRecordsCopy1Do.Columns(cols...)
}

func (a *agentYongjinRecordsCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentYongjinRecordsCopy1) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 39)
	a.fieldMap["id"] = a.ID
	a.fieldMap["date_at"] = a.DateAt
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["before_money"] = a.BeforeMoney
	a.fieldMap["money"] = a.Money
	a.fieldMap["gift"] = a.Gift
	a.fieldMap["promotion"] = a.Promotion
	a.fieldMap["vendor_fee"] = a.VendorFee
	a.fieldMap["net_amount"] = a.NetAmount
	a.fieldMap["total_fanshui"] = a.TotalFanshui
	a.fieldMap["self_yong_jin"] = a.SelfYongJin
	a.fieldMap["self_origin_yong_jin"] = a.SelfOriginYongJin
	a.fieldMap["parent_yong_jin"] = a.ParentYongJin
	a.fieldMap["parent_origin_yong_jin"] = a.ParentOriginYongJin
	a.fieldMap["recharge_money"] = a.RechargeMoney
	a.fieldMap["withdrawal_money"] = a.WithdrawalMoney
	a.fieldMap["status"] = a.Status
	a.fieldMap["agent_type"] = a.AgentType
	a.fieldMap["description"] = a.Description
	a.fieldMap["check_time"] = a.CheckTime
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["ip"] = a.IP
	a.fieldMap["is_manual"] = a.IsManual
	a.fieldMap["game_bet_money"] = a.GameBetMoney
	a.fieldMap["update_times"] = a.UpdateTimes
	a.fieldMap["origin_yong_jin_rate"] = a.OriginYongJinRate
	a.fieldMap["self_yong_jin_rate"] = a.SelfYongJinRate
	a.fieldMap["is_jisuan"] = a.IsJisuan
	a.fieldMap["is_tester"] = a.IsTester
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["agent_gift"] = a.AgentGift
	a.fieldMap["recharge_fee"] = a.RechargeFee
	a.fieldMap["withdrawal_fee"] = a.WithdrawalFee
}

func (a agentYongjinRecordsCopy1) clone(db *gorm.DB) agentYongjinRecordsCopy1 {
	a.agentYongjinRecordsCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentYongjinRecordsCopy1) replaceDB(db *gorm.DB) agentYongjinRecordsCopy1 {
	a.agentYongjinRecordsCopy1Do.ReplaceDB(db)
	return a
}

type agentYongjinRecordsCopy1Do struct{ gen.DO }

type IAgentYongjinRecordsCopy1Do interface {
	gen.SubQuery
	Debug() IAgentYongjinRecordsCopy1Do
	WithContext(ctx context.Context) IAgentYongjinRecordsCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentYongjinRecordsCopy1Do
	WriteDB() IAgentYongjinRecordsCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentYongjinRecordsCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentYongjinRecordsCopy1Do
	Not(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do
	Or(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do
	Select(conds ...field.Expr) IAgentYongjinRecordsCopy1Do
	Where(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do
	Order(conds ...field.Expr) IAgentYongjinRecordsCopy1Do
	Distinct(cols ...field.Expr) IAgentYongjinRecordsCopy1Do
	Omit(cols ...field.Expr) IAgentYongjinRecordsCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do
	Group(cols ...field.Expr) IAgentYongjinRecordsCopy1Do
	Having(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do
	Limit(limit int) IAgentYongjinRecordsCopy1Do
	Offset(offset int) IAgentYongjinRecordsCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentYongjinRecordsCopy1Do
	Unscoped() IAgentYongjinRecordsCopy1Do
	Create(values ...*model.AgentYongjinRecordsCopy1) error
	CreateInBatches(values []*model.AgentYongjinRecordsCopy1, batchSize int) error
	Save(values ...*model.AgentYongjinRecordsCopy1) error
	First() (*model.AgentYongjinRecordsCopy1, error)
	Take() (*model.AgentYongjinRecordsCopy1, error)
	Last() (*model.AgentYongjinRecordsCopy1, error)
	Find() ([]*model.AgentYongjinRecordsCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentYongjinRecordsCopy1, err error)
	FindInBatches(result *[]*model.AgentYongjinRecordsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentYongjinRecordsCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentYongjinRecordsCopy1Do
	Assign(attrs ...field.AssignExpr) IAgentYongjinRecordsCopy1Do
	Joins(fields ...field.RelationField) IAgentYongjinRecordsCopy1Do
	Preload(fields ...field.RelationField) IAgentYongjinRecordsCopy1Do
	FirstOrInit() (*model.AgentYongjinRecordsCopy1, error)
	FirstOrCreate() (*model.AgentYongjinRecordsCopy1, error)
	FindByPage(offset int, limit int) (result []*model.AgentYongjinRecordsCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentYongjinRecordsCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentYongjinRecordsCopy1Do) Debug() IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Debug())
}

func (a agentYongjinRecordsCopy1Do) WithContext(ctx context.Context) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentYongjinRecordsCopy1Do) ReadDB() IAgentYongjinRecordsCopy1Do {
	return a.Clauses(dbresolver.Read)
}

func (a agentYongjinRecordsCopy1Do) WriteDB() IAgentYongjinRecordsCopy1Do {
	return a.Clauses(dbresolver.Write)
}

func (a agentYongjinRecordsCopy1Do) Session(config *gorm.Session) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Session(config))
}

func (a agentYongjinRecordsCopy1Do) Clauses(conds ...clause.Expression) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentYongjinRecordsCopy1Do) Returning(value interface{}, columns ...string) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentYongjinRecordsCopy1Do) Not(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentYongjinRecordsCopy1Do) Or(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentYongjinRecordsCopy1Do) Select(conds ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentYongjinRecordsCopy1Do) Where(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentYongjinRecordsCopy1Do) Order(conds ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentYongjinRecordsCopy1Do) Distinct(cols ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentYongjinRecordsCopy1Do) Omit(cols ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentYongjinRecordsCopy1Do) Join(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentYongjinRecordsCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentYongjinRecordsCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentYongjinRecordsCopy1Do) Group(cols ...field.Expr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentYongjinRecordsCopy1Do) Having(conds ...gen.Condition) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentYongjinRecordsCopy1Do) Limit(limit int) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentYongjinRecordsCopy1Do) Offset(offset int) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentYongjinRecordsCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentYongjinRecordsCopy1Do) Unscoped() IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Unscoped())
}

func (a agentYongjinRecordsCopy1Do) Create(values ...*model.AgentYongjinRecordsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentYongjinRecordsCopy1Do) CreateInBatches(values []*model.AgentYongjinRecordsCopy1, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentYongjinRecordsCopy1Do) Save(values ...*model.AgentYongjinRecordsCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentYongjinRecordsCopy1Do) First() (*model.AgentYongjinRecordsCopy1, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentYongjinRecordsCopy1), nil
	}
}

func (a agentYongjinRecordsCopy1Do) Take() (*model.AgentYongjinRecordsCopy1, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentYongjinRecordsCopy1), nil
	}
}

func (a agentYongjinRecordsCopy1Do) Last() (*model.AgentYongjinRecordsCopy1, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentYongjinRecordsCopy1), nil
	}
}

func (a agentYongjinRecordsCopy1Do) Find() ([]*model.AgentYongjinRecordsCopy1, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentYongjinRecordsCopy1), err
}

func (a agentYongjinRecordsCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentYongjinRecordsCopy1, err error) {
	buf := make([]*model.AgentYongjinRecordsCopy1, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentYongjinRecordsCopy1Do) FindInBatches(result *[]*model.AgentYongjinRecordsCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentYongjinRecordsCopy1Do) Attrs(attrs ...field.AssignExpr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentYongjinRecordsCopy1Do) Assign(attrs ...field.AssignExpr) IAgentYongjinRecordsCopy1Do {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentYongjinRecordsCopy1Do) Joins(fields ...field.RelationField) IAgentYongjinRecordsCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentYongjinRecordsCopy1Do) Preload(fields ...field.RelationField) IAgentYongjinRecordsCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentYongjinRecordsCopy1Do) FirstOrInit() (*model.AgentYongjinRecordsCopy1, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentYongjinRecordsCopy1), nil
	}
}

func (a agentYongjinRecordsCopy1Do) FirstOrCreate() (*model.AgentYongjinRecordsCopy1, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentYongjinRecordsCopy1), nil
	}
}

func (a agentYongjinRecordsCopy1Do) FindByPage(offset int, limit int) (result []*model.AgentYongjinRecordsCopy1, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentYongjinRecordsCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentYongjinRecordsCopy1Do) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentYongjinRecordsCopy1Do) Delete(models ...*model.AgentYongjinRecordsCopy1) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentYongjinRecordsCopy1Do) withDO(do gen.Dao) *agentYongjinRecordsCopy1Do {
	a.DO = *do.(*gen.DO)
	return a
}
