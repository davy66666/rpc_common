// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLiveBroadcastPushUserLog(db *gorm.DB, opts ...gen.DOOption) liveBroadcastPushUserLog {
	_liveBroadcastPushUserLog := liveBroadcastPushUserLog{}

	_liveBroadcastPushUserLog.liveBroadcastPushUserLogDo.UseDB(db, opts...)
	_liveBroadcastPushUserLog.liveBroadcastPushUserLogDo.UseModel(&model.LiveBroadcastPushUserLog{})

	tableName := _liveBroadcastPushUserLog.liveBroadcastPushUserLogDo.TableName()
	_liveBroadcastPushUserLog.ALL = field.NewAsterisk(tableName)
	_liveBroadcastPushUserLog.ID = field.NewInt64(tableName, "id")
	_liveBroadcastPushUserLog.LiveID = field.NewString(tableName, "live_id")
	_liveBroadcastPushUserLog.LiveType = field.NewInt64(tableName, "live_type")
	_liveBroadcastPushUserLog.UserID = field.NewInt64(tableName, "user_id")
	_liveBroadcastPushUserLog.EnterTime = field.NewField(tableName, "enter_time")
	_liveBroadcastPushUserLog.LeaveTime = field.NewField(tableName, "leave_time")
	_liveBroadcastPushUserLog.Duration = field.NewInt64(tableName, "duration")
	_liveBroadcastPushUserLog.UserType = field.NewInt64(tableName, "user_type")
	_liveBroadcastPushUserLog.FirstRechargeAmount = field.NewFloat64(tableName, "first_recharge_amount")
	_liveBroadcastPushUserLog.TotalDepositAmount = field.NewFloat64(tableName, "total_deposit_amount")
	_liveBroadcastPushUserLog.TotalWithdrawAmount = field.NewFloat64(tableName, "total_withdraw_amount")
	_liveBroadcastPushUserLog.CreatedAt = field.NewField(tableName, "created_at")
	_liveBroadcastPushUserLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_liveBroadcastPushUserLog.fillFieldMap()

	return _liveBroadcastPushUserLog
}

// liveBroadcastPushUserLog 直播推送用户日志表
type liveBroadcastPushUserLog struct {
	liveBroadcastPushUserLogDo liveBroadcastPushUserLogDo

	ALL                 field.Asterisk
	ID                  field.Int64
	LiveID              field.String  // 直播ID
	LiveType            field.Int64   // 直播类型
	UserID              field.Int64   // 用户ID
	EnterTime           field.Field   // 首次进入时间
	LeaveTime           field.Field   // 最后离开时间
	Duration            field.Int64   // 总持续时长
	UserType            field.Int64   // 用户属性，0=未开户，1=新开户，2=老客户
	FirstRechargeAmount field.Float64 // 开户首存金额
	TotalDepositAmount  field.Float64 // 总存款金额
	TotalWithdrawAmount field.Float64 // 总取款金额
	CreatedAt           field.Field
	UpdatedAt           field.Field

	fieldMap map[string]field.Expr
}

func (l liveBroadcastPushUserLog) Table(newTableName string) *liveBroadcastPushUserLog {
	l.liveBroadcastPushUserLogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveBroadcastPushUserLog) As(alias string) *liveBroadcastPushUserLog {
	l.liveBroadcastPushUserLogDo.DO = *(l.liveBroadcastPushUserLogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveBroadcastPushUserLog) updateTableName(table string) *liveBroadcastPushUserLog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.LiveID = field.NewString(table, "live_id")
	l.LiveType = field.NewInt64(table, "live_type")
	l.UserID = field.NewInt64(table, "user_id")
	l.EnterTime = field.NewField(table, "enter_time")
	l.LeaveTime = field.NewField(table, "leave_time")
	l.Duration = field.NewInt64(table, "duration")
	l.UserType = field.NewInt64(table, "user_type")
	l.FirstRechargeAmount = field.NewFloat64(table, "first_recharge_amount")
	l.TotalDepositAmount = field.NewFloat64(table, "total_deposit_amount")
	l.TotalWithdrawAmount = field.NewFloat64(table, "total_withdraw_amount")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *liveBroadcastPushUserLog) WithContext(ctx context.Context) ILiveBroadcastPushUserLogDo {
	return l.liveBroadcastPushUserLogDo.WithContext(ctx)
}

func (l liveBroadcastPushUserLog) TableName() string { return l.liveBroadcastPushUserLogDo.TableName() }

func (l liveBroadcastPushUserLog) Alias() string { return l.liveBroadcastPushUserLogDo.Alias() }

func (l liveBroadcastPushUserLog) Columns(cols ...field.Expr) gen.Columns {
	return l.liveBroadcastPushUserLogDo.Columns(cols...)
}

func (l *liveBroadcastPushUserLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveBroadcastPushUserLog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 13)
	l.fieldMap["id"] = l.ID
	l.fieldMap["live_id"] = l.LiveID
	l.fieldMap["live_type"] = l.LiveType
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["enter_time"] = l.EnterTime
	l.fieldMap["leave_time"] = l.LeaveTime
	l.fieldMap["duration"] = l.Duration
	l.fieldMap["user_type"] = l.UserType
	l.fieldMap["first_recharge_amount"] = l.FirstRechargeAmount
	l.fieldMap["total_deposit_amount"] = l.TotalDepositAmount
	l.fieldMap["total_withdraw_amount"] = l.TotalWithdrawAmount
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l liveBroadcastPushUserLog) clone(db *gorm.DB) liveBroadcastPushUserLog {
	l.liveBroadcastPushUserLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveBroadcastPushUserLog) replaceDB(db *gorm.DB) liveBroadcastPushUserLog {
	l.liveBroadcastPushUserLogDo.ReplaceDB(db)
	return l
}

type liveBroadcastPushUserLogDo struct{ gen.DO }

type ILiveBroadcastPushUserLogDo interface {
	gen.SubQuery
	Debug() ILiveBroadcastPushUserLogDo
	WithContext(ctx context.Context) ILiveBroadcastPushUserLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveBroadcastPushUserLogDo
	WriteDB() ILiveBroadcastPushUserLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveBroadcastPushUserLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveBroadcastPushUserLogDo
	Not(conds ...gen.Condition) ILiveBroadcastPushUserLogDo
	Or(conds ...gen.Condition) ILiveBroadcastPushUserLogDo
	Select(conds ...field.Expr) ILiveBroadcastPushUserLogDo
	Where(conds ...gen.Condition) ILiveBroadcastPushUserLogDo
	Order(conds ...field.Expr) ILiveBroadcastPushUserLogDo
	Distinct(cols ...field.Expr) ILiveBroadcastPushUserLogDo
	Omit(cols ...field.Expr) ILiveBroadcastPushUserLogDo
	Join(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo
	Group(cols ...field.Expr) ILiveBroadcastPushUserLogDo
	Having(conds ...gen.Condition) ILiveBroadcastPushUserLogDo
	Limit(limit int) ILiveBroadcastPushUserLogDo
	Offset(offset int) ILiveBroadcastPushUserLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveBroadcastPushUserLogDo
	Unscoped() ILiveBroadcastPushUserLogDo
	Create(values ...*model.LiveBroadcastPushUserLog) error
	CreateInBatches(values []*model.LiveBroadcastPushUserLog, batchSize int) error
	Save(values ...*model.LiveBroadcastPushUserLog) error
	First() (*model.LiveBroadcastPushUserLog, error)
	Take() (*model.LiveBroadcastPushUserLog, error)
	Last() (*model.LiveBroadcastPushUserLog, error)
	Find() ([]*model.LiveBroadcastPushUserLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveBroadcastPushUserLog, err error)
	FindInBatches(result *[]*model.LiveBroadcastPushUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveBroadcastPushUserLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveBroadcastPushUserLogDo
	Assign(attrs ...field.AssignExpr) ILiveBroadcastPushUserLogDo
	Joins(fields ...field.RelationField) ILiveBroadcastPushUserLogDo
	Preload(fields ...field.RelationField) ILiveBroadcastPushUserLogDo
	FirstOrInit() (*model.LiveBroadcastPushUserLog, error)
	FirstOrCreate() (*model.LiveBroadcastPushUserLog, error)
	FindByPage(offset int, limit int) (result []*model.LiveBroadcastPushUserLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveBroadcastPushUserLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveBroadcastPushUserLogDo) Debug() ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Debug())
}

func (l liveBroadcastPushUserLogDo) WithContext(ctx context.Context) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveBroadcastPushUserLogDo) ReadDB() ILiveBroadcastPushUserLogDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveBroadcastPushUserLogDo) WriteDB() ILiveBroadcastPushUserLogDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveBroadcastPushUserLogDo) Session(config *gorm.Session) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveBroadcastPushUserLogDo) Clauses(conds ...clause.Expression) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveBroadcastPushUserLogDo) Returning(value interface{}, columns ...string) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveBroadcastPushUserLogDo) Not(conds ...gen.Condition) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveBroadcastPushUserLogDo) Or(conds ...gen.Condition) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveBroadcastPushUserLogDo) Select(conds ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveBroadcastPushUserLogDo) Where(conds ...gen.Condition) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveBroadcastPushUserLogDo) Order(conds ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveBroadcastPushUserLogDo) Distinct(cols ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveBroadcastPushUserLogDo) Omit(cols ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveBroadcastPushUserLogDo) Join(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveBroadcastPushUserLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveBroadcastPushUserLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveBroadcastPushUserLogDo) Group(cols ...field.Expr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveBroadcastPushUserLogDo) Having(conds ...gen.Condition) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveBroadcastPushUserLogDo) Limit(limit int) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveBroadcastPushUserLogDo) Offset(offset int) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveBroadcastPushUserLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveBroadcastPushUserLogDo) Unscoped() ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveBroadcastPushUserLogDo) Create(values ...*model.LiveBroadcastPushUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveBroadcastPushUserLogDo) CreateInBatches(values []*model.LiveBroadcastPushUserLog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveBroadcastPushUserLogDo) Save(values ...*model.LiveBroadcastPushUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveBroadcastPushUserLogDo) First() (*model.LiveBroadcastPushUserLog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushUserLog), nil
	}
}

func (l liveBroadcastPushUserLogDo) Take() (*model.LiveBroadcastPushUserLog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushUserLog), nil
	}
}

func (l liveBroadcastPushUserLogDo) Last() (*model.LiveBroadcastPushUserLog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushUserLog), nil
	}
}

func (l liveBroadcastPushUserLogDo) Find() ([]*model.LiveBroadcastPushUserLog, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveBroadcastPushUserLog), err
}

func (l liveBroadcastPushUserLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveBroadcastPushUserLog, err error) {
	buf := make([]*model.LiveBroadcastPushUserLog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveBroadcastPushUserLogDo) FindInBatches(result *[]*model.LiveBroadcastPushUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveBroadcastPushUserLogDo) Attrs(attrs ...field.AssignExpr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveBroadcastPushUserLogDo) Assign(attrs ...field.AssignExpr) ILiveBroadcastPushUserLogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveBroadcastPushUserLogDo) Joins(fields ...field.RelationField) ILiveBroadcastPushUserLogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveBroadcastPushUserLogDo) Preload(fields ...field.RelationField) ILiveBroadcastPushUserLogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveBroadcastPushUserLogDo) FirstOrInit() (*model.LiveBroadcastPushUserLog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushUserLog), nil
	}
}

func (l liveBroadcastPushUserLogDo) FirstOrCreate() (*model.LiveBroadcastPushUserLog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveBroadcastPushUserLog), nil
	}
}

func (l liveBroadcastPushUserLogDo) FindByPage(offset int, limit int) (result []*model.LiveBroadcastPushUserLog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveBroadcastPushUserLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveBroadcastPushUserLogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveBroadcastPushUserLogDo) Delete(models ...*model.LiveBroadcastPushUserLog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveBroadcastPushUserLogDo) withDO(do gen.Dao) *liveBroadcastPushUserLogDo {
	l.DO = *do.(*gen.DO)
	return l
}
