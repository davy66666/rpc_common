// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserSuccessRechargeStatic(db *gorm.DB, opts ...gen.DOOption) userSuccessRechargeStatic {
	_userSuccessRechargeStatic := userSuccessRechargeStatic{}

	_userSuccessRechargeStatic.userSuccessRechargeStaticDo.UseDB(db, opts...)
	_userSuccessRechargeStatic.userSuccessRechargeStaticDo.UseModel(&model.UserSuccessRechargeStatic{})

	tableName := _userSuccessRechargeStatic.userSuccessRechargeStaticDo.TableName()
	_userSuccessRechargeStatic.ALL = field.NewAsterisk(tableName)
	_userSuccessRechargeStatic.ID = field.NewInt64(tableName, "id")
	_userSuccessRechargeStatic.DateAt = field.NewTime(tableName, "date_at")
	_userSuccessRechargeStatic.YearValue = field.NewInt64(tableName, "year_value")
	_userSuccessRechargeStatic.RechargeCount = field.NewInt64(tableName, "recharge_count")
	_userSuccessRechargeStatic.LoginCount = field.NewInt64(tableName, "login_count")
	_userSuccessRechargeStatic.ConversionRate = field.NewFloat64(tableName, "conversion_rate")
	_userSuccessRechargeStatic.BetCount = field.NewInt64(tableName, "bet_count")
	_userSuccessRechargeStatic.RechargeBetRate = field.NewFloat64(tableName, "recharge_bet_rate")
	_userSuccessRechargeStatic.CreatedAt = field.NewField(tableName, "created_at")
	_userSuccessRechargeStatic.UpdatedAt = field.NewField(tableName, "updated_at")
	_userSuccessRechargeStatic.NewRechargeCount = field.NewInt64(tableName, "new_recharge_count")
	_userSuccessRechargeStatic.NewLoginCount = field.NewInt64(tableName, "new_login_count")
	_userSuccessRechargeStatic.NewConversionRate = field.NewFloat64(tableName, "new_conversion_rate")
	_userSuccessRechargeStatic.NewBetCount = field.NewInt64(tableName, "new_bet_count")
	_userSuccessRechargeStatic.NewRechargeBetRate = field.NewFloat64(tableName, "new_recharge_bet_rate")
	_userSuccessRechargeStatic.OldRechargeCount = field.NewInt64(tableName, "old_recharge_count")
	_userSuccessRechargeStatic.OldLoginCount = field.NewInt64(tableName, "old_login_count")
	_userSuccessRechargeStatic.OldConversionRate = field.NewFloat64(tableName, "old_conversion_rate")
	_userSuccessRechargeStatic.OldBetCount = field.NewInt64(tableName, "old_bet_count")
	_userSuccessRechargeStatic.OldRechargeBetRate = field.NewFloat64(tableName, "old_recharge_bet_rate")

	_userSuccessRechargeStatic.fillFieldMap()

	return _userSuccessRechargeStatic
}

// userSuccessRechargeStatic 用户充值成功统计数据表
type userSuccessRechargeStatic struct {
	userSuccessRechargeStaticDo userSuccessRechargeStaticDo

	ALL                field.Asterisk
	ID                 field.Int64   // 自增id
	DateAt             field.Time    // 时间date
	YearValue          field.Int64   // 年度
	RechargeCount      field.Int64   // 充值数量
	LoginCount         field.Int64   // 登陆数量
	ConversionRate     field.Float64 // 转化率
	BetCount           field.Int64   // 投注人数
	RechargeBetRate    field.Float64 // 充值投注转化率
	CreatedAt          field.Field   // 记录创建时间
	UpdatedAt          field.Field   // 记录更新时间
	NewRechargeCount   field.Int64   // 新会员充值数量
	NewLoginCount      field.Int64   // 新会员登录数量
	NewConversionRate  field.Float64 // 新会员转化率
	NewBetCount        field.Int64   // 新会员投注人数
	NewRechargeBetRate field.Float64 // 新会员充值投注转化率
	OldRechargeCount   field.Int64   // 新会员充值数量
	OldLoginCount      field.Int64   // 新会员登录数量
	OldConversionRate  field.Float64 // 新会员转化率
	OldBetCount        field.Int64   // 新会员投注人数
	OldRechargeBetRate field.Float64 // 新会员充值投注转化率

	fieldMap map[string]field.Expr
}

func (u userSuccessRechargeStatic) Table(newTableName string) *userSuccessRechargeStatic {
	u.userSuccessRechargeStaticDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSuccessRechargeStatic) As(alias string) *userSuccessRechargeStatic {
	u.userSuccessRechargeStaticDo.DO = *(u.userSuccessRechargeStaticDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSuccessRechargeStatic) updateTableName(table string) *userSuccessRechargeStatic {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewTime(table, "date_at")
	u.YearValue = field.NewInt64(table, "year_value")
	u.RechargeCount = field.NewInt64(table, "recharge_count")
	u.LoginCount = field.NewInt64(table, "login_count")
	u.ConversionRate = field.NewFloat64(table, "conversion_rate")
	u.BetCount = field.NewInt64(table, "bet_count")
	u.RechargeBetRate = field.NewFloat64(table, "recharge_bet_rate")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.NewRechargeCount = field.NewInt64(table, "new_recharge_count")
	u.NewLoginCount = field.NewInt64(table, "new_login_count")
	u.NewConversionRate = field.NewFloat64(table, "new_conversion_rate")
	u.NewBetCount = field.NewInt64(table, "new_bet_count")
	u.NewRechargeBetRate = field.NewFloat64(table, "new_recharge_bet_rate")
	u.OldRechargeCount = field.NewInt64(table, "old_recharge_count")
	u.OldLoginCount = field.NewInt64(table, "old_login_count")
	u.OldConversionRate = field.NewFloat64(table, "old_conversion_rate")
	u.OldBetCount = field.NewInt64(table, "old_bet_count")
	u.OldRechargeBetRate = field.NewFloat64(table, "old_recharge_bet_rate")

	u.fillFieldMap()

	return u
}

func (u *userSuccessRechargeStatic) WithContext(ctx context.Context) IUserSuccessRechargeStaticDo {
	return u.userSuccessRechargeStaticDo.WithContext(ctx)
}

func (u userSuccessRechargeStatic) TableName() string {
	return u.userSuccessRechargeStaticDo.TableName()
}

func (u userSuccessRechargeStatic) Alias() string { return u.userSuccessRechargeStaticDo.Alias() }

func (u userSuccessRechargeStatic) Columns(cols ...field.Expr) gen.Columns {
	return u.userSuccessRechargeStaticDo.Columns(cols...)
}

func (u *userSuccessRechargeStatic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSuccessRechargeStatic) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 20)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["year_value"] = u.YearValue
	u.fieldMap["recharge_count"] = u.RechargeCount
	u.fieldMap["login_count"] = u.LoginCount
	u.fieldMap["conversion_rate"] = u.ConversionRate
	u.fieldMap["bet_count"] = u.BetCount
	u.fieldMap["recharge_bet_rate"] = u.RechargeBetRate
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["new_recharge_count"] = u.NewRechargeCount
	u.fieldMap["new_login_count"] = u.NewLoginCount
	u.fieldMap["new_conversion_rate"] = u.NewConversionRate
	u.fieldMap["new_bet_count"] = u.NewBetCount
	u.fieldMap["new_recharge_bet_rate"] = u.NewRechargeBetRate
	u.fieldMap["old_recharge_count"] = u.OldRechargeCount
	u.fieldMap["old_login_count"] = u.OldLoginCount
	u.fieldMap["old_conversion_rate"] = u.OldConversionRate
	u.fieldMap["old_bet_count"] = u.OldBetCount
	u.fieldMap["old_recharge_bet_rate"] = u.OldRechargeBetRate
}

func (u userSuccessRechargeStatic) clone(db *gorm.DB) userSuccessRechargeStatic {
	u.userSuccessRechargeStaticDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSuccessRechargeStatic) replaceDB(db *gorm.DB) userSuccessRechargeStatic {
	u.userSuccessRechargeStaticDo.ReplaceDB(db)
	return u
}

type userSuccessRechargeStaticDo struct{ gen.DO }

type IUserSuccessRechargeStaticDo interface {
	gen.SubQuery
	Debug() IUserSuccessRechargeStaticDo
	WithContext(ctx context.Context) IUserSuccessRechargeStaticDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSuccessRechargeStaticDo
	WriteDB() IUserSuccessRechargeStaticDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSuccessRechargeStaticDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSuccessRechargeStaticDo
	Not(conds ...gen.Condition) IUserSuccessRechargeStaticDo
	Or(conds ...gen.Condition) IUserSuccessRechargeStaticDo
	Select(conds ...field.Expr) IUserSuccessRechargeStaticDo
	Where(conds ...gen.Condition) IUserSuccessRechargeStaticDo
	Order(conds ...field.Expr) IUserSuccessRechargeStaticDo
	Distinct(cols ...field.Expr) IUserSuccessRechargeStaticDo
	Omit(cols ...field.Expr) IUserSuccessRechargeStaticDo
	Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo
	Group(cols ...field.Expr) IUserSuccessRechargeStaticDo
	Having(conds ...gen.Condition) IUserSuccessRechargeStaticDo
	Limit(limit int) IUserSuccessRechargeStaticDo
	Offset(offset int) IUserSuccessRechargeStaticDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeStaticDo
	Unscoped() IUserSuccessRechargeStaticDo
	Create(values ...*model.UserSuccessRechargeStatic) error
	CreateInBatches(values []*model.UserSuccessRechargeStatic, batchSize int) error
	Save(values ...*model.UserSuccessRechargeStatic) error
	First() (*model.UserSuccessRechargeStatic, error)
	Take() (*model.UserSuccessRechargeStatic, error)
	Last() (*model.UserSuccessRechargeStatic, error)
	Find() ([]*model.UserSuccessRechargeStatic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeStatic, err error)
	FindInBatches(result *[]*model.UserSuccessRechargeStatic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSuccessRechargeStatic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeStaticDo
	Assign(attrs ...field.AssignExpr) IUserSuccessRechargeStaticDo
	Joins(fields ...field.RelationField) IUserSuccessRechargeStaticDo
	Preload(fields ...field.RelationField) IUserSuccessRechargeStaticDo
	FirstOrInit() (*model.UserSuccessRechargeStatic, error)
	FirstOrCreate() (*model.UserSuccessRechargeStatic, error)
	FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeStatic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSuccessRechargeStaticDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSuccessRechargeStaticDo) Debug() IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Debug())
}

func (u userSuccessRechargeStaticDo) WithContext(ctx context.Context) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSuccessRechargeStaticDo) ReadDB() IUserSuccessRechargeStaticDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSuccessRechargeStaticDo) WriteDB() IUserSuccessRechargeStaticDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSuccessRechargeStaticDo) Session(config *gorm.Session) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSuccessRechargeStaticDo) Clauses(conds ...clause.Expression) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSuccessRechargeStaticDo) Returning(value interface{}, columns ...string) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSuccessRechargeStaticDo) Not(conds ...gen.Condition) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSuccessRechargeStaticDo) Or(conds ...gen.Condition) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSuccessRechargeStaticDo) Select(conds ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSuccessRechargeStaticDo) Where(conds ...gen.Condition) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSuccessRechargeStaticDo) Order(conds ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSuccessRechargeStaticDo) Distinct(cols ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSuccessRechargeStaticDo) Omit(cols ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSuccessRechargeStaticDo) Join(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSuccessRechargeStaticDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSuccessRechargeStaticDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSuccessRechargeStaticDo) Group(cols ...field.Expr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSuccessRechargeStaticDo) Having(conds ...gen.Condition) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSuccessRechargeStaticDo) Limit(limit int) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSuccessRechargeStaticDo) Offset(offset int) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSuccessRechargeStaticDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSuccessRechargeStaticDo) Unscoped() IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSuccessRechargeStaticDo) Create(values ...*model.UserSuccessRechargeStatic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSuccessRechargeStaticDo) CreateInBatches(values []*model.UserSuccessRechargeStatic, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSuccessRechargeStaticDo) Save(values ...*model.UserSuccessRechargeStatic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSuccessRechargeStaticDo) First() (*model.UserSuccessRechargeStatic, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStatic), nil
	}
}

func (u userSuccessRechargeStaticDo) Take() (*model.UserSuccessRechargeStatic, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStatic), nil
	}
}

func (u userSuccessRechargeStaticDo) Last() (*model.UserSuccessRechargeStatic, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStatic), nil
	}
}

func (u userSuccessRechargeStaticDo) Find() ([]*model.UserSuccessRechargeStatic, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSuccessRechargeStatic), err
}

func (u userSuccessRechargeStaticDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSuccessRechargeStatic, err error) {
	buf := make([]*model.UserSuccessRechargeStatic, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSuccessRechargeStaticDo) FindInBatches(result *[]*model.UserSuccessRechargeStatic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSuccessRechargeStaticDo) Attrs(attrs ...field.AssignExpr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSuccessRechargeStaticDo) Assign(attrs ...field.AssignExpr) IUserSuccessRechargeStaticDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSuccessRechargeStaticDo) Joins(fields ...field.RelationField) IUserSuccessRechargeStaticDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSuccessRechargeStaticDo) Preload(fields ...field.RelationField) IUserSuccessRechargeStaticDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSuccessRechargeStaticDo) FirstOrInit() (*model.UserSuccessRechargeStatic, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStatic), nil
	}
}

func (u userSuccessRechargeStaticDo) FirstOrCreate() (*model.UserSuccessRechargeStatic, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSuccessRechargeStatic), nil
	}
}

func (u userSuccessRechargeStaticDo) FindByPage(offset int, limit int) (result []*model.UserSuccessRechargeStatic, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSuccessRechargeStaticDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSuccessRechargeStaticDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSuccessRechargeStaticDo) Delete(models ...*model.UserSuccessRechargeStatic) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSuccessRechargeStaticDo) withDO(do gen.Dao) *userSuccessRechargeStaticDo {
	u.DO = *do.(*gen.DO)
	return u
}
