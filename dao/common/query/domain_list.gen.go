// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newDomainList(db *gorm.DB, opts ...gen.DOOption) domainList {
	_domainList := domainList{}

	_domainList.domainListDo.UseDB(db, opts...)
	_domainList.domainListDo.UseModel(&model.DomainList{})

	tableName := _domainList.domainListDo.TableName()
	_domainList.ALL = field.NewAsterisk(tableName)
	_domainList.ID = field.NewInt64(tableName, "id")
	_domainList.URL = field.NewString(tableName, "url")
	_domainList.Type = field.NewInt64(tableName, "type")
	_domainList.Status = field.NewInt64(tableName, "status")
	_domainList.AppPlat = field.NewInt64(tableName, "app_plat")
	_domainList.CreatedAt = field.NewField(tableName, "created_at")
	_domainList.UpdatedAt = field.NewField(tableName, "updated_at")

	_domainList.fillFieldMap()

	return _domainList
}

// domainList 域名列表
type domainList struct {
	domainListDo domainListDo

	ALL       field.Asterisk
	ID        field.Int64
	URL       field.String // 域名值
	Type      field.Int64  // 域名类型;1:永久域名,2:易记域名,3:VIP专属域名
	Status    field.Int64  // 0:未启用, 1:启用
	AppPlat   field.Int64  // 1:综合app;2:体育app
	CreatedAt field.Field
	UpdatedAt field.Field // 更新时间

	fieldMap map[string]field.Expr
}

func (d domainList) Table(newTableName string) *domainList {
	d.domainListDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domainList) As(alias string) *domainList {
	d.domainListDo.DO = *(d.domainListDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domainList) updateTableName(table string) *domainList {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.URL = field.NewString(table, "url")
	d.Type = field.NewInt64(table, "type")
	d.Status = field.NewInt64(table, "status")
	d.AppPlat = field.NewInt64(table, "app_plat")
	d.CreatedAt = field.NewField(table, "created_at")
	d.UpdatedAt = field.NewField(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *domainList) WithContext(ctx context.Context) IDomainListDo {
	return d.domainListDo.WithContext(ctx)
}

func (d domainList) TableName() string { return d.domainListDo.TableName() }

func (d domainList) Alias() string { return d.domainListDo.Alias() }

func (d domainList) Columns(cols ...field.Expr) gen.Columns { return d.domainListDo.Columns(cols...) }

func (d *domainList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domainList) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["url"] = d.URL
	d.fieldMap["type"] = d.Type
	d.fieldMap["status"] = d.Status
	d.fieldMap["app_plat"] = d.AppPlat
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d domainList) clone(db *gorm.DB) domainList {
	d.domainListDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domainList) replaceDB(db *gorm.DB) domainList {
	d.domainListDo.ReplaceDB(db)
	return d
}

type domainListDo struct{ gen.DO }

type IDomainListDo interface {
	gen.SubQuery
	Debug() IDomainListDo
	WithContext(ctx context.Context) IDomainListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDomainListDo
	WriteDB() IDomainListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDomainListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDomainListDo
	Not(conds ...gen.Condition) IDomainListDo
	Or(conds ...gen.Condition) IDomainListDo
	Select(conds ...field.Expr) IDomainListDo
	Where(conds ...gen.Condition) IDomainListDo
	Order(conds ...field.Expr) IDomainListDo
	Distinct(cols ...field.Expr) IDomainListDo
	Omit(cols ...field.Expr) IDomainListDo
	Join(table schema.Tabler, on ...field.Expr) IDomainListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDomainListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDomainListDo
	Group(cols ...field.Expr) IDomainListDo
	Having(conds ...gen.Condition) IDomainListDo
	Limit(limit int) IDomainListDo
	Offset(offset int) IDomainListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainListDo
	Unscoped() IDomainListDo
	Create(values ...*model.DomainList) error
	CreateInBatches(values []*model.DomainList, batchSize int) error
	Save(values ...*model.DomainList) error
	First() (*model.DomainList, error)
	Take() (*model.DomainList, error)
	Last() (*model.DomainList, error)
	Find() ([]*model.DomainList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainList, err error)
	FindInBatches(result *[]*model.DomainList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DomainList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDomainListDo
	Assign(attrs ...field.AssignExpr) IDomainListDo
	Joins(fields ...field.RelationField) IDomainListDo
	Preload(fields ...field.RelationField) IDomainListDo
	FirstOrInit() (*model.DomainList, error)
	FirstOrCreate() (*model.DomainList, error)
	FindByPage(offset int, limit int) (result []*model.DomainList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDomainListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d domainListDo) Debug() IDomainListDo {
	return d.withDO(d.DO.Debug())
}

func (d domainListDo) WithContext(ctx context.Context) IDomainListDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainListDo) ReadDB() IDomainListDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainListDo) WriteDB() IDomainListDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainListDo) Session(config *gorm.Session) IDomainListDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainListDo) Clauses(conds ...clause.Expression) IDomainListDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainListDo) Returning(value interface{}, columns ...string) IDomainListDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainListDo) Not(conds ...gen.Condition) IDomainListDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainListDo) Or(conds ...gen.Condition) IDomainListDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainListDo) Select(conds ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainListDo) Where(conds ...gen.Condition) IDomainListDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainListDo) Order(conds ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainListDo) Distinct(cols ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainListDo) Omit(cols ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainListDo) Join(table schema.Tabler, on ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainListDo) RightJoin(table schema.Tabler, on ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainListDo) Group(cols ...field.Expr) IDomainListDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainListDo) Having(conds ...gen.Condition) IDomainListDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainListDo) Limit(limit int) IDomainListDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainListDo) Offset(offset int) IDomainListDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainListDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainListDo) Unscoped() IDomainListDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainListDo) Create(values ...*model.DomainList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainListDo) CreateInBatches(values []*model.DomainList, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainListDo) Save(values ...*model.DomainList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainListDo) First() (*model.DomainList, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainList), nil
	}
}

func (d domainListDo) Take() (*model.DomainList, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainList), nil
	}
}

func (d domainListDo) Last() (*model.DomainList, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainList), nil
	}
}

func (d domainListDo) Find() ([]*model.DomainList, error) {
	result, err := d.DO.Find()
	return result.([]*model.DomainList), err
}

func (d domainListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainList, err error) {
	buf := make([]*model.DomainList, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainListDo) FindInBatches(result *[]*model.DomainList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainListDo) Attrs(attrs ...field.AssignExpr) IDomainListDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainListDo) Assign(attrs ...field.AssignExpr) IDomainListDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainListDo) Joins(fields ...field.RelationField) IDomainListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainListDo) Preload(fields ...field.RelationField) IDomainListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainListDo) FirstOrInit() (*model.DomainList, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainList), nil
	}
}

func (d domainListDo) FirstOrCreate() (*model.DomainList, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainList), nil
	}
}

func (d domainListDo) FindByPage(offset int, limit int) (result []*model.DomainList, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainListDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainListDo) Delete(models ...*model.DomainList) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainListDo) withDO(do gen.Dao) *domainListDo {
	d.DO = *do.(*gen.DO)
	return d
}
