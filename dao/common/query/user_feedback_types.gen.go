// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserFeedbackType(db *gorm.DB, opts ...gen.DOOption) userFeedbackType {
	_userFeedbackType := userFeedbackType{}

	_userFeedbackType.userFeedbackTypeDo.UseDB(db, opts...)
	_userFeedbackType.userFeedbackTypeDo.UseModel(&model.UserFeedbackType{})

	tableName := _userFeedbackType.userFeedbackTypeDo.TableName()
	_userFeedbackType.ALL = field.NewAsterisk(tableName)
	_userFeedbackType.ID = field.NewInt64(tableName, "id")
	_userFeedbackType.Title = field.NewString(tableName, "title")
	_userFeedbackType.IsOpen = field.NewInt64(tableName, "is_open")
	_userFeedbackType.CreatedAt = field.NewField(tableName, "created_at")
	_userFeedbackType.UpdatedAt = field.NewField(tableName, "updated_at")

	_userFeedbackType.fillFieldMap()

	return _userFeedbackType
}

type userFeedbackType struct {
	userFeedbackTypeDo userFeedbackTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	Title     field.String // 标题
	IsOpen    field.Int64  // 是否启用
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userFeedbackType) Table(newTableName string) *userFeedbackType {
	u.userFeedbackTypeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFeedbackType) As(alias string) *userFeedbackType {
	u.userFeedbackTypeDo.DO = *(u.userFeedbackTypeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFeedbackType) updateTableName(table string) *userFeedbackType {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Title = field.NewString(table, "title")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userFeedbackType) WithContext(ctx context.Context) IUserFeedbackTypeDo {
	return u.userFeedbackTypeDo.WithContext(ctx)
}

func (u userFeedbackType) TableName() string { return u.userFeedbackTypeDo.TableName() }

func (u userFeedbackType) Alias() string { return u.userFeedbackTypeDo.Alias() }

func (u userFeedbackType) Columns(cols ...field.Expr) gen.Columns {
	return u.userFeedbackTypeDo.Columns(cols...)
}

func (u *userFeedbackType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFeedbackType) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["title"] = u.Title
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userFeedbackType) clone(db *gorm.DB) userFeedbackType {
	u.userFeedbackTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFeedbackType) replaceDB(db *gorm.DB) userFeedbackType {
	u.userFeedbackTypeDo.ReplaceDB(db)
	return u
}

type userFeedbackTypeDo struct{ gen.DO }

type IUserFeedbackTypeDo interface {
	gen.SubQuery
	Debug() IUserFeedbackTypeDo
	WithContext(ctx context.Context) IUserFeedbackTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFeedbackTypeDo
	WriteDB() IUserFeedbackTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFeedbackTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFeedbackTypeDo
	Not(conds ...gen.Condition) IUserFeedbackTypeDo
	Or(conds ...gen.Condition) IUserFeedbackTypeDo
	Select(conds ...field.Expr) IUserFeedbackTypeDo
	Where(conds ...gen.Condition) IUserFeedbackTypeDo
	Order(conds ...field.Expr) IUserFeedbackTypeDo
	Distinct(cols ...field.Expr) IUserFeedbackTypeDo
	Omit(cols ...field.Expr) IUserFeedbackTypeDo
	Join(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo
	Group(cols ...field.Expr) IUserFeedbackTypeDo
	Having(conds ...gen.Condition) IUserFeedbackTypeDo
	Limit(limit int) IUserFeedbackTypeDo
	Offset(offset int) IUserFeedbackTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeedbackTypeDo
	Unscoped() IUserFeedbackTypeDo
	Create(values ...*model.UserFeedbackType) error
	CreateInBatches(values []*model.UserFeedbackType, batchSize int) error
	Save(values ...*model.UserFeedbackType) error
	First() (*model.UserFeedbackType, error)
	Take() (*model.UserFeedbackType, error)
	Last() (*model.UserFeedbackType, error)
	Find() ([]*model.UserFeedbackType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFeedbackType, err error)
	FindInBatches(result *[]*model.UserFeedbackType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFeedbackType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFeedbackTypeDo
	Assign(attrs ...field.AssignExpr) IUserFeedbackTypeDo
	Joins(fields ...field.RelationField) IUserFeedbackTypeDo
	Preload(fields ...field.RelationField) IUserFeedbackTypeDo
	FirstOrInit() (*model.UserFeedbackType, error)
	FirstOrCreate() (*model.UserFeedbackType, error)
	FindByPage(offset int, limit int) (result []*model.UserFeedbackType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFeedbackTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFeedbackTypeDo) Debug() IUserFeedbackTypeDo {
	return u.withDO(u.DO.Debug())
}

func (u userFeedbackTypeDo) WithContext(ctx context.Context) IUserFeedbackTypeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFeedbackTypeDo) ReadDB() IUserFeedbackTypeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFeedbackTypeDo) WriteDB() IUserFeedbackTypeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFeedbackTypeDo) Session(config *gorm.Session) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFeedbackTypeDo) Clauses(conds ...clause.Expression) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFeedbackTypeDo) Returning(value interface{}, columns ...string) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFeedbackTypeDo) Not(conds ...gen.Condition) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFeedbackTypeDo) Or(conds ...gen.Condition) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFeedbackTypeDo) Select(conds ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFeedbackTypeDo) Where(conds ...gen.Condition) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFeedbackTypeDo) Order(conds ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFeedbackTypeDo) Distinct(cols ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFeedbackTypeDo) Omit(cols ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFeedbackTypeDo) Join(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFeedbackTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFeedbackTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFeedbackTypeDo) Group(cols ...field.Expr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFeedbackTypeDo) Having(conds ...gen.Condition) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFeedbackTypeDo) Limit(limit int) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFeedbackTypeDo) Offset(offset int) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFeedbackTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFeedbackTypeDo) Unscoped() IUserFeedbackTypeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFeedbackTypeDo) Create(values ...*model.UserFeedbackType) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFeedbackTypeDo) CreateInBatches(values []*model.UserFeedbackType, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFeedbackTypeDo) Save(values ...*model.UserFeedbackType) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFeedbackTypeDo) First() (*model.UserFeedbackType, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedbackType), nil
	}
}

func (u userFeedbackTypeDo) Take() (*model.UserFeedbackType, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedbackType), nil
	}
}

func (u userFeedbackTypeDo) Last() (*model.UserFeedbackType, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedbackType), nil
	}
}

func (u userFeedbackTypeDo) Find() ([]*model.UserFeedbackType, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFeedbackType), err
}

func (u userFeedbackTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFeedbackType, err error) {
	buf := make([]*model.UserFeedbackType, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFeedbackTypeDo) FindInBatches(result *[]*model.UserFeedbackType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFeedbackTypeDo) Attrs(attrs ...field.AssignExpr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFeedbackTypeDo) Assign(attrs ...field.AssignExpr) IUserFeedbackTypeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFeedbackTypeDo) Joins(fields ...field.RelationField) IUserFeedbackTypeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFeedbackTypeDo) Preload(fields ...field.RelationField) IUserFeedbackTypeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFeedbackTypeDo) FirstOrInit() (*model.UserFeedbackType, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedbackType), nil
	}
}

func (u userFeedbackTypeDo) FirstOrCreate() (*model.UserFeedbackType, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedbackType), nil
	}
}

func (u userFeedbackTypeDo) FindByPage(offset int, limit int) (result []*model.UserFeedbackType, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFeedbackTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFeedbackTypeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFeedbackTypeDo) Delete(models ...*model.UserFeedbackType) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFeedbackTypeDo) withDO(do gen.Dao) *userFeedbackTypeDo {
	u.DO = *do.(*gen.DO)
	return u
}
