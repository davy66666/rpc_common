// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLiveRedPacket(db *gorm.DB, opts ...gen.DOOption) liveRedPacket {
	_liveRedPacket := liveRedPacket{}

	_liveRedPacket.liveRedPacketDo.UseDB(db, opts...)
	_liveRedPacket.liveRedPacketDo.UseModel(&model.LiveRedPacket{})

	tableName := _liveRedPacket.liveRedPacketDo.TableName()
	_liveRedPacket.ALL = field.NewAsterisk(tableName)
	_liveRedPacket.ID = field.NewInt64(tableName, "id")
	_liveRedPacket.RedPacketCode = field.NewString(tableName, "red_packet_code")
	_liveRedPacket.Quantity = field.NewInt64(tableName, "quantity")
	_liveRedPacket.Amount = field.NewFloat64(tableName, "amount")
	_liveRedPacket.ReceivedAmount = field.NewFloat64(tableName, "received_amount")
	_liveRedPacket.LiveUnique = field.NewString(tableName, "live_unique")
	_liveRedPacket.Expired = field.NewInt64(tableName, "expired")
	_liveRedPacket.ExpiredTime = field.NewInt64(tableName, "expired_time")
	_liveRedPacket.Status = field.NewInt64(tableName, "status")
	_liveRedPacket.IsFinished = field.NewInt64(tableName, "is_finished")
	_liveRedPacket.APIStatus = field.NewInt64(tableName, "api_status")
	_liveRedPacket.APIMessage = field.NewString(tableName, "api_message")
	_liveRedPacket.OperatorID = field.NewInt64(tableName, "operator_id")
	_liveRedPacket.OperatorName = field.NewString(tableName, "operator_name")
	_liveRedPacket.Sender = field.NewInt64(tableName, "sender")
	_liveRedPacket.IsTester = field.NewInt64(tableName, "is_tester")
	_liveRedPacket.ReceiveUser = field.NewString(tableName, "receive_user")
	_liveRedPacket.CreatedAt = field.NewField(tableName, "created_at")
	_liveRedPacket.UpdatedAt = field.NewField(tableName, "updated_at")

	_liveRedPacket.fillFieldMap()

	return _liveRedPacket
}

// liveRedPacket 直播红包表
type liveRedPacket struct {
	liveRedPacketDo liveRedPacketDo

	ALL            field.Asterisk
	ID             field.Int64
	RedPacketCode  field.String  // 红包唯一字符串，长度固定8位
	Quantity       field.Int64   // 红包数量
	Amount         field.Float64 // 红包金额
	ReceivedAmount field.Float64 // 已领取红包金额
	LiveUnique     field.String  // 关联直播间唯一标识
	Expired        field.Int64   // 过期时间,单位：秒
	ExpiredTime    field.Int64   // 过期时间戳
	Status         field.Int64   // 状态; 0:隐藏, 1:正常
	IsFinished     field.Int64   // 是否已领取完; 0:否, 1:是
	APIStatus      field.Int64   // API请求状态; 0:异常, 1:成功
	APIMessage     field.String  // API返回message信息
	OperatorID     field.Int64   // 操作人id
	OperatorName   field.String  // 操作人姓名
	Sender         field.Int64   // 发送者身份：1管理员，2主播
	IsTester       field.Int64   // 是否测试：0普通红包, 1测试红包
	ReceiveUser    field.String  // 指定领取用户，存放username，多个用引文逗号分隔
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (l liveRedPacket) Table(newTableName string) *liveRedPacket {
	l.liveRedPacketDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveRedPacket) As(alias string) *liveRedPacket {
	l.liveRedPacketDo.DO = *(l.liveRedPacketDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveRedPacket) updateTableName(table string) *liveRedPacket {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.RedPacketCode = field.NewString(table, "red_packet_code")
	l.Quantity = field.NewInt64(table, "quantity")
	l.Amount = field.NewFloat64(table, "amount")
	l.ReceivedAmount = field.NewFloat64(table, "received_amount")
	l.LiveUnique = field.NewString(table, "live_unique")
	l.Expired = field.NewInt64(table, "expired")
	l.ExpiredTime = field.NewInt64(table, "expired_time")
	l.Status = field.NewInt64(table, "status")
	l.IsFinished = field.NewInt64(table, "is_finished")
	l.APIStatus = field.NewInt64(table, "api_status")
	l.APIMessage = field.NewString(table, "api_message")
	l.OperatorID = field.NewInt64(table, "operator_id")
	l.OperatorName = field.NewString(table, "operator_name")
	l.Sender = field.NewInt64(table, "sender")
	l.IsTester = field.NewInt64(table, "is_tester")
	l.ReceiveUser = field.NewString(table, "receive_user")
	l.CreatedAt = field.NewField(table, "created_at")
	l.UpdatedAt = field.NewField(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *liveRedPacket) WithContext(ctx context.Context) ILiveRedPacketDo {
	return l.liveRedPacketDo.WithContext(ctx)
}

func (l liveRedPacket) TableName() string { return l.liveRedPacketDo.TableName() }

func (l liveRedPacket) Alias() string { return l.liveRedPacketDo.Alias() }

func (l liveRedPacket) Columns(cols ...field.Expr) gen.Columns {
	return l.liveRedPacketDo.Columns(cols...)
}

func (l *liveRedPacket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveRedPacket) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["id"] = l.ID
	l.fieldMap["red_packet_code"] = l.RedPacketCode
	l.fieldMap["quantity"] = l.Quantity
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["received_amount"] = l.ReceivedAmount
	l.fieldMap["live_unique"] = l.LiveUnique
	l.fieldMap["expired"] = l.Expired
	l.fieldMap["expired_time"] = l.ExpiredTime
	l.fieldMap["status"] = l.Status
	l.fieldMap["is_finished"] = l.IsFinished
	l.fieldMap["api_status"] = l.APIStatus
	l.fieldMap["api_message"] = l.APIMessage
	l.fieldMap["operator_id"] = l.OperatorID
	l.fieldMap["operator_name"] = l.OperatorName
	l.fieldMap["sender"] = l.Sender
	l.fieldMap["is_tester"] = l.IsTester
	l.fieldMap["receive_user"] = l.ReceiveUser
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l liveRedPacket) clone(db *gorm.DB) liveRedPacket {
	l.liveRedPacketDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveRedPacket) replaceDB(db *gorm.DB) liveRedPacket {
	l.liveRedPacketDo.ReplaceDB(db)
	return l
}

type liveRedPacketDo struct{ gen.DO }

type ILiveRedPacketDo interface {
	gen.SubQuery
	Debug() ILiveRedPacketDo
	WithContext(ctx context.Context) ILiveRedPacketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveRedPacketDo
	WriteDB() ILiveRedPacketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveRedPacketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveRedPacketDo
	Not(conds ...gen.Condition) ILiveRedPacketDo
	Or(conds ...gen.Condition) ILiveRedPacketDo
	Select(conds ...field.Expr) ILiveRedPacketDo
	Where(conds ...gen.Condition) ILiveRedPacketDo
	Order(conds ...field.Expr) ILiveRedPacketDo
	Distinct(cols ...field.Expr) ILiveRedPacketDo
	Omit(cols ...field.Expr) ILiveRedPacketDo
	Join(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo
	Group(cols ...field.Expr) ILiveRedPacketDo
	Having(conds ...gen.Condition) ILiveRedPacketDo
	Limit(limit int) ILiveRedPacketDo
	Offset(offset int) ILiveRedPacketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRedPacketDo
	Unscoped() ILiveRedPacketDo
	Create(values ...*model.LiveRedPacket) error
	CreateInBatches(values []*model.LiveRedPacket, batchSize int) error
	Save(values ...*model.LiveRedPacket) error
	First() (*model.LiveRedPacket, error)
	Take() (*model.LiveRedPacket, error)
	Last() (*model.LiveRedPacket, error)
	Find() ([]*model.LiveRedPacket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRedPacket, err error)
	FindInBatches(result *[]*model.LiveRedPacket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveRedPacket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveRedPacketDo
	Assign(attrs ...field.AssignExpr) ILiveRedPacketDo
	Joins(fields ...field.RelationField) ILiveRedPacketDo
	Preload(fields ...field.RelationField) ILiveRedPacketDo
	FirstOrInit() (*model.LiveRedPacket, error)
	FirstOrCreate() (*model.LiveRedPacket, error)
	FindByPage(offset int, limit int) (result []*model.LiveRedPacket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveRedPacketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveRedPacketDo) Debug() ILiveRedPacketDo {
	return l.withDO(l.DO.Debug())
}

func (l liveRedPacketDo) WithContext(ctx context.Context) ILiveRedPacketDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveRedPacketDo) ReadDB() ILiveRedPacketDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveRedPacketDo) WriteDB() ILiveRedPacketDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveRedPacketDo) Session(config *gorm.Session) ILiveRedPacketDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveRedPacketDo) Clauses(conds ...clause.Expression) ILiveRedPacketDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveRedPacketDo) Returning(value interface{}, columns ...string) ILiveRedPacketDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveRedPacketDo) Not(conds ...gen.Condition) ILiveRedPacketDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveRedPacketDo) Or(conds ...gen.Condition) ILiveRedPacketDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveRedPacketDo) Select(conds ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveRedPacketDo) Where(conds ...gen.Condition) ILiveRedPacketDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveRedPacketDo) Order(conds ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveRedPacketDo) Distinct(cols ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveRedPacketDo) Omit(cols ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveRedPacketDo) Join(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveRedPacketDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveRedPacketDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveRedPacketDo) Group(cols ...field.Expr) ILiveRedPacketDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveRedPacketDo) Having(conds ...gen.Condition) ILiveRedPacketDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveRedPacketDo) Limit(limit int) ILiveRedPacketDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveRedPacketDo) Offset(offset int) ILiveRedPacketDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveRedPacketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRedPacketDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveRedPacketDo) Unscoped() ILiveRedPacketDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveRedPacketDo) Create(values ...*model.LiveRedPacket) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveRedPacketDo) CreateInBatches(values []*model.LiveRedPacket, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveRedPacketDo) Save(values ...*model.LiveRedPacket) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveRedPacketDo) First() (*model.LiveRedPacket, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacket), nil
	}
}

func (l liveRedPacketDo) Take() (*model.LiveRedPacket, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacket), nil
	}
}

func (l liveRedPacketDo) Last() (*model.LiveRedPacket, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacket), nil
	}
}

func (l liveRedPacketDo) Find() ([]*model.LiveRedPacket, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveRedPacket), err
}

func (l liveRedPacketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRedPacket, err error) {
	buf := make([]*model.LiveRedPacket, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveRedPacketDo) FindInBatches(result *[]*model.LiveRedPacket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveRedPacketDo) Attrs(attrs ...field.AssignExpr) ILiveRedPacketDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveRedPacketDo) Assign(attrs ...field.AssignExpr) ILiveRedPacketDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveRedPacketDo) Joins(fields ...field.RelationField) ILiveRedPacketDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveRedPacketDo) Preload(fields ...field.RelationField) ILiveRedPacketDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveRedPacketDo) FirstOrInit() (*model.LiveRedPacket, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacket), nil
	}
}

func (l liveRedPacketDo) FirstOrCreate() (*model.LiveRedPacket, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRedPacket), nil
	}
}

func (l liveRedPacketDo) FindByPage(offset int, limit int) (result []*model.LiveRedPacket, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveRedPacketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveRedPacketDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveRedPacketDo) Delete(models ...*model.LiveRedPacket) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveRedPacketDo) withDO(do gen.Dao) *liveRedPacketDo {
	l.DO = *do.(*gen.DO)
	return l
}
