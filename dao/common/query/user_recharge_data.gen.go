// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRechargeDatum(db *gorm.DB, opts ...gen.DOOption) userRechargeDatum {
	_userRechargeDatum := userRechargeDatum{}

	_userRechargeDatum.userRechargeDatumDo.UseDB(db, opts...)
	_userRechargeDatum.userRechargeDatumDo.UseModel(&model.UserRechargeDatum{})

	tableName := _userRechargeDatum.userRechargeDatumDo.TableName()
	_userRechargeDatum.ALL = field.NewAsterisk(tableName)
	_userRechargeDatum.ID = field.NewInt64(tableName, "id")
	_userRechargeDatum.UserID = field.NewInt64(tableName, "user_id")
	_userRechargeDatum.IsNormal = field.NewInt64(tableName, "is_normal")
	_userRechargeDatum.BillNo = field.NewString(tableName, "bill_no")
	_userRechargeDatum.IsCal = field.NewInt64(tableName, "is_cal")
	_userRechargeDatum.CreatedAt = field.NewField(tableName, "created_at")
	_userRechargeDatum.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRechargeDatum.fillFieldMap()

	return _userRechargeDatum
}

// userRechargeDatum 用户充值数据表
type userRechargeDatum struct {
	userRechargeDatumDo userRechargeDatumDo

	ALL       field.Asterisk
	ID        field.Int64  // 自增id
	UserID    field.Int64  // 用户id
	IsNormal  field.Int64  // 0:网银转账,1:非网银转账
	BillNo    field.String // 订单号
	IsCal     field.Int64  // 0:未统计, 1:已统计
	CreatedAt field.Field  // 记录创建时间
	UpdatedAt field.Field  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (u userRechargeDatum) Table(newTableName string) *userRechargeDatum {
	u.userRechargeDatumDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRechargeDatum) As(alias string) *userRechargeDatum {
	u.userRechargeDatumDo.DO = *(u.userRechargeDatumDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRechargeDatum) updateTableName(table string) *userRechargeDatum {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.IsNormal = field.NewInt64(table, "is_normal")
	u.BillNo = field.NewString(table, "bill_no")
	u.IsCal = field.NewInt64(table, "is_cal")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRechargeDatum) WithContext(ctx context.Context) IUserRechargeDatumDo {
	return u.userRechargeDatumDo.WithContext(ctx)
}

func (u userRechargeDatum) TableName() string { return u.userRechargeDatumDo.TableName() }

func (u userRechargeDatum) Alias() string { return u.userRechargeDatumDo.Alias() }

func (u userRechargeDatum) Columns(cols ...field.Expr) gen.Columns {
	return u.userRechargeDatumDo.Columns(cols...)
}

func (u *userRechargeDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRechargeDatum) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["is_normal"] = u.IsNormal
	u.fieldMap["bill_no"] = u.BillNo
	u.fieldMap["is_cal"] = u.IsCal
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRechargeDatum) clone(db *gorm.DB) userRechargeDatum {
	u.userRechargeDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRechargeDatum) replaceDB(db *gorm.DB) userRechargeDatum {
	u.userRechargeDatumDo.ReplaceDB(db)
	return u
}

type userRechargeDatumDo struct{ gen.DO }

type IUserRechargeDatumDo interface {
	gen.SubQuery
	Debug() IUserRechargeDatumDo
	WithContext(ctx context.Context) IUserRechargeDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRechargeDatumDo
	WriteDB() IUserRechargeDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRechargeDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRechargeDatumDo
	Not(conds ...gen.Condition) IUserRechargeDatumDo
	Or(conds ...gen.Condition) IUserRechargeDatumDo
	Select(conds ...field.Expr) IUserRechargeDatumDo
	Where(conds ...gen.Condition) IUserRechargeDatumDo
	Order(conds ...field.Expr) IUserRechargeDatumDo
	Distinct(cols ...field.Expr) IUserRechargeDatumDo
	Omit(cols ...field.Expr) IUserRechargeDatumDo
	Join(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo
	Group(cols ...field.Expr) IUserRechargeDatumDo
	Having(conds ...gen.Condition) IUserRechargeDatumDo
	Limit(limit int) IUserRechargeDatumDo
	Offset(offset int) IUserRechargeDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeDatumDo
	Unscoped() IUserRechargeDatumDo
	Create(values ...*model.UserRechargeDatum) error
	CreateInBatches(values []*model.UserRechargeDatum, batchSize int) error
	Save(values ...*model.UserRechargeDatum) error
	First() (*model.UserRechargeDatum, error)
	Take() (*model.UserRechargeDatum, error)
	Last() (*model.UserRechargeDatum, error)
	Find() ([]*model.UserRechargeDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRechargeDatum, err error)
	FindInBatches(result *[]*model.UserRechargeDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRechargeDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRechargeDatumDo
	Assign(attrs ...field.AssignExpr) IUserRechargeDatumDo
	Joins(fields ...field.RelationField) IUserRechargeDatumDo
	Preload(fields ...field.RelationField) IUserRechargeDatumDo
	FirstOrInit() (*model.UserRechargeDatum, error)
	FirstOrCreate() (*model.UserRechargeDatum, error)
	FindByPage(offset int, limit int) (result []*model.UserRechargeDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRechargeDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRechargeDatumDo) Debug() IUserRechargeDatumDo {
	return u.withDO(u.DO.Debug())
}

func (u userRechargeDatumDo) WithContext(ctx context.Context) IUserRechargeDatumDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRechargeDatumDo) ReadDB() IUserRechargeDatumDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRechargeDatumDo) WriteDB() IUserRechargeDatumDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRechargeDatumDo) Session(config *gorm.Session) IUserRechargeDatumDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRechargeDatumDo) Clauses(conds ...clause.Expression) IUserRechargeDatumDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRechargeDatumDo) Returning(value interface{}, columns ...string) IUserRechargeDatumDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRechargeDatumDo) Not(conds ...gen.Condition) IUserRechargeDatumDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRechargeDatumDo) Or(conds ...gen.Condition) IUserRechargeDatumDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRechargeDatumDo) Select(conds ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRechargeDatumDo) Where(conds ...gen.Condition) IUserRechargeDatumDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRechargeDatumDo) Order(conds ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRechargeDatumDo) Distinct(cols ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRechargeDatumDo) Omit(cols ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRechargeDatumDo) Join(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRechargeDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRechargeDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRechargeDatumDo) Group(cols ...field.Expr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRechargeDatumDo) Having(conds ...gen.Condition) IUserRechargeDatumDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRechargeDatumDo) Limit(limit int) IUserRechargeDatumDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRechargeDatumDo) Offset(offset int) IUserRechargeDatumDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRechargeDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeDatumDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRechargeDatumDo) Unscoped() IUserRechargeDatumDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRechargeDatumDo) Create(values ...*model.UserRechargeDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRechargeDatumDo) CreateInBatches(values []*model.UserRechargeDatum, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRechargeDatumDo) Save(values ...*model.UserRechargeDatum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRechargeDatumDo) First() (*model.UserRechargeDatum, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeDatum), nil
	}
}

func (u userRechargeDatumDo) Take() (*model.UserRechargeDatum, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeDatum), nil
	}
}

func (u userRechargeDatumDo) Last() (*model.UserRechargeDatum, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeDatum), nil
	}
}

func (u userRechargeDatumDo) Find() ([]*model.UserRechargeDatum, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRechargeDatum), err
}

func (u userRechargeDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRechargeDatum, err error) {
	buf := make([]*model.UserRechargeDatum, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRechargeDatumDo) FindInBatches(result *[]*model.UserRechargeDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRechargeDatumDo) Attrs(attrs ...field.AssignExpr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRechargeDatumDo) Assign(attrs ...field.AssignExpr) IUserRechargeDatumDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRechargeDatumDo) Joins(fields ...field.RelationField) IUserRechargeDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRechargeDatumDo) Preload(fields ...field.RelationField) IUserRechargeDatumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRechargeDatumDo) FirstOrInit() (*model.UserRechargeDatum, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeDatum), nil
	}
}

func (u userRechargeDatumDo) FirstOrCreate() (*model.UserRechargeDatum, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRechargeDatum), nil
	}
}

func (u userRechargeDatumDo) FindByPage(offset int, limit int) (result []*model.UserRechargeDatum, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRechargeDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRechargeDatumDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRechargeDatumDo) Delete(models ...*model.UserRechargeDatum) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRechargeDatumDo) withDO(do gen.Dao) *userRechargeDatumDo {
	u.DO = *do.(*gen.DO)
	return u
}
