// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newActivitysCopy1(db *gorm.DB, opts ...gen.DOOption) activitysCopy1 {
	_activitysCopy1 := activitysCopy1{}

	_activitysCopy1.activitysCopy1Do.UseDB(db, opts...)
	_activitysCopy1.activitysCopy1Do.UseModel(&model.ActivitysCopy1{})

	tableName := _activitysCopy1.activitysCopy1Do.TableName()
	_activitysCopy1.ALL = field.NewAsterisk(tableName)
	_activitysCopy1.ID = field.NewInt64(tableName, "id")
	_activitysCopy1.Title = field.NewString(tableName, "title")
	_activitysCopy1.TitleEn = field.NewString(tableName, "title_en")
	_activitysCopy1.ActivityTypeID = field.NewInt64(tableName, "activity_type_id")
	_activitysCopy1.TagID = field.NewInt64(tableName, "tag_id")
	_activitysCopy1.PicURL = field.NewString(tableName, "pic_url")
	_activitysCopy1.Content = field.NewString(tableName, "content")
	_activitysCopy1.IP = field.NewString(tableName, "ip")
	_activitysCopy1.OperatorName = field.NewString(tableName, "operator_name")
	_activitysCopy1.Remark = field.NewString(tableName, "remark")
	_activitysCopy1.StartAt = field.NewField(tableName, "start_at")
	_activitysCopy1.EndAt = field.NewField(tableName, "end_at")
	_activitysCopy1.Plat = field.NewInt64(tableName, "plat")
	_activitysCopy1.Sort = field.NewInt64(tableName, "sort")
	_activitysCopy1.IsOpen = field.NewInt64(tableName, "is_open")
	_activitysCopy1.HasBtn = field.NewInt64(tableName, "has_btn")
	_activitysCopy1.IsOnce = field.NewInt64(tableName, "is_once")
	_activitysCopy1.IsAutoSend = field.NewInt64(tableName, "is_auto_send")
	_activitysCopy1.CreatedAt = field.NewField(tableName, "created_at")
	_activitysCopy1.UpdatedAt = field.NewField(tableName, "updated_at")

	_activitysCopy1.fillFieldMap()

	return _activitysCopy1
}

// activitysCopy1 具体的活动
type activitysCopy1 struct {
	activitysCopy1Do activitysCopy1Do

	ALL            field.Asterisk
	ID             field.Int64
	Title          field.String // 活动名称
	TitleEn        field.String // 英文标题
	ActivityTypeID field.Int64  // 活动类型id
	TagID          field.Int64  // 活动标签id
	PicURL         field.String // 图片地址
	Content        field.String
	IP             field.String // ip
	OperatorName   field.String // 操作人
	Remark         field.String // 备注
	StartAt        field.Field  // 开始日期
	EndAt          field.Field  // 结束日期,结束日期即为开始日期
	Plat           field.Int64  // 终端;1:h5;2:pc
	Sort           field.Int64  // 排序
	IsOpen         field.Int64  // 是否开启0:否;1:是
	HasBtn         field.Int64  // 是否有button，0:没;1:有
	IsOnce         field.Int64  // 0:非一次性活动, 1:一次性活动
	IsAutoSend     field.Int64  // 0:非自动派送彩金, 1:自动派送彩金
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (a activitysCopy1) Table(newTableName string) *activitysCopy1 {
	a.activitysCopy1Do.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activitysCopy1) As(alias string) *activitysCopy1 {
	a.activitysCopy1Do.DO = *(a.activitysCopy1Do.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activitysCopy1) updateTableName(table string) *activitysCopy1 {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Title = field.NewString(table, "title")
	a.TitleEn = field.NewString(table, "title_en")
	a.ActivityTypeID = field.NewInt64(table, "activity_type_id")
	a.TagID = field.NewInt64(table, "tag_id")
	a.PicURL = field.NewString(table, "pic_url")
	a.Content = field.NewString(table, "content")
	a.IP = field.NewString(table, "ip")
	a.OperatorName = field.NewString(table, "operator_name")
	a.Remark = field.NewString(table, "remark")
	a.StartAt = field.NewField(table, "start_at")
	a.EndAt = field.NewField(table, "end_at")
	a.Plat = field.NewInt64(table, "plat")
	a.Sort = field.NewInt64(table, "sort")
	a.IsOpen = field.NewInt64(table, "is_open")
	a.HasBtn = field.NewInt64(table, "has_btn")
	a.IsOnce = field.NewInt64(table, "is_once")
	a.IsAutoSend = field.NewInt64(table, "is_auto_send")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *activitysCopy1) WithContext(ctx context.Context) IActivitysCopy1Do {
	return a.activitysCopy1Do.WithContext(ctx)
}

func (a activitysCopy1) TableName() string { return a.activitysCopy1Do.TableName() }

func (a activitysCopy1) Alias() string { return a.activitysCopy1Do.Alias() }

func (a activitysCopy1) Columns(cols ...field.Expr) gen.Columns {
	return a.activitysCopy1Do.Columns(cols...)
}

func (a *activitysCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activitysCopy1) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 20)
	a.fieldMap["id"] = a.ID
	a.fieldMap["title"] = a.Title
	a.fieldMap["title_en"] = a.TitleEn
	a.fieldMap["activity_type_id"] = a.ActivityTypeID
	a.fieldMap["tag_id"] = a.TagID
	a.fieldMap["pic_url"] = a.PicURL
	a.fieldMap["content"] = a.Content
	a.fieldMap["ip"] = a.IP
	a.fieldMap["operator_name"] = a.OperatorName
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["start_at"] = a.StartAt
	a.fieldMap["end_at"] = a.EndAt
	a.fieldMap["plat"] = a.Plat
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["has_btn"] = a.HasBtn
	a.fieldMap["is_once"] = a.IsOnce
	a.fieldMap["is_auto_send"] = a.IsAutoSend
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a activitysCopy1) clone(db *gorm.DB) activitysCopy1 {
	a.activitysCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activitysCopy1) replaceDB(db *gorm.DB) activitysCopy1 {
	a.activitysCopy1Do.ReplaceDB(db)
	return a
}

type activitysCopy1Do struct{ gen.DO }

type IActivitysCopy1Do interface {
	gen.SubQuery
	Debug() IActivitysCopy1Do
	WithContext(ctx context.Context) IActivitysCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivitysCopy1Do
	WriteDB() IActivitysCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivitysCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivitysCopy1Do
	Not(conds ...gen.Condition) IActivitysCopy1Do
	Or(conds ...gen.Condition) IActivitysCopy1Do
	Select(conds ...field.Expr) IActivitysCopy1Do
	Where(conds ...gen.Condition) IActivitysCopy1Do
	Order(conds ...field.Expr) IActivitysCopy1Do
	Distinct(cols ...field.Expr) IActivitysCopy1Do
	Omit(cols ...field.Expr) IActivitysCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do
	Group(cols ...field.Expr) IActivitysCopy1Do
	Having(conds ...gen.Condition) IActivitysCopy1Do
	Limit(limit int) IActivitysCopy1Do
	Offset(offset int) IActivitysCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitysCopy1Do
	Unscoped() IActivitysCopy1Do
	Create(values ...*model.ActivitysCopy1) error
	CreateInBatches(values []*model.ActivitysCopy1, batchSize int) error
	Save(values ...*model.ActivitysCopy1) error
	First() (*model.ActivitysCopy1, error)
	Take() (*model.ActivitysCopy1, error)
	Last() (*model.ActivitysCopy1, error)
	Find() ([]*model.ActivitysCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitysCopy1, err error)
	FindInBatches(result *[]*model.ActivitysCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivitysCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivitysCopy1Do
	Assign(attrs ...field.AssignExpr) IActivitysCopy1Do
	Joins(fields ...field.RelationField) IActivitysCopy1Do
	Preload(fields ...field.RelationField) IActivitysCopy1Do
	FirstOrInit() (*model.ActivitysCopy1, error)
	FirstOrCreate() (*model.ActivitysCopy1, error)
	FindByPage(offset int, limit int) (result []*model.ActivitysCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivitysCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activitysCopy1Do) Debug() IActivitysCopy1Do {
	return a.withDO(a.DO.Debug())
}

func (a activitysCopy1Do) WithContext(ctx context.Context) IActivitysCopy1Do {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activitysCopy1Do) ReadDB() IActivitysCopy1Do {
	return a.Clauses(dbresolver.Read)
}

func (a activitysCopy1Do) WriteDB() IActivitysCopy1Do {
	return a.Clauses(dbresolver.Write)
}

func (a activitysCopy1Do) Session(config *gorm.Session) IActivitysCopy1Do {
	return a.withDO(a.DO.Session(config))
}

func (a activitysCopy1Do) Clauses(conds ...clause.Expression) IActivitysCopy1Do {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activitysCopy1Do) Returning(value interface{}, columns ...string) IActivitysCopy1Do {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activitysCopy1Do) Not(conds ...gen.Condition) IActivitysCopy1Do {
	return a.withDO(a.DO.Not(conds...))
}

func (a activitysCopy1Do) Or(conds ...gen.Condition) IActivitysCopy1Do {
	return a.withDO(a.DO.Or(conds...))
}

func (a activitysCopy1Do) Select(conds ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Select(conds...))
}

func (a activitysCopy1Do) Where(conds ...gen.Condition) IActivitysCopy1Do {
	return a.withDO(a.DO.Where(conds...))
}

func (a activitysCopy1Do) Order(conds ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Order(conds...))
}

func (a activitysCopy1Do) Distinct(cols ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activitysCopy1Do) Omit(cols ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activitysCopy1Do) Join(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activitysCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activitysCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activitysCopy1Do) Group(cols ...field.Expr) IActivitysCopy1Do {
	return a.withDO(a.DO.Group(cols...))
}

func (a activitysCopy1Do) Having(conds ...gen.Condition) IActivitysCopy1Do {
	return a.withDO(a.DO.Having(conds...))
}

func (a activitysCopy1Do) Limit(limit int) IActivitysCopy1Do {
	return a.withDO(a.DO.Limit(limit))
}

func (a activitysCopy1Do) Offset(offset int) IActivitysCopy1Do {
	return a.withDO(a.DO.Offset(offset))
}

func (a activitysCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivitysCopy1Do {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activitysCopy1Do) Unscoped() IActivitysCopy1Do {
	return a.withDO(a.DO.Unscoped())
}

func (a activitysCopy1Do) Create(values ...*model.ActivitysCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activitysCopy1Do) CreateInBatches(values []*model.ActivitysCopy1, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activitysCopy1Do) Save(values ...*model.ActivitysCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activitysCopy1Do) First() (*model.ActivitysCopy1, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitysCopy1), nil
	}
}

func (a activitysCopy1Do) Take() (*model.ActivitysCopy1, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitysCopy1), nil
	}
}

func (a activitysCopy1Do) Last() (*model.ActivitysCopy1, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitysCopy1), nil
	}
}

func (a activitysCopy1Do) Find() ([]*model.ActivitysCopy1, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivitysCopy1), err
}

func (a activitysCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivitysCopy1, err error) {
	buf := make([]*model.ActivitysCopy1, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activitysCopy1Do) FindInBatches(result *[]*model.ActivitysCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activitysCopy1Do) Attrs(attrs ...field.AssignExpr) IActivitysCopy1Do {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activitysCopy1Do) Assign(attrs ...field.AssignExpr) IActivitysCopy1Do {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activitysCopy1Do) Joins(fields ...field.RelationField) IActivitysCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activitysCopy1Do) Preload(fields ...field.RelationField) IActivitysCopy1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activitysCopy1Do) FirstOrInit() (*model.ActivitysCopy1, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitysCopy1), nil
	}
}

func (a activitysCopy1Do) FirstOrCreate() (*model.ActivitysCopy1, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivitysCopy1), nil
	}
}

func (a activitysCopy1Do) FindByPage(offset int, limit int) (result []*model.ActivitysCopy1, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activitysCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activitysCopy1Do) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activitysCopy1Do) Delete(models ...*model.ActivitysCopy1) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activitysCopy1Do) withDO(do gen.Dao) *activitysCopy1Do {
	a.DO = *do.(*gen.DO)
	return a
}
