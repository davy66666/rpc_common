// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserRebateSetting(db *gorm.DB, opts ...gen.DOOption) userRebateSetting {
	_userRebateSetting := userRebateSetting{}

	_userRebateSetting.userRebateSettingDo.UseDB(db, opts...)
	_userRebateSetting.userRebateSettingDo.UseModel(&model.UserRebateSetting{})

	tableName := _userRebateSetting.userRebateSettingDo.TableName()
	_userRebateSetting.ALL = field.NewAsterisk(tableName)
	_userRebateSetting.ID = field.NewInt64(tableName, "id")
	_userRebateSetting.StartMoney = field.NewInt64(tableName, "start_money")
	_userRebateSetting.EndMoney = field.NewInt64(tableName, "end_money")
	_userRebateSetting.Setting = field.NewString(tableName, "setting")
	_userRebateSetting.CreatedAt = field.NewField(tableName, "created_at")
	_userRebateSetting.UpdatedAt = field.NewField(tableName, "updated_at")

	_userRebateSetting.fillFieldMap()

	return _userRebateSetting
}

type userRebateSetting struct {
	userRebateSettingDo userRebateSettingDo

	ALL        field.Asterisk
	ID         field.Int64
	StartMoney field.Int64  // 起始金额
	EndMoney   field.Int64  // 结束金额
	Setting    field.String // 返水配置(内容数据为百分比数字，使用时需要除100)
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (u userRebateSetting) Table(newTableName string) *userRebateSetting {
	u.userRebateSettingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRebateSetting) As(alias string) *userRebateSetting {
	u.userRebateSettingDo.DO = *(u.userRebateSettingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRebateSetting) updateTableName(table string) *userRebateSetting {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.StartMoney = field.NewInt64(table, "start_money")
	u.EndMoney = field.NewInt64(table, "end_money")
	u.Setting = field.NewString(table, "setting")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRebateSetting) WithContext(ctx context.Context) IUserRebateSettingDo {
	return u.userRebateSettingDo.WithContext(ctx)
}

func (u userRebateSetting) TableName() string { return u.userRebateSettingDo.TableName() }

func (u userRebateSetting) Alias() string { return u.userRebateSettingDo.Alias() }

func (u userRebateSetting) Columns(cols ...field.Expr) gen.Columns {
	return u.userRebateSettingDo.Columns(cols...)
}

func (u *userRebateSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRebateSetting) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["start_money"] = u.StartMoney
	u.fieldMap["end_money"] = u.EndMoney
	u.fieldMap["setting"] = u.Setting
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRebateSetting) clone(db *gorm.DB) userRebateSetting {
	u.userRebateSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRebateSetting) replaceDB(db *gorm.DB) userRebateSetting {
	u.userRebateSettingDo.ReplaceDB(db)
	return u
}

type userRebateSettingDo struct{ gen.DO }

type IUserRebateSettingDo interface {
	gen.SubQuery
	Debug() IUserRebateSettingDo
	WithContext(ctx context.Context) IUserRebateSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRebateSettingDo
	WriteDB() IUserRebateSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRebateSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRebateSettingDo
	Not(conds ...gen.Condition) IUserRebateSettingDo
	Or(conds ...gen.Condition) IUserRebateSettingDo
	Select(conds ...field.Expr) IUserRebateSettingDo
	Where(conds ...gen.Condition) IUserRebateSettingDo
	Order(conds ...field.Expr) IUserRebateSettingDo
	Distinct(cols ...field.Expr) IUserRebateSettingDo
	Omit(cols ...field.Expr) IUserRebateSettingDo
	Join(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo
	Group(cols ...field.Expr) IUserRebateSettingDo
	Having(conds ...gen.Condition) IUserRebateSettingDo
	Limit(limit int) IUserRebateSettingDo
	Offset(offset int) IUserRebateSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRebateSettingDo
	Unscoped() IUserRebateSettingDo
	Create(values ...*model.UserRebateSetting) error
	CreateInBatches(values []*model.UserRebateSetting, batchSize int) error
	Save(values ...*model.UserRebateSetting) error
	First() (*model.UserRebateSetting, error)
	Take() (*model.UserRebateSetting, error)
	Last() (*model.UserRebateSetting, error)
	Find() ([]*model.UserRebateSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRebateSetting, err error)
	FindInBatches(result *[]*model.UserRebateSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRebateSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRebateSettingDo
	Assign(attrs ...field.AssignExpr) IUserRebateSettingDo
	Joins(fields ...field.RelationField) IUserRebateSettingDo
	Preload(fields ...field.RelationField) IUserRebateSettingDo
	FirstOrInit() (*model.UserRebateSetting, error)
	FirstOrCreate() (*model.UserRebateSetting, error)
	FindByPage(offset int, limit int) (result []*model.UserRebateSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRebateSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRebateSettingDo) Debug() IUserRebateSettingDo {
	return u.withDO(u.DO.Debug())
}

func (u userRebateSettingDo) WithContext(ctx context.Context) IUserRebateSettingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRebateSettingDo) ReadDB() IUserRebateSettingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRebateSettingDo) WriteDB() IUserRebateSettingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRebateSettingDo) Session(config *gorm.Session) IUserRebateSettingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRebateSettingDo) Clauses(conds ...clause.Expression) IUserRebateSettingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRebateSettingDo) Returning(value interface{}, columns ...string) IUserRebateSettingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRebateSettingDo) Not(conds ...gen.Condition) IUserRebateSettingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRebateSettingDo) Or(conds ...gen.Condition) IUserRebateSettingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRebateSettingDo) Select(conds ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRebateSettingDo) Where(conds ...gen.Condition) IUserRebateSettingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRebateSettingDo) Order(conds ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRebateSettingDo) Distinct(cols ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRebateSettingDo) Omit(cols ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRebateSettingDo) Join(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRebateSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRebateSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRebateSettingDo) Group(cols ...field.Expr) IUserRebateSettingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRebateSettingDo) Having(conds ...gen.Condition) IUserRebateSettingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRebateSettingDo) Limit(limit int) IUserRebateSettingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRebateSettingDo) Offset(offset int) IUserRebateSettingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRebateSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRebateSettingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRebateSettingDo) Unscoped() IUserRebateSettingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRebateSettingDo) Create(values ...*model.UserRebateSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRebateSettingDo) CreateInBatches(values []*model.UserRebateSetting, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRebateSettingDo) Save(values ...*model.UserRebateSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRebateSettingDo) First() (*model.UserRebateSetting, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRebateSetting), nil
	}
}

func (u userRebateSettingDo) Take() (*model.UserRebateSetting, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRebateSetting), nil
	}
}

func (u userRebateSettingDo) Last() (*model.UserRebateSetting, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRebateSetting), nil
	}
}

func (u userRebateSettingDo) Find() ([]*model.UserRebateSetting, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRebateSetting), err
}

func (u userRebateSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRebateSetting, err error) {
	buf := make([]*model.UserRebateSetting, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRebateSettingDo) FindInBatches(result *[]*model.UserRebateSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRebateSettingDo) Attrs(attrs ...field.AssignExpr) IUserRebateSettingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRebateSettingDo) Assign(attrs ...field.AssignExpr) IUserRebateSettingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRebateSettingDo) Joins(fields ...field.RelationField) IUserRebateSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRebateSettingDo) Preload(fields ...field.RelationField) IUserRebateSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRebateSettingDo) FirstOrInit() (*model.UserRebateSetting, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRebateSetting), nil
	}
}

func (u userRebateSettingDo) FirstOrCreate() (*model.UserRebateSetting, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRebateSetting), nil
	}
}

func (u userRebateSettingDo) FindByPage(offset int, limit int) (result []*model.UserRebateSetting, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRebateSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRebateSettingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRebateSettingDo) Delete(models ...*model.UserRebateSetting) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRebateSettingDo) withDO(do gen.Dao) *userRebateSettingDo {
	u.DO = *do.(*gen.DO)
	return u
}
