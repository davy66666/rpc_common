// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserEngagelabRegisterID(db *gorm.DB, opts ...gen.DOOption) userEngagelabRegisterID {
	_userEngagelabRegisterID := userEngagelabRegisterID{}

	_userEngagelabRegisterID.userEngagelabRegisterIDDo.UseDB(db, opts...)
	_userEngagelabRegisterID.userEngagelabRegisterIDDo.UseModel(&model.UserEngagelabRegisterID{})

	tableName := _userEngagelabRegisterID.userEngagelabRegisterIDDo.TableName()
	_userEngagelabRegisterID.ALL = field.NewAsterisk(tableName)
	_userEngagelabRegisterID.ID = field.NewInt64(tableName, "id")
	_userEngagelabRegisterID.UserID = field.NewInt64(tableName, "user_id")
	_userEngagelabRegisterID.Username = field.NewString(tableName, "username")
	_userEngagelabRegisterID.Plat = field.NewInt64(tableName, "plat")
	_userEngagelabRegisterID.RegistrationID = field.NewString(tableName, "registration_id")
	_userEngagelabRegisterID.CreatedAt = field.NewField(tableName, "created_at")
	_userEngagelabRegisterID.UpdatedAt = field.NewField(tableName, "updated_at")
	_userEngagelabRegisterID.Host = field.NewString(tableName, "host")

	_userEngagelabRegisterID.fillFieldMap()

	return _userEngagelabRegisterID
}

type userEngagelabRegisterID struct {
	userEngagelabRegisterIDDo userEngagelabRegisterIDDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64
	Username       field.String
	Plat           field.Int64  // 终端设备
	RegistrationID field.String // 注册id
	CreatedAt      field.Field
	UpdatedAt      field.Field
	Host           field.String // 域名

	fieldMap map[string]field.Expr
}

func (u userEngagelabRegisterID) Table(newTableName string) *userEngagelabRegisterID {
	u.userEngagelabRegisterIDDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEngagelabRegisterID) As(alias string) *userEngagelabRegisterID {
	u.userEngagelabRegisterIDDo.DO = *(u.userEngagelabRegisterIDDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEngagelabRegisterID) updateTableName(table string) *userEngagelabRegisterID {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.Plat = field.NewInt64(table, "plat")
	u.RegistrationID = field.NewString(table, "registration_id")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")
	u.Host = field.NewString(table, "host")

	u.fillFieldMap()

	return u
}

func (u *userEngagelabRegisterID) WithContext(ctx context.Context) IUserEngagelabRegisterIDDo {
	return u.userEngagelabRegisterIDDo.WithContext(ctx)
}

func (u userEngagelabRegisterID) TableName() string { return u.userEngagelabRegisterIDDo.TableName() }

func (u userEngagelabRegisterID) Alias() string { return u.userEngagelabRegisterIDDo.Alias() }

func (u userEngagelabRegisterID) Columns(cols ...field.Expr) gen.Columns {
	return u.userEngagelabRegisterIDDo.Columns(cols...)
}

func (u *userEngagelabRegisterID) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEngagelabRegisterID) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["plat"] = u.Plat
	u.fieldMap["registration_id"] = u.RegistrationID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["host"] = u.Host
}

func (u userEngagelabRegisterID) clone(db *gorm.DB) userEngagelabRegisterID {
	u.userEngagelabRegisterIDDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEngagelabRegisterID) replaceDB(db *gorm.DB) userEngagelabRegisterID {
	u.userEngagelabRegisterIDDo.ReplaceDB(db)
	return u
}

type userEngagelabRegisterIDDo struct{ gen.DO }

type IUserEngagelabRegisterIDDo interface {
	gen.SubQuery
	Debug() IUserEngagelabRegisterIDDo
	WithContext(ctx context.Context) IUserEngagelabRegisterIDDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEngagelabRegisterIDDo
	WriteDB() IUserEngagelabRegisterIDDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEngagelabRegisterIDDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEngagelabRegisterIDDo
	Not(conds ...gen.Condition) IUserEngagelabRegisterIDDo
	Or(conds ...gen.Condition) IUserEngagelabRegisterIDDo
	Select(conds ...field.Expr) IUserEngagelabRegisterIDDo
	Where(conds ...gen.Condition) IUserEngagelabRegisterIDDo
	Order(conds ...field.Expr) IUserEngagelabRegisterIDDo
	Distinct(cols ...field.Expr) IUserEngagelabRegisterIDDo
	Omit(cols ...field.Expr) IUserEngagelabRegisterIDDo
	Join(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo
	Group(cols ...field.Expr) IUserEngagelabRegisterIDDo
	Having(conds ...gen.Condition) IUserEngagelabRegisterIDDo
	Limit(limit int) IUserEngagelabRegisterIDDo
	Offset(offset int) IUserEngagelabRegisterIDDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEngagelabRegisterIDDo
	Unscoped() IUserEngagelabRegisterIDDo
	Create(values ...*model.UserEngagelabRegisterID) error
	CreateInBatches(values []*model.UserEngagelabRegisterID, batchSize int) error
	Save(values ...*model.UserEngagelabRegisterID) error
	First() (*model.UserEngagelabRegisterID, error)
	Take() (*model.UserEngagelabRegisterID, error)
	Last() (*model.UserEngagelabRegisterID, error)
	Find() ([]*model.UserEngagelabRegisterID, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEngagelabRegisterID, err error)
	FindInBatches(result *[]*model.UserEngagelabRegisterID, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEngagelabRegisterID) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEngagelabRegisterIDDo
	Assign(attrs ...field.AssignExpr) IUserEngagelabRegisterIDDo
	Joins(fields ...field.RelationField) IUserEngagelabRegisterIDDo
	Preload(fields ...field.RelationField) IUserEngagelabRegisterIDDo
	FirstOrInit() (*model.UserEngagelabRegisterID, error)
	FirstOrCreate() (*model.UserEngagelabRegisterID, error)
	FindByPage(offset int, limit int) (result []*model.UserEngagelabRegisterID, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEngagelabRegisterIDDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEngagelabRegisterIDDo) Debug() IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Debug())
}

func (u userEngagelabRegisterIDDo) WithContext(ctx context.Context) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEngagelabRegisterIDDo) ReadDB() IUserEngagelabRegisterIDDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEngagelabRegisterIDDo) WriteDB() IUserEngagelabRegisterIDDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEngagelabRegisterIDDo) Session(config *gorm.Session) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEngagelabRegisterIDDo) Clauses(conds ...clause.Expression) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEngagelabRegisterIDDo) Returning(value interface{}, columns ...string) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEngagelabRegisterIDDo) Not(conds ...gen.Condition) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEngagelabRegisterIDDo) Or(conds ...gen.Condition) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEngagelabRegisterIDDo) Select(conds ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEngagelabRegisterIDDo) Where(conds ...gen.Condition) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEngagelabRegisterIDDo) Order(conds ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEngagelabRegisterIDDo) Distinct(cols ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEngagelabRegisterIDDo) Omit(cols ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEngagelabRegisterIDDo) Join(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEngagelabRegisterIDDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEngagelabRegisterIDDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEngagelabRegisterIDDo) Group(cols ...field.Expr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEngagelabRegisterIDDo) Having(conds ...gen.Condition) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEngagelabRegisterIDDo) Limit(limit int) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEngagelabRegisterIDDo) Offset(offset int) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEngagelabRegisterIDDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEngagelabRegisterIDDo) Unscoped() IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEngagelabRegisterIDDo) Create(values ...*model.UserEngagelabRegisterID) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEngagelabRegisterIDDo) CreateInBatches(values []*model.UserEngagelabRegisterID, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEngagelabRegisterIDDo) Save(values ...*model.UserEngagelabRegisterID) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEngagelabRegisterIDDo) First() (*model.UserEngagelabRegisterID, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterID), nil
	}
}

func (u userEngagelabRegisterIDDo) Take() (*model.UserEngagelabRegisterID, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterID), nil
	}
}

func (u userEngagelabRegisterIDDo) Last() (*model.UserEngagelabRegisterID, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterID), nil
	}
}

func (u userEngagelabRegisterIDDo) Find() ([]*model.UserEngagelabRegisterID, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEngagelabRegisterID), err
}

func (u userEngagelabRegisterIDDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEngagelabRegisterID, err error) {
	buf := make([]*model.UserEngagelabRegisterID, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEngagelabRegisterIDDo) FindInBatches(result *[]*model.UserEngagelabRegisterID, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEngagelabRegisterIDDo) Attrs(attrs ...field.AssignExpr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEngagelabRegisterIDDo) Assign(attrs ...field.AssignExpr) IUserEngagelabRegisterIDDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEngagelabRegisterIDDo) Joins(fields ...field.RelationField) IUserEngagelabRegisterIDDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEngagelabRegisterIDDo) Preload(fields ...field.RelationField) IUserEngagelabRegisterIDDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEngagelabRegisterIDDo) FirstOrInit() (*model.UserEngagelabRegisterID, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterID), nil
	}
}

func (u userEngagelabRegisterIDDo) FirstOrCreate() (*model.UserEngagelabRegisterID, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEngagelabRegisterID), nil
	}
}

func (u userEngagelabRegisterIDDo) FindByPage(offset int, limit int) (result []*model.UserEngagelabRegisterID, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEngagelabRegisterIDDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEngagelabRegisterIDDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEngagelabRegisterIDDo) Delete(models ...*model.UserEngagelabRegisterID) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEngagelabRegisterIDDo) withDO(do gen.Dao) *userEngagelabRegisterIDDo {
	u.DO = *do.(*gen.DO)
	return u
}
