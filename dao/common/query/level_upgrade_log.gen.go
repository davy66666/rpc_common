// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newLevelUpgradeLog(db *gorm.DB, opts ...gen.DOOption) levelUpgradeLog {
	_levelUpgradeLog := levelUpgradeLog{}

	_levelUpgradeLog.levelUpgradeLogDo.UseDB(db, opts...)
	_levelUpgradeLog.levelUpgradeLogDo.UseModel(&model.LevelUpgradeLog{})

	tableName := _levelUpgradeLog.levelUpgradeLogDo.TableName()
	_levelUpgradeLog.ALL = field.NewAsterisk(tableName)
	_levelUpgradeLog.ID = field.NewInt64(tableName, "id")
	_levelUpgradeLog.UserID = field.NewInt64(tableName, "user_id")
	_levelUpgradeLog.Username = field.NewString(tableName, "username")
	_levelUpgradeLog.OldPayLevelID = field.NewInt64(tableName, "old_pay_level_id")
	_levelUpgradeLog.NewPayLevelID = field.NewInt64(tableName, "new_pay_level_id")
	_levelUpgradeLog.AdminUser = field.NewString(tableName, "admin_user")
	_levelUpgradeLog.Remark = field.NewString(tableName, "remark")
	_levelUpgradeLog.CreatedAt = field.NewField(tableName, "created_at")
	_levelUpgradeLog.Reason = field.NewString(tableName, "reason")
	_levelUpgradeLog.BillID = field.NewString(tableName, "bill_id")

	_levelUpgradeLog.fillFieldMap()

	return _levelUpgradeLog
}

type levelUpgradeLog struct {
	levelUpgradeLogDo levelUpgradeLogDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64  // 用户uid
	Username      field.String // 用户账号
	OldPayLevelID field.Int64  // 原始支付分层ID
	NewPayLevelID field.Int64  // 新支付分层ID
	AdminUser     field.String // 操作人
	Remark        field.String // 备注
	CreatedAt     field.Field
	Reason        field.String // 变动原因
	BillID        field.String // 订单号

	fieldMap map[string]field.Expr
}

func (l levelUpgradeLog) Table(newTableName string) *levelUpgradeLog {
	l.levelUpgradeLogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l levelUpgradeLog) As(alias string) *levelUpgradeLog {
	l.levelUpgradeLogDo.DO = *(l.levelUpgradeLogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *levelUpgradeLog) updateTableName(table string) *levelUpgradeLog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.UserID = field.NewInt64(table, "user_id")
	l.Username = field.NewString(table, "username")
	l.OldPayLevelID = field.NewInt64(table, "old_pay_level_id")
	l.NewPayLevelID = field.NewInt64(table, "new_pay_level_id")
	l.AdminUser = field.NewString(table, "admin_user")
	l.Remark = field.NewString(table, "remark")
	l.CreatedAt = field.NewField(table, "created_at")
	l.Reason = field.NewString(table, "reason")
	l.BillID = field.NewString(table, "bill_id")

	l.fillFieldMap()

	return l
}

func (l *levelUpgradeLog) WithContext(ctx context.Context) ILevelUpgradeLogDo {
	return l.levelUpgradeLogDo.WithContext(ctx)
}

func (l levelUpgradeLog) TableName() string { return l.levelUpgradeLogDo.TableName() }

func (l levelUpgradeLog) Alias() string { return l.levelUpgradeLogDo.Alias() }

func (l levelUpgradeLog) Columns(cols ...field.Expr) gen.Columns {
	return l.levelUpgradeLogDo.Columns(cols...)
}

func (l *levelUpgradeLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *levelUpgradeLog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["username"] = l.Username
	l.fieldMap["old_pay_level_id"] = l.OldPayLevelID
	l.fieldMap["new_pay_level_id"] = l.NewPayLevelID
	l.fieldMap["admin_user"] = l.AdminUser
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["reason"] = l.Reason
	l.fieldMap["bill_id"] = l.BillID
}

func (l levelUpgradeLog) clone(db *gorm.DB) levelUpgradeLog {
	l.levelUpgradeLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l levelUpgradeLog) replaceDB(db *gorm.DB) levelUpgradeLog {
	l.levelUpgradeLogDo.ReplaceDB(db)
	return l
}

type levelUpgradeLogDo struct{ gen.DO }

type ILevelUpgradeLogDo interface {
	gen.SubQuery
	Debug() ILevelUpgradeLogDo
	WithContext(ctx context.Context) ILevelUpgradeLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILevelUpgradeLogDo
	WriteDB() ILevelUpgradeLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILevelUpgradeLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILevelUpgradeLogDo
	Not(conds ...gen.Condition) ILevelUpgradeLogDo
	Or(conds ...gen.Condition) ILevelUpgradeLogDo
	Select(conds ...field.Expr) ILevelUpgradeLogDo
	Where(conds ...gen.Condition) ILevelUpgradeLogDo
	Order(conds ...field.Expr) ILevelUpgradeLogDo
	Distinct(cols ...field.Expr) ILevelUpgradeLogDo
	Omit(cols ...field.Expr) ILevelUpgradeLogDo
	Join(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo
	Group(cols ...field.Expr) ILevelUpgradeLogDo
	Having(conds ...gen.Condition) ILevelUpgradeLogDo
	Limit(limit int) ILevelUpgradeLogDo
	Offset(offset int) ILevelUpgradeLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILevelUpgradeLogDo
	Unscoped() ILevelUpgradeLogDo
	Create(values ...*model.LevelUpgradeLog) error
	CreateInBatches(values []*model.LevelUpgradeLog, batchSize int) error
	Save(values ...*model.LevelUpgradeLog) error
	First() (*model.LevelUpgradeLog, error)
	Take() (*model.LevelUpgradeLog, error)
	Last() (*model.LevelUpgradeLog, error)
	Find() ([]*model.LevelUpgradeLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LevelUpgradeLog, err error)
	FindInBatches(result *[]*model.LevelUpgradeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LevelUpgradeLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILevelUpgradeLogDo
	Assign(attrs ...field.AssignExpr) ILevelUpgradeLogDo
	Joins(fields ...field.RelationField) ILevelUpgradeLogDo
	Preload(fields ...field.RelationField) ILevelUpgradeLogDo
	FirstOrInit() (*model.LevelUpgradeLog, error)
	FirstOrCreate() (*model.LevelUpgradeLog, error)
	FindByPage(offset int, limit int) (result []*model.LevelUpgradeLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILevelUpgradeLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l levelUpgradeLogDo) Debug() ILevelUpgradeLogDo {
	return l.withDO(l.DO.Debug())
}

func (l levelUpgradeLogDo) WithContext(ctx context.Context) ILevelUpgradeLogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l levelUpgradeLogDo) ReadDB() ILevelUpgradeLogDo {
	return l.Clauses(dbresolver.Read)
}

func (l levelUpgradeLogDo) WriteDB() ILevelUpgradeLogDo {
	return l.Clauses(dbresolver.Write)
}

func (l levelUpgradeLogDo) Session(config *gorm.Session) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Session(config))
}

func (l levelUpgradeLogDo) Clauses(conds ...clause.Expression) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l levelUpgradeLogDo) Returning(value interface{}, columns ...string) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l levelUpgradeLogDo) Not(conds ...gen.Condition) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l levelUpgradeLogDo) Or(conds ...gen.Condition) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l levelUpgradeLogDo) Select(conds ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l levelUpgradeLogDo) Where(conds ...gen.Condition) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l levelUpgradeLogDo) Order(conds ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l levelUpgradeLogDo) Distinct(cols ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l levelUpgradeLogDo) Omit(cols ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l levelUpgradeLogDo) Join(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l levelUpgradeLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l levelUpgradeLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l levelUpgradeLogDo) Group(cols ...field.Expr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l levelUpgradeLogDo) Having(conds ...gen.Condition) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l levelUpgradeLogDo) Limit(limit int) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l levelUpgradeLogDo) Offset(offset int) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l levelUpgradeLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l levelUpgradeLogDo) Unscoped() ILevelUpgradeLogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l levelUpgradeLogDo) Create(values ...*model.LevelUpgradeLog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l levelUpgradeLogDo) CreateInBatches(values []*model.LevelUpgradeLog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l levelUpgradeLogDo) Save(values ...*model.LevelUpgradeLog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l levelUpgradeLogDo) First() (*model.LevelUpgradeLog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LevelUpgradeLog), nil
	}
}

func (l levelUpgradeLogDo) Take() (*model.LevelUpgradeLog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LevelUpgradeLog), nil
	}
}

func (l levelUpgradeLogDo) Last() (*model.LevelUpgradeLog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LevelUpgradeLog), nil
	}
}

func (l levelUpgradeLogDo) Find() ([]*model.LevelUpgradeLog, error) {
	result, err := l.DO.Find()
	return result.([]*model.LevelUpgradeLog), err
}

func (l levelUpgradeLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LevelUpgradeLog, err error) {
	buf := make([]*model.LevelUpgradeLog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l levelUpgradeLogDo) FindInBatches(result *[]*model.LevelUpgradeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l levelUpgradeLogDo) Attrs(attrs ...field.AssignExpr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l levelUpgradeLogDo) Assign(attrs ...field.AssignExpr) ILevelUpgradeLogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l levelUpgradeLogDo) Joins(fields ...field.RelationField) ILevelUpgradeLogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l levelUpgradeLogDo) Preload(fields ...field.RelationField) ILevelUpgradeLogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l levelUpgradeLogDo) FirstOrInit() (*model.LevelUpgradeLog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LevelUpgradeLog), nil
	}
}

func (l levelUpgradeLogDo) FirstOrCreate() (*model.LevelUpgradeLog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LevelUpgradeLog), nil
	}
}

func (l levelUpgradeLogDo) FindByPage(offset int, limit int) (result []*model.LevelUpgradeLog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l levelUpgradeLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l levelUpgradeLogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l levelUpgradeLogDo) Delete(models ...*model.LevelUpgradeLog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *levelUpgradeLogDo) withDO(do gen.Dao) *levelUpgradeLogDo {
	l.DO = *do.(*gen.DO)
	return l
}
