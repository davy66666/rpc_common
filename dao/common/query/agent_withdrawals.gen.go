// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentWithdrawal(db *gorm.DB, opts ...gen.DOOption) agentWithdrawal {
	_agentWithdrawal := agentWithdrawal{}

	_agentWithdrawal.agentWithdrawalDo.UseDB(db, opts...)
	_agentWithdrawal.agentWithdrawalDo.UseModel(&model.AgentWithdrawal{})

	tableName := _agentWithdrawal.agentWithdrawalDo.TableName()
	_agentWithdrawal.ALL = field.NewAsterisk(tableName)
	_agentWithdrawal.ID = field.NewInt64(tableName, "id")
	_agentWithdrawal.BillNo = field.NewString(tableName, "bill_no")
	_agentWithdrawal.AgentID = field.NewInt64(tableName, "agent_id")
	_agentWithdrawal.AgentName = field.NewString(tableName, "agent_name")
	_agentWithdrawal.ParentID = field.NewInt64(tableName, "parent_id")
	_agentWithdrawal.ParentName = field.NewString(tableName, "parent_name")
	_agentWithdrawal.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_agentWithdrawal.BeforeMoney = field.NewFloat64(tableName, "before_money")
	_agentWithdrawal.Amount = field.NewFloat64(tableName, "amount")
	_agentWithdrawal.Money = field.NewFloat64(tableName, "money")
	_agentWithdrawal.CardID = field.NewString(tableName, "card_id")
	_agentWithdrawal.PayName = field.NewString(tableName, "pay_name")
	_agentWithdrawal.RealName = field.NewString(tableName, "real_name")
	_agentWithdrawal.Status = field.NewInt64(tableName, "status")
	_agentWithdrawal.PayMode = field.NewInt64(tableName, "pay_mode")
	_agentWithdrawal.AutoOrderID = field.NewString(tableName, "auto_order_id")
	_agentWithdrawal.BankType = field.NewInt64(tableName, "bank_type")
	_agentWithdrawal.ExRate = field.NewFloat64(tableName, "ex_rate")
	_agentWithdrawal.ExMoney = field.NewFloat64(tableName, "ex_money")
	_agentWithdrawal.Description = field.NewString(tableName, "description")
	_agentWithdrawal.CheckTime = field.NewField(tableName, "check_time")
	_agentWithdrawal.AdminID = field.NewInt64(tableName, "admin_id")
	_agentWithdrawal.AdminName = field.NewString(tableName, "admin_name")
	_agentWithdrawal.OperatorID = field.NewInt64(tableName, "operator_id")
	_agentWithdrawal.OperatorName = field.NewString(tableName, "operator_name")
	_agentWithdrawal.DealTime = field.NewField(tableName, "deal_time")
	_agentWithdrawal.IP = field.NewString(tableName, "ip")
	_agentWithdrawal.OtherFee = field.NewFloat64(tableName, "other_fee")
	_agentWithdrawal.HandlingFee = field.NewFloat64(tableName, "handling_fee")
	_agentWithdrawal.HandlingFeeRate = field.NewFloat64(tableName, "handling_fee_rate")
	_agentWithdrawal.GiftMoneyRate = field.NewFloat64(tableName, "gift_money_rate")
	_agentWithdrawal.GiftMoney = field.NewFloat64(tableName, "gift_money")
	_agentWithdrawal.Remark = field.NewString(tableName, "remark")
	_agentWithdrawal.AgentRemark = field.NewString(tableName, "agent_remark")
	_agentWithdrawal.VerifyRemark = field.NewString(tableName, "verify_remark")
	_agentWithdrawal.LockMoneyBefore = field.NewFloat64(tableName, "lock_money_before")
	_agentWithdrawal.LockMoneyAfter = field.NewFloat64(tableName, "lock_money_after")
	_agentWithdrawal.CreatedAt = field.NewField(tableName, "created_at")
	_agentWithdrawal.UpdatedAt = field.NewField(tableName, "updated_at")
	_agentWithdrawal.TotalCount = field.NewInt64(tableName, "total_count")
	_agentWithdrawal.DailyCount = field.NewInt64(tableName, "daily_count")
	_agentWithdrawal.DoingAdminName = field.NewString(tableName, "doing_admin_name")
	_agentWithdrawal.DoingAdminID = field.NewInt64(tableName, "doing_admin_id")
	_agentWithdrawal.DoingCheckTime = field.NewField(tableName, "doing_check_time")
	_agentWithdrawal.IsManual = field.NewInt64(tableName, "is_manual")
	_agentWithdrawal.FirstRemarkAt = field.NewField(tableName, "first_remark_at")
	_agentWithdrawal.TransactionID = field.NewInt64(tableName, "transaction_id")
	_agentWithdrawal.FirstRemarkAdminName = field.NewString(tableName, "first_remark_admin_name")
	_agentWithdrawal.LastRemarkAdminName = field.NewString(tableName, "last_remark_admin_name")
	_agentWithdrawal.LastRemarkAt = field.NewField(tableName, "last_remark_at")
	_agentWithdrawal.VirtualNetworkVal = field.NewString(tableName, "virtual_network_val")
	_agentWithdrawal.AutoWithdrawalID = field.NewInt64(tableName, "auto_withdrawal_id")
	_agentWithdrawal.VerifyPeriod = field.NewInt64(tableName, "verify_period")

	_agentWithdrawal.fillFieldMap()

	return _agentWithdrawal
}

// agentWithdrawal 出款订单表
type agentWithdrawal struct {
	agentWithdrawalDo agentWithdrawalDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BillNo               field.String  // 平台订单号
	AgentID              field.Int64   // 代理id
	AgentName            field.String  // 代理名称
	ParentID             field.Int64   // 用户id
	ParentName           field.String  // 直属上级
	ForefatherIds        field.String  // 用户的所有上级以逗号分隔
	BeforeMoney          field.Float64 // 交易前金额
	Amount               field.Float64 // 交易金额
	Money                field.Float64 // 交易后金额
	CardID               field.String  // 支付卡号或者虚拟货币地址
	PayName              field.String  // 支付类型银行卡或者虚拟货币名称
	RealName             field.String  // 持卡姓名
	Status               field.Int64   // 状态：0未处理（默认）,1:审核中,2充值成功,3:失败,4:已撤销,5:已拒绝
	PayMode              field.Int64   // 是否自动出款 0:人工 1:api 2:备用金
	AutoOrderID          field.String  // 自动出款订单id
	BankType             field.Int64   // 1:银行卡, 2:数字钱包
	ExRate               field.Float64 // 汇率
	ExMoney              field.Float64 // 转换金额
	Description          field.String  // 附言
	CheckTime            field.Field   // 审核时间
	AdminID              field.Int64   // 审核人id
	AdminName            field.String  // 审核人
	OperatorID           field.Int64   // 操作人id
	OperatorName         field.String  // 操作人
	DealTime             field.Field   // 操作人处理时间
	IP                   field.String  // 取款人ip
	OtherFee             field.Float64 // 行政费
	HandlingFee          field.Float64 // 手续费(%)
	HandlingFeeRate      field.Float64 // 手续费比例
	GiftMoneyRate        field.Float64 // 优惠比例(%)
	GiftMoney            field.Float64 // 赠送的优惠金额
	Remark               field.String  // 内部备注
	AgentRemark          field.String  // 代理备注
	VerifyRemark         field.String  // 审核备注
	LockMoneyBefore      field.Float64 // 交易前冻结金额
	LockMoneyAfter       field.Float64 // 交易后冻结金额
	CreatedAt            field.Field
	UpdatedAt            field.Field
	TotalCount           field.Int64  // 总计统计次数
	DailyCount           field.Int64  // 每日统计次数
	DoingAdminName       field.String // 正审核人
	DoingAdminID         field.Int64  // 正审核人id
	DoingCheckTime       field.Field  // 正审核时间
	IsManual             field.Int64  // 是否是手动 0:自动 1:手动
	FirstRemarkAt        field.Field  // 第一次备注时间
	TransactionID        field.Int64  // 手动帐变id
	FirstRemarkAdminName field.String // 一审核管理员
	LastRemarkAdminName  field.String // 终审核管理员
	LastRemarkAt         field.Field  // 终审时间
	VirtualNetworkVal    field.String // 虚拟货币网络类型
	AutoWithdrawalID     field.Int64  // 自动出款id
	VerifyPeriod         field.Int64  // 审核时间(出款时间-提款时间, 单位:秒)

	fieldMap map[string]field.Expr
}

func (a agentWithdrawal) Table(newTableName string) *agentWithdrawal {
	a.agentWithdrawalDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentWithdrawal) As(alias string) *agentWithdrawal {
	a.agentWithdrawalDo.DO = *(a.agentWithdrawalDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentWithdrawal) updateTableName(table string) *agentWithdrawal {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.BillNo = field.NewString(table, "bill_no")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ParentName = field.NewString(table, "parent_name")
	a.ForefatherIds = field.NewString(table, "forefather_ids")
	a.BeforeMoney = field.NewFloat64(table, "before_money")
	a.Amount = field.NewFloat64(table, "amount")
	a.Money = field.NewFloat64(table, "money")
	a.CardID = field.NewString(table, "card_id")
	a.PayName = field.NewString(table, "pay_name")
	a.RealName = field.NewString(table, "real_name")
	a.Status = field.NewInt64(table, "status")
	a.PayMode = field.NewInt64(table, "pay_mode")
	a.AutoOrderID = field.NewString(table, "auto_order_id")
	a.BankType = field.NewInt64(table, "bank_type")
	a.ExRate = field.NewFloat64(table, "ex_rate")
	a.ExMoney = field.NewFloat64(table, "ex_money")
	a.Description = field.NewString(table, "description")
	a.CheckTime = field.NewField(table, "check_time")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.AdminName = field.NewString(table, "admin_name")
	a.OperatorID = field.NewInt64(table, "operator_id")
	a.OperatorName = field.NewString(table, "operator_name")
	a.DealTime = field.NewField(table, "deal_time")
	a.IP = field.NewString(table, "ip")
	a.OtherFee = field.NewFloat64(table, "other_fee")
	a.HandlingFee = field.NewFloat64(table, "handling_fee")
	a.HandlingFeeRate = field.NewFloat64(table, "handling_fee_rate")
	a.GiftMoneyRate = field.NewFloat64(table, "gift_money_rate")
	a.GiftMoney = field.NewFloat64(table, "gift_money")
	a.Remark = field.NewString(table, "remark")
	a.AgentRemark = field.NewString(table, "agent_remark")
	a.VerifyRemark = field.NewString(table, "verify_remark")
	a.LockMoneyBefore = field.NewFloat64(table, "lock_money_before")
	a.LockMoneyAfter = field.NewFloat64(table, "lock_money_after")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.TotalCount = field.NewInt64(table, "total_count")
	a.DailyCount = field.NewInt64(table, "daily_count")
	a.DoingAdminName = field.NewString(table, "doing_admin_name")
	a.DoingAdminID = field.NewInt64(table, "doing_admin_id")
	a.DoingCheckTime = field.NewField(table, "doing_check_time")
	a.IsManual = field.NewInt64(table, "is_manual")
	a.FirstRemarkAt = field.NewField(table, "first_remark_at")
	a.TransactionID = field.NewInt64(table, "transaction_id")
	a.FirstRemarkAdminName = field.NewString(table, "first_remark_admin_name")
	a.LastRemarkAdminName = field.NewString(table, "last_remark_admin_name")
	a.LastRemarkAt = field.NewField(table, "last_remark_at")
	a.VirtualNetworkVal = field.NewString(table, "virtual_network_val")
	a.AutoWithdrawalID = field.NewInt64(table, "auto_withdrawal_id")
	a.VerifyPeriod = field.NewInt64(table, "verify_period")

	a.fillFieldMap()

	return a
}

func (a *agentWithdrawal) WithContext(ctx context.Context) IAgentWithdrawalDo {
	return a.agentWithdrawalDo.WithContext(ctx)
}

func (a agentWithdrawal) TableName() string { return a.agentWithdrawalDo.TableName() }

func (a agentWithdrawal) Alias() string { return a.agentWithdrawalDo.Alias() }

func (a agentWithdrawal) Columns(cols ...field.Expr) gen.Columns {
	return a.agentWithdrawalDo.Columns(cols...)
}

func (a *agentWithdrawal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentWithdrawal) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 53)
	a.fieldMap["id"] = a.ID
	a.fieldMap["bill_no"] = a.BillNo
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["parent_name"] = a.ParentName
	a.fieldMap["forefather_ids"] = a.ForefatherIds
	a.fieldMap["before_money"] = a.BeforeMoney
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["money"] = a.Money
	a.fieldMap["card_id"] = a.CardID
	a.fieldMap["pay_name"] = a.PayName
	a.fieldMap["real_name"] = a.RealName
	a.fieldMap["status"] = a.Status
	a.fieldMap["pay_mode"] = a.PayMode
	a.fieldMap["auto_order_id"] = a.AutoOrderID
	a.fieldMap["bank_type"] = a.BankType
	a.fieldMap["ex_rate"] = a.ExRate
	a.fieldMap["ex_money"] = a.ExMoney
	a.fieldMap["description"] = a.Description
	a.fieldMap["check_time"] = a.CheckTime
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["admin_name"] = a.AdminName
	a.fieldMap["operator_id"] = a.OperatorID
	a.fieldMap["operator_name"] = a.OperatorName
	a.fieldMap["deal_time"] = a.DealTime
	a.fieldMap["ip"] = a.IP
	a.fieldMap["other_fee"] = a.OtherFee
	a.fieldMap["handling_fee"] = a.HandlingFee
	a.fieldMap["handling_fee_rate"] = a.HandlingFeeRate
	a.fieldMap["gift_money_rate"] = a.GiftMoneyRate
	a.fieldMap["gift_money"] = a.GiftMoney
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["agent_remark"] = a.AgentRemark
	a.fieldMap["verify_remark"] = a.VerifyRemark
	a.fieldMap["lock_money_before"] = a.LockMoneyBefore
	a.fieldMap["lock_money_after"] = a.LockMoneyAfter
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["total_count"] = a.TotalCount
	a.fieldMap["daily_count"] = a.DailyCount
	a.fieldMap["doing_admin_name"] = a.DoingAdminName
	a.fieldMap["doing_admin_id"] = a.DoingAdminID
	a.fieldMap["doing_check_time"] = a.DoingCheckTime
	a.fieldMap["is_manual"] = a.IsManual
	a.fieldMap["first_remark_at"] = a.FirstRemarkAt
	a.fieldMap["transaction_id"] = a.TransactionID
	a.fieldMap["first_remark_admin_name"] = a.FirstRemarkAdminName
	a.fieldMap["last_remark_admin_name"] = a.LastRemarkAdminName
	a.fieldMap["last_remark_at"] = a.LastRemarkAt
	a.fieldMap["virtual_network_val"] = a.VirtualNetworkVal
	a.fieldMap["auto_withdrawal_id"] = a.AutoWithdrawalID
	a.fieldMap["verify_period"] = a.VerifyPeriod
}

func (a agentWithdrawal) clone(db *gorm.DB) agentWithdrawal {
	a.agentWithdrawalDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentWithdrawal) replaceDB(db *gorm.DB) agentWithdrawal {
	a.agentWithdrawalDo.ReplaceDB(db)
	return a
}

type agentWithdrawalDo struct{ gen.DO }

type IAgentWithdrawalDo interface {
	gen.SubQuery
	Debug() IAgentWithdrawalDo
	WithContext(ctx context.Context) IAgentWithdrawalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentWithdrawalDo
	WriteDB() IAgentWithdrawalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentWithdrawalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentWithdrawalDo
	Not(conds ...gen.Condition) IAgentWithdrawalDo
	Or(conds ...gen.Condition) IAgentWithdrawalDo
	Select(conds ...field.Expr) IAgentWithdrawalDo
	Where(conds ...gen.Condition) IAgentWithdrawalDo
	Order(conds ...field.Expr) IAgentWithdrawalDo
	Distinct(cols ...field.Expr) IAgentWithdrawalDo
	Omit(cols ...field.Expr) IAgentWithdrawalDo
	Join(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo
	Group(cols ...field.Expr) IAgentWithdrawalDo
	Having(conds ...gen.Condition) IAgentWithdrawalDo
	Limit(limit int) IAgentWithdrawalDo
	Offset(offset int) IAgentWithdrawalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentWithdrawalDo
	Unscoped() IAgentWithdrawalDo
	Create(values ...*model.AgentWithdrawal) error
	CreateInBatches(values []*model.AgentWithdrawal, batchSize int) error
	Save(values ...*model.AgentWithdrawal) error
	First() (*model.AgentWithdrawal, error)
	Take() (*model.AgentWithdrawal, error)
	Last() (*model.AgentWithdrawal, error)
	Find() ([]*model.AgentWithdrawal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentWithdrawal, err error)
	FindInBatches(result *[]*model.AgentWithdrawal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentWithdrawal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentWithdrawalDo
	Assign(attrs ...field.AssignExpr) IAgentWithdrawalDo
	Joins(fields ...field.RelationField) IAgentWithdrawalDo
	Preload(fields ...field.RelationField) IAgentWithdrawalDo
	FirstOrInit() (*model.AgentWithdrawal, error)
	FirstOrCreate() (*model.AgentWithdrawal, error)
	FindByPage(offset int, limit int) (result []*model.AgentWithdrawal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentWithdrawalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentWithdrawalDo) Debug() IAgentWithdrawalDo {
	return a.withDO(a.DO.Debug())
}

func (a agentWithdrawalDo) WithContext(ctx context.Context) IAgentWithdrawalDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentWithdrawalDo) ReadDB() IAgentWithdrawalDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentWithdrawalDo) WriteDB() IAgentWithdrawalDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentWithdrawalDo) Session(config *gorm.Session) IAgentWithdrawalDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentWithdrawalDo) Clauses(conds ...clause.Expression) IAgentWithdrawalDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentWithdrawalDo) Returning(value interface{}, columns ...string) IAgentWithdrawalDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentWithdrawalDo) Not(conds ...gen.Condition) IAgentWithdrawalDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentWithdrawalDo) Or(conds ...gen.Condition) IAgentWithdrawalDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentWithdrawalDo) Select(conds ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentWithdrawalDo) Where(conds ...gen.Condition) IAgentWithdrawalDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentWithdrawalDo) Order(conds ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentWithdrawalDo) Distinct(cols ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentWithdrawalDo) Omit(cols ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentWithdrawalDo) Join(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentWithdrawalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentWithdrawalDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentWithdrawalDo) Group(cols ...field.Expr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentWithdrawalDo) Having(conds ...gen.Condition) IAgentWithdrawalDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentWithdrawalDo) Limit(limit int) IAgentWithdrawalDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentWithdrawalDo) Offset(offset int) IAgentWithdrawalDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentWithdrawalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentWithdrawalDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentWithdrawalDo) Unscoped() IAgentWithdrawalDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentWithdrawalDo) Create(values ...*model.AgentWithdrawal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentWithdrawalDo) CreateInBatches(values []*model.AgentWithdrawal, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentWithdrawalDo) Save(values ...*model.AgentWithdrawal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentWithdrawalDo) First() (*model.AgentWithdrawal, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentWithdrawal), nil
	}
}

func (a agentWithdrawalDo) Take() (*model.AgentWithdrawal, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentWithdrawal), nil
	}
}

func (a agentWithdrawalDo) Last() (*model.AgentWithdrawal, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentWithdrawal), nil
	}
}

func (a agentWithdrawalDo) Find() ([]*model.AgentWithdrawal, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentWithdrawal), err
}

func (a agentWithdrawalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentWithdrawal, err error) {
	buf := make([]*model.AgentWithdrawal, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentWithdrawalDo) FindInBatches(result *[]*model.AgentWithdrawal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentWithdrawalDo) Attrs(attrs ...field.AssignExpr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentWithdrawalDo) Assign(attrs ...field.AssignExpr) IAgentWithdrawalDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentWithdrawalDo) Joins(fields ...field.RelationField) IAgentWithdrawalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentWithdrawalDo) Preload(fields ...field.RelationField) IAgentWithdrawalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentWithdrawalDo) FirstOrInit() (*model.AgentWithdrawal, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentWithdrawal), nil
	}
}

func (a agentWithdrawalDo) FirstOrCreate() (*model.AgentWithdrawal, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentWithdrawal), nil
	}
}

func (a agentWithdrawalDo) FindByPage(offset int, limit int) (result []*model.AgentWithdrawal, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentWithdrawalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentWithdrawalDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentWithdrawalDo) Delete(models ...*model.AgentWithdrawal) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentWithdrawalDo) withDO(do gen.Dao) *agentWithdrawalDo {
	a.DO = *do.(*gen.DO)
	return a
}
