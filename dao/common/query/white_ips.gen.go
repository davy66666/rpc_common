// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newWhiteIP(db *gorm.DB, opts ...gen.DOOption) whiteIP {
	_whiteIP := whiteIP{}

	_whiteIP.whiteIPDo.UseDB(db, opts...)
	_whiteIP.whiteIPDo.UseModel(&model.WhiteIP{})

	tableName := _whiteIP.whiteIPDo.TableName()
	_whiteIP.ALL = field.NewAsterisk(tableName)
	_whiteIP.ID = field.NewInt64(tableName, "id")
	_whiteIP.IP = field.NewString(tableName, "ip")
	_whiteIP.Status = field.NewInt64(tableName, "status")
	_whiteIP.Type = field.NewInt64(tableName, "type")
	_whiteIP.Area = field.NewString(tableName, "area")
	_whiteIP.Remark = field.NewString(tableName, "remark")
	_whiteIP.CreatedAt = field.NewField(tableName, "created_at")
	_whiteIP.UpdatedAt = field.NewField(tableName, "updated_at")
	_whiteIP.AdminName = field.NewString(tableName, "admin_name")

	_whiteIP.fillFieldMap()

	return _whiteIP
}

type whiteIP struct {
	whiteIPDo whiteIPDo

	ALL       field.Asterisk
	ID        field.Int64
	IP        field.String // ip
	Status    field.Int64  // 状态：1表示启用，0表示禁用
	Type      field.Int64  // 0:登陆验证;1:支付接口验证
	Area      field.String // 区域
	Remark    field.String // 备注
	CreatedAt field.Field
	UpdatedAt field.Field
	AdminName field.String // 管理员名称

	fieldMap map[string]field.Expr
}

func (w whiteIP) Table(newTableName string) *whiteIP {
	w.whiteIPDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w whiteIP) As(alias string) *whiteIP {
	w.whiteIPDo.DO = *(w.whiteIPDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *whiteIP) updateTableName(table string) *whiteIP {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.IP = field.NewString(table, "ip")
	w.Status = field.NewInt64(table, "status")
	w.Type = field.NewInt64(table, "type")
	w.Area = field.NewString(table, "area")
	w.Remark = field.NewString(table, "remark")
	w.CreatedAt = field.NewField(table, "created_at")
	w.UpdatedAt = field.NewField(table, "updated_at")
	w.AdminName = field.NewString(table, "admin_name")

	w.fillFieldMap()

	return w
}

func (w *whiteIP) WithContext(ctx context.Context) IWhiteIPDo { return w.whiteIPDo.WithContext(ctx) }

func (w whiteIP) TableName() string { return w.whiteIPDo.TableName() }

func (w whiteIP) Alias() string { return w.whiteIPDo.Alias() }

func (w whiteIP) Columns(cols ...field.Expr) gen.Columns { return w.whiteIPDo.Columns(cols...) }

func (w *whiteIP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *whiteIP) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["ip"] = w.IP
	w.fieldMap["status"] = w.Status
	w.fieldMap["type"] = w.Type
	w.fieldMap["area"] = w.Area
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["admin_name"] = w.AdminName
}

func (w whiteIP) clone(db *gorm.DB) whiteIP {
	w.whiteIPDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w whiteIP) replaceDB(db *gorm.DB) whiteIP {
	w.whiteIPDo.ReplaceDB(db)
	return w
}

type whiteIPDo struct{ gen.DO }

type IWhiteIPDo interface {
	gen.SubQuery
	Debug() IWhiteIPDo
	WithContext(ctx context.Context) IWhiteIPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWhiteIPDo
	WriteDB() IWhiteIPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWhiteIPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWhiteIPDo
	Not(conds ...gen.Condition) IWhiteIPDo
	Or(conds ...gen.Condition) IWhiteIPDo
	Select(conds ...field.Expr) IWhiteIPDo
	Where(conds ...gen.Condition) IWhiteIPDo
	Order(conds ...field.Expr) IWhiteIPDo
	Distinct(cols ...field.Expr) IWhiteIPDo
	Omit(cols ...field.Expr) IWhiteIPDo
	Join(table schema.Tabler, on ...field.Expr) IWhiteIPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWhiteIPDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWhiteIPDo
	Group(cols ...field.Expr) IWhiteIPDo
	Having(conds ...gen.Condition) IWhiteIPDo
	Limit(limit int) IWhiteIPDo
	Offset(offset int) IWhiteIPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWhiteIPDo
	Unscoped() IWhiteIPDo
	Create(values ...*model.WhiteIP) error
	CreateInBatches(values []*model.WhiteIP, batchSize int) error
	Save(values ...*model.WhiteIP) error
	First() (*model.WhiteIP, error)
	Take() (*model.WhiteIP, error)
	Last() (*model.WhiteIP, error)
	Find() ([]*model.WhiteIP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WhiteIP, err error)
	FindInBatches(result *[]*model.WhiteIP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WhiteIP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWhiteIPDo
	Assign(attrs ...field.AssignExpr) IWhiteIPDo
	Joins(fields ...field.RelationField) IWhiteIPDo
	Preload(fields ...field.RelationField) IWhiteIPDo
	FirstOrInit() (*model.WhiteIP, error)
	FirstOrCreate() (*model.WhiteIP, error)
	FindByPage(offset int, limit int) (result []*model.WhiteIP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWhiteIPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w whiteIPDo) Debug() IWhiteIPDo {
	return w.withDO(w.DO.Debug())
}

func (w whiteIPDo) WithContext(ctx context.Context) IWhiteIPDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w whiteIPDo) ReadDB() IWhiteIPDo {
	return w.Clauses(dbresolver.Read)
}

func (w whiteIPDo) WriteDB() IWhiteIPDo {
	return w.Clauses(dbresolver.Write)
}

func (w whiteIPDo) Session(config *gorm.Session) IWhiteIPDo {
	return w.withDO(w.DO.Session(config))
}

func (w whiteIPDo) Clauses(conds ...clause.Expression) IWhiteIPDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w whiteIPDo) Returning(value interface{}, columns ...string) IWhiteIPDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w whiteIPDo) Not(conds ...gen.Condition) IWhiteIPDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w whiteIPDo) Or(conds ...gen.Condition) IWhiteIPDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w whiteIPDo) Select(conds ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w whiteIPDo) Where(conds ...gen.Condition) IWhiteIPDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w whiteIPDo) Order(conds ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w whiteIPDo) Distinct(cols ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w whiteIPDo) Omit(cols ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w whiteIPDo) Join(table schema.Tabler, on ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w whiteIPDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w whiteIPDo) RightJoin(table schema.Tabler, on ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w whiteIPDo) Group(cols ...field.Expr) IWhiteIPDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w whiteIPDo) Having(conds ...gen.Condition) IWhiteIPDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w whiteIPDo) Limit(limit int) IWhiteIPDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w whiteIPDo) Offset(offset int) IWhiteIPDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w whiteIPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWhiteIPDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w whiteIPDo) Unscoped() IWhiteIPDo {
	return w.withDO(w.DO.Unscoped())
}

func (w whiteIPDo) Create(values ...*model.WhiteIP) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w whiteIPDo) CreateInBatches(values []*model.WhiteIP, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w whiteIPDo) Save(values ...*model.WhiteIP) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w whiteIPDo) First() (*model.WhiteIP, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WhiteIP), nil
	}
}

func (w whiteIPDo) Take() (*model.WhiteIP, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WhiteIP), nil
	}
}

func (w whiteIPDo) Last() (*model.WhiteIP, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WhiteIP), nil
	}
}

func (w whiteIPDo) Find() ([]*model.WhiteIP, error) {
	result, err := w.DO.Find()
	return result.([]*model.WhiteIP), err
}

func (w whiteIPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WhiteIP, err error) {
	buf := make([]*model.WhiteIP, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w whiteIPDo) FindInBatches(result *[]*model.WhiteIP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w whiteIPDo) Attrs(attrs ...field.AssignExpr) IWhiteIPDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w whiteIPDo) Assign(attrs ...field.AssignExpr) IWhiteIPDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w whiteIPDo) Joins(fields ...field.RelationField) IWhiteIPDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w whiteIPDo) Preload(fields ...field.RelationField) IWhiteIPDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w whiteIPDo) FirstOrInit() (*model.WhiteIP, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WhiteIP), nil
	}
}

func (w whiteIPDo) FirstOrCreate() (*model.WhiteIP, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WhiteIP), nil
	}
}

func (w whiteIPDo) FindByPage(offset int, limit int) (result []*model.WhiteIP, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w whiteIPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w whiteIPDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w whiteIPDo) Delete(models ...*model.WhiteIP) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *whiteIPDo) withDO(do gen.Dao) *whiteIPDo {
	w.DO = *do.(*gen.DO)
	return w
}
