// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newAgentUserTelLog(db *gorm.DB, opts ...gen.DOOption) agentUserTelLog {
	_agentUserTelLog := agentUserTelLog{}

	_agentUserTelLog.agentUserTelLogDo.UseDB(db, opts...)
	_agentUserTelLog.agentUserTelLogDo.UseModel(&model.AgentUserTelLog{})

	tableName := _agentUserTelLog.agentUserTelLogDo.TableName()
	_agentUserTelLog.ALL = field.NewAsterisk(tableName)
	_agentUserTelLog.ID = field.NewInt64(tableName, "id")
	_agentUserTelLog.AdminUserID = field.NewInt64(tableName, "admin_user_id")
	_agentUserTelLog.AgentUser = field.NewString(tableName, "agent_user")
	_agentUserTelLog.OldTel = field.NewString(tableName, "old_tel")
	_agentUserTelLog.NewTel = field.NewString(tableName, "new_tel")
	_agentUserTelLog.CreatedAt = field.NewField(tableName, "created_at")
	_agentUserTelLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_agentUserTelLog.fillFieldMap()

	return _agentUserTelLog
}

// agentUserTelLog 代理修改手机日志表
type agentUserTelLog struct {
	agentUserTelLogDo agentUserTelLogDo

	ALL         field.Asterisk
	ID          field.Int64
	AdminUserID field.Int64  // 代理商id
	AgentUser   field.String // 代理商账户
	OldTel      field.String // 旧手机号
	NewTel      field.String // 新手机号
	CreatedAt   field.Field
	UpdatedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a agentUserTelLog) Table(newTableName string) *agentUserTelLog {
	a.agentUserTelLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentUserTelLog) As(alias string) *agentUserTelLog {
	a.agentUserTelLogDo.DO = *(a.agentUserTelLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentUserTelLog) updateTableName(table string) *agentUserTelLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminUserID = field.NewInt64(table, "admin_user_id")
	a.AgentUser = field.NewString(table, "agent_user")
	a.OldTel = field.NewString(table, "old_tel")
	a.NewTel = field.NewString(table, "new_tel")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentUserTelLog) WithContext(ctx context.Context) IAgentUserTelLogDo {
	return a.agentUserTelLogDo.WithContext(ctx)
}

func (a agentUserTelLog) TableName() string { return a.agentUserTelLogDo.TableName() }

func (a agentUserTelLog) Alias() string { return a.agentUserTelLogDo.Alias() }

func (a agentUserTelLog) Columns(cols ...field.Expr) gen.Columns {
	return a.agentUserTelLogDo.Columns(cols...)
}

func (a *agentUserTelLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentUserTelLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_user_id"] = a.AdminUserID
	a.fieldMap["agent_user"] = a.AgentUser
	a.fieldMap["old_tel"] = a.OldTel
	a.fieldMap["new_tel"] = a.NewTel
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentUserTelLog) clone(db *gorm.DB) agentUserTelLog {
	a.agentUserTelLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentUserTelLog) replaceDB(db *gorm.DB) agentUserTelLog {
	a.agentUserTelLogDo.ReplaceDB(db)
	return a
}

type agentUserTelLogDo struct{ gen.DO }

type IAgentUserTelLogDo interface {
	gen.SubQuery
	Debug() IAgentUserTelLogDo
	WithContext(ctx context.Context) IAgentUserTelLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentUserTelLogDo
	WriteDB() IAgentUserTelLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentUserTelLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentUserTelLogDo
	Not(conds ...gen.Condition) IAgentUserTelLogDo
	Or(conds ...gen.Condition) IAgentUserTelLogDo
	Select(conds ...field.Expr) IAgentUserTelLogDo
	Where(conds ...gen.Condition) IAgentUserTelLogDo
	Order(conds ...field.Expr) IAgentUserTelLogDo
	Distinct(cols ...field.Expr) IAgentUserTelLogDo
	Omit(cols ...field.Expr) IAgentUserTelLogDo
	Join(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo
	Group(cols ...field.Expr) IAgentUserTelLogDo
	Having(conds ...gen.Condition) IAgentUserTelLogDo
	Limit(limit int) IAgentUserTelLogDo
	Offset(offset int) IAgentUserTelLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUserTelLogDo
	Unscoped() IAgentUserTelLogDo
	Create(values ...*model.AgentUserTelLog) error
	CreateInBatches(values []*model.AgentUserTelLog, batchSize int) error
	Save(values ...*model.AgentUserTelLog) error
	First() (*model.AgentUserTelLog, error)
	Take() (*model.AgentUserTelLog, error)
	Last() (*model.AgentUserTelLog, error)
	Find() ([]*model.AgentUserTelLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUserTelLog, err error)
	FindInBatches(result *[]*model.AgentUserTelLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentUserTelLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentUserTelLogDo
	Assign(attrs ...field.AssignExpr) IAgentUserTelLogDo
	Joins(fields ...field.RelationField) IAgentUserTelLogDo
	Preload(fields ...field.RelationField) IAgentUserTelLogDo
	FirstOrInit() (*model.AgentUserTelLog, error)
	FirstOrCreate() (*model.AgentUserTelLog, error)
	FindByPage(offset int, limit int) (result []*model.AgentUserTelLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentUserTelLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentUserTelLogDo) Debug() IAgentUserTelLogDo {
	return a.withDO(a.DO.Debug())
}

func (a agentUserTelLogDo) WithContext(ctx context.Context) IAgentUserTelLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentUserTelLogDo) ReadDB() IAgentUserTelLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentUserTelLogDo) WriteDB() IAgentUserTelLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentUserTelLogDo) Session(config *gorm.Session) IAgentUserTelLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentUserTelLogDo) Clauses(conds ...clause.Expression) IAgentUserTelLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentUserTelLogDo) Returning(value interface{}, columns ...string) IAgentUserTelLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentUserTelLogDo) Not(conds ...gen.Condition) IAgentUserTelLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentUserTelLogDo) Or(conds ...gen.Condition) IAgentUserTelLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentUserTelLogDo) Select(conds ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentUserTelLogDo) Where(conds ...gen.Condition) IAgentUserTelLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentUserTelLogDo) Order(conds ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentUserTelLogDo) Distinct(cols ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentUserTelLogDo) Omit(cols ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentUserTelLogDo) Join(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentUserTelLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentUserTelLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentUserTelLogDo) Group(cols ...field.Expr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentUserTelLogDo) Having(conds ...gen.Condition) IAgentUserTelLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentUserTelLogDo) Limit(limit int) IAgentUserTelLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentUserTelLogDo) Offset(offset int) IAgentUserTelLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentUserTelLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentUserTelLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentUserTelLogDo) Unscoped() IAgentUserTelLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentUserTelLogDo) Create(values ...*model.AgentUserTelLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentUserTelLogDo) CreateInBatches(values []*model.AgentUserTelLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentUserTelLogDo) Save(values ...*model.AgentUserTelLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentUserTelLogDo) First() (*model.AgentUserTelLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUserTelLog), nil
	}
}

func (a agentUserTelLogDo) Take() (*model.AgentUserTelLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUserTelLog), nil
	}
}

func (a agentUserTelLogDo) Last() (*model.AgentUserTelLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUserTelLog), nil
	}
}

func (a agentUserTelLogDo) Find() ([]*model.AgentUserTelLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentUserTelLog), err
}

func (a agentUserTelLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentUserTelLog, err error) {
	buf := make([]*model.AgentUserTelLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentUserTelLogDo) FindInBatches(result *[]*model.AgentUserTelLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentUserTelLogDo) Attrs(attrs ...field.AssignExpr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentUserTelLogDo) Assign(attrs ...field.AssignExpr) IAgentUserTelLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentUserTelLogDo) Joins(fields ...field.RelationField) IAgentUserTelLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentUserTelLogDo) Preload(fields ...field.RelationField) IAgentUserTelLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentUserTelLogDo) FirstOrInit() (*model.AgentUserTelLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUserTelLog), nil
	}
}

func (a agentUserTelLogDo) FirstOrCreate() (*model.AgentUserTelLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentUserTelLog), nil
	}
}

func (a agentUserTelLogDo) FindByPage(offset int, limit int) (result []*model.AgentUserTelLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentUserTelLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentUserTelLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentUserTelLogDo) Delete(models ...*model.AgentUserTelLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentUserTelLogDo) withDO(do gen.Dao) *agentUserTelLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
