// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserDeviceModifyLog(db *gorm.DB, opts ...gen.DOOption) userDeviceModifyLog {
	_userDeviceModifyLog := userDeviceModifyLog{}

	_userDeviceModifyLog.userDeviceModifyLogDo.UseDB(db, opts...)
	_userDeviceModifyLog.userDeviceModifyLogDo.UseModel(&model.UserDeviceModifyLog{})

	tableName := _userDeviceModifyLog.userDeviceModifyLogDo.TableName()
	_userDeviceModifyLog.ALL = field.NewAsterisk(tableName)
	_userDeviceModifyLog.ID = field.NewInt64(tableName, "id")
	_userDeviceModifyLog.UserID = field.NewInt64(tableName, "user_id")
	_userDeviceModifyLog.Username = field.NewString(tableName, "username")
	_userDeviceModifyLog.ParentID = field.NewInt64(tableName, "parent_id")
	_userDeviceModifyLog.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userDeviceModifyLog.ParentName = field.NewString(tableName, "parent_name")
	_userDeviceModifyLog.UserLevel = field.NewString(tableName, "user_level")
	_userDeviceModifyLog.PayLevel = field.NewString(tableName, "pay_level")
	_userDeviceModifyLog.RegisterTime = field.NewField(tableName, "register_time")
	_userDeviceModifyLog.RegisterPlat = field.NewInt64(tableName, "register_plat")
	_userDeviceModifyLog.RegisterDeviceID = field.NewString(tableName, "register_device_id")
	_userDeviceModifyLog.RegisterDeviceName = field.NewString(tableName, "register_device_name")
	_userDeviceModifyLog.RegisterDeviceSystemVersion = field.NewString(tableName, "register_device_system_version")
	_userDeviceModifyLog.CurrentPlat = field.NewInt64(tableName, "current_plat")
	_userDeviceModifyLog.CurrentDeviceID = field.NewString(tableName, "current_device_id")
	_userDeviceModifyLog.CurrentDeviceName = field.NewString(tableName, "current_device_name")
	_userDeviceModifyLog.CurrentDeviceSystemVersion = field.NewString(tableName, "current_device_system_version")
	_userDeviceModifyLog.CurrentIP = field.NewString(tableName, "current_ip")
	_userDeviceModifyLog.FirstUseDeviceTime = field.NewField(tableName, "first_use_device_time")
	_userDeviceModifyLog.FirstUseDeviceIP = field.NewString(tableName, "first_use_device_ip")
	_userDeviceModifyLog.FromPage = field.NewInt64(tableName, "from_page")
	_userDeviceModifyLog.CreatedAt = field.NewField(tableName, "created_at")
	_userDeviceModifyLog.UpdatedAt = field.NewField(tableName, "updated_at")

	_userDeviceModifyLog.fillFieldMap()

	return _userDeviceModifyLog
}

// userDeviceModifyLog 用户设备变更记录表
type userDeviceModifyLog struct {
	userDeviceModifyLogDo userDeviceModifyLogDo

	ALL                         field.Asterisk
	ID                          field.Int64
	UserID                      field.Int64  // 会员id
	Username                    field.String // 会员名称
	ParentID                    field.Int64
	ForefatherIds               field.String // 父亲树
	ParentName                  field.String
	UserLevel                   field.String // 用户层级
	PayLevel                    field.String // 支付层级 对应pay_level表
	RegisterTime                field.Field  // 注册时间
	RegisterPlat                field.Int64  // 注册平台
	RegisterDeviceID            field.String // 注册登录设备id
	RegisterDeviceName          field.String // 注册登录设备名称
	RegisterDeviceSystemVersion field.String // 注册登录设备系统版本
	CurrentPlat                 field.Int64  // 当前平台
	CurrentDeviceID             field.String // 当前登录设备id
	CurrentDeviceName           field.String // 当前登录设备名称
	CurrentDeviceSystemVersion  field.String // 当前登录设备系统版本
	CurrentIP                   field.String // 当前使用ip
	FirstUseDeviceTime          field.Field  // 首次使用该设备的时间
	FirstUseDeviceIP            field.String // 首次使用该设备的IP
	FromPage                    field.Int64  // 设备变更位置 1:注册,2:登录,3:取款
	CreatedAt                   field.Field
	UpdatedAt                   field.Field

	fieldMap map[string]field.Expr
}

func (u userDeviceModifyLog) Table(newTableName string) *userDeviceModifyLog {
	u.userDeviceModifyLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDeviceModifyLog) As(alias string) *userDeviceModifyLog {
	u.userDeviceModifyLogDo.DO = *(u.userDeviceModifyLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDeviceModifyLog) updateTableName(table string) *userDeviceModifyLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.ParentName = field.NewString(table, "parent_name")
	u.UserLevel = field.NewString(table, "user_level")
	u.PayLevel = field.NewString(table, "pay_level")
	u.RegisterTime = field.NewField(table, "register_time")
	u.RegisterPlat = field.NewInt64(table, "register_plat")
	u.RegisterDeviceID = field.NewString(table, "register_device_id")
	u.RegisterDeviceName = field.NewString(table, "register_device_name")
	u.RegisterDeviceSystemVersion = field.NewString(table, "register_device_system_version")
	u.CurrentPlat = field.NewInt64(table, "current_plat")
	u.CurrentDeviceID = field.NewString(table, "current_device_id")
	u.CurrentDeviceName = field.NewString(table, "current_device_name")
	u.CurrentDeviceSystemVersion = field.NewString(table, "current_device_system_version")
	u.CurrentIP = field.NewString(table, "current_ip")
	u.FirstUseDeviceTime = field.NewField(table, "first_use_device_time")
	u.FirstUseDeviceIP = field.NewString(table, "first_use_device_ip")
	u.FromPage = field.NewInt64(table, "from_page")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userDeviceModifyLog) WithContext(ctx context.Context) IUserDeviceModifyLogDo {
	return u.userDeviceModifyLogDo.WithContext(ctx)
}

func (u userDeviceModifyLog) TableName() string { return u.userDeviceModifyLogDo.TableName() }

func (u userDeviceModifyLog) Alias() string { return u.userDeviceModifyLogDo.Alias() }

func (u userDeviceModifyLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userDeviceModifyLogDo.Columns(cols...)
}

func (u *userDeviceModifyLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDeviceModifyLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 23)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["user_level"] = u.UserLevel
	u.fieldMap["pay_level"] = u.PayLevel
	u.fieldMap["register_time"] = u.RegisterTime
	u.fieldMap["register_plat"] = u.RegisterPlat
	u.fieldMap["register_device_id"] = u.RegisterDeviceID
	u.fieldMap["register_device_name"] = u.RegisterDeviceName
	u.fieldMap["register_device_system_version"] = u.RegisterDeviceSystemVersion
	u.fieldMap["current_plat"] = u.CurrentPlat
	u.fieldMap["current_device_id"] = u.CurrentDeviceID
	u.fieldMap["current_device_name"] = u.CurrentDeviceName
	u.fieldMap["current_device_system_version"] = u.CurrentDeviceSystemVersion
	u.fieldMap["current_ip"] = u.CurrentIP
	u.fieldMap["first_use_device_time"] = u.FirstUseDeviceTime
	u.fieldMap["first_use_device_ip"] = u.FirstUseDeviceIP
	u.fieldMap["from_page"] = u.FromPage
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userDeviceModifyLog) clone(db *gorm.DB) userDeviceModifyLog {
	u.userDeviceModifyLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDeviceModifyLog) replaceDB(db *gorm.DB) userDeviceModifyLog {
	u.userDeviceModifyLogDo.ReplaceDB(db)
	return u
}

type userDeviceModifyLogDo struct{ gen.DO }

type IUserDeviceModifyLogDo interface {
	gen.SubQuery
	Debug() IUserDeviceModifyLogDo
	WithContext(ctx context.Context) IUserDeviceModifyLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDeviceModifyLogDo
	WriteDB() IUserDeviceModifyLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDeviceModifyLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDeviceModifyLogDo
	Not(conds ...gen.Condition) IUserDeviceModifyLogDo
	Or(conds ...gen.Condition) IUserDeviceModifyLogDo
	Select(conds ...field.Expr) IUserDeviceModifyLogDo
	Where(conds ...gen.Condition) IUserDeviceModifyLogDo
	Order(conds ...field.Expr) IUserDeviceModifyLogDo
	Distinct(cols ...field.Expr) IUserDeviceModifyLogDo
	Omit(cols ...field.Expr) IUserDeviceModifyLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo
	Group(cols ...field.Expr) IUserDeviceModifyLogDo
	Having(conds ...gen.Condition) IUserDeviceModifyLogDo
	Limit(limit int) IUserDeviceModifyLogDo
	Offset(offset int) IUserDeviceModifyLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDeviceModifyLogDo
	Unscoped() IUserDeviceModifyLogDo
	Create(values ...*model.UserDeviceModifyLog) error
	CreateInBatches(values []*model.UserDeviceModifyLog, batchSize int) error
	Save(values ...*model.UserDeviceModifyLog) error
	First() (*model.UserDeviceModifyLog, error)
	Take() (*model.UserDeviceModifyLog, error)
	Last() (*model.UserDeviceModifyLog, error)
	Find() ([]*model.UserDeviceModifyLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDeviceModifyLog, err error)
	FindInBatches(result *[]*model.UserDeviceModifyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserDeviceModifyLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDeviceModifyLogDo
	Assign(attrs ...field.AssignExpr) IUserDeviceModifyLogDo
	Joins(fields ...field.RelationField) IUserDeviceModifyLogDo
	Preload(fields ...field.RelationField) IUserDeviceModifyLogDo
	FirstOrInit() (*model.UserDeviceModifyLog, error)
	FirstOrCreate() (*model.UserDeviceModifyLog, error)
	FindByPage(offset int, limit int) (result []*model.UserDeviceModifyLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDeviceModifyLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDeviceModifyLogDo) Debug() IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userDeviceModifyLogDo) WithContext(ctx context.Context) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDeviceModifyLogDo) ReadDB() IUserDeviceModifyLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDeviceModifyLogDo) WriteDB() IUserDeviceModifyLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDeviceModifyLogDo) Session(config *gorm.Session) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDeviceModifyLogDo) Clauses(conds ...clause.Expression) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDeviceModifyLogDo) Returning(value interface{}, columns ...string) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDeviceModifyLogDo) Not(conds ...gen.Condition) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDeviceModifyLogDo) Or(conds ...gen.Condition) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDeviceModifyLogDo) Select(conds ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDeviceModifyLogDo) Where(conds ...gen.Condition) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDeviceModifyLogDo) Order(conds ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDeviceModifyLogDo) Distinct(cols ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDeviceModifyLogDo) Omit(cols ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDeviceModifyLogDo) Join(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDeviceModifyLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDeviceModifyLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDeviceModifyLogDo) Group(cols ...field.Expr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDeviceModifyLogDo) Having(conds ...gen.Condition) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDeviceModifyLogDo) Limit(limit int) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDeviceModifyLogDo) Offset(offset int) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDeviceModifyLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDeviceModifyLogDo) Unscoped() IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDeviceModifyLogDo) Create(values ...*model.UserDeviceModifyLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDeviceModifyLogDo) CreateInBatches(values []*model.UserDeviceModifyLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDeviceModifyLogDo) Save(values ...*model.UserDeviceModifyLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDeviceModifyLogDo) First() (*model.UserDeviceModifyLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeviceModifyLog), nil
	}
}

func (u userDeviceModifyLogDo) Take() (*model.UserDeviceModifyLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeviceModifyLog), nil
	}
}

func (u userDeviceModifyLogDo) Last() (*model.UserDeviceModifyLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeviceModifyLog), nil
	}
}

func (u userDeviceModifyLogDo) Find() ([]*model.UserDeviceModifyLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDeviceModifyLog), err
}

func (u userDeviceModifyLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDeviceModifyLog, err error) {
	buf := make([]*model.UserDeviceModifyLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDeviceModifyLogDo) FindInBatches(result *[]*model.UserDeviceModifyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDeviceModifyLogDo) Attrs(attrs ...field.AssignExpr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDeviceModifyLogDo) Assign(attrs ...field.AssignExpr) IUserDeviceModifyLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDeviceModifyLogDo) Joins(fields ...field.RelationField) IUserDeviceModifyLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDeviceModifyLogDo) Preload(fields ...field.RelationField) IUserDeviceModifyLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDeviceModifyLogDo) FirstOrInit() (*model.UserDeviceModifyLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeviceModifyLog), nil
	}
}

func (u userDeviceModifyLogDo) FirstOrCreate() (*model.UserDeviceModifyLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeviceModifyLog), nil
	}
}

func (u userDeviceModifyLogDo) FindByPage(offset int, limit int) (result []*model.UserDeviceModifyLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDeviceModifyLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDeviceModifyLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDeviceModifyLogDo) Delete(models ...*model.UserDeviceModifyLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDeviceModifyLogDo) withDO(do gen.Dao) *userDeviceModifyLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
