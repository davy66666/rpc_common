// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newCircleRecord(db *gorm.DB, opts ...gen.DOOption) circleRecord {
	_circleRecord := circleRecord{}

	_circleRecord.circleRecordDo.UseDB(db, opts...)
	_circleRecord.circleRecordDo.UseModel(&model.CircleRecord{})

	tableName := _circleRecord.circleRecordDo.TableName()
	_circleRecord.ALL = field.NewAsterisk(tableName)
	_circleRecord.ID = field.NewInt64(tableName, "id")
	_circleRecord.Type = field.NewInt64(tableName, "type")
	_circleRecord.StartAt = field.NewField(tableName, "start_at")
	_circleRecord.EndAt = field.NewField(tableName, "end_at")
	_circleRecord.IsCalculated = field.NewInt64(tableName, "is_calculated")
	_circleRecord.CreatedAt = field.NewField(tableName, "created_at")
	_circleRecord.UpdatedAt = field.NewField(tableName, "updated_at")

	_circleRecord.fillFieldMap()

	return _circleRecord
}

// circleRecord 结算周期记录
type circleRecord struct {
	circleRecordDo circleRecordDo

	ALL          field.Asterisk
	ID           field.Int64
	Type         field.Int64 // 周期类型 1:队长奖励结算周期, 2:团队结算奖励周期
	StartAt      field.Field // 开始时间
	EndAt        field.Field // 结束时间
	IsCalculated field.Int64 // 0:否 1:结算中, 2:已结算
	CreatedAt    field.Field
	UpdatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (c circleRecord) Table(newTableName string) *circleRecord {
	c.circleRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c circleRecord) As(alias string) *circleRecord {
	c.circleRecordDo.DO = *(c.circleRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *circleRecord) updateTableName(table string) *circleRecord {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Type = field.NewInt64(table, "type")
	c.StartAt = field.NewField(table, "start_at")
	c.EndAt = field.NewField(table, "end_at")
	c.IsCalculated = field.NewInt64(table, "is_calculated")
	c.CreatedAt = field.NewField(table, "created_at")
	c.UpdatedAt = field.NewField(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *circleRecord) WithContext(ctx context.Context) ICircleRecordDo {
	return c.circleRecordDo.WithContext(ctx)
}

func (c circleRecord) TableName() string { return c.circleRecordDo.TableName() }

func (c circleRecord) Alias() string { return c.circleRecordDo.Alias() }

func (c circleRecord) Columns(cols ...field.Expr) gen.Columns {
	return c.circleRecordDo.Columns(cols...)
}

func (c *circleRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *circleRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["type"] = c.Type
	c.fieldMap["start_at"] = c.StartAt
	c.fieldMap["end_at"] = c.EndAt
	c.fieldMap["is_calculated"] = c.IsCalculated
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c circleRecord) clone(db *gorm.DB) circleRecord {
	c.circleRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c circleRecord) replaceDB(db *gorm.DB) circleRecord {
	c.circleRecordDo.ReplaceDB(db)
	return c
}

type circleRecordDo struct{ gen.DO }

type ICircleRecordDo interface {
	gen.SubQuery
	Debug() ICircleRecordDo
	WithContext(ctx context.Context) ICircleRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICircleRecordDo
	WriteDB() ICircleRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICircleRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICircleRecordDo
	Not(conds ...gen.Condition) ICircleRecordDo
	Or(conds ...gen.Condition) ICircleRecordDo
	Select(conds ...field.Expr) ICircleRecordDo
	Where(conds ...gen.Condition) ICircleRecordDo
	Order(conds ...field.Expr) ICircleRecordDo
	Distinct(cols ...field.Expr) ICircleRecordDo
	Omit(cols ...field.Expr) ICircleRecordDo
	Join(table schema.Tabler, on ...field.Expr) ICircleRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICircleRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICircleRecordDo
	Group(cols ...field.Expr) ICircleRecordDo
	Having(conds ...gen.Condition) ICircleRecordDo
	Limit(limit int) ICircleRecordDo
	Offset(offset int) ICircleRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICircleRecordDo
	Unscoped() ICircleRecordDo
	Create(values ...*model.CircleRecord) error
	CreateInBatches(values []*model.CircleRecord, batchSize int) error
	Save(values ...*model.CircleRecord) error
	First() (*model.CircleRecord, error)
	Take() (*model.CircleRecord, error)
	Last() (*model.CircleRecord, error)
	Find() ([]*model.CircleRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CircleRecord, err error)
	FindInBatches(result *[]*model.CircleRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CircleRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICircleRecordDo
	Assign(attrs ...field.AssignExpr) ICircleRecordDo
	Joins(fields ...field.RelationField) ICircleRecordDo
	Preload(fields ...field.RelationField) ICircleRecordDo
	FirstOrInit() (*model.CircleRecord, error)
	FirstOrCreate() (*model.CircleRecord, error)
	FindByPage(offset int, limit int) (result []*model.CircleRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICircleRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c circleRecordDo) Debug() ICircleRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c circleRecordDo) WithContext(ctx context.Context) ICircleRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c circleRecordDo) ReadDB() ICircleRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c circleRecordDo) WriteDB() ICircleRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c circleRecordDo) Session(config *gorm.Session) ICircleRecordDo {
	return c.withDO(c.DO.Session(config))
}

func (c circleRecordDo) Clauses(conds ...clause.Expression) ICircleRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c circleRecordDo) Returning(value interface{}, columns ...string) ICircleRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c circleRecordDo) Not(conds ...gen.Condition) ICircleRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c circleRecordDo) Or(conds ...gen.Condition) ICircleRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c circleRecordDo) Select(conds ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c circleRecordDo) Where(conds ...gen.Condition) ICircleRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c circleRecordDo) Order(conds ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c circleRecordDo) Distinct(cols ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c circleRecordDo) Omit(cols ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c circleRecordDo) Join(table schema.Tabler, on ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c circleRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c circleRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c circleRecordDo) Group(cols ...field.Expr) ICircleRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c circleRecordDo) Having(conds ...gen.Condition) ICircleRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c circleRecordDo) Limit(limit int) ICircleRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c circleRecordDo) Offset(offset int) ICircleRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c circleRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICircleRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c circleRecordDo) Unscoped() ICircleRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c circleRecordDo) Create(values ...*model.CircleRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c circleRecordDo) CreateInBatches(values []*model.CircleRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c circleRecordDo) Save(values ...*model.CircleRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c circleRecordDo) First() (*model.CircleRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CircleRecord), nil
	}
}

func (c circleRecordDo) Take() (*model.CircleRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CircleRecord), nil
	}
}

func (c circleRecordDo) Last() (*model.CircleRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CircleRecord), nil
	}
}

func (c circleRecordDo) Find() ([]*model.CircleRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.CircleRecord), err
}

func (c circleRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CircleRecord, err error) {
	buf := make([]*model.CircleRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c circleRecordDo) FindInBatches(result *[]*model.CircleRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c circleRecordDo) Attrs(attrs ...field.AssignExpr) ICircleRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c circleRecordDo) Assign(attrs ...field.AssignExpr) ICircleRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c circleRecordDo) Joins(fields ...field.RelationField) ICircleRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c circleRecordDo) Preload(fields ...field.RelationField) ICircleRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c circleRecordDo) FirstOrInit() (*model.CircleRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CircleRecord), nil
	}
}

func (c circleRecordDo) FirstOrCreate() (*model.CircleRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CircleRecord), nil
	}
}

func (c circleRecordDo) FindByPage(offset int, limit int) (result []*model.CircleRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c circleRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c circleRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c circleRecordDo) Delete(models ...*model.CircleRecord) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *circleRecordDo) withDO(do gen.Dao) *circleRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
