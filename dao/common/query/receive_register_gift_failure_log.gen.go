// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newReceiveRegisterGiftFailureLog(db *gorm.DB, opts ...gen.DOOption) receiveRegisterGiftFailureLog {
	_receiveRegisterGiftFailureLog := receiveRegisterGiftFailureLog{}

	_receiveRegisterGiftFailureLog.receiveRegisterGiftFailureLogDo.UseDB(db, opts...)
	_receiveRegisterGiftFailureLog.receiveRegisterGiftFailureLogDo.UseModel(&model.ReceiveRegisterGiftFailureLog{})

	tableName := _receiveRegisterGiftFailureLog.receiveRegisterGiftFailureLogDo.TableName()
	_receiveRegisterGiftFailureLog.ALL = field.NewAsterisk(tableName)
	_receiveRegisterGiftFailureLog.ID = field.NewInt64(tableName, "id")
	_receiveRegisterGiftFailureLog.UserID = field.NewInt64(tableName, "user_id")
	_receiveRegisterGiftFailureLog.UserLevel = field.NewInt64(tableName, "user_level")
	_receiveRegisterGiftFailureLog.PayLevel = field.NewInt64(tableName, "pay_level")
	_receiveRegisterGiftFailureLog.Username = field.NewString(tableName, "username")
	_receiveRegisterGiftFailureLog.FailMsg = field.NewString(tableName, "fail_msg")
	_receiveRegisterGiftFailureLog.ExceptionMsg = field.NewString(tableName, "exception_msg")
	_receiveRegisterGiftFailureLog.UpdatedAt = field.NewField(tableName, "updated_at")
	_receiveRegisterGiftFailureLog.CreatedAt = field.NewField(tableName, "created_at")

	_receiveRegisterGiftFailureLog.fillFieldMap()

	return _receiveRegisterGiftFailureLog
}

// receiveRegisterGiftFailureLog 领取注册彩金失败日志记录
type receiveRegisterGiftFailureLog struct {
	receiveRegisterGiftFailureLogDo receiveRegisterGiftFailureLogDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.Int64  // 会员id
	UserLevel    field.Int64  // 用户等级
	PayLevel     field.Int64  // 支付层级, 对应pay_level表
	Username     field.String // 会员名称
	FailMsg      field.String // 领取失败提示消息
	ExceptionMsg field.String // 领取失败报错信息
	UpdatedAt    field.Field
	CreatedAt    field.Field

	fieldMap map[string]field.Expr
}

func (r receiveRegisterGiftFailureLog) Table(newTableName string) *receiveRegisterGiftFailureLog {
	r.receiveRegisterGiftFailureLogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r receiveRegisterGiftFailureLog) As(alias string) *receiveRegisterGiftFailureLog {
	r.receiveRegisterGiftFailureLogDo.DO = *(r.receiveRegisterGiftFailureLogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *receiveRegisterGiftFailureLog) updateTableName(table string) *receiveRegisterGiftFailureLog {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.UserID = field.NewInt64(table, "user_id")
	r.UserLevel = field.NewInt64(table, "user_level")
	r.PayLevel = field.NewInt64(table, "pay_level")
	r.Username = field.NewString(table, "username")
	r.FailMsg = field.NewString(table, "fail_msg")
	r.ExceptionMsg = field.NewString(table, "exception_msg")
	r.UpdatedAt = field.NewField(table, "updated_at")
	r.CreatedAt = field.NewField(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *receiveRegisterGiftFailureLog) WithContext(ctx context.Context) IReceiveRegisterGiftFailureLogDo {
	return r.receiveRegisterGiftFailureLogDo.WithContext(ctx)
}

func (r receiveRegisterGiftFailureLog) TableName() string {
	return r.receiveRegisterGiftFailureLogDo.TableName()
}

func (r receiveRegisterGiftFailureLog) Alias() string {
	return r.receiveRegisterGiftFailureLogDo.Alias()
}

func (r receiveRegisterGiftFailureLog) Columns(cols ...field.Expr) gen.Columns {
	return r.receiveRegisterGiftFailureLogDo.Columns(cols...)
}

func (r *receiveRegisterGiftFailureLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *receiveRegisterGiftFailureLog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["user_level"] = r.UserLevel
	r.fieldMap["pay_level"] = r.PayLevel
	r.fieldMap["username"] = r.Username
	r.fieldMap["fail_msg"] = r.FailMsg
	r.fieldMap["exception_msg"] = r.ExceptionMsg
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r receiveRegisterGiftFailureLog) clone(db *gorm.DB) receiveRegisterGiftFailureLog {
	r.receiveRegisterGiftFailureLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r receiveRegisterGiftFailureLog) replaceDB(db *gorm.DB) receiveRegisterGiftFailureLog {
	r.receiveRegisterGiftFailureLogDo.ReplaceDB(db)
	return r
}

type receiveRegisterGiftFailureLogDo struct{ gen.DO }

type IReceiveRegisterGiftFailureLogDo interface {
	gen.SubQuery
	Debug() IReceiveRegisterGiftFailureLogDo
	WithContext(ctx context.Context) IReceiveRegisterGiftFailureLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReceiveRegisterGiftFailureLogDo
	WriteDB() IReceiveRegisterGiftFailureLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReceiveRegisterGiftFailureLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReceiveRegisterGiftFailureLogDo
	Not(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo
	Or(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo
	Select(conds ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Where(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo
	Order(conds ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Distinct(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Omit(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Join(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Group(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo
	Having(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo
	Limit(limit int) IReceiveRegisterGiftFailureLogDo
	Offset(offset int) IReceiveRegisterGiftFailureLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReceiveRegisterGiftFailureLogDo
	Unscoped() IReceiveRegisterGiftFailureLogDo
	Create(values ...*model.ReceiveRegisterGiftFailureLog) error
	CreateInBatches(values []*model.ReceiveRegisterGiftFailureLog, batchSize int) error
	Save(values ...*model.ReceiveRegisterGiftFailureLog) error
	First() (*model.ReceiveRegisterGiftFailureLog, error)
	Take() (*model.ReceiveRegisterGiftFailureLog, error)
	Last() (*model.ReceiveRegisterGiftFailureLog, error)
	Find() ([]*model.ReceiveRegisterGiftFailureLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReceiveRegisterGiftFailureLog, err error)
	FindInBatches(result *[]*model.ReceiveRegisterGiftFailureLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReceiveRegisterGiftFailureLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReceiveRegisterGiftFailureLogDo
	Assign(attrs ...field.AssignExpr) IReceiveRegisterGiftFailureLogDo
	Joins(fields ...field.RelationField) IReceiveRegisterGiftFailureLogDo
	Preload(fields ...field.RelationField) IReceiveRegisterGiftFailureLogDo
	FirstOrInit() (*model.ReceiveRegisterGiftFailureLog, error)
	FirstOrCreate() (*model.ReceiveRegisterGiftFailureLog, error)
	FindByPage(offset int, limit int) (result []*model.ReceiveRegisterGiftFailureLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReceiveRegisterGiftFailureLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r receiveRegisterGiftFailureLogDo) Debug() IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Debug())
}

func (r receiveRegisterGiftFailureLogDo) WithContext(ctx context.Context) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r receiveRegisterGiftFailureLogDo) ReadDB() IReceiveRegisterGiftFailureLogDo {
	return r.Clauses(dbresolver.Read)
}

func (r receiveRegisterGiftFailureLogDo) WriteDB() IReceiveRegisterGiftFailureLogDo {
	return r.Clauses(dbresolver.Write)
}

func (r receiveRegisterGiftFailureLogDo) Session(config *gorm.Session) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Session(config))
}

func (r receiveRegisterGiftFailureLogDo) Clauses(conds ...clause.Expression) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Returning(value interface{}, columns ...string) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r receiveRegisterGiftFailureLogDo) Not(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Or(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Select(conds ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Where(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Order(conds ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Distinct(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r receiveRegisterGiftFailureLogDo) Omit(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r receiveRegisterGiftFailureLogDo) Join(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r receiveRegisterGiftFailureLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r receiveRegisterGiftFailureLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r receiveRegisterGiftFailureLogDo) Group(cols ...field.Expr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r receiveRegisterGiftFailureLogDo) Having(conds ...gen.Condition) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r receiveRegisterGiftFailureLogDo) Limit(limit int) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r receiveRegisterGiftFailureLogDo) Offset(offset int) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r receiveRegisterGiftFailureLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r receiveRegisterGiftFailureLogDo) Unscoped() IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r receiveRegisterGiftFailureLogDo) Create(values ...*model.ReceiveRegisterGiftFailureLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r receiveRegisterGiftFailureLogDo) CreateInBatches(values []*model.ReceiveRegisterGiftFailureLog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r receiveRegisterGiftFailureLogDo) Save(values ...*model.ReceiveRegisterGiftFailureLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r receiveRegisterGiftFailureLogDo) First() (*model.ReceiveRegisterGiftFailureLog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveRegisterGiftFailureLog), nil
	}
}

func (r receiveRegisterGiftFailureLogDo) Take() (*model.ReceiveRegisterGiftFailureLog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveRegisterGiftFailureLog), nil
	}
}

func (r receiveRegisterGiftFailureLogDo) Last() (*model.ReceiveRegisterGiftFailureLog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveRegisterGiftFailureLog), nil
	}
}

func (r receiveRegisterGiftFailureLogDo) Find() ([]*model.ReceiveRegisterGiftFailureLog, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReceiveRegisterGiftFailureLog), err
}

func (r receiveRegisterGiftFailureLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReceiveRegisterGiftFailureLog, err error) {
	buf := make([]*model.ReceiveRegisterGiftFailureLog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r receiveRegisterGiftFailureLogDo) FindInBatches(result *[]*model.ReceiveRegisterGiftFailureLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r receiveRegisterGiftFailureLogDo) Attrs(attrs ...field.AssignExpr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r receiveRegisterGiftFailureLogDo) Assign(attrs ...field.AssignExpr) IReceiveRegisterGiftFailureLogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r receiveRegisterGiftFailureLogDo) Joins(fields ...field.RelationField) IReceiveRegisterGiftFailureLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r receiveRegisterGiftFailureLogDo) Preload(fields ...field.RelationField) IReceiveRegisterGiftFailureLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r receiveRegisterGiftFailureLogDo) FirstOrInit() (*model.ReceiveRegisterGiftFailureLog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveRegisterGiftFailureLog), nil
	}
}

func (r receiveRegisterGiftFailureLogDo) FirstOrCreate() (*model.ReceiveRegisterGiftFailureLog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveRegisterGiftFailureLog), nil
	}
}

func (r receiveRegisterGiftFailureLogDo) FindByPage(offset int, limit int) (result []*model.ReceiveRegisterGiftFailureLog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r receiveRegisterGiftFailureLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r receiveRegisterGiftFailureLogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r receiveRegisterGiftFailureLogDo) Delete(models ...*model.ReceiveRegisterGiftFailureLog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *receiveRegisterGiftFailureLogDo) withDO(do gen.Dao) *receiveRegisterGiftFailureLogDo {
	r.DO = *do.(*gen.DO)
	return r
}
