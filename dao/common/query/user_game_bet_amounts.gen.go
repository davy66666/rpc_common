// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newUserGameBetAmount(db *gorm.DB, opts ...gen.DOOption) userGameBetAmount {
	_userGameBetAmount := userGameBetAmount{}

	_userGameBetAmount.userGameBetAmountDo.UseDB(db, opts...)
	_userGameBetAmount.userGameBetAmountDo.UseModel(&model.UserGameBetAmount{})

	tableName := _userGameBetAmount.userGameBetAmountDo.TableName()
	_userGameBetAmount.ALL = field.NewAsterisk(tableName)
	_userGameBetAmount.ID = field.NewInt64(tableName, "id")
	_userGameBetAmount.DateAt = field.NewString(tableName, "date_at")
	_userGameBetAmount.SeriesID = field.NewInt64(tableName, "series_id")
	_userGameBetAmount.GameCode = field.NewString(tableName, "game_code")
	_userGameBetAmount.UserID = field.NewInt64(tableName, "user_id")
	_userGameBetAmount.Username = field.NewString(tableName, "username")
	_userGameBetAmount.ParentID = field.NewInt64(tableName, "parent_id")
	_userGameBetAmount.ParentName = field.NewString(tableName, "parent_name")
	_userGameBetAmount.ForefatherIds = field.NewString(tableName, "forefather_ids")
	_userGameBetAmount.BetNums = field.NewInt64(tableName, "bet_nums")
	_userGameBetAmount.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_userGameBetAmount.ValidBetAmount = field.NewFloat64(tableName, "valid_bet_amount")
	_userGameBetAmount.NetAmount = field.NewFloat64(tableName, "net_amount")
	_userGameBetAmount.TotalFanshui = field.NewFloat64(tableName, "total_fanshui")
	_userGameBetAmount.IsFanshui = field.NewInt64(tableName, "is_fanshui")
	_userGameBetAmount.FanshuiAt = field.NewField(tableName, "fanshui_at")
	_userGameBetAmount.IsManual = field.NewInt64(tableName, "is_manual")
	_userGameBetAmount.IsOpen = field.NewInt64(tableName, "is_open")
	_userGameBetAmount.IsYongjin = field.NewInt64(tableName, "is_yongjin")
	_userGameBetAmount.IsTotalBet = field.NewInt64(tableName, "is_total_bet")
	_userGameBetAmount.IsTodayProfit = field.NewInt64(tableName, "is_today_profit")
	_userGameBetAmount.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_userGameBetAmount.CreatedAt = field.NewField(tableName, "created_at")
	_userGameBetAmount.UpdatedAt = field.NewField(tableName, "updated_at")

	_userGameBetAmount.fillFieldMap()

	return _userGameBetAmount
}

// userGameBetAmount 游戏打码量表
type userGameBetAmount struct {
	userGameBetAmountDo userGameBetAmountDo

	ALL            field.Asterisk
	ID             field.Int64
	DateAt         field.String  // 当天时间
	SeriesID       field.Int64   // 游戏系列id
	GameCode       field.String  // 游戏类型
	UserID         field.Int64   // 用户id
	Username       field.String  // 用户名
	ParentID       field.Int64   // 用户id
	ParentName     field.String  // 用户名
	ForefatherIds  field.String  // 上级树,多个以逗号隔开
	BetNums        field.Int64   // 注单量
	BetAmount      field.Float64 // 用户投注金额 包括无效金额
	ValidBetAmount field.Float64 // 有效投注金额
	NetAmount      field.Float64 // 玩家的所赢金额
	TotalFanshui   field.Float64 // 返水金额
	IsFanshui      field.Int64   // 0:未返水;1:返水进行中;2:已返水;
	FanshuiAt      field.Field   // 返水时间
	IsManual       field.Int64   // 是否手动返水0:否;1:是手动
	IsOpen         field.Int64   // 是否启用0:否;1:是;如果为0就重新统计打码量
	IsYongjin      field.Int64   // 是否统计了代理佣金0否，1进行中；2:已经返佣
	IsTotalBet     field.Int64   // 是否统计到总注单表：0否，1进行中；2:已统计
	IsTodayProfit  field.Int64   // 是否统计到今日盈亏表：0否，1进行中；2:已统计；today_profits
	IsDeleted      field.Int64   // 是否删除0:否;1:已删除
	CreatedAt      field.Field
	UpdatedAt      field.Field

	fieldMap map[string]field.Expr
}

func (u userGameBetAmount) Table(newTableName string) *userGameBetAmount {
	u.userGameBetAmountDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGameBetAmount) As(alias string) *userGameBetAmount {
	u.userGameBetAmountDo.DO = *(u.userGameBetAmountDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGameBetAmount) updateTableName(table string) *userGameBetAmount {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DateAt = field.NewString(table, "date_at")
	u.SeriesID = field.NewInt64(table, "series_id")
	u.GameCode = field.NewString(table, "game_code")
	u.UserID = field.NewInt64(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.ParentName = field.NewString(table, "parent_name")
	u.ForefatherIds = field.NewString(table, "forefather_ids")
	u.BetNums = field.NewInt64(table, "bet_nums")
	u.BetAmount = field.NewFloat64(table, "bet_amount")
	u.ValidBetAmount = field.NewFloat64(table, "valid_bet_amount")
	u.NetAmount = field.NewFloat64(table, "net_amount")
	u.TotalFanshui = field.NewFloat64(table, "total_fanshui")
	u.IsFanshui = field.NewInt64(table, "is_fanshui")
	u.FanshuiAt = field.NewField(table, "fanshui_at")
	u.IsManual = field.NewInt64(table, "is_manual")
	u.IsOpen = field.NewInt64(table, "is_open")
	u.IsYongjin = field.NewInt64(table, "is_yongjin")
	u.IsTotalBet = field.NewInt64(table, "is_total_bet")
	u.IsTodayProfit = field.NewInt64(table, "is_today_profit")
	u.IsDeleted = field.NewInt64(table, "is_deleted")
	u.CreatedAt = field.NewField(table, "created_at")
	u.UpdatedAt = field.NewField(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGameBetAmount) WithContext(ctx context.Context) IUserGameBetAmountDo {
	return u.userGameBetAmountDo.WithContext(ctx)
}

func (u userGameBetAmount) TableName() string { return u.userGameBetAmountDo.TableName() }

func (u userGameBetAmount) Alias() string { return u.userGameBetAmountDo.Alias() }

func (u userGameBetAmount) Columns(cols ...field.Expr) gen.Columns {
	return u.userGameBetAmountDo.Columns(cols...)
}

func (u *userGameBetAmount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGameBetAmount) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 24)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date_at"] = u.DateAt
	u.fieldMap["series_id"] = u.SeriesID
	u.fieldMap["game_code"] = u.GameCode
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["parent_name"] = u.ParentName
	u.fieldMap["forefather_ids"] = u.ForefatherIds
	u.fieldMap["bet_nums"] = u.BetNums
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["valid_bet_amount"] = u.ValidBetAmount
	u.fieldMap["net_amount"] = u.NetAmount
	u.fieldMap["total_fanshui"] = u.TotalFanshui
	u.fieldMap["is_fanshui"] = u.IsFanshui
	u.fieldMap["fanshui_at"] = u.FanshuiAt
	u.fieldMap["is_manual"] = u.IsManual
	u.fieldMap["is_open"] = u.IsOpen
	u.fieldMap["is_yongjin"] = u.IsYongjin
	u.fieldMap["is_total_bet"] = u.IsTotalBet
	u.fieldMap["is_today_profit"] = u.IsTodayProfit
	u.fieldMap["is_deleted"] = u.IsDeleted
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGameBetAmount) clone(db *gorm.DB) userGameBetAmount {
	u.userGameBetAmountDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGameBetAmount) replaceDB(db *gorm.DB) userGameBetAmount {
	u.userGameBetAmountDo.ReplaceDB(db)
	return u
}

type userGameBetAmountDo struct{ gen.DO }

type IUserGameBetAmountDo interface {
	gen.SubQuery
	Debug() IUserGameBetAmountDo
	WithContext(ctx context.Context) IUserGameBetAmountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGameBetAmountDo
	WriteDB() IUserGameBetAmountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGameBetAmountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGameBetAmountDo
	Not(conds ...gen.Condition) IUserGameBetAmountDo
	Or(conds ...gen.Condition) IUserGameBetAmountDo
	Select(conds ...field.Expr) IUserGameBetAmountDo
	Where(conds ...gen.Condition) IUserGameBetAmountDo
	Order(conds ...field.Expr) IUserGameBetAmountDo
	Distinct(cols ...field.Expr) IUserGameBetAmountDo
	Omit(cols ...field.Expr) IUserGameBetAmountDo
	Join(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo
	Group(cols ...field.Expr) IUserGameBetAmountDo
	Having(conds ...gen.Condition) IUserGameBetAmountDo
	Limit(limit int) IUserGameBetAmountDo
	Offset(offset int) IUserGameBetAmountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGameBetAmountDo
	Unscoped() IUserGameBetAmountDo
	Create(values ...*model.UserGameBetAmount) error
	CreateInBatches(values []*model.UserGameBetAmount, batchSize int) error
	Save(values ...*model.UserGameBetAmount) error
	First() (*model.UserGameBetAmount, error)
	Take() (*model.UserGameBetAmount, error)
	Last() (*model.UserGameBetAmount, error)
	Find() ([]*model.UserGameBetAmount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGameBetAmount, err error)
	FindInBatches(result *[]*model.UserGameBetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGameBetAmount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGameBetAmountDo
	Assign(attrs ...field.AssignExpr) IUserGameBetAmountDo
	Joins(fields ...field.RelationField) IUserGameBetAmountDo
	Preload(fields ...field.RelationField) IUserGameBetAmountDo
	FirstOrInit() (*model.UserGameBetAmount, error)
	FirstOrCreate() (*model.UserGameBetAmount, error)
	FindByPage(offset int, limit int) (result []*model.UserGameBetAmount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGameBetAmountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGameBetAmountDo) Debug() IUserGameBetAmountDo {
	return u.withDO(u.DO.Debug())
}

func (u userGameBetAmountDo) WithContext(ctx context.Context) IUserGameBetAmountDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGameBetAmountDo) ReadDB() IUserGameBetAmountDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGameBetAmountDo) WriteDB() IUserGameBetAmountDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGameBetAmountDo) Session(config *gorm.Session) IUserGameBetAmountDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGameBetAmountDo) Clauses(conds ...clause.Expression) IUserGameBetAmountDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGameBetAmountDo) Returning(value interface{}, columns ...string) IUserGameBetAmountDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGameBetAmountDo) Not(conds ...gen.Condition) IUserGameBetAmountDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGameBetAmountDo) Or(conds ...gen.Condition) IUserGameBetAmountDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGameBetAmountDo) Select(conds ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGameBetAmountDo) Where(conds ...gen.Condition) IUserGameBetAmountDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGameBetAmountDo) Order(conds ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGameBetAmountDo) Distinct(cols ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGameBetAmountDo) Omit(cols ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGameBetAmountDo) Join(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGameBetAmountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGameBetAmountDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGameBetAmountDo) Group(cols ...field.Expr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGameBetAmountDo) Having(conds ...gen.Condition) IUserGameBetAmountDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGameBetAmountDo) Limit(limit int) IUserGameBetAmountDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGameBetAmountDo) Offset(offset int) IUserGameBetAmountDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGameBetAmountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGameBetAmountDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGameBetAmountDo) Unscoped() IUserGameBetAmountDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGameBetAmountDo) Create(values ...*model.UserGameBetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGameBetAmountDo) CreateInBatches(values []*model.UserGameBetAmount, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGameBetAmountDo) Save(values ...*model.UserGameBetAmount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGameBetAmountDo) First() (*model.UserGameBetAmount, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmount), nil
	}
}

func (u userGameBetAmountDo) Take() (*model.UserGameBetAmount, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmount), nil
	}
}

func (u userGameBetAmountDo) Last() (*model.UserGameBetAmount, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmount), nil
	}
}

func (u userGameBetAmountDo) Find() ([]*model.UserGameBetAmount, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGameBetAmount), err
}

func (u userGameBetAmountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGameBetAmount, err error) {
	buf := make([]*model.UserGameBetAmount, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGameBetAmountDo) FindInBatches(result *[]*model.UserGameBetAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGameBetAmountDo) Attrs(attrs ...field.AssignExpr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGameBetAmountDo) Assign(attrs ...field.AssignExpr) IUserGameBetAmountDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGameBetAmountDo) Joins(fields ...field.RelationField) IUserGameBetAmountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGameBetAmountDo) Preload(fields ...field.RelationField) IUserGameBetAmountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGameBetAmountDo) FirstOrInit() (*model.UserGameBetAmount, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmount), nil
	}
}

func (u userGameBetAmountDo) FirstOrCreate() (*model.UserGameBetAmount, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGameBetAmount), nil
	}
}

func (u userGameBetAmountDo) FindByPage(offset int, limit int) (result []*model.UserGameBetAmount, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGameBetAmountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGameBetAmountDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGameBetAmountDo) Delete(models ...*model.UserGameBetAmount) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGameBetAmountDo) withDO(do gen.Dao) *userGameBetAmountDo {
	u.DO = *do.(*gen.DO)
	return u
}
