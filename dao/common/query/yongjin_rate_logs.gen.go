// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/davy66666/rpc_common/dao/model"
)

func newYongjinRateLog(db *gorm.DB, opts ...gen.DOOption) yongjinRateLog {
	_yongjinRateLog := yongjinRateLog{}

	_yongjinRateLog.yongjinRateLogDo.UseDB(db, opts...)
	_yongjinRateLog.yongjinRateLogDo.UseModel(&model.YongjinRateLog{})

	tableName := _yongjinRateLog.yongjinRateLogDo.TableName()
	_yongjinRateLog.ALL = field.NewAsterisk(tableName)
	_yongjinRateLog.ID = field.NewInt64(tableName, "id")
	_yongjinRateLog.DateAt = field.NewString(tableName, "date_at")
	_yongjinRateLog.AgentID = field.NewInt64(tableName, "agent_id")
	_yongjinRateLog.AgentName = field.NewString(tableName, "agent_name")
	_yongjinRateLog.AgentYongjinRate = field.NewFloat64(tableName, "agent_yongjin_rate")
	_yongjinRateLog.ChildrenAgentID = field.NewInt64(tableName, "children_agent_id")
	_yongjinRateLog.ChildrenAgentName = field.NewString(tableName, "children_agent_name")
	_yongjinRateLog.ChildrenAgentYongjinRate = field.NewFloat64(tableName, "children_agent_yongjin_rate")
	_yongjinRateLog.Type = field.NewInt64(tableName, "type")
	_yongjinRateLog.Remark = field.NewString(tableName, "remark")

	_yongjinRateLog.fillFieldMap()

	return _yongjinRateLog
}

type yongjinRateLog struct {
	yongjinRateLogDo yongjinRateLogDo

	ALL                      field.Asterisk
	ID                       field.Int64
	DateAt                   field.String  // 创建时间
	AgentID                  field.Int64   // 代理id
	AgentName                field.String  // 代理名称
	AgentYongjinRate         field.Float64 // 代理佣金比例
	ChildrenAgentID          field.Int64   // 下级代理id
	ChildrenAgentName        field.String  // 下级代理名称
	ChildrenAgentYongjinRate field.Float64 // 下级代理比例
	Type                     field.Int64   // 1 存在有差额，2 记录下级
	Remark                   field.String  // 备注

	fieldMap map[string]field.Expr
}

func (y yongjinRateLog) Table(newTableName string) *yongjinRateLog {
	y.yongjinRateLogDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y yongjinRateLog) As(alias string) *yongjinRateLog {
	y.yongjinRateLogDo.DO = *(y.yongjinRateLogDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *yongjinRateLog) updateTableName(table string) *yongjinRateLog {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt64(table, "id")
	y.DateAt = field.NewString(table, "date_at")
	y.AgentID = field.NewInt64(table, "agent_id")
	y.AgentName = field.NewString(table, "agent_name")
	y.AgentYongjinRate = field.NewFloat64(table, "agent_yongjin_rate")
	y.ChildrenAgentID = field.NewInt64(table, "children_agent_id")
	y.ChildrenAgentName = field.NewString(table, "children_agent_name")
	y.ChildrenAgentYongjinRate = field.NewFloat64(table, "children_agent_yongjin_rate")
	y.Type = field.NewInt64(table, "type")
	y.Remark = field.NewString(table, "remark")

	y.fillFieldMap()

	return y
}

func (y *yongjinRateLog) WithContext(ctx context.Context) IYongjinRateLogDo {
	return y.yongjinRateLogDo.WithContext(ctx)
}

func (y yongjinRateLog) TableName() string { return y.yongjinRateLogDo.TableName() }

func (y yongjinRateLog) Alias() string { return y.yongjinRateLogDo.Alias() }

func (y yongjinRateLog) Columns(cols ...field.Expr) gen.Columns {
	return y.yongjinRateLogDo.Columns(cols...)
}

func (y *yongjinRateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *yongjinRateLog) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 10)
	y.fieldMap["id"] = y.ID
	y.fieldMap["date_at"] = y.DateAt
	y.fieldMap["agent_id"] = y.AgentID
	y.fieldMap["agent_name"] = y.AgentName
	y.fieldMap["agent_yongjin_rate"] = y.AgentYongjinRate
	y.fieldMap["children_agent_id"] = y.ChildrenAgentID
	y.fieldMap["children_agent_name"] = y.ChildrenAgentName
	y.fieldMap["children_agent_yongjin_rate"] = y.ChildrenAgentYongjinRate
	y.fieldMap["type"] = y.Type
	y.fieldMap["remark"] = y.Remark
}

func (y yongjinRateLog) clone(db *gorm.DB) yongjinRateLog {
	y.yongjinRateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y yongjinRateLog) replaceDB(db *gorm.DB) yongjinRateLog {
	y.yongjinRateLogDo.ReplaceDB(db)
	return y
}

type yongjinRateLogDo struct{ gen.DO }

type IYongjinRateLogDo interface {
	gen.SubQuery
	Debug() IYongjinRateLogDo
	WithContext(ctx context.Context) IYongjinRateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYongjinRateLogDo
	WriteDB() IYongjinRateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYongjinRateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYongjinRateLogDo
	Not(conds ...gen.Condition) IYongjinRateLogDo
	Or(conds ...gen.Condition) IYongjinRateLogDo
	Select(conds ...field.Expr) IYongjinRateLogDo
	Where(conds ...gen.Condition) IYongjinRateLogDo
	Order(conds ...field.Expr) IYongjinRateLogDo
	Distinct(cols ...field.Expr) IYongjinRateLogDo
	Omit(cols ...field.Expr) IYongjinRateLogDo
	Join(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo
	Group(cols ...field.Expr) IYongjinRateLogDo
	Having(conds ...gen.Condition) IYongjinRateLogDo
	Limit(limit int) IYongjinRateLogDo
	Offset(offset int) IYongjinRateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYongjinRateLogDo
	Unscoped() IYongjinRateLogDo
	Create(values ...*model.YongjinRateLog) error
	CreateInBatches(values []*model.YongjinRateLog, batchSize int) error
	Save(values ...*model.YongjinRateLog) error
	First() (*model.YongjinRateLog, error)
	Take() (*model.YongjinRateLog, error)
	Last() (*model.YongjinRateLog, error)
	Find() ([]*model.YongjinRateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YongjinRateLog, err error)
	FindInBatches(result *[]*model.YongjinRateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YongjinRateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYongjinRateLogDo
	Assign(attrs ...field.AssignExpr) IYongjinRateLogDo
	Joins(fields ...field.RelationField) IYongjinRateLogDo
	Preload(fields ...field.RelationField) IYongjinRateLogDo
	FirstOrInit() (*model.YongjinRateLog, error)
	FirstOrCreate() (*model.YongjinRateLog, error)
	FindByPage(offset int, limit int) (result []*model.YongjinRateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYongjinRateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y yongjinRateLogDo) Debug() IYongjinRateLogDo {
	return y.withDO(y.DO.Debug())
}

func (y yongjinRateLogDo) WithContext(ctx context.Context) IYongjinRateLogDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y yongjinRateLogDo) ReadDB() IYongjinRateLogDo {
	return y.Clauses(dbresolver.Read)
}

func (y yongjinRateLogDo) WriteDB() IYongjinRateLogDo {
	return y.Clauses(dbresolver.Write)
}

func (y yongjinRateLogDo) Session(config *gorm.Session) IYongjinRateLogDo {
	return y.withDO(y.DO.Session(config))
}

func (y yongjinRateLogDo) Clauses(conds ...clause.Expression) IYongjinRateLogDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y yongjinRateLogDo) Returning(value interface{}, columns ...string) IYongjinRateLogDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y yongjinRateLogDo) Not(conds ...gen.Condition) IYongjinRateLogDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y yongjinRateLogDo) Or(conds ...gen.Condition) IYongjinRateLogDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y yongjinRateLogDo) Select(conds ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y yongjinRateLogDo) Where(conds ...gen.Condition) IYongjinRateLogDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y yongjinRateLogDo) Order(conds ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y yongjinRateLogDo) Distinct(cols ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y yongjinRateLogDo) Omit(cols ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y yongjinRateLogDo) Join(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y yongjinRateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y yongjinRateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y yongjinRateLogDo) Group(cols ...field.Expr) IYongjinRateLogDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y yongjinRateLogDo) Having(conds ...gen.Condition) IYongjinRateLogDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y yongjinRateLogDo) Limit(limit int) IYongjinRateLogDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y yongjinRateLogDo) Offset(offset int) IYongjinRateLogDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y yongjinRateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYongjinRateLogDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y yongjinRateLogDo) Unscoped() IYongjinRateLogDo {
	return y.withDO(y.DO.Unscoped())
}

func (y yongjinRateLogDo) Create(values ...*model.YongjinRateLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y yongjinRateLogDo) CreateInBatches(values []*model.YongjinRateLog, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y yongjinRateLogDo) Save(values ...*model.YongjinRateLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y yongjinRateLogDo) First() (*model.YongjinRateLog, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YongjinRateLog), nil
	}
}

func (y yongjinRateLogDo) Take() (*model.YongjinRateLog, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YongjinRateLog), nil
	}
}

func (y yongjinRateLogDo) Last() (*model.YongjinRateLog, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YongjinRateLog), nil
	}
}

func (y yongjinRateLogDo) Find() ([]*model.YongjinRateLog, error) {
	result, err := y.DO.Find()
	return result.([]*model.YongjinRateLog), err
}

func (y yongjinRateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YongjinRateLog, err error) {
	buf := make([]*model.YongjinRateLog, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y yongjinRateLogDo) FindInBatches(result *[]*model.YongjinRateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y yongjinRateLogDo) Attrs(attrs ...field.AssignExpr) IYongjinRateLogDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y yongjinRateLogDo) Assign(attrs ...field.AssignExpr) IYongjinRateLogDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y yongjinRateLogDo) Joins(fields ...field.RelationField) IYongjinRateLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y yongjinRateLogDo) Preload(fields ...field.RelationField) IYongjinRateLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y yongjinRateLogDo) FirstOrInit() (*model.YongjinRateLog, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YongjinRateLog), nil
	}
}

func (y yongjinRateLogDo) FirstOrCreate() (*model.YongjinRateLog, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YongjinRateLog), nil
	}
}

func (y yongjinRateLogDo) FindByPage(offset int, limit int) (result []*model.YongjinRateLog, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y yongjinRateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y yongjinRateLogDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y yongjinRateLogDo) Delete(models ...*model.YongjinRateLog) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *yongjinRateLogDo) withDO(do gen.Dao) *yongjinRateLogDo {
	y.DO = *do.(*gen.DO)
	return y
}
