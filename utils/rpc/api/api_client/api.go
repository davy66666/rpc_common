// Code generated by goctl. DO NOT EDIT.
// Source: api.proto

package api_client

import (
	"context"

	"github.com/davy66666/rpc_common/utils/rpc/api"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Account                         = api.Account
	AddTransactionReq               = api.AddTransactionReq
	AddTransactionResp              = api.AddTransactionResp
	ExtraData                       = api.ExtraData
	GetLastWithdrawalReq            = api.GetLastWithdrawalReq
	GetLastWithdrawalResp           = api.GetLastWithdrawalResp
	GetRwbyTimeReq                  = api.GetRwbyTimeReq
	GetRwbyTimeResp                 = api.GetRwbyTimeResp
	GetTransListByTransFatherIdReq  = api.GetTransListByTransFatherIdReq
	GetTransListByTransFatherIdResp = api.GetTransListByTransFatherIdResp
	GetTransferReq                  = api.GetTransferReq
	GetTransferResp                 = api.GetTransferResp
	TransUserCountByUserIdsReq      = api.TransUserCountByUserIdsReq
	TransUserCountByUserIdsResp     = api.TransUserCountByUserIdsResp
	Transaction                     = api.Transaction

	Api interface {
		// 增加新的账变
		AddTransaction(ctx context.Context, in *AddTransactionReq, opts ...grpc.CallOption) (*AddTransactionResp, error)
		// GetRWByTime
		GetRwbyTime(ctx context.Context, in *GetRwbyTimeReq, opts ...grpc.CallOption) (*GetRwbyTimeResp, error)
		// GetLastWithdrawal
		GetLastWithdrawal(ctx context.Context, in *GetLastWithdrawalReq, opts ...grpc.CallOption) (*GetLastWithdrawalResp, error)
		// GetTransfer
		GetTransfer(ctx context.Context, in *GetTransferReq, opts ...grpc.CallOption) (*GetTransferResp, error)
		// GetTransListByTransFatherId
		GetTransListByTransFatherId(ctx context.Context, in *GetTransListByTransFatherIdReq, opts ...grpc.CallOption) (*GetTransListByTransFatherIdResp, error)
		// GetTransListByTransFatherId
		TransUserCountByUserIds(ctx context.Context, in *TransUserCountByUserIdsReq, opts ...grpc.CallOption) (*TransUserCountByUserIdsResp, error)
	}

	defaultApi struct {
		cli zrpc.Client
	}
)

func NewApi(cli zrpc.Client) Api {
	return &defaultApi{
		cli: cli,
	}
}

// 增加新的账变
func (m *defaultApi) AddTransaction(ctx context.Context, in *AddTransactionReq, opts ...grpc.CallOption) (*AddTransactionResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.AddTransaction(ctx, in, opts...)
}

// GetRWByTime
func (m *defaultApi) GetRwbyTime(ctx context.Context, in *GetRwbyTimeReq, opts ...grpc.CallOption) (*GetRwbyTimeResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.GetRwbyTime(ctx, in, opts...)
}

// GetLastWithdrawal
func (m *defaultApi) GetLastWithdrawal(ctx context.Context, in *GetLastWithdrawalReq, opts ...grpc.CallOption) (*GetLastWithdrawalResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.GetLastWithdrawal(ctx, in, opts...)
}

// GetTransfer
func (m *defaultApi) GetTransfer(ctx context.Context, in *GetTransferReq, opts ...grpc.CallOption) (*GetTransferResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.GetTransfer(ctx, in, opts...)
}

// GetTransListByTransFatherId
func (m *defaultApi) GetTransListByTransFatherId(ctx context.Context, in *GetTransListByTransFatherIdReq, opts ...grpc.CallOption) (*GetTransListByTransFatherIdResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.GetTransListByTransFatherId(ctx, in, opts...)
}

// GetTransListByTransFatherId
func (m *defaultApi) TransUserCountByUserIds(ctx context.Context, in *TransUserCountByUserIdsReq, opts ...grpc.CallOption) (*TransUserCountByUserIdsResp, error) {
	client := api.NewApiClient(m.cli.Conn())
	return client.TransUserCountByUserIds(ctx, in, opts...)
}
