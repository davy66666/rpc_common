// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: docs/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Api_AddTransaction_FullMethodName              = "/api.api/AddTransaction"
	Api_GetRwbyTime_FullMethodName                 = "/api.api/GetRwbyTime"
	Api_GetLastWithdrawal_FullMethodName           = "/api.api/GetLastWithdrawal"
	Api_GetTransfer_FullMethodName                 = "/api.api/GetTransfer"
	Api_GetTransListByTransFatherId_FullMethodName = "/api.api/GetTransListByTransFatherId"
	Api_TransUserCountByUserIds_FullMethodName     = "/api.api/TransUserCountByUserIds"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// 增加新的账变
	AddTransaction(ctx context.Context, in *AddTransactionReq, opts ...grpc.CallOption) (*AddTransactionResp, error)
	// GetRWByTime
	GetRwbyTime(ctx context.Context, in *GetRwbyTimeReq, opts ...grpc.CallOption) (*GetRwbyTimeResp, error)
	// GetLastWithdrawal
	GetLastWithdrawal(ctx context.Context, in *GetLastWithdrawalReq, opts ...grpc.CallOption) (*GetLastWithdrawalResp, error)
	// GetTransfer
	GetTransfer(ctx context.Context, in *GetTransferReq, opts ...grpc.CallOption) (*GetTransferResp, error)
	// GetTransListByTransFatherId
	GetTransListByTransFatherId(ctx context.Context, in *GetTransListByTransFatherIdReq, opts ...grpc.CallOption) (*GetTransListByTransFatherIdResp, error)
	// GetTransListByTransFatherId
	TransUserCountByUserIds(ctx context.Context, in *TransUserCountByUserIdsReq, opts ...grpc.CallOption) (*TransUserCountByUserIdsResp, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) AddTransaction(ctx context.Context, in *AddTransactionReq, opts ...grpc.CallOption) (*AddTransactionResp, error) {
	out := new(AddTransactionResp)
	err := c.cc.Invoke(ctx, Api_AddTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetRwbyTime(ctx context.Context, in *GetRwbyTimeReq, opts ...grpc.CallOption) (*GetRwbyTimeResp, error) {
	out := new(GetRwbyTimeResp)
	err := c.cc.Invoke(ctx, Api_GetRwbyTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetLastWithdrawal(ctx context.Context, in *GetLastWithdrawalReq, opts ...grpc.CallOption) (*GetLastWithdrawalResp, error) {
	out := new(GetLastWithdrawalResp)
	err := c.cc.Invoke(ctx, Api_GetLastWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransfer(ctx context.Context, in *GetTransferReq, opts ...grpc.CallOption) (*GetTransferResp, error) {
	out := new(GetTransferResp)
	err := c.cc.Invoke(ctx, Api_GetTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransListByTransFatherId(ctx context.Context, in *GetTransListByTransFatherIdReq, opts ...grpc.CallOption) (*GetTransListByTransFatherIdResp, error) {
	out := new(GetTransListByTransFatherIdResp)
	err := c.cc.Invoke(ctx, Api_GetTransListByTransFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) TransUserCountByUserIds(ctx context.Context, in *TransUserCountByUserIdsReq, opts ...grpc.CallOption) (*TransUserCountByUserIdsResp, error) {
	out := new(TransUserCountByUserIdsResp)
	err := c.cc.Invoke(ctx, Api_TransUserCountByUserIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// 增加新的账变
	AddTransaction(context.Context, *AddTransactionReq) (*AddTransactionResp, error)
	// GetRWByTime
	GetRwbyTime(context.Context, *GetRwbyTimeReq) (*GetRwbyTimeResp, error)
	// GetLastWithdrawal
	GetLastWithdrawal(context.Context, *GetLastWithdrawalReq) (*GetLastWithdrawalResp, error)
	// GetTransfer
	GetTransfer(context.Context, *GetTransferReq) (*GetTransferResp, error)
	// GetTransListByTransFatherId
	GetTransListByTransFatherId(context.Context, *GetTransListByTransFatherIdReq) (*GetTransListByTransFatherIdResp, error)
	// GetTransListByTransFatherId
	TransUserCountByUserIds(context.Context, *TransUserCountByUserIdsReq) (*TransUserCountByUserIdsResp, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) AddTransaction(context.Context, *AddTransactionReq) (*AddTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedApiServer) GetRwbyTime(context.Context, *GetRwbyTimeReq) (*GetRwbyTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRwbyTime not implemented")
}
func (UnimplementedApiServer) GetLastWithdrawal(context.Context, *GetLastWithdrawalReq) (*GetLastWithdrawalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastWithdrawal not implemented")
}
func (UnimplementedApiServer) GetTransfer(context.Context, *GetTransferReq) (*GetTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfer not implemented")
}
func (UnimplementedApiServer) GetTransListByTransFatherId(context.Context, *GetTransListByTransFatherIdReq) (*GetTransListByTransFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransListByTransFatherId not implemented")
}
func (UnimplementedApiServer) TransUserCountByUserIds(context.Context, *TransUserCountByUserIdsReq) (*TransUserCountByUserIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransUserCountByUserIds not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_AddTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddTransaction(ctx, req.(*AddTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetRwbyTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRwbyTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetRwbyTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetRwbyTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetRwbyTime(ctx, req.(*GetRwbyTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetLastWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastWithdrawalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetLastWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetLastWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetLastWithdrawal(ctx, req.(*GetLastWithdrawalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransfer(ctx, req.(*GetTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransListByTransFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransListByTransFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransListByTransFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetTransListByTransFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransListByTransFatherId(ctx, req.(*GetTransListByTransFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_TransUserCountByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransUserCountByUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).TransUserCountByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_TransUserCountByUserIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).TransUserCountByUserIds(ctx, req.(*TransUserCountByUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTransaction",
			Handler:    _Api_AddTransaction_Handler,
		},
		{
			MethodName: "GetRwbyTime",
			Handler:    _Api_GetRwbyTime_Handler,
		},
		{
			MethodName: "GetLastWithdrawal",
			Handler:    _Api_GetLastWithdrawal_Handler,
		},
		{
			MethodName: "GetTransfer",
			Handler:    _Api_GetTransfer_Handler,
		},
		{
			MethodName: "GetTransListByTransFatherId",
			Handler:    _Api_GetTransListByTransFatherId_Handler,
		},
		{
			MethodName: "TransUserCountByUserIds",
			Handler:    _Api_TransUserCountByUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/api.proto",
}
